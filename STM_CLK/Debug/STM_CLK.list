
STM_CLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eb0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800a060  0800a060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a28c  0800a28c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a28c  0800a28c  0001a28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a294  0800a294  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a294  0800a294  0001a294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a298  0800a298  0001a298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000c70  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ce0  20000ce0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f479  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000047ff  00000000  00000000  0003f55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ac8  00000000  00000000  00043d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014d9  00000000  00000000  00045828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ba86  00000000  00000000  00046d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000253b4  00000000  00000000  00072787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fab4e  00000000  00000000  00097b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a78  00000000  00000000  0019268c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0019a104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a048 	.word	0x0800a048

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800a048 	.word	0x0800a048

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005b0:	4a28      	ldr	r2, [pc, #160]	; (8000654 <MX_ADC1_Init+0xb8>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_ADC1_Init+0xbc>)
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005fe:	f001 ff97 	bl	8002530 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f001 fa46 	bl	8001a98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800060c:	230a      	movs	r3, #10
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000614:	2303      	movs	r3, #3
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_ADC1_Init+0xb4>)
 800061e:	f002 fa13 	bl	8002a48 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f001 fa36 	bl	8001a98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062c:	2303      	movs	r3, #3
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC1_Init+0xb4>)
 800063a:	f002 fa05 	bl	8002a48 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000644:	f001 fa28 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000008c 	.word	0x2000008c
 8000654:	40012000 	.word	0x40012000
 8000658:	0f000001 	.word	0x0f000001

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a3c      	ldr	r2, [pc, #240]	; (800076c <HAL_ADC_MspInit+0x110>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d171      	bne.n	8000762 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	4a3a      	ldr	r2, [pc, #232]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068c:	6453      	str	r3, [r2, #68]	; 0x44
 800068e:	4b38      	ldr	r3, [pc, #224]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a33      	ldr	r2, [pc, #204]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4823      	ldr	r0, [pc, #140]	; (8000774 <HAL_ADC_MspInit+0x118>)
 80006e6:	f003 fca5 	bl	8004034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ea:	2308      	movs	r3, #8
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	481e      	ldr	r0, [pc, #120]	; (8000778 <HAL_ADC_MspInit+0x11c>)
 80006fe:	f003 fc99 	bl	8004034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <HAL_ADC_MspInit+0x124>)
 8000706:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <HAL_ADC_MspInit+0x120>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000728:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_ADC_MspInit+0x120>)
 800072c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000738:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_ADC_MspInit+0x120>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000748:	f002 fd4a 	bl	80031e0 <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000752:	f001 f9a1 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_ADC_MspInit+0x120>)
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_ADC_MspInit+0x120>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40012000 	.word	0x40012000
 8000770:	40023800 	.word	0x40023800
 8000774:	40020800 	.word	0x40020800
 8000778:	40020000 	.word	0x40020000
 800077c:	200000d4 	.word	0x200000d4
 8000780:	40026410 	.word	0x40026410

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2038      	movs	r0, #56	; 0x38
 80007ac:	f002 fce1 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b0:	2038      	movs	r0, #56	; 0x38
 80007b2:	f002 fcfa 	bl	80031aa <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ETH_Init+0x84>)
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <MX_ETH_Init+0x88>)
 80007cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ETH_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_ETH_Init+0x8c>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ETH_Init+0x8c>)
 80007dc:	22e1      	movs	r2, #225	; 0xe1
 80007de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_ETH_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ETH_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_ETH_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ETH_Init+0x84>)
 80007f4:	4a16      	ldr	r2, [pc, #88]	; (8000850 <MX_ETH_Init+0x8c>)
 80007f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ETH_Init+0x84>)
 80007fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007fe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ETH_Init+0x84>)
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <MX_ETH_Init+0x90>)
 8000804:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_ETH_Init+0x84>)
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_ETH_Init+0x94>)
 800080a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_ETH_Init+0x84>)
 800080e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000812:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_ETH_Init+0x84>)
 8000816:	f003 f8e5 	bl	80039e4 <HAL_ETH_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000820:	f001 f93a 	bl	8001a98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000824:	2238      	movs	r2, #56	; 0x38
 8000826:	2100      	movs	r1, #0
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x98>)
 800082a:	f008 fccb 	bl	80091c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_ETH_Init+0x98>)
 8000830:	2221      	movs	r2, #33	; 0x21
 8000832:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_ETH_Init+0x98>)
 8000836:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800083a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_ETH_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002ac 	.word	0x200002ac
 800084c:	40028000 	.word	0x40028000
 8000850:	2000035c 	.word	0x2000035c
 8000854:	200001d4 	.word	0x200001d4
 8000858:	20000134 	.word	0x20000134
 800085c:	20000274 	.word	0x20000274

08000860 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a55      	ldr	r2, [pc, #340]	; (80009d4 <HAL_ETH_MspInit+0x174>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80a4 	bne.w	80009cc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
 8000888:	4b53      	ldr	r3, [pc, #332]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a52      	ldr	r2, [pc, #328]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800088e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a44      	ldr	r2, [pc, #272]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
 80008cc:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a3d      	ldr	r2, [pc, #244]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
 80008e8:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a36      	ldr	r2, [pc, #216]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000948:	2332      	movs	r3, #50	; 0x32
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000958:	230b      	movs	r3, #11
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	481e      	ldr	r0, [pc, #120]	; (80009dc <HAL_ETH_MspInit+0x17c>)
 8000964:	f003 fb66 	bl	8004034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000968:	2386      	movs	r3, #134	; 0x86
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000978:	230b      	movs	r3, #11
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4817      	ldr	r0, [pc, #92]	; (80009e0 <HAL_ETH_MspInit+0x180>)
 8000984:	f003 fb56 	bl	8004034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099a:	230b      	movs	r3, #11
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <HAL_ETH_MspInit+0x184>)
 80009a6:	f003 fb45 	bl	8004034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009bc:	230b      	movs	r3, #11
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80009c8:	f003 fb34 	bl	8004034 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	; 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40028000 	.word	0x40028000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800

080009ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a51      	ldr	r2, [pc, #324]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a43      	ldr	r2, [pc, #268]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a3c      	ldr	r2, [pc, #240]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a35      	ldr	r2, [pc, #212]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a2e      	ldr	r2, [pc, #184]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <MX_GPIO_Init+0x164>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ab0:	4828      	ldr	r0, [pc, #160]	; (8000b54 <MX_GPIO_Init+0x168>)
 8000ab2:	f003 fc83 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	4827      	ldr	r0, [pc, #156]	; (8000b58 <MX_GPIO_Init+0x16c>)
 8000abc:	f003 fc7e 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ac6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4821      	ldr	r0, [pc, #132]	; (8000b5c <MX_GPIO_Init+0x170>)
 8000ad8:	f003 faac 	bl	8004034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000adc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4817      	ldr	r0, [pc, #92]	; (8000b54 <MX_GPIO_Init+0x168>)
 8000af6:	f003 fa9d 	bl	8004034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_GPIO_Init+0x16c>)
 8000b12:	f003 fa8f 	bl	8004034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <MX_GPIO_Init+0x16c>)
 8000b2a:	f003 fa83 	bl	8004034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b32:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000b44:	f003 fa76 	bl	8004034 <HAL_GPIO_Init>

}
 8000b48:	bf00      	nop
 8000b4a:	3730      	adds	r7, #48	; 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <MX_I2C1_Init+0x78>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b70:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <MX_I2C1_Init+0x7c>)
 8000b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000ba2:	f003 fc57 	bl	8004454 <HAL_I2C_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bac:	f000 ff74 	bl	8001a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000bb4:	f004 f9c7 	bl	8004f46 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bbe:	f000 ff6b 	bl	8001a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000bc6:	f004 f9fa 	bl	8004fbe <HAL_I2CEx_ConfigDigitalFilter>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bd0:	f000 ff62 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000364 	.word	0x20000364
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	000186a0 	.word	0x000186a0

08000be4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_I2C_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12c      	bne.n	8000c60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c28:	2312      	movs	r3, #18
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c34:	2304      	movs	r3, #4
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <HAL_I2C_MspInit+0x8c>)
 8000c40:	f003 f9f8 	bl	8004034 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020400 	.word	0x40020400

08000c74 <I2C_Scan>:
#include "lcd.h"

void I2C_Scan() {
 8000c74:	b5b0      	push	{r4, r5, r7, lr}
 8000c76:	b098      	sub	sp, #96	; 0x60
 8000c78:	af00      	add	r7, sp, #0
  char info[] = "Scanning I2C bus...\r\n";
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <I2C_Scan+0xc0>)
 8000c7c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000c80:	461d      	mov	r5, r3
 8000c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c8a:	6020      	str	r0, [r4, #0]
 8000c8c:	3404      	adds	r4, #4
 8000c8e:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000c90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff faab 	bl	80001f0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	4824      	ldr	r0, [pc, #144]	; (8000d38 <I2C_Scan+0xc4>)
 8000ca8:	f006 fd03 	bl	80076b2 <HAL_UART_Transmit>

  HAL_StatusTypeDef res;
  for(uint16_t i = 0; i < 128; i++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000cb2:	e02f      	b.n	8000d14 <I2C_Scan+0xa0>
      res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000cb4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	b299      	uxth	r1, r3
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	481e      	ldr	r0, [pc, #120]	; (8000d3c <I2C_Scan+0xc8>)
 8000cc2:	f003 fe09 	bl	80048d8 <HAL_I2C_IsDeviceReady>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      if(res == HAL_OK) {
 8000ccc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d113      	bne.n	8000cfc <I2C_Scan+0x88>
	  char msg[64];
	  snprintf(msg, sizeof(msg), "0x%02X", i);
 8000cd4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cd8:	1d38      	adds	r0, r7, #4
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <I2C_Scan+0xcc>)
 8000cdc:	2140      	movs	r1, #64	; 0x40
 8000cde:	f008 f945 	bl	8008f6c <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fa83 	bl	80001f0 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	1d39      	adds	r1, r7, #4
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <I2C_Scan+0xc4>)
 8000cf6:	f006 fcdc 	bl	80076b2 <HAL_UART_Transmit>
 8000cfa:	e006      	b.n	8000d0a <I2C_Scan+0x96>
      } else {
	  HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	2201      	movs	r2, #1
 8000d02:	4910      	ldr	r1, [pc, #64]	; (8000d44 <I2C_Scan+0xd0>)
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <I2C_Scan+0xc4>)
 8000d06:	f006 fcd4 	bl	80076b2 <HAL_UART_Transmit>
  for(uint16_t i = 0; i < 128; i++) {
 8000d0a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000d0e:	3301      	adds	r3, #1
 8000d10:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000d14:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000d18:	2b7f      	cmp	r3, #127	; 0x7f
 8000d1a:	d9cb      	bls.n	8000cb4 <I2C_Scan+0x40>
      }
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2202      	movs	r2, #2
 8000d22:	4909      	ldr	r1, [pc, #36]	; (8000d48 <I2C_Scan+0xd4>)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <I2C_Scan+0xc4>)
 8000d26:	f006 fcc4 	bl	80076b2 <HAL_UART_Transmit>
}
 8000d2a:	bf00      	nop
 8000d2c:	3760      	adds	r7, #96	; 0x60
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	0800a070 	.word	0x0800a070
 8000d38:	20000640 	.word	0x20000640
 8000d3c:	20000364 	.word	0x20000364
 8000d40:	0800a060 	.word	0x0800a060
 8000d44:	0800a068 	.word	0x0800a068
 8000d48:	0800a06c 	.word	0x0800a06c

08000d4c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	460b      	mov	r3, r1
 8000d58:	71bb      	strb	r3, [r7, #6]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef res;
  for(;;) {
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	b299      	uxth	r1, r3
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2201      	movs	r2, #1
 8000d68:	4822      	ldr	r0, [pc, #136]	; (8000df4 <LCD_SendInternal+0xa8>)
 8000d6a:	f003 fdb5 	bl	80048d8 <HAL_I2C_IsDeviceReady>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]
      if(res == HAL_OK)
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d000      	beq.n	8000d7a <LCD_SendInternal+0x2e>
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000d78:	e7f1      	b.n	8000d5e <LCD_SendInternal+0x12>
	break;
 8000d7a:	bf00      	nop
  }

  uint8_t up = data & 0xF0;
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	f023 030f 	bic.w	r3, r3, #15
 8000d82:	73bb      	strb	r3, [r7, #14]
  uint8_t lo = (data << 4) & 0xF0;
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	737b      	strb	r3, [r7, #13]

  uint8_t data_arr[4];
  data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000d8a:	7bba      	ldrb	r2, [r7, #14]
 8000d8c:	797b      	ldrb	r3, [r7, #5]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	f043 030c 	orr.w	r3, r3, #12
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	723b      	strb	r3, [r7, #8]
  data_arr[1] = up|flags|BACKLIGHT;
 8000d9a:	7bba      	ldrb	r2, [r7, #14]
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	727b      	strb	r3, [r7, #9]
  data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000daa:	7b7a      	ldrb	r2, [r7, #13]
 8000dac:	797b      	ldrb	r3, [r7, #5]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f043 030c 	orr.w	r3, r3, #12
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	72bb      	strb	r3, [r7, #10]
  data_arr[3] = lo|flags|BACKLIGHT;
 8000dba:	7b7a      	ldrb	r2, [r7, #13]
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	72fb      	strb	r3, [r7, #11]

  res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2304      	movs	r3, #4
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <LCD_SendInternal+0xa8>)
 8000ddc:	f003 fc7e 	bl	80046dc <HAL_I2C_Master_Transmit>
 8000de0:	4603      	mov	r3, r0
 8000de2:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(LCD_DELAY_MS);
 8000de4:	2005      	movs	r0, #5
 8000de6:	f001 fb7f 	bl	80024e8 <HAL_Delay>
  return res;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000364 	.word	0x20000364

08000df8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	4613      	mov	r3, r2
 8000e06:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, cmd, 0);
 8000e08:	79b9      	ldrb	r1, [r7, #6]
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff9c 	bl	8000d4c <LCD_SendInternal>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	460a      	mov	r2, r1
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000e2c:	79b9      	ldrb	r1, [r7, #6]
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2201      	movs	r2, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff8a 	bl	8000d4c <LCD_SendInternal>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  // 4-bit mode, 2 lines, 5x7 format
  LCD_SendCommand(lcd_addr, 0b00110000);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2130      	movs	r1, #48	; 0x30
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffd2 	bl	8000df8 <LCD_SendCommand>
  // display & cursor home (keep this!)
  LCD_SendCommand(lcd_addr, 0b00000010);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ffcd 	bl	8000df8 <LCD_SendCommand>
  // display on, right shift, underline off, blink off
  LCD_SendCommand(lcd_addr, 0b00001100);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	210c      	movs	r1, #12
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffc8 	bl	8000df8 <LCD_SendCommand>
  // clear display (optional here)
  LCD_SendCommand(lcd_addr, 0b00000001);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ffc3 	bl	8000df8 <LCD_SendCommand>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	6039      	str	r1, [r7, #0]
 8000e84:	71fb      	strb	r3, [r7, #7]
  while(*str) {
 8000e86:	e009      	b.n	8000e9c <LCD_SendString+0x22>
      LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ffc3 	bl	8000e1c <LCD_SendData>
      str++;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	603b      	str	r3, [r7, #0]
  while(*str) {
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1f1      	bne.n	8000e88 <LCD_SendString+0xe>
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <init>:

void init() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  I2C_Scan();
 8000eb4:	f7ff fede 	bl	8000c74 <I2C_Scan>
  LCD_Init(LCD_ADDR);
 8000eb8:	204e      	movs	r0, #78	; 0x4e
 8000eba:	f7ff ffc1 	bl	8000e40 <LCD_Init>

  // set address to 0x00
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	204e      	movs	r0, #78	; 0x4e
 8000ec2:	f7ff ff99 	bl	8000df8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000ec6:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <init+0x34>)
 8000ec8:	204e      	movs	r0, #78	; 0x4e
 8000eca:	f7ff ffd6 	bl	8000e7a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000ece:	21c0      	movs	r1, #192	; 0xc0
 8000ed0:	204e      	movs	r0, #78	; 0x4e
 8000ed2:	f7ff ff91 	bl	8000df8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000ed6:	4904      	ldr	r1, [pc, #16]	; (8000ee8 <init+0x38>)
 8000ed8:	204e      	movs	r0, #78	; 0x4e
 8000eda:	f7ff ffce 	bl	8000e7a <LCD_SendString>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	0800a088 	.word	0x0800a088
 8000ee8:	0800a098 	.word	0x0800a098

08000eec <LCD_PrintAll>:

void LCD_PrintAll(char *str1, char *str2)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	204e      	movs	r0, #78	; 0x4e
 8000efa:	f7ff ff7d 	bl	8000df8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str1);
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	204e      	movs	r0, #78	; 0x4e
 8000f02:	f7ff ffba 	bl	8000e7a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000f06:	21c0      	movs	r1, #192	; 0xc0
 8000f08:	204e      	movs	r0, #78	; 0x4e
 8000f0a:	f7ff ff75 	bl	8000df8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str2);
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	204e      	movs	r0, #78	; 0x4e
 8000f12:	f7ff ffb2 	bl	8000e7a <LCD_SendString>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <LCD_Clear>:
      LCD_SendCommand(LCD_ADDR, 0b11000000);
      LCD_SendString(LCD_ADDR, str);
    }
}
void LCD_Clear()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	204e      	movs	r0, #78	; 0x4e
 8000f28:	f7ff ff66 	bl	8000df8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <LCD_Clear+0x28>)
 8000f2e:	204e      	movs	r0, #78	; 0x4e
 8000f30:	f7ff ffa3 	bl	8000e7a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000f34:	21c0      	movs	r1, #192	; 0xc0
 8000f36:	204e      	movs	r0, #78	; 0x4e
 8000f38:	f7ff ff5e 	bl	8000df8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 8000f3c:	4902      	ldr	r1, [pc, #8]	; (8000f48 <LCD_Clear+0x28>)
 8000f3e:	204e      	movs	r0, #78	; 0x4e
 8000f40:	f7ff ff9b 	bl	8000e7a <LCD_SendString>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	0800a0a8 	.word	0x0800a0a8

08000f4c <_write>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

int _write(int file, char *ptr, int len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	4804      	ldr	r0, [pc, #16]	; (8000f74 <_write+0x28>)
 8000f64:	f006 fba5 	bl	80076b2 <HAL_UART_Transmit>
	return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000640 	.word	0x20000640

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b598      	push	{r3, r4, r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f001 fa42 	bl	8002404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f89e 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f7ff fd32 	bl	80009ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000f88:	f7ff fbfc 	bl	8000784 <MX_DMA_Init>
  MX_ETH_Init();
 8000f8c:	f7ff fc1a 	bl	80007c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f90:	f001 f8dc 	bl	800214c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f94:	f001 f984 	bl	80022a0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000f98:	f7ff fde4 	bl	8000b64 <MX_I2C1_Init>
  MX_RTC_Init();
 8000f9c:	f000 fd82 	bl	8001aa4 <MX_RTC_Init>
  MX_TIM2_Init();
 8000fa0:	f000 ff76 	bl	8001e90 <MX_TIM2_Init>
  MX_UART4_Init();
 8000fa4:	f001 f8a8 	bl	80020f8 <MX_UART4_Init>
  MX_ADC1_Init();
 8000fa8:	f7ff faf8 	bl	800059c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fac:	f000 ffbe 	bl	8001f2c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fb0:	f000 f8f2 	bl	8001198 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, Joycon, sizeof(Joycon)/sizeof(Joycon[0]));
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4932      	ldr	r1, [pc, #200]	; (8001080 <main+0x108>)
 8000fb8:	4832      	ldr	r0, [pc, #200]	; (8001084 <main+0x10c>)
 8000fba:	f001 fc0d 	bl	80027d8 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4931      	ldr	r1, [pc, #196]	; (8001088 <main+0x110>)
 8000fc2:	4832      	ldr	r0, [pc, #200]	; (800108c <main+0x114>)
 8000fc4:	f006 fc07 	bl	80077d6 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4931      	ldr	r1, [pc, #196]	; (8001090 <main+0x118>)
 8000fcc:	4831      	ldr	r0, [pc, #196]	; (8001094 <main+0x11c>)
 8000fce:	f006 fc02 	bl	80077d6 <HAL_UART_Receive_IT>

	//unsigned int value, addr = FLASH_USER_START_ADDR, cnt = 0;
	//unsigned char buf[30];
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4930      	ldr	r1, [pc, #192]	; (8001098 <main+0x120>)
 8000fd6:	4831      	ldr	r0, [pc, #196]	; (800109c <main+0x124>)
 8000fd8:	f005 f9e8 	bl	80063ac <HAL_RTC_SetAlarm_IT>
	init();
 8000fdc:	f7ff ff68 	bl	8000eb0 <init>
	LCD_Clear();
 8000fe0:	f7ff ff9e 	bl	8000f20 <LCD_Clear>
	set_date(RTC_WEEKDAY_MONDAY, 11, 13, 23);
 8000fe4:	2317      	movs	r3, #23
 8000fe6:	220d      	movs	r2, #13
 8000fe8:	210b      	movs	r1, #11
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f976 	bl	80012dc <set_date>
	set_time(13,25,0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2119      	movs	r1, #25
 8000ff4:	200d      	movs	r0, #13
 8000ff6:	f000 f90b 	bl	8001210 <set_time>
	set_alarm(0, 0, 5);
 8000ffa:	2205      	movs	r2, #5
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f924 	bl	800124c <set_alarm>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//printf("x: %d\r\ny: %d\r\n",Joycon[0],Joycon[1]);
		//printf("current state: %d\r\n", clock_state);
		switch(clock_state)
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <main+0x128>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d82f      	bhi.n	800106c <main+0xf4>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <main+0x9c>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001025 	.word	0x08001025
 8001018:	0800102b 	.word	0x0800102b
 800101c:	0800105d 	.word	0x0800105d
 8001020:	08001065 	.word	0x08001065
		{
		case NORMAL_STATE:
			get_time();
 8001024:	f000 f97e 	bl	8001324 <get_time>
			break;
 8001028:	e024      	b.n	8001074 <main+0xfc>
		case TIME_SETTING:
			if(cpyflag == 1)
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <main+0x12c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d108      	bne.n	8001044 <main+0xcc>
			{
				memcpy(copyTime, showTime, sizeof(showTime)/sizeof(showTime[0]));
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <main+0x130>)
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <main+0x134>)
 8001036:	4614      	mov	r4, r2
 8001038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800103a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				cpyflag = 0;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <main+0x12c>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
			}
			// 1. timer setting
			// 2. save at flash
			timeSetter();
 8001044:	f000 f9ca 	bl	80013dc <timeSetter>
			if(isSave == true)
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <main+0x138>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <main+0xdc>
			{
				saveCurrentTime();
 8001050:	f000 fb8e 	bl	8001770 <saveCurrentTime>
			}
			printf("setting mode\r\n");
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <main+0x13c>)
 8001056:	f007 ff81 	bl	8008f5c <puts>
			break;
 800105a:	e00b      	b.n	8001074 <main+0xfc>
		case ALARM_TIME_SETTING:
			// 1. alarm time setting
			// 2. save at flash
			printf("alarm mode\r\n");
 800105c:	4816      	ldr	r0, [pc, #88]	; (80010b8 <main+0x140>)
 800105e:	f007 ff7d 	bl	8008f5c <puts>
			break;
 8001062:	e007      	b.n	8001074 <main+0xfc>
		case MUSIC_SELECT:
			// 1. music select
			// 2. save at flash
			printf("music mode\r\n");
 8001064:	4815      	ldr	r0, [pc, #84]	; (80010bc <main+0x144>)
 8001066:	f007 ff79 	bl	8008f5c <puts>
			break;
 800106a:	e003      	b.n	8001074 <main+0xfc>
		default:
			clock_state = NORMAL_STATE;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <main+0x128>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
			break;
 8001072:	bf00      	nop
		}
		HAL_Delay(300);
 8001074:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001078:	f001 fa36 	bl	80024e8 <HAL_Delay>
		switch(clock_state)
 800107c:	e7c2      	b.n	8001004 <main+0x8c>
 800107e:	bf00      	nop
 8001080:	200003e4 	.word	0x200003e4
 8001084:	2000008c 	.word	0x2000008c
 8001088:	200003b9 	.word	0x200003b9
 800108c:	20000640 	.word	0x20000640
 8001090:	200003ba 	.word	0x200003ba
 8001094:	200005fc 	.word	0x200005fc
 8001098:	200003bc 	.word	0x200003bc
 800109c:	20000548 	.word	0x20000548
 80010a0:	200003b8 	.word	0x200003b8
 80010a4:	200004ae 	.word	0x200004ae
 80010a8:	2000040c 	.word	0x2000040c
 80010ac:	200003ec 	.word	0x200003ec
 80010b0:	200004b0 	.word	0x200004b0
 80010b4:	0800a0bc 	.word	0x0800a0bc
 80010b8:	0800a0cc 	.word	0x0800a0cc
 80010bc:	0800a0d8 	.word	0x0800a0d8

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 f878 	bl	80091c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <SystemClock_Config+0xd0>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <SystemClock_Config+0xd0>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <SystemClock_Config+0xd0>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <SystemClock_Config+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <SystemClock_Config+0xd4>)
 800110a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <SystemClock_Config+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800111c:	2305      	movs	r3, #5
 800111e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001120:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001126:	2301      	movs	r3, #1
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001134:	2304      	movs	r3, #4
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001138:	23a8      	movs	r3, #168	; 0xa8
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001140:	2307      	movs	r3, #7
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f004 f895 	bl	8005278 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001154:	f000 fca0 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001164:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2105      	movs	r1, #5
 8001176:	4618      	mov	r0, r3
 8001178:	f004 faf6 	bl	8005768 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001182:	f000 fc89 	bl	8001a98 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	201c      	movs	r0, #28
 80011a2:	f001 ffe6 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011a6:	201c      	movs	r0, #28
 80011a8:	f001 ffff 	bl	80031aa <HAL_NVIC_EnableIRQ>
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2029      	movs	r0, #41	; 0x29
 80011b2:	f001 ffde 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80011b6:	2029      	movs	r0, #41	; 0x29
 80011b8:	f001 fff7 	bl	80031aa <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2017      	movs	r0, #23
 80011c2:	f001 ffd6 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011c6:	2017      	movs	r0, #23
 80011c8:	f001 ffef 	bl	80031aa <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2012      	movs	r0, #18
 80011d2:	f001 ffce 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011d6:	2012      	movs	r0, #18
 80011d8:	f001 ffe7 	bl	80031aa <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2027      	movs	r0, #39	; 0x27
 80011e2:	f001 ffc6 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011e6:	2027      	movs	r0, #39	; 0x27
 80011e8:	f001 ffdf 	bl	80031aa <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2034      	movs	r0, #52	; 0x34
 80011f2:	f001 ffbe 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 80011f6:	2034      	movs	r0, #52	; 0x34
 80011f8:	f001 ffd7 	bl	80031aa <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2028      	movs	r0, #40	; 0x28
 8001202:	f001 ffb6 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001206:	2028      	movs	r0, #40	; 0x28
 8001208:	f001 ffcf 	bl	80031aa <HAL_NVIC_EnableIRQ>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <set_time>:

/* USER CODE BEGIN 4 */
void set_time(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	460b      	mov	r3, r1
 800121c:	71bb      	strb	r3, [r7, #6]
 800121e:	4613      	mov	r3, r2
 8001220:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime;

	sTime.Hours = hh + 1;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	3301      	adds	r3, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = mm;
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ss;
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	73bb      	strb	r3, [r7, #14]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <set_time+0x38>)
 800123c:	f004 feea 	bl	8006014 <HAL_RTC_SetTime>
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000548 	.word	0x20000548

0800124c <set_alarm>:
void set_alarm(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	460b      	mov	r3, r1
 8001258:	71bb      	strb	r3, [r7, #6]
 800125a:	4613      	mov	r3, r2
 800125c:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Hours = hh;
 800125e:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <set_alarm+0x88>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = mm;
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <set_alarm+0x88>)
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = ss;
 800126a:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <set_alarm+0x88>)
 800126c:	797b      	ldrb	r3, [r7, #5]
 800126e:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <set_alarm+0x88>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <set_alarm+0x88>)
 8001278:	2200      	movs	r2, #0
 800127a:	70da      	strb	r2, [r3, #3]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <set_alarm+0x88>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <set_alarm+0x88>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <set_alarm+0x88>)
 800128a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800128e:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <set_alarm+0x88>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <set_alarm+0x88>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <set_alarm+0x88>)
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <set_alarm+0x88>)
 80012a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012ac:	2201      	movs	r2, #1
 80012ae:	4909      	ldr	r1, [pc, #36]	; (80012d4 <set_alarm+0x88>)
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <set_alarm+0x8c>)
 80012b2:	f005 f87b 	bl	80063ac <HAL_RTC_SetAlarm_IT>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <set_alarm+0x74>
	{
		Error_Handler();
 80012bc:	f000 fbec 	bl	8001a98 <Error_Handler>
	}
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80012c0:	2200      	movs	r2, #0
 80012c2:	4904      	ldr	r1, [pc, #16]	; (80012d4 <set_alarm+0x88>)
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <set_alarm+0x8c>)
 80012c6:	f005 f871 	bl	80063ac <HAL_RTC_SetAlarm_IT>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200003bc 	.word	0x200003bc
 80012d8:	20000548 	.word	0x20000548

080012dc <set_date>:
void set_date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4604      	mov	r4, r0
 80012e4:	4608      	mov	r0, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4623      	mov	r3, r4
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	4603      	mov	r3, r0
 80012f0:	71bb      	strb	r3, [r7, #6]
 80012f2:	460b      	mov	r3, r1
 80012f4:	717b      	strb	r3, [r7, #5]
 80012f6:	4613      	mov	r3, r2
 80012f8:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate;

	sDate.WeekDay = ww;
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	733b      	strb	r3, [r7, #12]
	sDate.Month = mm;
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	737b      	strb	r3, [r7, #13]
	sDate.Date = dd;
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	73bb      	strb	r3, [r7, #14]
	sDate.Year = yy;
 8001306:	793b      	ldrb	r3, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <set_date+0x44>)
 8001314:	f004 ff76 	bl	8006204 <HAL_RTC_SetDate>
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	20000548 	.word	0x20000548

08001324 <get_time>:

void get_time(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;
	int longer;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	4820      	ldr	r0, [pc, #128]	; (80013b4 <get_time+0x90>)
 8001332:	f004 ff09 	bl	8006148 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <get_time+0x90>)
 8001340:	f004 ffe4 	bl	800630c <HAL_RTC_GetDate>
	curr_ap = sTime.TimeFormat;
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <get_time+0x94>)
 8001348:	701a      	strb	r2, [r3, #0]
	curr_h = sTime.Hours;
 800134a:	783a      	ldrb	r2, [r7, #0]
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <get_time+0x98>)
 800134e:	701a      	strb	r2, [r3, #0]
	curr_m = sTime.Minutes;
 8001350:	787a      	ldrb	r2, [r7, #1]
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <get_time+0x9c>)
 8001354:	701a      	strb	r2, [r3, #0]
	curr_s = sTime.Seconds;
 8001356:	78ba      	ldrb	r2, [r7, #2]
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <get_time+0xa0>)
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <get_time+0xa4>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <get_time+0xa8>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
	memset(showTime, 0, sizeof(showTime)/sizeof(showTime));
	memset(showDate, 0, sizeof(showDate)/sizeof(showDate));
	sprintf((char*)showTime, "%s %02d:%02d:%02d",ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	461a      	mov	r2, r3
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <get_time+0xac>)
 8001374:	441a      	add	r2, r3
 8001376:	783b      	ldrb	r3, [r7, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	787b      	ldrb	r3, [r7, #1]
 800137c:	78b9      	ldrb	r1, [r7, #2]
 800137e:	9101      	str	r1, [sp, #4]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	4603      	mov	r3, r0
 8001384:	4913      	ldr	r1, [pc, #76]	; (80013d4 <get_time+0xb0>)
 8001386:	4810      	ldr	r0, [pc, #64]	; (80013c8 <get_time+0xa4>)
 8001388:	f007 fe24 	bl	8008fd4 <siprintf>
	sprintf((char*)showDate, "  %04d/%02d/%02d",2000+sDate.Year, sDate.Month, sDate.Date);
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001392:	7d7b      	ldrb	r3, [r7, #21]
 8001394:	4619      	mov	r1, r3
 8001396:	7dbb      	ldrb	r3, [r7, #22]
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	460b      	mov	r3, r1
 800139c:	490e      	ldr	r1, [pc, #56]	; (80013d8 <get_time+0xb4>)
 800139e:	480b      	ldr	r0, [pc, #44]	; (80013cc <get_time+0xa8>)
 80013a0:	f007 fe18 	bl	8008fd4 <siprintf>
	LCD_PrintAll(showDate, showTime);
 80013a4:	4908      	ldr	r1, [pc, #32]	; (80013c8 <get_time+0xa4>)
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <get_time+0xa8>)
 80013a8:	f7ff fda0 	bl	8000eec <LCD_PrintAll>
	//printf("%s %s\r\n", showTime, showDate);
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000548 	.word	0x20000548
 80013b8:	200004b1 	.word	0x200004b1
 80013bc:	200004b2 	.word	0x200004b2
 80013c0:	200004b3 	.word	0x200004b3
 80013c4:	200004b4 	.word	0x200004b4
 80013c8:	200003ec 	.word	0x200003ec
 80013cc:	200003fc 	.word	0x200003fc
 80013d0:	20000000 	.word	0x20000000
 80013d4:	0800a0e4 	.word	0x0800a0e4
 80013d8:	0800a0f8 	.word	0x0800a0f8

080013dc <timeSetter>:


void timeSetter(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af02      	add	r7, sp, #8
	static bool toggleChar = false;
	static uint8_t choice = 0;

	if(IsRight())
 80013e2:	f000 fa9d 	bl	8001920 <IsRight>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <timeSetter+0x2c>
	{
		choice ++;
 80013ec:	4b9d      	ldr	r3, [pc, #628]	; (8001664 <timeSetter+0x288>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <timeSetter+0x288>)
 80013f6:	701a      	strb	r2, [r3, #0]
		if(choice > 3)
 80013f8:	4b9a      	ldr	r3, [pc, #616]	; (8001664 <timeSetter+0x288>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d915      	bls.n	800142c <timeSetter+0x50>
		{
			choice = 0;
 8001400:	4b98      	ldr	r3, [pc, #608]	; (8001664 <timeSetter+0x288>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e011      	b.n	800142c <timeSetter+0x50>
		}
	}
	else if(IsLeft())
 8001408:	f000 fa9c 	bl	8001944 <IsLeft>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00c      	beq.n	800142c <timeSetter+0x50>
	{
		choice --;
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <timeSetter+0x288>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	3b01      	subs	r3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b92      	ldr	r3, [pc, #584]	; (8001664 <timeSetter+0x288>)
 800141c:	701a      	strb	r2, [r3, #0]
		if(choice > 4)
 800141e:	4b91      	ldr	r3, [pc, #580]	; (8001664 <timeSetter+0x288>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b04      	cmp	r3, #4
 8001424:	d902      	bls.n	800142c <timeSetter+0x50>
		{
			choice = 3;
 8001426:	4b8f      	ldr	r3, [pc, #572]	; (8001664 <timeSetter+0x288>)
 8001428:	2203      	movs	r2, #3
 800142a:	701a      	strb	r2, [r3, #0]
		}
	}
	//"%s %02d:%02d:%02d"
	switch (choice)
 800142c:	4b8d      	ldr	r3, [pc, #564]	; (8001664 <timeSetter+0x288>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b03      	cmp	r3, #3
 8001432:	f200 8172 	bhi.w	800171a <timeSetter+0x33e>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <timeSetter+0x60>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	0800144d 	.word	0x0800144d
 8001440:	080014df 	.word	0x080014df
 8001444:	0800158b 	.word	0x0800158b
 8001448:	08001635 	.word	0x08001635
	{
		case AMPM:
			if(toggleChar)
 800144c:	4b86      	ldr	r3, [pc, #536]	; (8001668 <timeSetter+0x28c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00e      	beq.n	8001472 <timeSetter+0x96>
			{
				sprintf(controlTime, "__ %02d:%02d:%02d",curr_h,curr_m,curr_s);
 8001454:	4b85      	ldr	r3, [pc, #532]	; (800166c <timeSetter+0x290>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b85      	ldr	r3, [pc, #532]	; (8001670 <timeSetter+0x294>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	4b84      	ldr	r3, [pc, #528]	; (8001674 <timeSetter+0x298>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	460b      	mov	r3, r1
 8001468:	4983      	ldr	r1, [pc, #524]	; (8001678 <timeSetter+0x29c>)
 800146a:	4884      	ldr	r0, [pc, #528]	; (800167c <timeSetter+0x2a0>)
 800146c:	f007 fdb2 	bl	8008fd4 <siprintf>
					curr_ap--;
				}
				curr_ap = curr_ap % 2;
				sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
			}
			break;
 8001470:	e154      	b.n	800171c <timeSetter+0x340>
				if(IsUP())
 8001472:	f000 fa79 	bl	8001968 <IsUP>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <timeSetter+0xae>
					curr_ap++;
 800147c:	4b80      	ldr	r3, [pc, #512]	; (8001680 <timeSetter+0x2a4>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <timeSetter+0x2a4>)
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e00a      	b.n	80014a0 <timeSetter+0xc4>
				else if(IsDown())
 800148a:	f000 fa7f 	bl	800198c <IsDown>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <timeSetter+0xc4>
					curr_ap--;
 8001494:	4b7a      	ldr	r3, [pc, #488]	; (8001680 <timeSetter+0x2a4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b78      	ldr	r3, [pc, #480]	; (8001680 <timeSetter+0x2a4>)
 800149e:	701a      	strb	r2, [r3, #0]
				curr_ap = curr_ap % 2;
 80014a0:	4b77      	ldr	r3, [pc, #476]	; (8001680 <timeSetter+0x2a4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b75      	ldr	r3, [pc, #468]	; (8001680 <timeSetter+0x2a4>)
 80014ac:	701a      	strb	r2, [r3, #0]
				sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 80014ae:	4b74      	ldr	r3, [pc, #464]	; (8001680 <timeSetter+0x2a4>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	4a72      	ldr	r2, [pc, #456]	; (8001684 <timeSetter+0x2a8>)
 80014bc:	441a      	add	r2, r3
 80014be:	4b6b      	ldr	r3, [pc, #428]	; (800166c <timeSetter+0x290>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <timeSetter+0x294>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <timeSetter+0x298>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	9100      	str	r1, [sp, #0]
 80014d2:	4603      	mov	r3, r0
 80014d4:	496c      	ldr	r1, [pc, #432]	; (8001688 <timeSetter+0x2ac>)
 80014d6:	4869      	ldr	r0, [pc, #420]	; (800167c <timeSetter+0x2a0>)
 80014d8:	f007 fd7c 	bl	8008fd4 <siprintf>
			break;
 80014dc:	e11e      	b.n	800171c <timeSetter+0x340>
		case HOUR:
			if(toggleChar)
 80014de:	4b62      	ldr	r3, [pc, #392]	; (8001668 <timeSetter+0x28c>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d014      	beq.n	8001510 <timeSetter+0x134>
			{
				sprintf(controlTime, "%s __:%02d:%02d",ampm[curr_ap%2],curr_m,curr_s);
 80014e6:	4b66      	ldr	r3, [pc, #408]	; (8001680 <timeSetter+0x2a4>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	4a63      	ldr	r2, [pc, #396]	; (8001684 <timeSetter+0x2a8>)
 80014f6:	441a      	add	r2, r3
 80014f8:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <timeSetter+0x294>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <timeSetter+0x298>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	4961      	ldr	r1, [pc, #388]	; (800168c <timeSetter+0x2b0>)
 8001508:	485c      	ldr	r0, [pc, #368]	; (800167c <timeSetter+0x2a0>)
 800150a:	f007 fd63 	bl	8008fd4 <siprintf>
					curr_h--;
				}
				curr_h %= 24;
				sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
			}
			break;
 800150e:	e105      	b.n	800171c <timeSetter+0x340>
				if(IsUP())
 8001510:	f000 fa2a 	bl	8001968 <IsUP>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <timeSetter+0x14c>
					curr_h++;
 800151a:	4b54      	ldr	r3, [pc, #336]	; (800166c <timeSetter+0x290>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <timeSetter+0x290>)
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e00a      	b.n	800153e <timeSetter+0x162>
				else if(IsDown())
 8001528:	f000 fa30 	bl	800198c <IsDown>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <timeSetter+0x162>
					curr_h--;
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <timeSetter+0x290>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b4c      	ldr	r3, [pc, #304]	; (800166c <timeSetter+0x290>)
 800153c:	701a      	strb	r2, [r3, #0]
				curr_h %= 24;
 800153e:	4b4b      	ldr	r3, [pc, #300]	; (800166c <timeSetter+0x290>)
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	4b53      	ldr	r3, [pc, #332]	; (8001690 <timeSetter+0x2b4>)
 8001544:	fba3 1302 	umull	r1, r3, r3, r2
 8001548:	0919      	lsrs	r1, r3, #4
 800154a:	460b      	mov	r3, r1
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	440b      	add	r3, r1
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b45      	ldr	r3, [pc, #276]	; (800166c <timeSetter+0x290>)
 8001558:	701a      	strb	r2, [r3, #0]
				sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 800155a:	4b49      	ldr	r3, [pc, #292]	; (8001680 <timeSetter+0x2a4>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	4a47      	ldr	r2, [pc, #284]	; (8001684 <timeSetter+0x2a8>)
 8001568:	441a      	add	r2, r3
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <timeSetter+0x290>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <timeSetter+0x294>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <timeSetter+0x298>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	9100      	str	r1, [sp, #0]
 800157e:	4603      	mov	r3, r0
 8001580:	4941      	ldr	r1, [pc, #260]	; (8001688 <timeSetter+0x2ac>)
 8001582:	483e      	ldr	r0, [pc, #248]	; (800167c <timeSetter+0x2a0>)
 8001584:	f007 fd26 	bl	8008fd4 <siprintf>
			break;
 8001588:	e0c8      	b.n	800171c <timeSetter+0x340>
		case MIN:
			if(toggleChar)
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <timeSetter+0x28c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d013      	beq.n	80015ba <timeSetter+0x1de>
			{
				sprintf(controlTime, "%s %02d:__:%02d",ampm[curr_ap],curr_h,curr_s);
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <timeSetter+0x2a4>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	4a39      	ldr	r2, [pc, #228]	; (8001684 <timeSetter+0x2a8>)
 80015a0:	441a      	add	r2, r3
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <timeSetter+0x290>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <timeSetter+0x298>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	460b      	mov	r3, r1
 80015b0:	4938      	ldr	r1, [pc, #224]	; (8001694 <timeSetter+0x2b8>)
 80015b2:	4832      	ldr	r0, [pc, #200]	; (800167c <timeSetter+0x2a0>)
 80015b4:	f007 fd0e 	bl	8008fd4 <siprintf>
					curr_m--;
				}
				curr_m %= 60;
				sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
			}
			break;
 80015b8:	e0b0      	b.n	800171c <timeSetter+0x340>
				if(IsUP())
 80015ba:	f000 f9d5 	bl	8001968 <IsUP>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <timeSetter+0x1f6>
					curr_m++;
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <timeSetter+0x294>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <timeSetter+0x294>)
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e00a      	b.n	80015e8 <timeSetter+0x20c>
				else if(IsDown())
 80015d2:	f000 f9db 	bl	800198c <IsDown>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <timeSetter+0x20c>
					curr_m--;
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <timeSetter+0x294>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <timeSetter+0x294>)
 80015e6:	701a      	strb	r2, [r3, #0]
				curr_m %= 60;
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <timeSetter+0x294>)
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <timeSetter+0x2bc>)
 80015ee:	fba3 1302 	umull	r1, r3, r3, r2
 80015f2:	0959      	lsrs	r1, r3, #5
 80015f4:	460b      	mov	r3, r1
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	1a5b      	subs	r3, r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <timeSetter+0x294>)
 8001602:	701a      	strb	r2, [r3, #0]
				sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <timeSetter+0x2a4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <timeSetter+0x2a8>)
 8001612:	441a      	add	r2, r3
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <timeSetter+0x290>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <timeSetter+0x294>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <timeSetter+0x298>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	9100      	str	r1, [sp, #0]
 8001628:	4603      	mov	r3, r0
 800162a:	4917      	ldr	r1, [pc, #92]	; (8001688 <timeSetter+0x2ac>)
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <timeSetter+0x2a0>)
 800162e:	f007 fcd1 	bl	8008fd4 <siprintf>
			break;
 8001632:	e073      	b.n	800171c <timeSetter+0x340>
		case SEC:
			if(toggleChar)
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <timeSetter+0x28c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d031      	beq.n	80016a0 <timeSetter+0x2c4>
			{
				sprintf(controlTime, "%s %02d:%02d:__",ampm[curr_ap],curr_h,curr_m);
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <timeSetter+0x2a4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <timeSetter+0x2a8>)
 800164a:	441a      	add	r2, r3
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <timeSetter+0x290>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <timeSetter+0x294>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	460b      	mov	r3, r1
 800165a:	4910      	ldr	r1, [pc, #64]	; (800169c <timeSetter+0x2c0>)
 800165c:	4807      	ldr	r0, [pc, #28]	; (800167c <timeSetter+0x2a0>)
 800165e:	f007 fcb9 	bl	8008fd4 <siprintf>
					curr_s--;
				}
				curr_s %= 60;
				sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
			}
			break;
 8001662:	e05b      	b.n	800171c <timeSetter+0x340>
 8001664:	20000544 	.word	0x20000544
 8001668:	20000545 	.word	0x20000545
 800166c:	200004b2 	.word	0x200004b2
 8001670:	200004b3 	.word	0x200004b3
 8001674:	200004b4 	.word	0x200004b4
 8001678:	0800a10c 	.word	0x0800a10c
 800167c:	2000041c 	.word	0x2000041c
 8001680:	200004b1 	.word	0x200004b1
 8001684:	20000000 	.word	0x20000000
 8001688:	0800a0e4 	.word	0x0800a0e4
 800168c:	0800a120 	.word	0x0800a120
 8001690:	aaaaaaab 	.word	0xaaaaaaab
 8001694:	0800a130 	.word	0x0800a130
 8001698:	88888889 	.word	0x88888889
 800169c:	0800a140 	.word	0x0800a140
				if(IsUP())
 80016a0:	f000 f962 	bl	8001968 <IsUP>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <timeSetter+0x2dc>
					curr_s++;
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <timeSetter+0x36c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <timeSetter+0x36c>)
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e00a      	b.n	80016ce <timeSetter+0x2f2>
				else if(IsDown())
 80016b8:	f000 f968 	bl	800198c <IsDown>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <timeSetter+0x2f2>
					curr_s--;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <timeSetter+0x36c>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <timeSetter+0x36c>)
 80016cc:	701a      	strb	r2, [r3, #0]
				curr_s %= 60;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <timeSetter+0x36c>)
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <timeSetter+0x370>)
 80016d4:	fba3 1302 	umull	r1, r3, r3, r2
 80016d8:	0959      	lsrs	r1, r3, #5
 80016da:	460b      	mov	r3, r1
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	1a5b      	subs	r3, r3, r1
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <timeSetter+0x36c>)
 80016e8:	701a      	strb	r2, [r3, #0]
				sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <timeSetter+0x374>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <timeSetter+0x378>)
 80016f8:	441a      	add	r2, r3
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <timeSetter+0x37c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <timeSetter+0x380>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <timeSetter+0x36c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9100      	str	r1, [sp, #0]
 800170e:	4603      	mov	r3, r0
 8001710:	4913      	ldr	r1, [pc, #76]	; (8001760 <timeSetter+0x384>)
 8001712:	4814      	ldr	r0, [pc, #80]	; (8001764 <timeSetter+0x388>)
 8001714:	f007 fc5e 	bl	8008fd4 <siprintf>
			break;
 8001718:	e000      	b.n	800171c <timeSetter+0x340>
		default:
			break;
 800171a:	bf00      	nop
	}
	LCD_PrintAll("Set Time      ", controlTime);
 800171c:	4911      	ldr	r1, [pc, #68]	; (8001764 <timeSetter+0x388>)
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <timeSetter+0x38c>)
 8001720:	f7ff fbe4 	bl	8000eec <LCD_PrintAll>
	toggleChar = !toggleChar;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <timeSetter+0x390>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <timeSetter+0x390>)
 8001740:	701a      	strb	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200004b4 	.word	0x200004b4
 800174c:	88888889 	.word	0x88888889
 8001750:	200004b1 	.word	0x200004b1
 8001754:	20000000 	.word	0x20000000
 8001758:	200004b2 	.word	0x200004b2
 800175c:	200004b3 	.word	0x200004b3
 8001760:	0800a0e4 	.word	0x0800a0e4
 8001764:	2000041c 	.word	0x2000041c
 8001768:	0800a150 	.word	0x0800a150
 800176c:	20000545 	.word	0x20000545

08001770 <saveCurrentTime>:
void saveCurrentTime(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	isSave = false;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <saveCurrentTime+0x1c>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
	clock_state = NORMAL_STATE;
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <saveCurrentTime+0x20>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200004b0 	.word	0x200004b0
 8001790:	200003b8 	.word	0x200003b8

08001794 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin);
 800179c:	f244 0181 	movw	r1, #16513	; 0x4081
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <HAL_RTC_AlarmAEventCallback+0x20>)
 80017a2:	f002 fe24 	bl	80043ee <HAL_GPIO_TogglePin>
	printf("RINGRINGRINGRING!!!!!!!!!!!!!!!!!!!!\r\n");
 80017a6:	4804      	ldr	r0, [pc, #16]	; (80017b8 <HAL_RTC_AlarmAEventCallback+0x24>)
 80017a8:	f007 fbd8 	bl	8008f5c <puts>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020400 	.word	0x40020400
 80017b8:	0800a160 	.word	0x0800a160

080017bc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
	//stime = HxAL_GetTick();
	// joystick switch
	GPIO_PinState pinstate;
	if(GPIO_Pin == SWITCH_Pin)
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	2b80      	cmp	r3, #128	; 0x80
 80017ca:	f040 8081 	bne.w	80018d0 <HAL_GPIO_EXTI_Callback+0x114>
	{
		//printf("switch toggle\r\n");
		stime = HAL_GetTick();
 80017ce:	f000 fe7f 	bl	80024d0 <HAL_GetTick>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a40      	ldr	r2, [pc, #256]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x11c>)
 80017d6:	6013      	str	r3, [r2, #0]
		interval = stime - etime;
 80017d8:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x11c>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_GPIO_EXTI_Callback+0x120>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	4a3f      	ldr	r2, [pc, #252]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x124>)
 80017e4:	6013      	str	r3, [r2, #0]
		etime = stime;
 80017e6:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x11c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a3c      	ldr	r2, [pc, #240]	; (80018dc <HAL_GPIO_EXTI_Callback+0x120>)
 80017ec:	6013      	str	r3, [r2, #0]
		if(interval > 100)
 80017ee:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x124>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d96c      	bls.n	80018d0 <HAL_GPIO_EXTI_Callback+0x114>
		{
			memset(buf,0, sizeof(buf));
 80017f6:	2278      	movs	r2, #120	; 0x78
 80017f8:	2100      	movs	r1, #0
 80017fa:	483a      	ldr	r0, [pc, #232]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x128>)
 80017fc:	f007 fce2 	bl	80091c4 <memset>
			pinstate = HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin);
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	4839      	ldr	r0, [pc, #228]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001804:	f002 fdc2 	bl	800438c <HAL_GPIO_ReadPin>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
			if(pinstate == GPIO_PIN_SET)
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d114      	bne.n	800183c <HAL_GPIO_EXTI_Callback+0x80>
			{
				printf("OFF\r\n");
 8001812:	4836      	ldr	r0, [pc, #216]	; (80018ec <HAL_GPIO_EXTI_Callback+0x130>)
 8001814:	f007 fba2 	bl	8008f5c <puts>
				holdclk = interval;
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x124>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x134>)
 800181e:	6013      	str	r3, [r2, #0]
				oneClick++;
 8001820:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x138>)
 800182a:	701a      	strb	r2, [r3, #0]
								oneClick %= 2;
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x138>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e016      	b.n	800186a <HAL_GPIO_EXTI_Callback+0xae>
			}
			else if(pinstate == GPIO_PIN_RESET)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d113      	bne.n	800186a <HAL_GPIO_EXTI_Callback+0xae>
			{
				printf("ON\r\n");
 8001842:	482d      	ldr	r0, [pc, #180]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001844:	f007 fb8a 	bl	8008f5c <puts>
				holdclk = 0;
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x134>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
				if(interval < 1000)
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x124>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001856:	d205      	bcs.n	8001864 <HAL_GPIO_EXTI_Callback+0xa8>
				{
					dbclk++;
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_GPIO_EXTI_Callback+0x140>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_GPIO_EXTI_Callback+0x140>)
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e002      	b.n	800186a <HAL_GPIO_EXTI_Callback+0xae>
				}
				else
				{
					dbclk = 0;
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_GPIO_EXTI_Callback+0x140>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
				}

			}
			//printf("intvl time: %d\r\n",interval);
			// Alarm time Setting State
			if(holdclk >= 3000)
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x134>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001872:	4293      	cmp	r3, r2
 8001874:	d903      	bls.n	800187e <HAL_GPIO_EXTI_Callback+0xc2>
			{
				printf("***held at least 3 sec ***\r\n");
 8001876:	4822      	ldr	r0, [pc, #136]	; (8001900 <HAL_GPIO_EXTI_Callback+0x144>)
 8001878:	f007 fb70 	bl	8008f5c <puts>
 800187c:	e009      	b.n	8001892 <HAL_GPIO_EXTI_Callback+0xd6>
			}
			// Morning call Setting State
			else if(dbclk >= 2)
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_GPIO_EXTI_Callback+0x140>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d905      	bls.n	8001892 <HAL_GPIO_EXTI_Callback+0xd6>
			{
				printf("***double click activate***\r\n");
 8001886:	481f      	ldr	r0, [pc, #124]	; (8001904 <HAL_GPIO_EXTI_Callback+0x148>)
 8001888:	f007 fb68 	bl	8008f5c <puts>
				dbclk = 0;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_GPIO_EXTI_Callback+0x140>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
			}
			// Timer Setting State
			if(oneClick == 1)
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d11a      	bne.n	80018d0 <HAL_GPIO_EXTI_Callback+0x114>
			{
				printf("timer setting\r\n");
 800189a:	481b      	ldr	r0, [pc, #108]	; (8001908 <HAL_GPIO_EXTI_Callback+0x14c>)
 800189c:	f007 fb5e 	bl	8008f5c <puts>
				cpyflag = 1;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_GPIO_EXTI_Callback+0x150>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
				if(clock_state == NORMAL_STATE)
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_GPIO_EXTI_Callback+0x154>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_GPIO_EXTI_Callback+0x100>
				{
					clock_state = TIME_SETTING;
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_GPIO_EXTI_Callback+0x154>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
					printf("set to Time\r\n");
 80018b4:	4817      	ldr	r0, [pc, #92]	; (8001914 <HAL_GPIO_EXTI_Callback+0x158>)
 80018b6:	f007 fb51 	bl	8008f5c <puts>
					isSave = true;
				}
			}
		}
	}
}
 80018ba:	e009      	b.n	80018d0 <HAL_GPIO_EXTI_Callback+0x114>
				else if(clock_state == TIME_SETTING)
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_GPIO_EXTI_Callback+0x154>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_GPIO_EXTI_Callback+0x114>
					printf("set to Save\r\n");
 80018c4:	4814      	ldr	r0, [pc, #80]	; (8001918 <HAL_GPIO_EXTI_Callback+0x15c>)
 80018c6:	f007 fb49 	bl	8008f5c <puts>
					isSave = true;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_GPIO_EXTI_Callback+0x160>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200004b8 	.word	0x200004b8
 80018dc:	200004bc 	.word	0x200004bc
 80018e0:	200004c0 	.word	0x200004c0
 80018e4:	200004cc 	.word	0x200004cc
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	0800a188 	.word	0x0800a188
 80018f0:	200004c8 	.word	0x200004c8
 80018f4:	200004af 	.word	0x200004af
 80018f8:	0800a190 	.word	0x0800a190
 80018fc:	200004c4 	.word	0x200004c4
 8001900:	0800a194 	.word	0x0800a194
 8001904:	0800a1b0 	.word	0x0800a1b0
 8001908:	0800a1d0 	.word	0x0800a1d0
 800190c:	200004ae 	.word	0x200004ae
 8001910:	200003b8 	.word	0x200003b8
 8001914:	0800a1e0 	.word	0x0800a1e0
 8001918:	0800a1f0 	.word	0x0800a1f0
 800191c:	200004b0 	.word	0x200004b0

08001920 <IsRight>:

bool IsRight(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
	return Joycon[0] >= RIGHT ? true : false;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <IsRight+0x20>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800192c:	4293      	cmp	r3, r2
 800192e:	bf8c      	ite	hi
 8001930:	2301      	movhi	r3, #1
 8001932:	2300      	movls	r3, #0
 8001934:	b2db      	uxtb	r3, r3
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	200003e4 	.word	0x200003e4

08001944 <IsLeft>:
bool IsLeft(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	return Joycon[0] <= LEFT ? true : false;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <IsLeft+0x20>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001950:	bf94      	ite	ls
 8001952:	2301      	movls	r3, #1
 8001954:	2300      	movhi	r3, #0
 8001956:	b2db      	uxtb	r3, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200003e4 	.word	0x200003e4

08001968 <IsUP>:
bool IsUP(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	return Joycon[1] >= UP ? true : false;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <IsUP+0x20>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001974:	4293      	cmp	r3, r2
 8001976:	bf8c      	ite	hi
 8001978:	2301      	movhi	r3, #1
 800197a:	2300      	movls	r3, #0
 800197c:	b2db      	uxtb	r3, r3
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	200003e4 	.word	0x200003e4

0800198c <IsDown>:
bool IsDown(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	return Joycon[1] <= DOWN ? true : false;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <IsDown+0x20>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001998:	bf94      	ite	ls
 800199a:	2301      	movls	r3, #1
 800199c:	2300      	movhi	r3, #0
 800199e:	b2db      	uxtb	r3, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200003e4 	.word	0x200003e4

080019b0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	// From COM3 ->(UART3)ST(UART4) ->BLE
	if(huart->Instance == USART3)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a2c      	ldr	r2, [pc, #176]	; (8001a70 <HAL_UART_RxCpltCallback+0xc0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d141      	bne.n	8001a46 <HAL_UART_RxCpltCallback+0x96>
	{
		// received enter key
		if(rx3Data == '\r' || ble.cur_BLE_Index > 64)
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_UART_RxCpltCallback+0xc4>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b0d      	cmp	r3, #13
 80019c8:	d004      	beq.n	80019d4 <HAL_UART_RxCpltCallback+0x24>
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 80019cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019d0:	2b40      	cmp	r3, #64	; 0x40
 80019d2:	d91c      	bls.n	8001a0e <HAL_UART_RxCpltCallback+0x5e>
		{
			printf("\r\n send following data to BLE \r\n");
 80019d4:	4829      	ldr	r0, [pc, #164]	; (8001a7c <HAL_UART_RxCpltCallback+0xcc>)
 80019d6:	f007 fac1 	bl	8008f5c <puts>
			printf(ble.bleBuffer);
 80019da:	4827      	ldr	r0, [pc, #156]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 80019dc:	f007 fa58 	bl	8008e90 <iprintf>
			printf("\r\n");
 80019e0:	4827      	ldr	r0, [pc, #156]	; (8001a80 <HAL_UART_RxCpltCallback+0xd0>)
 80019e2:	f007 fabb 	bl	8008f5c <puts>
			HAL_UART_Transmit(&huart4, (uint8_t*)&ble.bleBuffer, ble.cur_BLE_Index, 500);
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 80019e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019f2:	4921      	ldr	r1, [pc, #132]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 80019f4:	4823      	ldr	r0, [pc, #140]	; (8001a84 <HAL_UART_RxCpltCallback+0xd4>)
 80019f6:	f005 fe5c 	bl	80076b2 <HAL_UART_Transmit>
			memset(ble.bleBuffer, 0, sizeof(ble.bleBuffer)/sizeof(ble.bleBuffer[0]));
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	2100      	movs	r1, #0
 80019fe:	481e      	ldr	r0, [pc, #120]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 8001a00:	f007 fbe0 	bl	80091c4 <memset>
			ble.cur_BLE_Index = 0;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001a0c:	e015      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x8a>
		}
		else
		{

			ble.bleBuffer[ble.cur_BLE_Index] = rx3Data;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 8001a10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_UART_RxCpltCallback+0xc4>)
 8001a18:	7819      	ldrb	r1, [r3, #0]
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 8001a1c:	5499      	strb	r1, [r3, r2]
			printf("collecting: %c\r\n", (char)rx3Data);
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_UART_RxCpltCallback+0xc4>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4818      	ldr	r0, [pc, #96]	; (8001a88 <HAL_UART_RxCpltCallback+0xd8>)
 8001a26:	f007 fa33 	bl	8008e90 <iprintf>
			ble.cur_BLE_Index++;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 8001a2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_UART_RxCpltCallback+0xc8>)
 8001a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	490d      	ldr	r1, [pc, #52]	; (8001a74 <HAL_UART_RxCpltCallback+0xc4>)
 8001a3e:	4813      	ldr	r0, [pc, #76]	; (8001a8c <HAL_UART_RxCpltCallback+0xdc>)
 8001a40:	f005 fec9 	bl	80077d6 <HAL_UART_Receive_IT>
		}
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
#endif
	}

}
 8001a44:	e00f      	b.n	8001a66 <HAL_UART_RxCpltCallback+0xb6>
	else if(huart->Instance == UART4)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_UART_RxCpltCallback+0xe0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d10a      	bne.n	8001a66 <HAL_UART_RxCpltCallback+0xb6>
		HAL_UART_Transmit(&huart3, (uint8_t*)&rx4Data, sizeof(rx4Data), 100);
 8001a50:	2364      	movs	r3, #100	; 0x64
 8001a52:	2201      	movs	r2, #1
 8001a54:	490f      	ldr	r1, [pc, #60]	; (8001a94 <HAL_UART_RxCpltCallback+0xe4>)
 8001a56:	480d      	ldr	r0, [pc, #52]	; (8001a8c <HAL_UART_RxCpltCallback+0xdc>)
 8001a58:	f005 fe2b 	bl	80076b2 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <HAL_UART_RxCpltCallback+0xe4>)
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <HAL_UART_RxCpltCallback+0xd4>)
 8001a62:	f005 feb8 	bl	80077d6 <HAL_UART_Receive_IT>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40004800 	.word	0x40004800
 8001a74:	200003b9 	.word	0x200003b9
 8001a78:	2000042c 	.word	0x2000042c
 8001a7c:	0800a200 	.word	0x0800a200
 8001a80:	0800a220 	.word	0x0800a220
 8001a84:	200005fc 	.word	0x200005fc
 8001a88:	0800a224 	.word	0x0800a224
 8001a8c:	20000640 	.word	0x20000640
 8001a90:	40004c00 	.word	0x40004c00
 8001a94:	200003ba 	.word	0x200003ba

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <Error_Handler+0x8>
	...

08001aa4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b090      	sub	sp, #64	; 0x40
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2228      	movs	r2, #40	; 0x28
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f007 fb7d 	bl	80091c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001acc:	4a3d      	ldr	r2, [pc, #244]	; (8001bc4 <MX_RTC_Init+0x120>)
 8001ace:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001ad2:	2240      	movs	r2, #64	; 0x40
 8001ad4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ad6:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001ad8:	227f      	movs	r2, #127	; 0x7f
 8001ada:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001ade:	22ff      	movs	r2, #255	; 0xff
 8001ae0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001af4:	4832      	ldr	r0, [pc, #200]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001af6:	f004 fa17 	bl	8005f28 <HAL_RTC_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001b00:	f7ff ffca 	bl	8001a98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4824      	ldr	r0, [pc, #144]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001b2e:	f004 fa71 	bl	8006014 <HAL_RTC_SetTime>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001b38:	f7ff ffae 	bl	8001a98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001b5e:	f004 fb51 	bl	8006204 <HAL_RTC_SetDate>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001b68:	f7ff ff96 	bl	8001a98 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_RTC_Init+0x124>)
 8001b8a:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_RTC_Init+0x11c>)
 8001ba8:	f004 fc00 	bl	80063ac <HAL_RTC_SetAlarm_IT>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8001bb2:	f7ff ff71 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3740      	adds	r7, #64	; 0x40
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000548 	.word	0x20000548
 8001bc4:	40002800 	.word	0x40002800
 8001bc8:	80808000 	.word	0x80808000

08001bcc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	; 0x38
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	2230      	movs	r2, #48	; 0x30
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f007 faf1 	bl	80091c4 <memset>
  if(rtcHandle->Instance==RTC)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_RTC_MspInit+0x4c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d111      	bne.n	8001c10 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bec:	2320      	movs	r3, #32
 8001bee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 ffd4 	bl	8005ba8 <HAL_RCCEx_PeriphCLKConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c06:	f7ff ff47 	bl	8001a98 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_RTC_MspInit+0x50>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c10:	bf00      	nop
 8001c12:	3738      	adds	r7, #56	; 0x38
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40002800 	.word	0x40002800
 8001c1c:	42470e3c 	.word	0x42470e3c

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	; 0x44
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 fbf4 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <ADC_IRQHandler+0x10>)
 8001cca:	f000 fc74 	bl	80025b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000008c 	.word	0x2000008c

08001cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 8001cdc:	2080      	movs	r0, #128	; 0x80
 8001cde:	f002 fba1 	bl	8004424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <TIM2_IRQHandler+0x10>)
 8001cee:	f004 fe54 	bl	800699a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000056c 	.word	0x2000056c

08001cfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <USART3_IRQHandler+0x10>)
 8001d02:	f005 fd99 	bl	8007838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000640 	.word	0x20000640

08001d10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d18:	f002 fb84 	bl	8004424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <RTC_Alarm_IRQHandler+0x10>)
 8001d26:	f004 fc83 	bl	8006630 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000548 	.word	0x20000548

08001d34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <UART4_IRQHandler+0x10>)
 8001d3a:	f005 fd7d 	bl	8007838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200005fc 	.word	0x200005fc

08001d48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <DMA2_Stream0_IRQHandler+0x10>)
 8001d4e:	f001 fbdf 	bl	8003510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200000d4 	.word	0x200000d4

08001d5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	4601      	mov	r1, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf0      	blt.n	8001d6e <_read+0x12>
  }

  return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_isatty>:

int _isatty(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f007 fa16 	bl	8009260 <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20030000 	.word	0x20030000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	20000568 	.word	0x20000568
 8001e68:	20000ce0 	.word	0x20000ce0

08001e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <SystemInit+0x20>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <SystemInit+0x20>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001eb6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ec4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ed6:	4814      	ldr	r0, [pc, #80]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ed8:	f004 fcb7 	bl	800684a <HAL_TIM_Base_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ee2:	f7ff fdd9 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001ef4:	f004 ff1c 	bl	8006d30 <HAL_TIM_ConfigClockSource>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001efe:	f7ff fdcb 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <MX_TIM2_Init+0x98>)
 8001f10:	f005 faf2 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f1a:	f7ff fdbd 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000056c 	.word	0x2000056c

08001f2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	f107 0320 	add.w	r3, r7, #32
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
 8001f58:	615a      	str	r2, [r3, #20]
 8001f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <MX_TIM3_Init+0xe8>)
 8001f60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001f64:	2253      	movs	r2, #83	; 0x53
 8001f66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001f70:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001f74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f82:	4823      	ldr	r0, [pc, #140]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001f84:	f004 fc61 	bl	800684a <HAL_TIM_Base_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f8e:	f7ff fd83 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	481c      	ldr	r0, [pc, #112]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001fa0:	f004 fec6 	bl	8006d30 <HAL_TIM_ConfigClockSource>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001faa:	f7ff fd75 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fae:	4818      	ldr	r0, [pc, #96]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001fb0:	f004 fc9a 	bl	80068e8 <HAL_TIM_PWM_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001fba:	f7ff fd6d 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4810      	ldr	r0, [pc, #64]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001fce:	f005 fa93 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fd8:	f7ff fd5e 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fdc:	2360      	movs	r3, #96	; 0x60
 8001fde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2208      	movs	r2, #8
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_TIM3_Init+0xe4>)
 8001ff4:	f004 fdda 	bl	8006bac <HAL_TIM_PWM_ConfigChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ffe:	f7ff fd4b 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002002:	4803      	ldr	r0, [pc, #12]	; (8002010 <MX_TIM3_Init+0xe4>)
 8002004:	f000 f83e 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8002008:	bf00      	nop
 800200a:	3738      	adds	r7, #56	; 0x38
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200005b4 	.word	0x200005b4
 8002014:	40000400 	.word	0x40000400

08002018 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_TIM_Base_MspInit+0x64>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <HAL_TIM_Base_MspInit+0x64>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_TIM_Base_MspInit+0x64>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002046:	e012      	b.n	800206e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_TIM_Base_MspInit+0x68>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10d      	bne.n	800206e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_TIM_Base_MspInit+0x64>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_TIM_Base_MspInit+0x64>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_TIM_Base_MspInit+0x64>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	40000400 	.word	0x40000400

08002084 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a12      	ldr	r2, [pc, #72]	; (80020ec <HAL_TIM_MspPostInit+0x68>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d11e      	bne.n	80020e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_TIM_MspPostInit+0x6c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4619      	mov	r1, r3
 80020de:	4805      	ldr	r0, [pc, #20]	; (80020f4 <HAL_TIM_MspPostInit+0x70>)
 80020e0:	f001 ffa8 	bl	8004034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020e4:	bf00      	nop
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020800 	.word	0x40020800

080020f8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_UART4_Init+0x4c>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <MX_UART4_Init+0x50>)
 8002100:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <MX_UART4_Init+0x4c>)
 8002104:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002108:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_UART4_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_UART4_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <MX_UART4_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_UART4_Init+0x4c>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <MX_UART4_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_UART4_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_UART4_Init+0x4c>)
 8002130:	f005 fa72 	bl	8007618 <HAL_UART_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800213a:	f7ff fcad 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200005fc 	.word	0x200005fc
 8002148:	40004c00 	.word	0x40004c00

0800214c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <MX_USART3_UART_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_USART3_UART_Init+0x4c>)
 8002184:	f005 fa48 	bl	8007618 <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800218e:	f7ff fc83 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000640 	.word	0x20000640
 800219c:	40004800 	.word	0x40004800

080021a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a33      	ldr	r2, [pc, #204]	; (800228c <HAL_UART_MspInit+0xec>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d12d      	bne.n	800221e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_UART_MspInit+0xf0>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a31      	ldr	r2, [pc, #196]	; (8002290 <HAL_UART_MspInit+0xf0>)
 80021cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_UART_MspInit+0xf0>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_UART_MspInit+0xf0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <HAL_UART_MspInit+0xf0>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_UART_MspInit+0xf0>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800220c:	2308      	movs	r3, #8
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4619      	mov	r1, r3
 8002216:	481f      	ldr	r0, [pc, #124]	; (8002294 <HAL_UART_MspInit+0xf4>)
 8002218:	f001 ff0c 	bl	8004034 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800221c:	e031      	b.n	8002282 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART3)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <HAL_UART_MspInit+0xf8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d12c      	bne.n	8002282 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_UART_MspInit+0xf0>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a17      	ldr	r2, [pc, #92]	; (8002290 <HAL_UART_MspInit+0xf0>)
 8002232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_UART_MspInit+0xf0>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_UART_MspInit+0xf0>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_UART_MspInit+0xf0>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	6313      	str	r3, [r2, #48]	; 0x30
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_UART_MspInit+0xf0>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002260:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002272:	2307      	movs	r3, #7
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <HAL_UART_MspInit+0xfc>)
 800227e:	f001 fed9 	bl	8004034 <HAL_GPIO_Init>
}
 8002282:	bf00      	nop
 8002284:	3730      	adds	r7, #48	; 0x30
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40004c00 	.word	0x40004c00
 8002290:	40023800 	.word	0x40023800
 8002294:	40020800 	.word	0x40020800
 8002298:	40004800 	.word	0x40004800
 800229c:	40020c00 	.word	0x40020c00

080022a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80022aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ae:	2204      	movs	r2, #4
 80022b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022b4:	2202      	movs	r2, #2
 80022b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c0:	2202      	movs	r2, #2
 80022c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022d8:	2201      	movs	r2, #1
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022e4:	f002 feaa 	bl	800503c <HAL_PCD_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80022ee:	f7ff fbd3 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000684 	.word	0x20000684

080022fc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800231c:	d13f      	bne.n	800239e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_PCD_MspInit+0xac>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_PCD_MspInit+0xac>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_PCD_MspInit+0xac>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800233a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800234c:	230a      	movs	r3, #10
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4815      	ldr	r0, [pc, #84]	; (80023ac <HAL_PCD_MspInit+0xb0>)
 8002358:	f001 fe6c 	bl	8004034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	480e      	ldr	r0, [pc, #56]	; (80023ac <HAL_PCD_MspInit+0xb0>)
 8002372:	f001 fe5f 	bl	8004034 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_PCD_MspInit+0xac>)
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_PCD_MspInit+0xac>)
 800237c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002380:	6353      	str	r3, [r2, #52]	; 0x34
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_PCD_MspInit+0xac>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_PCD_MspInit+0xac>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_PCD_MspInit+0xac>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	; 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023b6:	490e      	ldr	r1, [pc, #56]	; (80023f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023cc:	4c0b      	ldr	r4, [pc, #44]	; (80023fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023da:	f7ff fd47 	bl	8001e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f006 ff45 	bl	800926c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7fe fdc9 	bl	8000f78 <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80023f4:	0800a29c 	.word	0x0800a29c
  ldr r2, =_sbss
 80023f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80023fc:	20000ce0 	.word	0x20000ce0

08002400 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <CAN1_RX0_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_Init+0x40>)
 800240e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_Init+0x40>)
 800241a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800241e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_Init+0x40>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 fe95 	bl	800315c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7ff fbf2 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fead 	bl	80031c6 <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 fe75 	bl	8003172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000010 	.word	0x20000010
 80024a4:	2000000c 	.word	0x2000000c

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000010 	.word	0x20000010
 80024cc:	20000b90 	.word	0x20000b90

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000b90 	.word	0x20000b90

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff ffee 	bl	80024d0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffde 	bl	80024d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000010 	.word	0x20000010

08002530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e033      	b.n	80025ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe f884 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002576:	f023 0302 	bic.w	r3, r3, #2
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fb92 	bl	8002cac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
 800259e:	e001      	b.n	80025a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d049      	beq.n	8002680 <HAL_ADC_IRQHandler+0xca>
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d046      	beq.n	8002680 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d12b      	bne.n	8002670 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800261c:	2b00      	cmp	r3, #0
 800261e:	d127      	bne.n	8002670 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002638:	2b00      	cmp	r3, #0
 800263a:	d119      	bne.n	8002670 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0220 	bic.w	r2, r2, #32
 800264a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f9c1 	bl	80029f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 0212 	mvn.w	r2, #18
 800267e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d057      	beq.n	8002746 <HAL_ADC_IRQHandler+0x190>
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d054      	beq.n	8002746 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d139      	bne.n	8002736 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d12b      	bne.n	8002736 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d124      	bne.n	8002736 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11d      	bne.n	8002736 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d119      	bne.n	8002736 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002710:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fc36 	bl	8002fa8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 020c 	mvn.w	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d017      	beq.n	800278c <HAL_ADC_IRQHandler+0x1d6>
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d014      	beq.n	800278c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10d      	bne.n	800278c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f94f 	bl	8002a20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0201 	mvn.w	r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800279a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d015      	beq.n	80027ce <HAL_ADC_IRQHandler+0x218>
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	f043 0202 	orr.w	r2, r3, #2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0220 	mvn.w	r2, #32
 80027bc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f938 	bl	8002a34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0220 	mvn.w	r2, #32
 80027cc:	601a      	str	r2, [r3, #0]
  }
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Start_DMA+0x1e>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e0e9      	b.n	80029ca <HAL_ADC_Start_DMA+0x1f2>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d018      	beq.n	800283e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800281c:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <HAL_ADC_Start_DMA+0x1fc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a6d      	ldr	r2, [pc, #436]	; (80029d8 <HAL_ADC_Start_DMA+0x200>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0c9a      	lsrs	r2, r3, #18
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002830:	e002      	b.n	8002838 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	3b01      	subs	r3, #1
 8002836:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800284c:	d107      	bne.n	800285e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800285c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 80a1 	bne.w	80029b0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002898:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ac:	d106      	bne.n	80028bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f023 0206 	bic.w	r2, r3, #6
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
 80028ba:	e002      	b.n	80028c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ca:	4b44      	ldr	r3, [pc, #272]	; (80029dc <HAL_ADC_Start_DMA+0x204>)
 80028cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	4a43      	ldr	r2, [pc, #268]	; (80029e0 <HAL_ADC_Start_DMA+0x208>)
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <HAL_ADC_Start_DMA+0x20c>)
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <HAL_ADC_Start_DMA+0x210>)
 80028e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	334c      	adds	r3, #76	; 0x4c
 800291a:	4619      	mov	r1, r3
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f000 fd0c 	bl	800333c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2b00      	cmp	r3, #0
 800292e:	d12a      	bne.n	8002986 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <HAL_ADC_Start_DMA+0x214>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d015      	beq.n	8002966 <HAL_ADC_Start_DMA+0x18e>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2c      	ldr	r2, [pc, #176]	; (80029f0 <HAL_ADC_Start_DMA+0x218>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d105      	bne.n	8002950 <HAL_ADC_Start_DMA+0x178>
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_ADC_Start_DMA+0x204>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_ADC_Start_DMA+0x21c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d136      	bne.n	80029c8 <HAL_ADC_Start_DMA+0x1f0>
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_ADC_Start_DMA+0x204>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d130      	bne.n	80029c8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d129      	bne.n	80029c8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	e020      	b.n	80029c8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_ADC_Start_DMA+0x214>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d11b      	bne.n	80029c8 <HAL_ADC_Start_DMA+0x1f0>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d114      	bne.n	80029c8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	e00b      	b.n	80029c8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f043 0210 	orr.w	r2, r3, #16
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000008 	.word	0x20000008
 80029d8:	431bde83 	.word	0x431bde83
 80029dc:	40012300 	.word	0x40012300
 80029e0:	08002ea5 	.word	0x08002ea5
 80029e4:	08002f5f 	.word	0x08002f5f
 80029e8:	08002f7b 	.word	0x08002f7b
 80029ec:	40012000 	.word	0x40012000
 80029f0:	40012100 	.word	0x40012100
 80029f4:	40012200 	.word	0x40012200

080029f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1c>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e113      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x244>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	d925      	bls.n	8002ac0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68d9      	ldr	r1, [r3, #12]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	3b1e      	subs	r3, #30
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43da      	mvns	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	400a      	ands	r2, r1
 8002a98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68d9      	ldr	r1, [r3, #12]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	4603      	mov	r3, r0
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4403      	add	r3, r0
 8002ab2:	3b1e      	subs	r3, #30
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	e022      	b.n	8002b06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6919      	ldr	r1, [r3, #16]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6919      	ldr	r1, [r3, #16]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4618      	mov	r0, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4403      	add	r3, r0
 8002afc:	409a      	lsls	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d824      	bhi.n	8002b58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b05      	subs	r3, #5
 8002b20:	221f      	movs	r2, #31
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	3b05      	subs	r3, #5
 8002b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	635a      	str	r2, [r3, #52]	; 0x34
 8002b56:	e04c      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d824      	bhi.n	8002baa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b23      	subs	r3, #35	; 0x23
 8002b72:	221f      	movs	r2, #31
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	400a      	ands	r2, r1
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b23      	subs	r3, #35	; 0x23
 8002b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba8:	e023      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b41      	subs	r3, #65	; 0x41
 8002bbc:	221f      	movs	r2, #31
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	400a      	ands	r2, r1
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	3b41      	subs	r3, #65	; 0x41
 8002be6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf2:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_ADC_ConfigChannel+0x250>)
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <HAL_ADC_ConfigChannel+0x254>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d10f      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x1d8>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b12      	cmp	r3, #18
 8002c06:	d10b      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <HAL_ADC_ConfigChannel+0x254>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d12b      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x23a>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_ADC_ConfigChannel+0x258>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <HAL_ADC_ConfigChannel+0x1f4>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b11      	cmp	r3, #17
 8002c3a:	d122      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <HAL_ADC_ConfigChannel+0x258>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d111      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_ADC_ConfigChannel+0x25c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_ADC_ConfigChannel+0x260>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	0c9a      	lsrs	r2, r3, #18
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c74:	e002      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f9      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40012300 	.word	0x40012300
 8002c9c:	40012000 	.word	0x40012000
 8002ca0:	10000012 	.word	0x10000012
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	431bde83 	.word	0x431bde83

08002cac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb4:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <ADC_Init+0x1f0>)
 8002cb6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	021a      	lsls	r2, r3, #8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6899      	ldr	r1, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <ADC_Init+0x1f4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6899      	ldr	r1, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	e00f      	b.n	8002daa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002da8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0202 	bic.w	r2, r2, #2
 8002db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7e1b      	ldrb	r3, [r3, #24]
 8002dc4:	005a      	lsls	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002df6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6859      	ldr	r1, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	3b01      	subs	r3, #1
 8002e04:	035a      	lsls	r2, r3, #13
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	e007      	b.n	8002e20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	051a      	lsls	r2, r3, #20
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e62:	025a      	lsls	r2, r3, #9
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	029a      	lsls	r2, r3, #10
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	40012300 	.word	0x40012300
 8002ea0:	0f000001 	.word	0x0f000001

08002ea4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d13c      	bne.n	8002f38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d12b      	bne.n	8002f30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d127      	bne.n	8002f30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d119      	bne.n	8002f30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0220 	bic.w	r2, r2, #32
 8002f0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff fd61 	bl	80029f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f36:	e00e      	b.n	8002f56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff fd75 	bl	8002a34 <HAL_ADC_ErrorCallback>
}
 8002f4a:	e004      	b.n	8002f56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff fd4d 	bl	8002a0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2240      	movs	r2, #64	; 0x40
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f043 0204 	orr.w	r2, r3, #4
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff fd4a 	bl	8002a34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60d3      	str	r3, [r2, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_GetPriorityGrouping+0x18>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0307 	and.w	r3, r3, #7
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db0b      	blt.n	800304a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <__NVIC_EnableIRQ+0x38>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2001      	movs	r0, #1
 8003042:	fa00 f202 	lsl.w	r2, r0, r2
 8003046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003128:	d301      	bcc.n	800312e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312a:	2301      	movs	r3, #1
 800312c:	e00f      	b.n	800314e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <SysTick_Config+0x40>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003136:	210f      	movs	r1, #15
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f7ff ff8e 	bl	800305c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SysTick_Config+0x40>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SysTick_Config+0x40>)
 8003148:	2207      	movs	r2, #7
 800314a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	e000e010 	.word	0xe000e010

0800315c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff29 	bl	8002fbc <__NVIC_SetPriorityGrouping>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003184:	f7ff ff3e 	bl	8003004 <__NVIC_GetPriorityGrouping>
 8003188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	6978      	ldr	r0, [r7, #20]
 8003190:	f7ff ff8e 	bl	80030b0 <NVIC_EncodePriority>
 8003194:	4602      	mov	r2, r0
 8003196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff5d 	bl	800305c <__NVIC_SetPriority>
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff31 	bl	8003020 <__NVIC_EnableIRQ>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ffa2 	bl	8003118 <SysTick_Config>
 80031d4:	4603      	mov	r3, r0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff f970 	bl	80024d0 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e099      	b.n	8003330 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800321c:	e00f      	b.n	800323e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800321e:	f7ff f957 	bl	80024d0 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b05      	cmp	r3, #5
 800322a:	d908      	bls.n	800323e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2203      	movs	r2, #3
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e078      	b.n	8003330 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e8      	bne.n	800321e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4b38      	ldr	r3, [pc, #224]	; (8003338 <HAL_DMA_Init+0x158>)
 8003258:	4013      	ands	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800326a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2b04      	cmp	r3, #4
 8003296:	d107      	bne.n	80032a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	4313      	orrs	r3, r2
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d117      	bne.n	8003302 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fb01 	bl	80038ec <DMA_CheckFifoParam>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032fe:	2301      	movs	r3, #1
 8003300:	e016      	b.n	8003330 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fab8 	bl	8003880 <DMA_CalcBaseAndBitshift>
 8003310:	4603      	mov	r3, r0
 8003312:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	223f      	movs	r2, #63	; 0x3f
 800331a:	409a      	lsls	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	f010803f 	.word	0xf010803f

0800333c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_DMA_Start_IT+0x26>
 800335e:	2302      	movs	r3, #2
 8003360:	e040      	b.n	80033e4 <HAL_DMA_Start_IT+0xa8>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d12f      	bne.n	80033d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa4a 	bl	8003824 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	223f      	movs	r2, #63	; 0x3f
 8003396:	409a      	lsls	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0216 	orr.w	r2, r2, #22
 80033aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0208 	orr.w	r2, r2, #8
 80033c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e005      	b.n	80033e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033de:	2302      	movs	r3, #2
 80033e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033fa:	f7ff f869 	bl	80024d0 <HAL_GetTick>
 80033fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d008      	beq.n	800341e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e052      	b.n	80034c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0216 	bic.w	r2, r2, #22
 800342c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_DMA_Abort+0x62>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0208 	bic.w	r2, r2, #8
 800345c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346e:	e013      	b.n	8003498 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003470:	f7ff f82e 	bl	80024d0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b05      	cmp	r3, #5
 800347c:	d90c      	bls.n	8003498 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2203      	movs	r2, #3
 8003488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e015      	b.n	80034c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e4      	bne.n	8003470 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	223f      	movs	r2, #63	; 0x3f
 80034ac:	409a      	lsls	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d004      	beq.n	80034ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00c      	b.n	8003504 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2205      	movs	r2, #5
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800351c:	4b8e      	ldr	r3, [pc, #568]	; (8003758 <HAL_DMA_IRQHandler+0x248>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a8e      	ldr	r2, [pc, #568]	; (800375c <HAL_DMA_IRQHandler+0x24c>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0a9b      	lsrs	r3, r3, #10
 8003528:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	2208      	movs	r2, #8
 800353c:	409a      	lsls	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01a      	beq.n	800357c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	2208      	movs	r2, #8
 800356a:	409a      	lsls	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	f043 0201 	orr.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	2201      	movs	r2, #1
 80035a0:	409a      	lsls	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0202 	orr.w	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2204      	movs	r2, #4
 80035b8:	409a      	lsls	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d012      	beq.n	80035e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	2204      	movs	r2, #4
 80035d6:	409a      	lsls	r2, r3
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	f043 0204 	orr.w	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	2210      	movs	r2, #16
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d043      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03c      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	2210      	movs	r2, #16
 800360c:	409a      	lsls	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d018      	beq.n	8003652 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d024      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
 800363e:	e01f      	b.n	8003680 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
 8003650:	e016      	b.n	8003680 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d107      	bne.n	8003670 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0208 	bic.w	r2, r2, #8
 800366e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	2220      	movs	r2, #32
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 808f 	beq.w	80037b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8087 	beq.w	80037b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	2220      	movs	r2, #32
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	d136      	bne.n	8003728 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0216 	bic.w	r2, r2, #22
 80036c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <HAL_DMA_IRQHandler+0x1da>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0208 	bic.w	r2, r2, #8
 80036f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	223f      	movs	r2, #63	; 0x3f
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	2b00      	cmp	r3, #0
 800371c:	d07e      	beq.n	800381c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
        }
        return;
 8003726:	e079      	b.n	800381c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01d      	beq.n	8003772 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10d      	bne.n	8003760 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	2b00      	cmp	r3, #0
 800374a:	d031      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
 8003754:	e02c      	b.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
 8003756:	bf00      	nop
 8003758:	20000008 	.word	0x20000008
 800375c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d023      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
 8003770:	e01e      	b.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0210 	bic.w	r2, r2, #16
 800378e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d032      	beq.n	800381e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d022      	beq.n	800380a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2205      	movs	r2, #5
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	3301      	adds	r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d307      	bcc.n	80037f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f2      	bne.n	80037dc <HAL_DMA_IRQHandler+0x2cc>
 80037f6:	e000      	b.n	80037fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
 800381a:	e000      	b.n	800381e <HAL_DMA_IRQHandler+0x30e>
        return;
 800381c:	bf00      	nop
    }
  }
}
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003840:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d108      	bne.n	8003864 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003862:	e007      	b.n	8003874 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	60da      	str	r2, [r3, #12]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	3b10      	subs	r3, #16
 8003890:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800389a:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <DMA_CalcBaseAndBitshift+0x68>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d909      	bls.n	80038c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	1d1a      	adds	r2, r3, #4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	659a      	str	r2, [r3, #88]	; 0x58
 80038c0:	e007      	b.n	80038d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	aaaaaaab 	.word	0xaaaaaaab
 80038e8:	0800a250 	.word	0x0800a250

080038ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d11f      	bne.n	8003946 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d856      	bhi.n	80039ba <DMA_CheckFifoParam+0xce>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <DMA_CheckFifoParam+0x28>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003925 	.word	0x08003925
 8003918:	08003937 	.word	0x08003937
 800391c:	08003925 	.word	0x08003925
 8003920:	080039bb 	.word	0x080039bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d046      	beq.n	80039be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003934:	e043      	b.n	80039be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800393e:	d140      	bne.n	80039c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003944:	e03d      	b.n	80039c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394e:	d121      	bne.n	8003994 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d837      	bhi.n	80039c6 <DMA_CheckFifoParam+0xda>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <DMA_CheckFifoParam+0x70>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	0800396d 	.word	0x0800396d
 8003960:	08003973 	.word	0x08003973
 8003964:	0800396d 	.word	0x0800396d
 8003968:	08003985 	.word	0x08003985
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      break;
 8003970:	e030      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d025      	beq.n	80039ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003982:	e022      	b.n	80039ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800398c:	d11f      	bne.n	80039ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003992:	e01c      	b.n	80039ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d903      	bls.n	80039a2 <DMA_CheckFifoParam+0xb6>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d003      	beq.n	80039a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039a0:	e018      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      break;
 80039a6:	e015      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00e      	beq.n	80039d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e00b      	b.n	80039d2 <DMA_CheckFifoParam+0xe6>
      break;
 80039ba:	bf00      	nop
 80039bc:	e00a      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
      break;
 80039be:	bf00      	nop
 80039c0:	e008      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
      break;
 80039c2:	bf00      	nop
 80039c4:	e006      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
 80039c8:	e004      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
      break;
 80039ca:	bf00      	nop
 80039cc:	e002      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <DMA_CheckFifoParam+0xe8>
      break;
 80039d2:	bf00      	nop
    }
  } 
  
  return status; 
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop

080039e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06c      	b.n	8003ad0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2223      	movs	r2, #35	; 0x23
 8003a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7fc ff29 	bl	8000860 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	4b31      	ldr	r3, [pc, #196]	; (8003ad8 <HAL_ETH_Init+0xf4>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <HAL_ETH_Init+0xf4>)
 8003a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <HAL_ETH_Init+0xf4>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_ETH_Init+0xf8>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4a2b      	ldr	r2, [pc, #172]	; (8003adc <HAL_ETH_Init+0xf8>)
 8003a30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a34:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <HAL_ETH_Init+0xf8>)
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4927      	ldr	r1, [pc, #156]	; (8003adc <HAL_ETH_Init+0xf8>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a44:	4b25      	ldr	r3, [pc, #148]	; (8003adc <HAL_ETH_Init+0xf8>)
 8003a46:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a60:	f7fe fd36 	bl	80024d0 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a66:	e011      	b.n	8003a8c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a68:	f7fe fd32 	bl	80024d0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a76:	d909      	bls.n	8003a8c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	22e0      	movs	r2, #224	; 0xe0
 8003a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e021      	b.n	8003ad0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e4      	bne.n	8003a68 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f958 	bl	8003d54 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f9ff 	bl	8003ea8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa55 	bl	8003f5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f9bd 	bl	8003e38 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2210      	movs	r2, #16
 8003aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40013800 	.word	0x40013800

08003ae0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <ETH_SetMACConfig+0x15c>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	7c1b      	ldrb	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <ETH_SetMACConfig+0x28>
 8003b02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b06:	e000      	b.n	8003b0a <ETH_SetMACConfig+0x2a>
 8003b08:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	7c5b      	ldrb	r3, [r3, #17]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <ETH_SetMACConfig+0x38>
 8003b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b16:	e000      	b.n	8003b1a <ETH_SetMACConfig+0x3a>
 8003b18:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b1a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	7fdb      	ldrb	r3, [r3, #31]
 8003b26:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b28:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	7f92      	ldrb	r2, [r2, #30]
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d102      	bne.n	8003b3e <ETH_SetMACConfig+0x5e>
 8003b38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b3c:	e000      	b.n	8003b40 <ETH_SetMACConfig+0x60>
 8003b3e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	7f1b      	ldrb	r3, [r3, #28]
 8003b46:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b48:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	791b      	ldrb	r3, [r3, #4]
 8003b54:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003b56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b5e:	2a00      	cmp	r2, #0
 8003b60:	d102      	bne.n	8003b68 <ETH_SetMACConfig+0x88>
 8003b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b66:	e000      	b.n	8003b6a <ETH_SetMACConfig+0x8a>
 8003b68:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	7bdb      	ldrb	r3, [r3, #15]
 8003b70:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b72:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b80:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b82:	4313      	orrs	r3, r2
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f7fe fca4 	bl	80024e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d101      	bne.n	8003bce <ETH_SetMACConfig+0xee>
 8003bca:	2280      	movs	r2, #128	; 0x80
 8003bcc:	e000      	b.n	8003bd0 <ETH_SetMACConfig+0xf0>
 8003bce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bd0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003bd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003bde:	2a01      	cmp	r2, #1
 8003be0:	d101      	bne.n	8003be6 <ETH_SetMACConfig+0x106>
 8003be2:	2208      	movs	r2, #8
 8003be4:	e000      	b.n	8003be8 <ETH_SetMACConfig+0x108>
 8003be6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003be8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003bf0:	2a01      	cmp	r2, #1
 8003bf2:	d101      	bne.n	8003bf8 <ETH_SetMACConfig+0x118>
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	e000      	b.n	8003bfa <ETH_SetMACConfig+0x11a>
 8003bf8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003bfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003c02:	2a01      	cmp	r2, #1
 8003c04:	d101      	bne.n	8003c0a <ETH_SetMACConfig+0x12a>
 8003c06:	2202      	movs	r2, #2
 8003c08:	e000      	b.n	8003c0c <ETH_SetMACConfig+0x12c>
 8003c0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fe fc5f 	bl	80024e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	619a      	str	r2, [r3, #24]
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	ff20810f 	.word	0xff20810f

08003c40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <ETH_SetDMAConfig+0x110>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	7b1b      	ldrb	r3, [r3, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <ETH_SetDMAConfig+0x2c>
 8003c66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c6a:	e000      	b.n	8003c6e <ETH_SetDMAConfig+0x2e>
 8003c6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	7b5b      	ldrb	r3, [r3, #13]
 8003c72:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c74:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	7f52      	ldrb	r2, [r2, #29]
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	d102      	bne.n	8003c84 <ETH_SetDMAConfig+0x44>
 8003c7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c82:	e000      	b.n	8003c86 <ETH_SetDMAConfig+0x46>
 8003c84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	7b9b      	ldrb	r3, [r3, #14]
 8003c8c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c8e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	7f1b      	ldrb	r3, [r3, #28]
 8003c9a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003c9c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	7f9b      	ldrb	r3, [r3, #30]
 8003ca2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ca4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003caa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cb2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7fe fc06 	bl	80024e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	791b      	ldrb	r3, [r3, #4]
 8003cee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003cf4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003cfa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d00:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d08:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d0a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d12:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d18:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d26:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d34:	2001      	movs	r0, #1
 8003d36:	f7fe fbd7 	bl	80024e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	f8de3f23 	.word	0xf8de3f23

08003d54 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b0a6      	sub	sp, #152	; 0x98
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d90:	2300      	movs	r3, #0
 8003d92:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003db6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fe86 	bl	8003ae0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003df6:	2300      	movs	r3, #0
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e08:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e14:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e24:	f107 0308 	add.w	r3, r7, #8
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ff08 	bl	8003c40 <ETH_SetDMAConfig>
}
 8003e30:	bf00      	nop
 8003e32:	3798      	adds	r7, #152	; 0x98
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3305      	adds	r3, #5
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	3204      	adds	r2, #4
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <ETH_MACAddressConfig+0x68>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3303      	adds	r3, #3
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	061a      	lsls	r2, r3, #24
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3301      	adds	r3, #1
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <ETH_MACAddressConfig+0x6c>)
 8003e8a:	4413      	add	r3, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	6013      	str	r3, [r2, #0]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40028040 	.word	0x40028040
 8003ea4:	40028044 	.word	0x40028044

08003ea8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e03e      	b.n	8003f34 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68d9      	ldr	r1, [r3, #12]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	440b      	add	r3, r1
 8003ec6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	3206      	adds	r2, #6
 8003ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d80c      	bhi.n	8003f18 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68d9      	ldr	r1, [r3, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	e004      	b.n	8003f22 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d9bd      	bls.n	8003eb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4c:	611a      	str	r2, [r3, #16]
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	e046      	b.n	8003ff6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6919      	ldr	r1, [r3, #16]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	440b      	add	r3, r1
 8003f78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2200      	movs	r2, #0
 8003f96:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003fac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	3212      	adds	r2, #18
 8003fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d80c      	bhi.n	8003fe6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6919      	ldr	r1, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	60da      	str	r2, [r3, #12]
 8003fe4:	e004      	b.n	8003ff0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d9b5      	bls.n	8003f68 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004026:	60da      	str	r2, [r3, #12]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	e177      	b.n	8004340 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004050:	2201      	movs	r2, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	429a      	cmp	r2, r3
 800406a:	f040 8166 	bne.w	800433a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b01      	cmp	r3, #1
 8004078:	d005      	beq.n	8004086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004082:	2b02      	cmp	r3, #2
 8004084:	d130      	bne.n	80040e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2203      	movs	r2, #3
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040bc:	2201      	movs	r2, #1
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 0201 	and.w	r2, r3, #1
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d017      	beq.n	8004124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	2203      	movs	r2, #3
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d123      	bne.n	8004178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	08da      	lsrs	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3208      	adds	r2, #8
 8004138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	220f      	movs	r2, #15
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	08da      	lsrs	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3208      	adds	r2, #8
 8004172:	69b9      	ldr	r1, [r7, #24]
 8004174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	2203      	movs	r2, #3
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0203 	and.w	r2, r3, #3
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80c0 	beq.w	800433a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_GPIO_Init+0x324>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_GPIO_Init+0x324>)
 80041c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041c8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ca:	4b63      	ldr	r3, [pc, #396]	; (8004358 <HAL_GPIO_Init+0x324>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041d6:	4a61      	ldr	r2, [pc, #388]	; (800435c <HAL_GPIO_Init+0x328>)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	089b      	lsrs	r3, r3, #2
 80041dc:	3302      	adds	r3, #2
 80041de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	220f      	movs	r2, #15
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a58      	ldr	r2, [pc, #352]	; (8004360 <HAL_GPIO_Init+0x32c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d037      	beq.n	8004272 <HAL_GPIO_Init+0x23e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a57      	ldr	r2, [pc, #348]	; (8004364 <HAL_GPIO_Init+0x330>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d031      	beq.n	800426e <HAL_GPIO_Init+0x23a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a56      	ldr	r2, [pc, #344]	; (8004368 <HAL_GPIO_Init+0x334>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d02b      	beq.n	800426a <HAL_GPIO_Init+0x236>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a55      	ldr	r2, [pc, #340]	; (800436c <HAL_GPIO_Init+0x338>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d025      	beq.n	8004266 <HAL_GPIO_Init+0x232>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a54      	ldr	r2, [pc, #336]	; (8004370 <HAL_GPIO_Init+0x33c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01f      	beq.n	8004262 <HAL_GPIO_Init+0x22e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a53      	ldr	r2, [pc, #332]	; (8004374 <HAL_GPIO_Init+0x340>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d019      	beq.n	800425e <HAL_GPIO_Init+0x22a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a52      	ldr	r2, [pc, #328]	; (8004378 <HAL_GPIO_Init+0x344>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_GPIO_Init+0x226>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a51      	ldr	r2, [pc, #324]	; (800437c <HAL_GPIO_Init+0x348>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00d      	beq.n	8004256 <HAL_GPIO_Init+0x222>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a50      	ldr	r2, [pc, #320]	; (8004380 <HAL_GPIO_Init+0x34c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <HAL_GPIO_Init+0x21e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a4f      	ldr	r2, [pc, #316]	; (8004384 <HAL_GPIO_Init+0x350>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_GPIO_Init+0x21a>
 800424a:	2309      	movs	r3, #9
 800424c:	e012      	b.n	8004274 <HAL_GPIO_Init+0x240>
 800424e:	230a      	movs	r3, #10
 8004250:	e010      	b.n	8004274 <HAL_GPIO_Init+0x240>
 8004252:	2308      	movs	r3, #8
 8004254:	e00e      	b.n	8004274 <HAL_GPIO_Init+0x240>
 8004256:	2307      	movs	r3, #7
 8004258:	e00c      	b.n	8004274 <HAL_GPIO_Init+0x240>
 800425a:	2306      	movs	r3, #6
 800425c:	e00a      	b.n	8004274 <HAL_GPIO_Init+0x240>
 800425e:	2305      	movs	r3, #5
 8004260:	e008      	b.n	8004274 <HAL_GPIO_Init+0x240>
 8004262:	2304      	movs	r3, #4
 8004264:	e006      	b.n	8004274 <HAL_GPIO_Init+0x240>
 8004266:	2303      	movs	r3, #3
 8004268:	e004      	b.n	8004274 <HAL_GPIO_Init+0x240>
 800426a:	2302      	movs	r3, #2
 800426c:	e002      	b.n	8004274 <HAL_GPIO_Init+0x240>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_GPIO_Init+0x240>
 8004272:	2300      	movs	r3, #0
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	f002 0203 	and.w	r2, r2, #3
 800427a:	0092      	lsls	r2, r2, #2
 800427c:	4093      	lsls	r3, r2
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004284:	4935      	ldr	r1, [pc, #212]	; (800435c <HAL_GPIO_Init+0x328>)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	3302      	adds	r3, #2
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004292:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <HAL_GPIO_Init+0x354>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042b6:	4a34      	ldr	r2, [pc, #208]	; (8004388 <HAL_GPIO_Init+0x354>)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042bc:	4b32      	ldr	r3, [pc, #200]	; (8004388 <HAL_GPIO_Init+0x354>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042e0:	4a29      	ldr	r2, [pc, #164]	; (8004388 <HAL_GPIO_Init+0x354>)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042e6:	4b28      	ldr	r3, [pc, #160]	; (8004388 <HAL_GPIO_Init+0x354>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800430a:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <HAL_GPIO_Init+0x354>)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_GPIO_Init+0x354>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <HAL_GPIO_Init+0x354>)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3301      	adds	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b0f      	cmp	r3, #15
 8004344:	f67f ae84 	bls.w	8004050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3724      	adds	r7, #36	; 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
 800435c:	40013800 	.word	0x40013800
 8004360:	40020000 	.word	0x40020000
 8004364:	40020400 	.word	0x40020400
 8004368:	40020800 	.word	0x40020800
 800436c:	40020c00 	.word	0x40020c00
 8004370:	40021000 	.word	0x40021000
 8004374:	40021400 	.word	0x40021400
 8004378:	40021800 	.word	0x40021800
 800437c:	40021c00 	.word	0x40021c00
 8004380:	40022000 	.word	0x40022000
 8004384:	40022400 	.word	0x40022400
 8004388:	40013c00 	.word	0x40013c00

0800438c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e001      	b.n	80043ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
 80043c8:	4613      	mov	r3, r2
 80043ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043cc:	787b      	ldrb	r3, [r7, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043d8:	e003      	b.n	80043e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	041a      	lsls	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004400:	887a      	ldrh	r2, [r7, #2]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4013      	ands	r3, r2
 8004406:	041a      	lsls	r2, r3, #16
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	43d9      	mvns	r1, r3
 800440c:	887b      	ldrh	r3, [r7, #2]
 800440e:	400b      	ands	r3, r1
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	619a      	str	r2, [r3, #24]
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d006      	beq.n	8004448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800443a:	4a05      	ldr	r2, [pc, #20]	; (8004450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd f9ba 	bl	80017bc <HAL_GPIO_EXTI_Callback>
  }
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40013c00 	.word	0x40013c00

08004454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e12b      	b.n	80046be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc fbb2 	bl	8000be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044b8:	f001 fb4e 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 80044bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4a81      	ldr	r2, [pc, #516]	; (80046c8 <HAL_I2C_Init+0x274>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d807      	bhi.n	80044d8 <HAL_I2C_Init+0x84>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a80      	ldr	r2, [pc, #512]	; (80046cc <HAL_I2C_Init+0x278>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bf94      	ite	ls
 80044d0:	2301      	movls	r3, #1
 80044d2:	2300      	movhi	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e006      	b.n	80044e6 <HAL_I2C_Init+0x92>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a7d      	ldr	r2, [pc, #500]	; (80046d0 <HAL_I2C_Init+0x27c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	bf94      	ite	ls
 80044e0:	2301      	movls	r3, #1
 80044e2:	2300      	movhi	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0e7      	b.n	80046be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a78      	ldr	r2, [pc, #480]	; (80046d4 <HAL_I2C_Init+0x280>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a6a      	ldr	r2, [pc, #424]	; (80046c8 <HAL_I2C_Init+0x274>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d802      	bhi.n	8004528 <HAL_I2C_Init+0xd4>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3301      	adds	r3, #1
 8004526:	e009      	b.n	800453c <HAL_I2C_Init+0xe8>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	4a69      	ldr	r2, [pc, #420]	; (80046d8 <HAL_I2C_Init+0x284>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	3301      	adds	r3, #1
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800454e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	495c      	ldr	r1, [pc, #368]	; (80046c8 <HAL_I2C_Init+0x274>)
 8004558:	428b      	cmp	r3, r1
 800455a:	d819      	bhi.n	8004590 <HAL_I2C_Init+0x13c>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1e59      	subs	r1, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fbb1 f3f3 	udiv	r3, r1, r3
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004570:	400b      	ands	r3, r1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_I2C_Init+0x138>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1e59      	subs	r1, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fbb1 f3f3 	udiv	r3, r1, r3
 8004584:	3301      	adds	r3, #1
 8004586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458a:	e051      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 800458c:	2304      	movs	r3, #4
 800458e:	e04f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d111      	bne.n	80045bc <HAL_I2C_Init+0x168>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1e58      	subs	r0, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	440b      	add	r3, r1
 80045a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045aa:	3301      	adds	r3, #1
 80045ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e012      	b.n	80045e2 <HAL_I2C_Init+0x18e>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1e58      	subs	r0, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	0099      	lsls	r1, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d2:	3301      	adds	r3, #1
 80045d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Init+0x196>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e022      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <HAL_I2C_Init+0x1bc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e58      	subs	r0, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	440b      	add	r3, r1
 8004600:	fbb0 f3f3 	udiv	r3, r0, r3
 8004604:	3301      	adds	r3, #1
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	e00f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1e58      	subs	r0, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	0099      	lsls	r1, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	6809      	ldr	r1, [r1, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800465e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6911      	ldr	r1, [r2, #16]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68d2      	ldr	r2, [r2, #12]
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	430b      	orrs	r3, r1
 8004672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	000186a0 	.word	0x000186a0
 80046cc:	001e847f 	.word	0x001e847f
 80046d0:	003d08ff 	.word	0x003d08ff
 80046d4:	431bde83 	.word	0x431bde83
 80046d8:	10624dd3 	.word	0x10624dd3

080046dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	461a      	mov	r2, r3
 80046e8:	460b      	mov	r3, r1
 80046ea:	817b      	strh	r3, [r7, #10]
 80046ec:	4613      	mov	r3, r2
 80046ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046f0:	f7fd feee 	bl	80024d0 <HAL_GetTick>
 80046f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b20      	cmp	r3, #32
 8004700:	f040 80e0 	bne.w	80048c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2319      	movs	r3, #25
 800470a:	2201      	movs	r2, #1
 800470c:	4970      	ldr	r1, [pc, #448]	; (80048d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa92 	bl	8004c38 <I2C_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
 800471c:	e0d3      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_I2C_Master_Transmit+0x50>
 8004728:	2302      	movs	r3, #2
 800472a:	e0cc      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d007      	beq.n	8004752 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004760:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2221      	movs	r2, #33	; 0x21
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2210      	movs	r2, #16
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	893a      	ldrh	r2, [r7, #8]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a50      	ldr	r2, [pc, #320]	; (80048d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004794:	8979      	ldrh	r1, [r7, #10]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f9ca 	bl	8004b34 <I2C_MasterRequestWrite>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e08d      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047c0:	e066      	b.n	8004890 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	6a39      	ldr	r1, [r7, #32]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fb0c 	bl	8004de4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d107      	bne.n	80047ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06b      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d11b      	bne.n	8004864 <HAL_I2C_Master_Transmit+0x188>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d017      	beq.n	8004864 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	781a      	ldrb	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	6a39      	ldr	r1, [r7, #32]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fafc 	bl	8004e66 <I2C_WaitOnBTFFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	2b04      	cmp	r3, #4
 800487a:	d107      	bne.n	800488c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e01a      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d194      	bne.n	80047c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	00100002 	.word	0x00100002
 80048d4:	ffff0000 	.word	0xffff0000

080048d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	460b      	mov	r3, r1
 80048e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80048e8:	f7fd fdf2 	bl	80024d0 <HAL_GetTick>
 80048ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	f040 8111 	bne.w	8004b22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2319      	movs	r3, #25
 8004906:	2201      	movs	r2, #1
 8004908:	4988      	ldr	r1, [pc, #544]	; (8004b2c <HAL_I2C_IsDeviceReady+0x254>)
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f994 	bl	8004c38 <I2C_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
 8004918:	e104      	b.n	8004b24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_I2C_IsDeviceReady+0x50>
 8004924:	2302      	movs	r3, #2
 8004926:	e0fd      	b.n	8004b24 <HAL_I2C_IsDeviceReady+0x24c>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d007      	beq.n	800494e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2224      	movs	r2, #36	; 0x24
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a70      	ldr	r2, [pc, #448]	; (8004b30 <HAL_I2C_IsDeviceReady+0x258>)
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004980:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2200      	movs	r2, #0
 800498a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f952 	bl	8004c38 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d103      	bne.n	80049b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0b6      	b.n	8004b24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80049c6:	f7fd fd83 	bl	80024d0 <HAL_GetTick>
 80049ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	bf0c      	ite	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	2300      	movne	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f0:	bf0c      	ite	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	2300      	movne	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049fa:	e025      	b.n	8004a48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049fc:	f7fd fd68 	bl	80024d0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <HAL_I2C_IsDeviceReady+0x13a>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	22a0      	movs	r2, #160	; 0xa0
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2ba0      	cmp	r3, #160	; 0xa0
 8004a52:	d005      	beq.n	8004a60 <HAL_I2C_IsDeviceReady+0x188>
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_I2C_IsDeviceReady+0x188>
 8004a5a:	7dbb      	ldrb	r3, [r7, #22]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0cd      	beq.n	80049fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d129      	bne.n	8004aca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2319      	movs	r3, #25
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	4921      	ldr	r1, [pc, #132]	; (8004b2c <HAL_I2C_IsDeviceReady+0x254>)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f8c6 	bl	8004c38 <I2C_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e036      	b.n	8004b24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e02c      	b.n	8004b24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ae2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2319      	movs	r3, #25
 8004aea:	2201      	movs	r2, #1
 8004aec:	490f      	ldr	r1, [pc, #60]	; (8004b2c <HAL_I2C_IsDeviceReady+0x254>)
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8a2 	bl	8004c38 <I2C_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e012      	b.n	8004b24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	3301      	adds	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	f4ff af32 	bcc.w	8004972 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	00100002 	.word	0x00100002
 8004b30:	ffff0000 	.word	0xffff0000

08004b34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	460b      	mov	r3, r1
 8004b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d006      	beq.n	8004b5e <I2C_MasterRequestWrite+0x2a>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d003      	beq.n	8004b5e <I2C_MasterRequestWrite+0x2a>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b5c:	d108      	bne.n	8004b70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e00b      	b.n	8004b88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	2b12      	cmp	r3, #18
 8004b76:	d107      	bne.n	8004b88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f84f 	bl	8004c38 <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d103      	bne.n	8004bb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e035      	b.n	8004c28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc4:	d108      	bne.n	8004bd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bc6:	897b      	ldrh	r3, [r7, #10]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bd4:	611a      	str	r2, [r3, #16]
 8004bd6:	e01b      	b.n	8004c10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bd8:	897b      	ldrh	r3, [r7, #10]
 8004bda:	11db      	asrs	r3, r3, #7
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 0306 	and.w	r3, r3, #6
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f063 030f 	orn	r3, r3, #15
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	490e      	ldr	r1, [pc, #56]	; (8004c30 <I2C_MasterRequestWrite+0xfc>)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f875 	bl	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e010      	b.n	8004c28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c06:	897b      	ldrh	r3, [r7, #10]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4907      	ldr	r1, [pc, #28]	; (8004c34 <I2C_MasterRequestWrite+0x100>)
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f865 	bl	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	00010008 	.word	0x00010008
 8004c34:	00010002 	.word	0x00010002

08004c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c48:	e025      	b.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d021      	beq.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c52:	f7fd fc3d 	bl	80024d0 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d302      	bcc.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d116      	bne.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f043 0220 	orr.w	r2, r3, #32
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e023      	b.n	8004cde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10d      	bne.n	8004cbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	43da      	mvns	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4013      	ands	r3, r2
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	e00c      	b.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d0b6      	beq.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf4:	e051      	b.n	8004d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d04:	d123      	bne.n	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f043 0204 	orr.w	r2, r3, #4
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e046      	b.n	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d021      	beq.n	8004d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fd fbbb 	bl	80024d0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d116      	bne.n	8004d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e020      	b.n	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10c      	bne.n	8004dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	43da      	mvns	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4013      	ands	r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf14      	ite	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	2300      	moveq	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	e00b      	b.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d18d      	bne.n	8004cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df0:	e02d      	b.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f878 	bl	8004ee8 <I2C_IsAcknowledgeFailed>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e02d      	b.n	8004e5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d021      	beq.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fd fb61 	bl	80024d0 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d116      	bne.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f043 0220 	orr.w	r2, r3, #32
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e007      	b.n	8004e5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e58:	2b80      	cmp	r3, #128	; 0x80
 8004e5a:	d1ca      	bne.n	8004df2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e72:	e02d      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f837 	bl	8004ee8 <I2C_IsAcknowledgeFailed>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e02d      	b.n	8004ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d021      	beq.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8c:	f7fd fb20 	bl	80024d0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d116      	bne.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	f043 0220 	orr.w	r2, r3, #32
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e007      	b.n	8004ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d1ca      	bne.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efe:	d11b      	bne.n	8004f38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f043 0204 	orr.w	r2, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d129      	bne.n	8004fb0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0210 	bic.w	r2, r2, #16
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d12a      	bne.n	800502e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ff8:	89fb      	ldrh	r3, [r7, #14]
 8004ffa:	f023 030f 	bic.w	r3, r3, #15
 8004ffe:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	b29a      	uxth	r2, r3
 8005004:	89fb      	ldrh	r3, [r7, #14]
 8005006:	4313      	orrs	r3, r2
 8005008:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	89fa      	ldrh	r2, [r7, #14]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
  }
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800503c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503e:	b08f      	sub	sp, #60	; 0x3c
 8005040:	af0a      	add	r7, sp, #40	; 0x28
 8005042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e10f      	b.n	800526e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fd f947 	bl	80022fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2203      	movs	r2, #3
 8005072:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f003 fb9c 	bl	80087ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	687e      	ldr	r6, [r7, #4]
 800509a:	466d      	mov	r5, sp
 800509c:	f106 0410 	add.w	r4, r6, #16
 80050a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80050b0:	1d33      	adds	r3, r6, #4
 80050b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050b4:	6838      	ldr	r0, [r7, #0]
 80050b6:	f003 fb27 	bl	8008708 <USB_CoreInit>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0d0      	b.n	800526e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f003 fb8a 	bl	80087ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050d8:	2300      	movs	r3, #0
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	e04a      	b.n	8005174 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050de:	7bfa      	ldrb	r2, [r7, #15]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	333d      	adds	r3, #61	; 0x3d
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	333c      	adds	r3, #60	; 0x3c
 8005102:	7bfa      	ldrb	r2, [r7, #15]
 8005104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	b298      	uxth	r0, r3
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	3344      	adds	r3, #68	; 0x44
 800511a:	4602      	mov	r2, r0
 800511c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800511e:	7bfa      	ldrb	r2, [r7, #15]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	3340      	adds	r3, #64	; 0x40
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005132:	7bfa      	ldrb	r2, [r7, #15]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3348      	adds	r3, #72	; 0x48
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	334c      	adds	r3, #76	; 0x4c
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800515a:	7bfa      	ldrb	r2, [r7, #15]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	3354      	adds	r3, #84	; 0x54
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	3301      	adds	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3af      	bcc.n	80050de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	e044      	b.n	800520e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051ac:	7bfa      	ldrb	r2, [r7, #15]
 80051ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051b0:	7bfa      	ldrb	r2, [r7, #15]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	3301      	adds	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d3b5      	bcc.n	8005184 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	687e      	ldr	r6, [r7, #4]
 8005220:	466d      	mov	r5, sp
 8005222:	f106 0410 	add.w	r4, r6, #16
 8005226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800522a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800522c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800522e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005232:	e885 0003 	stmia.w	r5, {r0, r1}
 8005236:	1d33      	adds	r3, r6, #4
 8005238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800523a:	6838      	ldr	r0, [r7, #0]
 800523c:	f003 fb22 	bl	8008884 <USB_DevInit>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e00d      	b.n	800526e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f003 fced 	bl	8008c46 <USB_DevDisconnect>

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e267      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d075      	beq.n	8005382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005296:	4b88      	ldr	r3, [pc, #544]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d00c      	beq.n	80052bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a2:	4b85      	ldr	r3, [pc, #532]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d112      	bne.n	80052d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ae:	4b82      	ldr	r3, [pc, #520]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ba:	d10b      	bne.n	80052d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052bc:	4b7e      	ldr	r3, [pc, #504]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d05b      	beq.n	8005380 <HAL_RCC_OscConfig+0x108>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d157      	bne.n	8005380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e242      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052dc:	d106      	bne.n	80052ec <HAL_RCC_OscConfig+0x74>
 80052de:	4b76      	ldr	r3, [pc, #472]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a75      	ldr	r2, [pc, #468]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e01d      	b.n	8005328 <HAL_RCC_OscConfig+0xb0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0x98>
 80052f6:	4b70      	ldr	r3, [pc, #448]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a6f      	ldr	r2, [pc, #444]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80052fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b6d      	ldr	r3, [pc, #436]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a6c      	ldr	r2, [pc, #432]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e00b      	b.n	8005328 <HAL_RCC_OscConfig+0xb0>
 8005310:	4b69      	ldr	r3, [pc, #420]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a68      	ldr	r2, [pc, #416]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a65      	ldr	r2, [pc, #404]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005330:	f7fd f8ce 	bl	80024d0 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005338:	f7fd f8ca 	bl	80024d0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e207      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	4b5b      	ldr	r3, [pc, #364]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0xc0>
 8005356:	e014      	b.n	8005382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fd f8ba 	bl	80024d0 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005360:	f7fd f8b6 	bl	80024d0 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e1f3      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005372:	4b51      	ldr	r3, [pc, #324]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0xe8>
 800537e:	e000      	b.n	8005382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d063      	beq.n	8005456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800538e:	4b4a      	ldr	r3, [pc, #296]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00b      	beq.n	80053b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539a:	4b47      	ldr	r3, [pc, #284]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d11c      	bne.n	80053e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a6:	4b44      	ldr	r3, [pc, #272]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d116      	bne.n	80053e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b2:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_RCC_OscConfig+0x152>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d001      	beq.n	80053ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e1c7      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ca:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4937      	ldr	r1, [pc, #220]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053de:	e03a      	b.n	8005456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d020      	beq.n	800542a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e8:	4b34      	ldr	r3, [pc, #208]	; (80054bc <HAL_RCC_OscConfig+0x244>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ee:	f7fd f86f 	bl	80024d0 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f6:	f7fd f86b 	bl	80024d0 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1a8      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005408:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4925      	ldr	r1, [pc, #148]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]
 8005428:	e015      	b.n	8005456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542a:	4b24      	ldr	r3, [pc, #144]	; (80054bc <HAL_RCC_OscConfig+0x244>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fd f84e 	bl	80024d0 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005438:	f7fd f84a 	bl	80024d0 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e187      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d036      	beq.n	80054d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546a:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <HAL_RCC_OscConfig+0x248>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fd f82e 	bl	80024d0 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005478:	f7fd f82a 	bl	80024d0 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e167      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCC_OscConfig+0x240>)
 800548c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x200>
 8005496:	e01b      	b.n	80054d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_OscConfig+0x248>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549e:	f7fd f817 	bl	80024d0 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a4:	e00e      	b.n	80054c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a6:	f7fd f813 	bl	80024d0 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d907      	bls.n	80054c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e150      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
 80054b8:	40023800 	.word	0x40023800
 80054bc:	42470000 	.word	0x42470000
 80054c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c4:	4b88      	ldr	r3, [pc, #544]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80054c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ea      	bne.n	80054a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8097 	beq.w	800560c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e2:	4b81      	ldr	r3, [pc, #516]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6413      	str	r3, [r2, #64]	; 0x40
 80054fe:	4b7a      	ldr	r3, [pc, #488]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800550a:	2301      	movs	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	4b77      	ldr	r3, [pc, #476]	; (80056ec <HAL_RCC_OscConfig+0x474>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d118      	bne.n	800554c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800551a:	4b74      	ldr	r3, [pc, #464]	; (80056ec <HAL_RCC_OscConfig+0x474>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a73      	ldr	r2, [pc, #460]	; (80056ec <HAL_RCC_OscConfig+0x474>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005526:	f7fc ffd3 	bl	80024d0 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552e:	f7fc ffcf 	bl	80024d0 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e10c      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005540:	4b6a      	ldr	r3, [pc, #424]	; (80056ec <HAL_RCC_OscConfig+0x474>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d106      	bne.n	8005562 <HAL_RCC_OscConfig+0x2ea>
 8005554:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	4a63      	ldr	r2, [pc, #396]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	6713      	str	r3, [r2, #112]	; 0x70
 8005560:	e01c      	b.n	800559c <HAL_RCC_OscConfig+0x324>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b05      	cmp	r3, #5
 8005568:	d10c      	bne.n	8005584 <HAL_RCC_OscConfig+0x30c>
 800556a:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4a5e      	ldr	r2, [pc, #376]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005570:	f043 0304 	orr.w	r3, r3, #4
 8005574:	6713      	str	r3, [r2, #112]	; 0x70
 8005576:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	4a5b      	ldr	r2, [pc, #364]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	6713      	str	r3, [r2, #112]	; 0x70
 8005582:	e00b      	b.n	800559c <HAL_RCC_OscConfig+0x324>
 8005584:	4b58      	ldr	r3, [pc, #352]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	4a57      	ldr	r2, [pc, #348]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	6713      	str	r3, [r2, #112]	; 0x70
 8005590:	4b55      	ldr	r3, [pc, #340]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	4a54      	ldr	r2, [pc, #336]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005596:	f023 0304 	bic.w	r3, r3, #4
 800559a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d015      	beq.n	80055d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a4:	f7fc ff94 	bl	80024d0 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055aa:	e00a      	b.n	80055c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ac:	f7fc ff90 	bl	80024d0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e0cb      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c2:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0ee      	beq.n	80055ac <HAL_RCC_OscConfig+0x334>
 80055ce:	e014      	b.n	80055fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d0:	f7fc ff7e 	bl	80024d0 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fc ff7a 	bl	80024d0 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e0b5      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ee:	4b3e      	ldr	r3, [pc, #248]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1ee      	bne.n	80055d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d105      	bne.n	800560c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005600:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	4a38      	ldr	r2, [pc, #224]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80a1 	beq.w	8005758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005616:	4b34      	ldr	r3, [pc, #208]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	2b08      	cmp	r3, #8
 8005620:	d05c      	beq.n	80056dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d141      	bne.n	80056ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562a:	4b31      	ldr	r3, [pc, #196]	; (80056f0 <HAL_RCC_OscConfig+0x478>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fc ff4e 	bl	80024d0 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005638:	f7fc ff4a 	bl	80024d0 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e087      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564a:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f0      	bne.n	8005638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	3b01      	subs	r3, #1
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	061b      	lsls	r3, r3, #24
 800567a:	491b      	ldr	r1, [pc, #108]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 800567c:	4313      	orrs	r3, r2
 800567e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_RCC_OscConfig+0x478>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005686:	f7fc ff23 	bl	80024d0 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800568e:	f7fc ff1f 	bl	80024d0 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e05c      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a0:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x416>
 80056ac:	e054      	b.n	8005758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ae:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <HAL_RCC_OscConfig+0x478>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b4:	f7fc ff0c 	bl	80024d0 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056bc:	f7fc ff08 	bl	80024d0 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e045      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_RCC_OscConfig+0x470>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x444>
 80056da:	e03d      	b.n	8005758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e038      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
 80056e8:	40023800 	.word	0x40023800
 80056ec:	40007000 	.word	0x40007000
 80056f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056f4:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <HAL_RCC_OscConfig+0x4ec>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d028      	beq.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d121      	bne.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d11a      	bne.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005724:	4013      	ands	r3, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800572a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800572c:	4293      	cmp	r3, r2
 800572e:	d111      	bne.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	3b01      	subs	r3, #1
 800573e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	d107      	bne.n	8005754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40023800 	.word	0x40023800

08005768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0cc      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800577c:	4b68      	ldr	r3, [pc, #416]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d90c      	bls.n	80057a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578a:	4b65      	ldr	r3, [pc, #404]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0b8      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057bc:	4b59      	ldr	r3, [pc, #356]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4a58      	ldr	r2, [pc, #352]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057d4:	4b53      	ldr	r3, [pc, #332]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4a52      	ldr	r2, [pc, #328]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e0:	4b50      	ldr	r3, [pc, #320]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	494d      	ldr	r1, [pc, #308]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d044      	beq.n	8005888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d107      	bne.n	8005816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d119      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e07f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d003      	beq.n	8005826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005822:	2b03      	cmp	r3, #3
 8005824:	d107      	bne.n	8005836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005826:	4b3f      	ldr	r3, [pc, #252]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005836:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e067      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005846:	4b37      	ldr	r3, [pc, #220]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 0203 	bic.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4934      	ldr	r1, [pc, #208]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005858:	f7fc fe3a 	bl	80024d0 <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	e00a      	b.n	8005876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005860:	f7fc fe36 	bl	80024d0 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	; 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e04f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005876:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 020c 	and.w	r2, r3, #12
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	429a      	cmp	r2, r3
 8005886:	d1eb      	bne.n	8005860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005888:	4b25      	ldr	r3, [pc, #148]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d20c      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b22      	ldr	r3, [pc, #136]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589e:	4b20      	ldr	r3, [pc, #128]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e032      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4916      	ldr	r1, [pc, #88]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058da:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	490e      	ldr	r1, [pc, #56]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ee:	f000 f821 	bl	8005934 <HAL_RCC_GetSysClockFreq>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	490a      	ldr	r1, [pc, #40]	; (8005928 <HAL_RCC_ClockConfig+0x1c0>)
 8005900:	5ccb      	ldrb	r3, [r1, r3]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <HAL_RCC_ClockConfig+0x1c4>)
 8005908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_ClockConfig+0x1c8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fc fd9a 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40023c00 	.word	0x40023c00
 8005924:	40023800 	.word	0x40023800
 8005928:	0800a238 	.word	0x0800a238
 800592c:	20000008 	.word	0x20000008
 8005930:	2000000c 	.word	0x2000000c

08005934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005938:	b094      	sub	sp, #80	; 0x50
 800593a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	647b      	str	r3, [r7, #68]	; 0x44
 8005940:	2300      	movs	r3, #0
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005944:	2300      	movs	r3, #0
 8005946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800594c:	4b79      	ldr	r3, [pc, #484]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 030c 	and.w	r3, r3, #12
 8005954:	2b08      	cmp	r3, #8
 8005956:	d00d      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x40>
 8005958:	2b08      	cmp	r3, #8
 800595a:	f200 80e1 	bhi.w	8005b20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0x34>
 8005962:	2b04      	cmp	r3, #4
 8005964:	d003      	beq.n	800596e <HAL_RCC_GetSysClockFreq+0x3a>
 8005966:	e0db      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005968:	4b73      	ldr	r3, [pc, #460]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x204>)
 800596a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800596c:	e0db      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800596e:	4b73      	ldr	r3, [pc, #460]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x208>)
 8005970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005972:	e0d8      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005974:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800597e:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d063      	beq.n	8005a52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598a:	4b6a      	ldr	r3, [pc, #424]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	2200      	movs	r2, #0
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
 8005994:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599c:	633b      	str	r3, [r7, #48]	; 0x30
 800599e:	2300      	movs	r3, #0
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
 80059a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059a6:	4622      	mov	r2, r4
 80059a8:	462b      	mov	r3, r5
 80059aa:	f04f 0000 	mov.w	r0, #0
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	0159      	lsls	r1, r3, #5
 80059b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b8:	0150      	lsls	r0, r2, #5
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4621      	mov	r1, r4
 80059c0:	1a51      	subs	r1, r2, r1
 80059c2:	6139      	str	r1, [r7, #16]
 80059c4:	4629      	mov	r1, r5
 80059c6:	eb63 0301 	sbc.w	r3, r3, r1
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d8:	4659      	mov	r1, fp
 80059da:	018b      	lsls	r3, r1, #6
 80059dc:	4651      	mov	r1, sl
 80059de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059e2:	4651      	mov	r1, sl
 80059e4:	018a      	lsls	r2, r1, #6
 80059e6:	4651      	mov	r1, sl
 80059e8:	ebb2 0801 	subs.w	r8, r2, r1
 80059ec:	4659      	mov	r1, fp
 80059ee:	eb63 0901 	sbc.w	r9, r3, r1
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a06:	4690      	mov	r8, r2
 8005a08:	4699      	mov	r9, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	eb18 0303 	adds.w	r3, r8, r3
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	462b      	mov	r3, r5
 8005a14:	eb49 0303 	adc.w	r3, r9, r3
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a26:	4629      	mov	r1, r5
 8005a28:	024b      	lsls	r3, r1, #9
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a30:	4621      	mov	r1, r4
 8005a32:	024a      	lsls	r2, r1, #9
 8005a34:	4610      	mov	r0, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a44:	f7fa fc2c 	bl	80002a0 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a50:	e058      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a52:	4b38      	ldr	r3, [pc, #224]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a62:	623b      	str	r3, [r7, #32]
 8005a64:	2300      	movs	r3, #0
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
 8005a68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	f04f 0000 	mov.w	r0, #0
 8005a74:	f04f 0100 	mov.w	r1, #0
 8005a78:	0159      	lsls	r1, r3, #5
 8005a7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a7e:	0150      	lsls	r0, r2, #5
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4641      	mov	r1, r8
 8005a86:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005aa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005aa4:	ebb2 040a 	subs.w	r4, r2, sl
 8005aa8:	eb63 050b 	sbc.w	r5, r3, fp
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	00eb      	lsls	r3, r5, #3
 8005ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aba:	00e2      	lsls	r2, r4, #3
 8005abc:	4614      	mov	r4, r2
 8005abe:	461d      	mov	r5, r3
 8005ac0:	4643      	mov	r3, r8
 8005ac2:	18e3      	adds	r3, r4, r3
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	eb45 0303 	adc.w	r3, r5, r3
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ada:	4629      	mov	r1, r5
 8005adc:	028b      	lsls	r3, r1, #10
 8005ade:	4621      	mov	r1, r4
 8005ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	028a      	lsls	r2, r1, #10
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4619      	mov	r1, r3
 8005aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aee:	2200      	movs	r2, #0
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	61fa      	str	r2, [r7, #28]
 8005af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005af8:	f7fa fbd2 	bl	80002a0 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4613      	mov	r3, r2
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b1e:	e002      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3750      	adds	r7, #80	; 0x50
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800
 8005b38:	00f42400 	.word	0x00f42400
 8005b3c:	007a1200 	.word	0x007a1200

08005b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b46:	681b      	ldr	r3, [r3, #0]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000008 	.word	0x20000008

08005b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b5c:	f7ff fff0 	bl	8005b40 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0a9b      	lsrs	r3, r3, #10
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4903      	ldr	r1, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	0800a248 	.word	0x0800a248

08005b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b84:	f7ff ffdc 	bl	8005b40 <HAL_RCC_GetHCLKFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	0b5b      	lsrs	r3, r3, #13
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4903      	ldr	r1, [pc, #12]	; (8005ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	0800a248 	.word	0x0800a248

08005ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10b      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d075      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bdc:	4b91      	ldr	r3, [pc, #580]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005be2:	f7fc fc75 	bl	80024d0 <HAL_GetTick>
 8005be6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005be8:	e008      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bea:	f7fc fc71 	bl	80024d0 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e189      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bfc:	4b8a      	ldr	r3, [pc, #552]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f0      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	019a      	lsls	r2, r3, #6
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	071b      	lsls	r3, r3, #28
 8005c20:	4981      	ldr	r1, [pc, #516]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01f      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c34:	4b7c      	ldr	r3, [pc, #496]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3a:	0f1b      	lsrs	r3, r3, #28
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	019a      	lsls	r2, r3, #6
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	071b      	lsls	r3, r3, #28
 8005c54:	4974      	ldr	r1, [pc, #464]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c5c:	4b72      	ldr	r3, [pc, #456]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c62:	f023 021f 	bic.w	r2, r3, #31
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	496e      	ldr	r1, [pc, #440]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	019a      	lsls	r2, r3, #6
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	061b      	lsls	r3, r3, #24
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	071b      	lsls	r3, r3, #28
 8005c94:	4964      	ldr	r1, [pc, #400]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c9c:	4b61      	ldr	r3, [pc, #388]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca2:	f7fc fc15 	bl	80024d0 <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005caa:	f7fc fc11 	bl	80024d0 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e129      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cbc:	4b5a      	ldr	r3, [pc, #360]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d105      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d079      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ce0:	4b52      	ldr	r3, [pc, #328]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ce6:	f7fc fbf3 	bl	80024d0 <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cec:	e008      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005cee:	f7fc fbef 	bl	80024d0 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e107      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d00:	4b49      	ldr	r3, [pc, #292]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d0c:	d0ef      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d020      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d1a:	4b43      	ldr	r3, [pc, #268]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d20:	0f1b      	lsrs	r3, r3, #28
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	019a      	lsls	r2, r3, #6
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	061b      	lsls	r3, r3, #24
 8005d34:	431a      	orrs	r2, r3
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	071b      	lsls	r3, r3, #28
 8005d3a:	493b      	ldr	r1, [pc, #236]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d42:	4b39      	ldr	r3, [pc, #228]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	4934      	ldr	r1, [pc, #208]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01e      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d68:	4b2f      	ldr	r3, [pc, #188]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6e:	0e1b      	lsrs	r3, r3, #24
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	019a      	lsls	r2, r3, #6
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	061b      	lsls	r3, r3, #24
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	071b      	lsls	r3, r3, #28
 8005d88:	4927      	ldr	r1, [pc, #156]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d90:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	4922      	ldr	r1, [pc, #136]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005da6:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dac:	f7fc fb90 	bl	80024d0 <HAL_GetTick>
 8005db0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005db4:	f7fc fb8c 	bl	80024d0 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e0a4      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dc6:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd2:	d1ef      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 808b 	beq.w	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	4a0f      	ldr	r2, [pc, #60]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df0:	6413      	str	r3, [r2, #64]	; 0x40
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a0b      	ldr	r2, [pc, #44]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e0a:	f7fc fb61 	bl	80024d0 <HAL_GetTick>
 8005e0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e10:	e010      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e12:	f7fc fb5d 	bl	80024d0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d909      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e075      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005e24:	42470068 	.word	0x42470068
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	42470070 	.word	0x42470070
 8005e30:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e34:	4b38      	ldr	r3, [pc, #224]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0e8      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e40:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d02f      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d028      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e5e:	4b2f      	ldr	r3, [pc, #188]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e68:	4b2d      	ldr	r3, [pc, #180]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e6e:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e74:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e7a:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d114      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e86:	f7fc fb23 	bl	80024d0 <HAL_GetTick>
 8005e8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8e:	f7fc fb1f 	bl	80024d0 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e035      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0ee      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebc:	d10d      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005ebe:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed2:	4912      	ldr	r1, [pc, #72]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	608b      	str	r3, [r1, #8]
 8005ed8:	e005      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4a0f      	ldr	r2, [pc, #60]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ee0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ee4:	6093      	str	r3, [r2, #8]
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef2:	490a      	ldr	r1, [pc, #40]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005f0c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40007000 	.word	0x40007000
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	42470e40 	.word	0x42470e40
 8005f24:	424711e0 	.word	0x424711e0

08005f28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e066      	b.n	800600c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	7f5b      	ldrb	r3, [r3, #29]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fb fe3c 	bl	8001bcc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	22ca      	movs	r2, #202	; 0xca
 8005f60:	625a      	str	r2, [r3, #36]	; 0x24
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2253      	movs	r2, #83	; 0x53
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fbce 	bl	800670c <RTC_EnterInitMode>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d12c      	bne.n	8005fd4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6899      	ldr	r1, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	68d2      	ldr	r2, [r2, #12]
 8005fb4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6919      	ldr	r1, [r3, #16]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	041a      	lsls	r2, r3, #16
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fbd5 	bl	800677a <RTC_ExitInitMode>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d113      	bne.n	8006002 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	22ff      	movs	r2, #255	; 0xff
 8006008:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	7f1b      	ldrb	r3, [r3, #28]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_RTC_SetTime+0x1c>
 800602c:	2302      	movs	r3, #2
 800602e:	e087      	b.n	8006140 <HAL_RTC_SetTime+0x12c>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2202      	movs	r2, #2
 800603a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d126      	bne.n	8006090 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fbb2 	bl	80067c4 <RTC_ByteToBcd2>
 8006060:	4603      	mov	r3, r0
 8006062:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fbab 	bl	80067c4 <RTC_ByteToBcd2>
 800606e:	4603      	mov	r3, r0
 8006070:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006072:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	789b      	ldrb	r3, [r3, #2]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fba3 	bl	80067c4 <RTC_ByteToBcd2>
 800607e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006080:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	78db      	ldrb	r3, [r3, #3]
 8006088:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e018      	b.n	80060c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2200      	movs	r2, #0
 80060a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060b0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80060b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	78db      	ldrb	r3, [r3, #3]
 80060bc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	22ca      	movs	r2, #202	; 0xca
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2253      	movs	r2, #83	; 0x53
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fb1a 	bl	800670c <RTC_EnterInitMode>
 80060d8:	4603      	mov	r3, r0
 80060da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80060dc:	7cfb      	ldrb	r3, [r7, #19]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d120      	bne.n	8006124 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80060ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006100:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6899      	ldr	r1, [r3, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	431a      	orrs	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fb2d 	bl	800677a <RTC_ExitInitMode>
 8006120:	4603      	mov	r3, r0
 8006122:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	771a      	strb	r2, [r3, #28]

  return status;
 800613e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006140:	4618      	mov	r0, r3
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	bd90      	pop	{r4, r7, pc}

08006148 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800617a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800617e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	0d9b      	lsrs	r3, r3, #22
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11a      	bne.n	80061fa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fb18 	bl	80067fe <RTC_Bcd2ToByte>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fb0f 	bl	80067fe <RTC_Bcd2ToByte>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	789b      	ldrb	r3, [r3, #2]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fb06 	bl	80067fe <RTC_Bcd2ToByte>
 80061f2:	4603      	mov	r3, r0
 80061f4:	461a      	mov	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	7f1b      	ldrb	r3, [r3, #28]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_RTC_SetDate+0x1c>
 800621c:	2302      	movs	r3, #2
 800621e:	e071      	b.n	8006304 <HAL_RTC_SetDate+0x100>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2202      	movs	r2, #2
 800622a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10e      	bne.n	8006250 <HAL_RTC_SetDate+0x4c>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	b2db      	uxtb	r3, r3
 8006248:	330a      	adds	r3, #10
 800624a:	b2da      	uxtb	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11c      	bne.n	8006290 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	78db      	ldrb	r3, [r3, #3]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fab2 	bl	80067c4 <RTC_ByteToBcd2>
 8006260:	4603      	mov	r3, r0
 8006262:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 faab 	bl	80067c4 <RTC_ByteToBcd2>
 800626e:	4603      	mov	r3, r0
 8006270:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006272:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	789b      	ldrb	r3, [r3, #2]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 faa3 	bl	80067c4 <RTC_ByteToBcd2>
 800627e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006280:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e00e      	b.n	80062ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	78db      	ldrb	r3, [r3, #3]
 8006294:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800629c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	22ca      	movs	r2, #202	; 0xca
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2253      	movs	r2, #83	; 0x53
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fa24 	bl	800670c <RTC_EnterInitMode>
 80062c4:	4603      	mov	r3, r0
 80062c6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80062c8:	7cfb      	ldrb	r3, [r7, #19]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10c      	bne.n	80062e8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fa4b 	bl	800677a <RTC_ExitInitMode>
 80062e4:	4603      	mov	r3, r0
 80062e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	22ff      	movs	r2, #255	; 0xff
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	771a      	strb	r2, [r3, #28]

  return status;
 8006302:	7cfb      	ldrb	r3, [r7, #19]
}
 8006304:	4618      	mov	r0, r3
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	bd90      	pop	{r4, r7, pc}

0800630c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006326:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800632a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	0a1b      	lsrs	r3, r3, #8
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f003 031f 	and.w	r3, r3, #31
 8006340:	b2da      	uxtb	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	0b5b      	lsrs	r3, r3, #13
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d11a      	bne.n	80063a0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	78db      	ldrb	r3, [r3, #3]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fa45 	bl	80067fe <RTC_Bcd2ToByte>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fa3c 	bl	80067fe <RTC_Bcd2ToByte>
 8006386:	4603      	mov	r3, r0
 8006388:	461a      	mov	r2, r3
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	789b      	ldrb	r3, [r3, #2]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fa33 	bl	80067fe <RTC_Bcd2ToByte>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b089      	sub	sp, #36	; 0x24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80063b8:	4b9a      	ldr	r3, [pc, #616]	; (8006624 <HAL_RTC_SetAlarm_IT+0x278>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a9a      	ldr	r2, [pc, #616]	; (8006628 <HAL_RTC_SetAlarm_IT+0x27c>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	0adb      	lsrs	r3, r3, #11
 80063c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063c8:	fb02 f303 	mul.w	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	7f1b      	ldrb	r3, [r3, #28]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_RTC_SetAlarm_IT+0x36>
 80063de:	2302      	movs	r3, #2
 80063e0:	e11c      	b.n	800661c <HAL_RTC_SetAlarm_IT+0x270>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2202      	movs	r2, #2
 80063ec:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d137      	bne.n	8006464 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2200      	movs	r2, #0
 8006406:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f9d9 	bl	80067c4 <RTC_ByteToBcd2>
 8006412:	4603      	mov	r3, r0
 8006414:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	785b      	ldrb	r3, [r3, #1]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f9d2 	bl	80067c4 <RTC_ByteToBcd2>
 8006420:	4603      	mov	r3, r0
 8006422:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006424:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	789b      	ldrb	r3, [r3, #2]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f9ca 	bl	80067c4 <RTC_ByteToBcd2>
 8006430:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006432:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	78db      	ldrb	r3, [r3, #3]
 800643a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800643c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f9bc 	bl	80067c4 <RTC_ByteToBcd2>
 800644c:	4603      	mov	r3, r0
 800644e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006450:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006458:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800645e:	4313      	orrs	r3, r2
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	e023      	b.n	80064ac <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2200      	movs	r2, #0
 8006476:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006484:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800648a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	78db      	ldrb	r3, [r3, #3]
 8006490:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006492:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800649a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800649c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80064a2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	22ca      	movs	r2, #202	; 0xca
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2253      	movs	r2, #83	; 0x53
 80064c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d0:	d141      	bne.n	8006556 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80064f2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1e5a      	subs	r2, r3, #1
 80064f8:	617a      	str	r2, [r7, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	22ff      	movs	r2, #255	; 0xff
 8006504:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2203      	movs	r2, #3
 800650a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e082      	b.n	800661c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0e7      	beq.n	80064f4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006542:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	e04b      	b.n	80065ee <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006564:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006576:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006578:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <HAL_RTC_SetAlarm_IT+0x278>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a2a      	ldr	r2, [pc, #168]	; (8006628 <HAL_RTC_SetAlarm_IT+0x27c>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	0adb      	lsrs	r3, r3, #11
 8006584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	1e5a      	subs	r2, r3, #1
 8006592:	617a      	str	r2, [r7, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	22ff      	movs	r2, #255	; 0xff
 800659e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2203      	movs	r2, #3
 80065a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e035      	b.n	800661c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0e7      	beq.n	800658e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065dc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ec:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <HAL_RTC_SetAlarm_IT+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a0e      	ldr	r2, [pc, #56]	; (800662c <HAL_RTC_SetAlarm_IT+0x280>)
 80065f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <HAL_RTC_SetAlarm_IT+0x280>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	4a0b      	ldr	r2, [pc, #44]	; (800662c <HAL_RTC_SetAlarm_IT+0x280>)
 8006600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006604:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	22ff      	movs	r2, #255	; 0xff
 800660c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3724      	adds	r7, #36	; 0x24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd90      	pop	{r4, r7, pc}
 8006624:	20000008 	.word	0x20000008
 8006628:	10624dd3 	.word	0x10624dd3
 800662c:	40013c00 	.word	0x40013c00

08006630 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d012      	beq.n	800666c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fb f89d 	bl	8001794 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800666a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d012      	beq.n	80066a0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f8d4 	bl	8006836 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800669e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RTC_AlarmIRQHandler+0x88>)
 80066a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066a6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	775a      	strb	r2, [r3, #29]
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40013c00 	.word	0x40013c00

080066bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066d8:	f7fb fefa 	bl	80024d0 <HAL_GetTick>
 80066dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066de:	e009      	b.n	80066f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066e0:	f7fb fef6 	bl	80024d0 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ee:	d901      	bls.n	80066f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e007      	b.n	8006704 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0ee      	beq.n	80066e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d122      	bne.n	8006770 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006738:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800673a:	f7fb fec9 	bl	80024d0 <HAL_GetTick>
 800673e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006740:	e00c      	b.n	800675c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006742:	f7fb fec5 	bl	80024d0 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006750:	d904      	bls.n	800675c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2204      	movs	r2, #4
 8006756:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <RTC_EnterInitMode+0x64>
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d1e8      	bne.n	8006742 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006794:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff ff89 	bl	80066bc <HAL_RTC_WaitForSynchro>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d004      	beq.n	80067ba <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2204      	movs	r2, #4
 80067b4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80067d2:	e005      	b.n	80067e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	3301      	adds	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	3b0a      	subs	r3, #10
 80067de:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	2b09      	cmp	r3, #9
 80067e4:	d8f6      	bhi.n	80067d4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b2db      	uxtb	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	4603      	mov	r3, r0
 8006806:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	b2db      	uxtb	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	0092      	lsls	r2, r2, #2
 8006816:	4413      	add	r3, r2
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	b2da      	uxtb	r2, r3
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	4413      	add	r3, r2
 8006828:	b2db      	uxtb	r3, r3
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e041      	b.n	80068e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fb fbd1 	bl	8002018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f000 fb4b 	bl	8006f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e041      	b.n	800697e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f839 	bl	8006986 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3304      	adds	r3, #4
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f000 fafc 	bl	8006f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d122      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d11b      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f06f 0202 	mvn.w	r2, #2
 80069c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fa82 	bl	8006ee6 <HAL_TIM_IC_CaptureCallback>
 80069e2:	e005      	b.n	80069f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa74 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa85 	bl	8006efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d122      	bne.n	8006a4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d11b      	bne.n	8006a4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0204 	mvn.w	r2, #4
 8006a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa58 	bl	8006ee6 <HAL_TIM_IC_CaptureCallback>
 8006a36:	e005      	b.n	8006a44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa4a 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa5b 	bl	8006efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d122      	bne.n	8006a9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d11b      	bne.n	8006a9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f06f 0208 	mvn.w	r2, #8
 8006a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2204      	movs	r2, #4
 8006a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa2e 	bl	8006ee6 <HAL_TIM_IC_CaptureCallback>
 8006a8a:	e005      	b.n	8006a98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa20 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa31 	bl	8006efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d122      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d11b      	bne.n	8006af2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f06f 0210 	mvn.w	r2, #16
 8006ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fa04 	bl	8006ee6 <HAL_TIM_IC_CaptureCallback>
 8006ade:	e005      	b.n	8006aec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f9f6 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa07 	bl	8006efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10e      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d107      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f06f 0201 	mvn.w	r2, #1
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9d0 	bl	8006ebe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b28:	2b80      	cmp	r3, #128	; 0x80
 8006b2a:	d10e      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b36:	2b80      	cmp	r3, #128	; 0x80
 8006b38:	d107      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fd5d 	bl	8007604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d10e      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d107      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f9cc 	bl	8006f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d10e      	bne.n	8006ba2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d107      	bne.n	8006ba2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f06f 0220 	mvn.w	r2, #32
 8006b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fd27 	bl	80075f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e0ae      	b.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b0c      	cmp	r3, #12
 8006bd6:	f200 809f 	bhi.w	8006d18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bda:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006c15 	.word	0x08006c15
 8006be4:	08006d19 	.word	0x08006d19
 8006be8:	08006d19 	.word	0x08006d19
 8006bec:	08006d19 	.word	0x08006d19
 8006bf0:	08006c55 	.word	0x08006c55
 8006bf4:	08006d19 	.word	0x08006d19
 8006bf8:	08006d19 	.word	0x08006d19
 8006bfc:	08006d19 	.word	0x08006d19
 8006c00:	08006c97 	.word	0x08006c97
 8006c04:	08006d19 	.word	0x08006d19
 8006c08:	08006d19 	.word	0x08006d19
 8006c0c:	08006d19 	.word	0x08006d19
 8006c10:	08006cd7 	.word	0x08006cd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fa22 	bl	8007064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0208 	orr.w	r2, r2, #8
 8006c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0204 	bic.w	r2, r2, #4
 8006c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6999      	ldr	r1, [r3, #24]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	619a      	str	r2, [r3, #24]
      break;
 8006c52:	e064      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fa72 	bl	8007144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6999      	ldr	r1, [r3, #24]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	021a      	lsls	r2, r3, #8
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	619a      	str	r2, [r3, #24]
      break;
 8006c94:	e043      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fac7 	bl	8007230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0208 	orr.w	r2, r2, #8
 8006cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0204 	bic.w	r2, r2, #4
 8006cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	61da      	str	r2, [r3, #28]
      break;
 8006cd4:	e023      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fb1b 	bl	8007318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69da      	ldr	r2, [r3, #28]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69d9      	ldr	r1, [r3, #28]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	021a      	lsls	r2, r3, #8
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	61da      	str	r2, [r3, #28]
      break;
 8006d16:	e002      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_TIM_ConfigClockSource+0x1c>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e0b4      	b.n	8006eb6 <HAL_TIM_ConfigClockSource+0x186>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d84:	d03e      	beq.n	8006e04 <HAL_TIM_ConfigClockSource+0xd4>
 8006d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8a:	f200 8087 	bhi.w	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	f000 8086 	beq.w	8006ea2 <HAL_TIM_ConfigClockSource+0x172>
 8006d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9a:	d87f      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b70      	cmp	r3, #112	; 0x70
 8006d9e:	d01a      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8006da0:	2b70      	cmp	r3, #112	; 0x70
 8006da2:	d87b      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006da4:	2b60      	cmp	r3, #96	; 0x60
 8006da6:	d050      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x11a>
 8006da8:	2b60      	cmp	r3, #96	; 0x60
 8006daa:	d877      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006dac:	2b50      	cmp	r3, #80	; 0x50
 8006dae:	d03c      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0xfa>
 8006db0:	2b50      	cmp	r3, #80	; 0x50
 8006db2:	d873      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d058      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x13a>
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d86f      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006dbc:	2b30      	cmp	r3, #48	; 0x30
 8006dbe:	d064      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x15a>
 8006dc0:	2b30      	cmp	r3, #48	; 0x30
 8006dc2:	d86b      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d060      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x15a>
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d867      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d05c      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x15a>
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d05a      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x15a>
 8006dd4:	e062      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6899      	ldr	r1, [r3, #8]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f000 fb67 	bl	80074b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	609a      	str	r2, [r3, #8]
      break;
 8006e02:	e04f      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6899      	ldr	r1, [r3, #8]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f000 fb50 	bl	80074b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e26:	609a      	str	r2, [r3, #8]
      break;
 8006e28:	e03c      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f000 fac4 	bl	80073c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2150      	movs	r1, #80	; 0x50
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fb1d 	bl	8007482 <TIM_ITRx_SetConfig>
      break;
 8006e48:	e02c      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f000 fae3 	bl	8007422 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2160      	movs	r1, #96	; 0x60
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fb0d 	bl	8007482 <TIM_ITRx_SetConfig>
      break;
 8006e68:	e01c      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6859      	ldr	r1, [r3, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f000 faa4 	bl	80073c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fafd 	bl	8007482 <TIM_ITRx_SetConfig>
      break;
 8006e88:	e00c      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f000 faf4 	bl	8007482 <TIM_ITRx_SetConfig>
      break;
 8006e9a:	e003      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea0:	e000      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a40      	ldr	r2, [pc, #256]	; (8007038 <TIM_Base_SetConfig+0x114>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f42:	d00f      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a3d      	ldr	r2, [pc, #244]	; (800703c <TIM_Base_SetConfig+0x118>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a3c      	ldr	r2, [pc, #240]	; (8007040 <TIM_Base_SetConfig+0x11c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a3b      	ldr	r2, [pc, #236]	; (8007044 <TIM_Base_SetConfig+0x120>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3a      	ldr	r2, [pc, #232]	; (8007048 <TIM_Base_SetConfig+0x124>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d108      	bne.n	8006f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a2f      	ldr	r2, [pc, #188]	; (8007038 <TIM_Base_SetConfig+0x114>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d02b      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f84:	d027      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a2c      	ldr	r2, [pc, #176]	; (800703c <TIM_Base_SetConfig+0x118>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d023      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2b      	ldr	r2, [pc, #172]	; (8007040 <TIM_Base_SetConfig+0x11c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01f      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <TIM_Base_SetConfig+0x120>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01b      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a29      	ldr	r2, [pc, #164]	; (8007048 <TIM_Base_SetConfig+0x124>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d017      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a28      	ldr	r2, [pc, #160]	; (800704c <TIM_Base_SetConfig+0x128>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a27      	ldr	r2, [pc, #156]	; (8007050 <TIM_Base_SetConfig+0x12c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00f      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a26      	ldr	r2, [pc, #152]	; (8007054 <TIM_Base_SetConfig+0x130>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00b      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a25      	ldr	r2, [pc, #148]	; (8007058 <TIM_Base_SetConfig+0x134>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d007      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a24      	ldr	r2, [pc, #144]	; (800705c <TIM_Base_SetConfig+0x138>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d003      	beq.n	8006fd6 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a23      	ldr	r2, [pc, #140]	; (8007060 <TIM_Base_SetConfig+0x13c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d108      	bne.n	8006fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <TIM_Base_SetConfig+0x114>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_Base_SetConfig+0xf8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a0c      	ldr	r2, [pc, #48]	; (8007048 <TIM_Base_SetConfig+0x124>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d103      	bne.n	8007024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	615a      	str	r2, [r3, #20]
}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40010000 	.word	0x40010000
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40010400 	.word	0x40010400
 800704c:	40014000 	.word	0x40014000
 8007050:	40014400 	.word	0x40014400
 8007054:	40014800 	.word	0x40014800
 8007058:	40001800 	.word	0x40001800
 800705c:	40001c00 	.word	0x40001c00
 8007060:	40002000 	.word	0x40002000

08007064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0201 	bic.w	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0303 	bic.w	r3, r3, #3
 800709a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f023 0302 	bic.w	r3, r3, #2
 80070ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a20      	ldr	r2, [pc, #128]	; (800713c <TIM_OC1_SetConfig+0xd8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d003      	beq.n	80070c8 <TIM_OC1_SetConfig+0x64>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <TIM_OC1_SetConfig+0xdc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d10c      	bne.n	80070e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 0308 	bic.w	r3, r3, #8
 80070ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f023 0304 	bic.w	r3, r3, #4
 80070e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a15      	ldr	r2, [pc, #84]	; (800713c <TIM_OC1_SetConfig+0xd8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_OC1_SetConfig+0x8e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a14      	ldr	r2, [pc, #80]	; (8007140 <TIM_OC1_SetConfig+0xdc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d111      	bne.n	8007116 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	621a      	str	r2, [r3, #32]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	40010000 	.word	0x40010000
 8007140:	40010400 	.word	0x40010400

08007144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f023 0210 	bic.w	r2, r3, #16
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0320 	bic.w	r3, r3, #32
 800718e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a22      	ldr	r2, [pc, #136]	; (8007228 <TIM_OC2_SetConfig+0xe4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC2_SetConfig+0x68>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a21      	ldr	r2, [pc, #132]	; (800722c <TIM_OC2_SetConfig+0xe8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d10d      	bne.n	80071c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	011b      	lsls	r3, r3, #4
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <TIM_OC2_SetConfig+0xe4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d003      	beq.n	80071d8 <TIM_OC2_SetConfig+0x94>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a16      	ldr	r2, [pc, #88]	; (800722c <TIM_OC2_SetConfig+0xe8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d113      	bne.n	8007200 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40010000 	.word	0x40010000
 800722c:	40010400 	.word	0x40010400

08007230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a21      	ldr	r2, [pc, #132]	; (8007310 <TIM_OC3_SetConfig+0xe0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d003      	beq.n	8007296 <TIM_OC3_SetConfig+0x66>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a20      	ldr	r2, [pc, #128]	; (8007314 <TIM_OC3_SetConfig+0xe4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d10d      	bne.n	80072b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800729c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a16      	ldr	r2, [pc, #88]	; (8007310 <TIM_OC3_SetConfig+0xe0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d003      	beq.n	80072c2 <TIM_OC3_SetConfig+0x92>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a15      	ldr	r2, [pc, #84]	; (8007314 <TIM_OC3_SetConfig+0xe4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d113      	bne.n	80072ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4313      	orrs	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	621a      	str	r2, [r3, #32]
}
 8007304:	bf00      	nop
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	40010000 	.word	0x40010000
 8007314:	40010400 	.word	0x40010400

08007318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	031b      	lsls	r3, r3, #12
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a12      	ldr	r2, [pc, #72]	; (80073bc <TIM_OC4_SetConfig+0xa4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_OC4_SetConfig+0x68>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a11      	ldr	r2, [pc, #68]	; (80073c0 <TIM_OC4_SetConfig+0xa8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d109      	bne.n	8007394 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	019b      	lsls	r3, r3, #6
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40010400 	.word	0x40010400

080073c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f023 0201 	bic.w	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 030a 	bic.w	r3, r3, #10
 8007400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4313      	orrs	r3, r2
 8007408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007422:	b480      	push	{r7}
 8007424:	b087      	sub	sp, #28
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f023 0210 	bic.w	r2, r3, #16
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800744c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	031b      	lsls	r3, r3, #12
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800745e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	f043 0307 	orr.w	r3, r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	609a      	str	r2, [r3, #8]
}
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	021a      	lsls	r2, r3, #8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	431a      	orrs	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4313      	orrs	r3, r2
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	609a      	str	r2, [r3, #8]
}
 80074ec:	bf00      	nop
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e05a      	b.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a21      	ldr	r2, [pc, #132]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d022      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d01d      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1d      	ldr	r2, [pc, #116]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a15      	ldr	r2, [pc, #84]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10c      	bne.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40010400 	.word	0x40010400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40001800 	.word	0x40001800

080075f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e03f      	b.n	80076aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fa fdae 	bl	80021a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2224      	movs	r2, #36	; 0x24
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800765a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fddf 	bl	8008220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695a      	ldr	r2, [r3, #20]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b08a      	sub	sp, #40	; 0x28
 80076b6:	af02      	add	r7, sp, #8
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	603b      	str	r3, [r7, #0]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d17c      	bne.n	80077cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_UART_Transmit+0x2c>
 80076d8:	88fb      	ldrh	r3, [r7, #6]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e075      	b.n	80077ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_UART_Transmit+0x3e>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e06e      	b.n	80077ce <HAL_UART_Transmit+0x11c>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2221      	movs	r2, #33	; 0x21
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007706:	f7fa fee3 	bl	80024d0 <HAL_GetTick>
 800770a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	88fa      	ldrh	r2, [r7, #6]
 8007716:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007720:	d108      	bne.n	8007734 <HAL_UART_Transmit+0x82>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	e003      	b.n	800773c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007738:	2300      	movs	r3, #0
 800773a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007744:	e02a      	b.n	800779c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2200      	movs	r2, #0
 800774e:	2180      	movs	r1, #128	; 0x80
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fb1f 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e036      	b.n	80077ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007774:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	3302      	adds	r3, #2
 800777a:	61bb      	str	r3, [r7, #24]
 800777c:	e007      	b.n	800778e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	3301      	adds	r3, #1
 800778c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1cf      	bne.n	8007746 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2200      	movs	r2, #0
 80077ae:	2140      	movs	r1, #64	; 0x40
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 faef 	bl	8007d94 <UART_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e006      	b.n	80077ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	e000      	b.n	80077ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80077cc:	2302      	movs	r3, #2
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3720      	adds	r7, #32
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	4613      	mov	r3, r2
 80077e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d11d      	bne.n	800782c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_UART_Receive_IT+0x26>
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e016      	b.n	800782e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_UART_Receive_IT+0x38>
 800780a:	2302      	movs	r3, #2
 800780c:	e00f      	b.n	800782e <HAL_UART_Receive_IT+0x58>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	461a      	mov	r2, r3
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fb24 	bl	8007e70 <UART_Start_Receive_IT>
 8007828:	4603      	mov	r3, r0
 800782a:	e000      	b.n	800782e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800782c:	2302      	movs	r3, #2
  }
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b0ba      	sub	sp, #232	; 0xe8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007864:	2300      	movs	r3, #0
 8007866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10f      	bne.n	800789e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <HAL_UART_IRQHandler+0x66>
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fc07 	bl	80080aa <UART_Receive_IT>
      return;
 800789c:	e256      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800789e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80de 	beq.w	8007a64 <HAL_UART_IRQHandler+0x22c>
 80078a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80d1 	beq.w	8007a64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <HAL_UART_IRQHandler+0xae>
 80078ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	f043 0201 	orr.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <HAL_UART_IRQHandler+0xd2>
 80078f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	f043 0202 	orr.w	r2, r3, #2
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00b      	beq.n	800792e <HAL_UART_IRQHandler+0xf6>
 8007916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f043 0204 	orr.w	r2, r3, #4
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800792e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d011      	beq.n	800795e <HAL_UART_IRQHandler+0x126>
 800793a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d105      	bne.n	8007952 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	f043 0208 	orr.w	r2, r3, #8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 81ed 	beq.w	8007d42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_UART_IRQHandler+0x14e>
 8007974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fb92 	bl	80080aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	bf0c      	ite	eq
 8007994:	2301      	moveq	r3, #1
 8007996:	2300      	movne	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f003 0308 	and.w	r3, r3, #8
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d103      	bne.n	80079b2 <HAL_UART_IRQHandler+0x17a>
 80079aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d04f      	beq.n	8007a52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fa9a 	bl	8007eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d141      	bne.n	8007a4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3314      	adds	r3, #20
 80079cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3314      	adds	r3, #20
 80079ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1d9      	bne.n	80079c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d013      	beq.n	8007a42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	4a7d      	ldr	r2, [pc, #500]	; (8007c14 <HAL_UART_IRQHandler+0x3dc>)
 8007a20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fb fd50 	bl	80034cc <HAL_DMA_Abort_IT>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	e00e      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f990 	bl	8007d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a48:	e00a      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f98c 	bl	8007d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e006      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f988 	bl	8007d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a5e:	e170      	b.n	8007d42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	bf00      	nop
    return;
 8007a62:	e16e      	b.n	8007d42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	f040 814a 	bne.w	8007d02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8143 	beq.w	8007d02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 813c 	beq.w	8007d02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60bb      	str	r3, [r7, #8]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	f040 80b4 	bne.w	8007c18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007abc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8140 	beq.w	8007d46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	f080 8139 	bcs.w	8007d46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ada:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae6:	f000 8088 	beq.w	8007bfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1d9      	bne.n	8007aea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3314      	adds	r3, #20
 8007b3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b48:	f023 0301 	bic.w	r3, r3, #1
 8007b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3314      	adds	r3, #20
 8007b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e1      	bne.n	8007b36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3314      	adds	r3, #20
 8007b78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e3      	bne.n	8007b72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bca:	f023 0310 	bic.w	r3, r3, #16
 8007bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007be2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e3      	bne.n	8007bb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fb fbf9 	bl	80033ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f8b6 	bl	8007d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c10:	e099      	b.n	8007d46 <HAL_UART_IRQHandler+0x50e>
 8007c12:	bf00      	nop
 8007c14:	08007fb3 	.word	0x08007fb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 808b 	beq.w	8007d4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8086 	beq.w	8007d4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	330c      	adds	r3, #12
 8007c44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c62:	647a      	str	r2, [r7, #68]	; 0x44
 8007c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e3      	bne.n	8007c3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3314      	adds	r3, #20
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	e853 3f00 	ldrex	r3, [r3]
 8007c84:	623b      	str	r3, [r7, #32]
   return(result);
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	f023 0301 	bic.w	r3, r3, #1
 8007c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3314      	adds	r3, #20
 8007c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e3      	bne.n	8007c76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0310 	bic.w	r3, r3, #16
 8007cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ce0:	61fa      	str	r2, [r7, #28]
 8007ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	69b9      	ldr	r1, [r7, #24]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	617b      	str	r3, [r7, #20]
   return(result);
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e3      	bne.n	8007cbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f83e 	bl	8007d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d00:	e023      	b.n	8007d4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d009      	beq.n	8007d22 <HAL_UART_IRQHandler+0x4ea>
 8007d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f95d 	bl	8007fda <UART_Transmit_IT>
    return;
 8007d20:	e014      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00e      	beq.n	8007d4c <HAL_UART_IRQHandler+0x514>
 8007d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d008      	beq.n	8007d4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f99d 	bl	800807a <UART_EndTransmit_IT>
    return;
 8007d40:	e004      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
    return;
 8007d42:	bf00      	nop
 8007d44:	e002      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
      return;
 8007d46:	bf00      	nop
 8007d48:	e000      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
      return;
 8007d4a:	bf00      	nop
  }
}
 8007d4c:	37e8      	adds	r7, #232	; 0xe8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop

08007d54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b090      	sub	sp, #64	; 0x40
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	4613      	mov	r3, r2
 8007da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da4:	e050      	b.n	8007e48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d04c      	beq.n	8007e48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d007      	beq.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007db4:	f7fa fb8c 	bl	80024d0 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d241      	bcs.n	8007e48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007de4:	637a      	str	r2, [r7, #52]	; 0x34
 8007de6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e5      	bne.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	613b      	str	r3, [r7, #16]
   return(result);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e18:	623a      	str	r2, [r7, #32]
 8007e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	69f9      	ldr	r1, [r7, #28]
 8007e1e:	6a3a      	ldr	r2, [r7, #32]
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e5      	bne.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e00f      	b.n	8007e68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	4013      	ands	r3, r2
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	bf0c      	ite	eq
 8007e58:	2301      	moveq	r3, #1
 8007e5a:	2300      	movne	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d09f      	beq.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3740      	adds	r7, #64	; 0x40
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	88fa      	ldrh	r2, [r7, #6]
 8007e88:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2222      	movs	r2, #34	; 0x22
 8007e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ebc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695a      	ldr	r2, [r3, #20]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0201 	orr.w	r2, r2, #1
 8007ecc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0220 	orr.w	r2, r2, #32
 8007edc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b095      	sub	sp, #84	; 0x54
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	330c      	adds	r3, #12
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f14:	643a      	str	r2, [r7, #64]	; 0x40
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e5      	bne.n	8007ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3314      	adds	r3, #20
 8007f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f023 0301 	bic.w	r3, r3, #1
 8007f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3314      	adds	r3, #20
 8007f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e5      	bne.n	8007f28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d119      	bne.n	8007f98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	330c      	adds	r3, #12
 8007f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f84:	61ba      	str	r2, [r7, #24]
 8007f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6979      	ldr	r1, [r7, #20]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	613b      	str	r3, [r7, #16]
   return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e5      	bne.n	8007f64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fa6:	bf00      	nop
 8007fa8:	3754      	adds	r7, #84	; 0x54
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fecb 	bl	8007d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b21      	cmp	r3, #33	; 0x21
 8007fec:	d13e      	bne.n	800806c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff6:	d114      	bne.n	8008022 <UART_Transmit_IT+0x48>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d110      	bne.n	8008022 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008014:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	1c9a      	adds	r2, r3, #2
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	621a      	str	r2, [r3, #32]
 8008020:	e008      	b.n	8008034 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	1c59      	adds	r1, r3, #1
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6211      	str	r1, [r2, #32]
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29b      	uxth	r3, r3
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4619      	mov	r1, r3
 8008042:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10f      	bne.n	8008068 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008056:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008066:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e000      	b.n	800806e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800806c:	2302      	movs	r3, #2
  }
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff fe5a 	bl	8007d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b08c      	sub	sp, #48	; 0x30
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b22      	cmp	r3, #34	; 0x22
 80080bc:	f040 80ab 	bne.w	8008216 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c8:	d117      	bne.n	80080fa <UART_Receive_IT+0x50>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d113      	bne.n	80080fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	1c9a      	adds	r2, r3, #2
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	629a      	str	r2, [r3, #40]	; 0x28
 80080f8:	e026      	b.n	8008148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008100:	2300      	movs	r3, #0
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810c:	d007      	beq.n	800811e <UART_Receive_IT+0x74>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <UART_Receive_IT+0x82>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	b2da      	uxtb	r2, r3
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	e008      	b.n	800813e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008138:	b2da      	uxtb	r2, r3
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800814c:	b29b      	uxth	r3, r3
 800814e:	3b01      	subs	r3, #1
 8008150:	b29b      	uxth	r3, r3
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4619      	mov	r1, r3
 8008156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008158:	2b00      	cmp	r3, #0
 800815a:	d15a      	bne.n	8008212 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0220 	bic.w	r2, r2, #32
 800816a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	2b01      	cmp	r3, #1
 800819a:	d135      	bne.n	8008208 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	330c      	adds	r3, #12
 80081a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	613b      	str	r3, [r7, #16]
   return(result);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f023 0310 	bic.w	r3, r3, #16
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c2:	623a      	str	r2, [r7, #32]
 80081c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	69f9      	ldr	r1, [r7, #28]
 80081c8:	6a3a      	ldr	r2, [r7, #32]
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d10a      	bne.n	80081fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fdbb 	bl	8007d7c <HAL_UARTEx_RxEventCallback>
 8008206:	e002      	b.n	800820e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7f9 fbd1 	bl	80019b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	e002      	b.n	8008218 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e000      	b.n	8008218 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008216:	2302      	movs	r3, #2
  }
}
 8008218:	4618      	mov	r0, r3
 800821a:	3730      	adds	r7, #48	; 0x30
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008224:	b0c0      	sub	sp, #256	; 0x100
 8008226:	af00      	add	r7, sp, #0
 8008228:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823c:	68d9      	ldr	r1, [r3, #12]
 800823e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	ea40 0301 	orr.w	r3, r0, r1
 8008248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800824a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	431a      	orrs	r2, r3
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	431a      	orrs	r2, r3
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	4313      	orrs	r3, r2
 8008268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008278:	f021 010c 	bic.w	r1, r1, #12
 800827c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008286:	430b      	orrs	r3, r1
 8008288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800828a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829a:	6999      	ldr	r1, [r3, #24]
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	ea40 0301 	orr.w	r3, r0, r1
 80082a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	4b8f      	ldr	r3, [pc, #572]	; (80084ec <UART_SetConfig+0x2cc>)
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d005      	beq.n	80082c0 <UART_SetConfig+0xa0>
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	4b8d      	ldr	r3, [pc, #564]	; (80084f0 <UART_SetConfig+0x2d0>)
 80082bc:	429a      	cmp	r2, r3
 80082be:	d104      	bne.n	80082ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082c0:	f7fd fc5e 	bl	8005b80 <HAL_RCC_GetPCLK2Freq>
 80082c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082c8:	e003      	b.n	80082d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082ca:	f7fd fc45 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 80082ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082dc:	f040 810c 	bne.w	80084f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	1891      	adds	r1, r2, r2
 80082f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80082fa:	415b      	adcs	r3, r3
 80082fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008302:	4621      	mov	r1, r4
 8008304:	eb12 0801 	adds.w	r8, r2, r1
 8008308:	4629      	mov	r1, r5
 800830a:	eb43 0901 	adc.w	r9, r3, r1
 800830e:	f04f 0200 	mov.w	r2, #0
 8008312:	f04f 0300 	mov.w	r3, #0
 8008316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800831a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800831e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008322:	4690      	mov	r8, r2
 8008324:	4699      	mov	r9, r3
 8008326:	4623      	mov	r3, r4
 8008328:	eb18 0303 	adds.w	r3, r8, r3
 800832c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008330:	462b      	mov	r3, r5
 8008332:	eb49 0303 	adc.w	r3, r9, r3
 8008336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800833a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008346:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800834a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800834e:	460b      	mov	r3, r1
 8008350:	18db      	adds	r3, r3, r3
 8008352:	653b      	str	r3, [r7, #80]	; 0x50
 8008354:	4613      	mov	r3, r2
 8008356:	eb42 0303 	adc.w	r3, r2, r3
 800835a:	657b      	str	r3, [r7, #84]	; 0x54
 800835c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008364:	f7f7 ff9c 	bl	80002a0 <__aeabi_uldivmod>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4b61      	ldr	r3, [pc, #388]	; (80084f4 <UART_SetConfig+0x2d4>)
 800836e:	fba3 2302 	umull	r2, r3, r3, r2
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	011c      	lsls	r4, r3, #4
 8008376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837a:	2200      	movs	r2, #0
 800837c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008380:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008384:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008388:	4642      	mov	r2, r8
 800838a:	464b      	mov	r3, r9
 800838c:	1891      	adds	r1, r2, r2
 800838e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008390:	415b      	adcs	r3, r3
 8008392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008394:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008398:	4641      	mov	r1, r8
 800839a:	eb12 0a01 	adds.w	sl, r2, r1
 800839e:	4649      	mov	r1, r9
 80083a0:	eb43 0b01 	adc.w	fp, r3, r1
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083b8:	4692      	mov	sl, r2
 80083ba:	469b      	mov	fp, r3
 80083bc:	4643      	mov	r3, r8
 80083be:	eb1a 0303 	adds.w	r3, sl, r3
 80083c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083c6:	464b      	mov	r3, r9
 80083c8:	eb4b 0303 	adc.w	r3, fp, r3
 80083cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083e4:	460b      	mov	r3, r1
 80083e6:	18db      	adds	r3, r3, r3
 80083e8:	643b      	str	r3, [r7, #64]	; 0x40
 80083ea:	4613      	mov	r3, r2
 80083ec:	eb42 0303 	adc.w	r3, r2, r3
 80083f0:	647b      	str	r3, [r7, #68]	; 0x44
 80083f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083fa:	f7f7 ff51 	bl	80002a0 <__aeabi_uldivmod>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4611      	mov	r1, r2
 8008404:	4b3b      	ldr	r3, [pc, #236]	; (80084f4 <UART_SetConfig+0x2d4>)
 8008406:	fba3 2301 	umull	r2, r3, r3, r1
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	2264      	movs	r2, #100	; 0x64
 800840e:	fb02 f303 	mul.w	r3, r2, r3
 8008412:	1acb      	subs	r3, r1, r3
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800841a:	4b36      	ldr	r3, [pc, #216]	; (80084f4 <UART_SetConfig+0x2d4>)
 800841c:	fba3 2302 	umull	r2, r3, r3, r2
 8008420:	095b      	lsrs	r3, r3, #5
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008428:	441c      	add	r4, r3
 800842a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800842e:	2200      	movs	r2, #0
 8008430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008434:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008438:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800843c:	4642      	mov	r2, r8
 800843e:	464b      	mov	r3, r9
 8008440:	1891      	adds	r1, r2, r2
 8008442:	63b9      	str	r1, [r7, #56]	; 0x38
 8008444:	415b      	adcs	r3, r3
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800844c:	4641      	mov	r1, r8
 800844e:	1851      	adds	r1, r2, r1
 8008450:	6339      	str	r1, [r7, #48]	; 0x30
 8008452:	4649      	mov	r1, r9
 8008454:	414b      	adcs	r3, r1
 8008456:	637b      	str	r3, [r7, #52]	; 0x34
 8008458:	f04f 0200 	mov.w	r2, #0
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008464:	4659      	mov	r1, fp
 8008466:	00cb      	lsls	r3, r1, #3
 8008468:	4651      	mov	r1, sl
 800846a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846e:	4651      	mov	r1, sl
 8008470:	00ca      	lsls	r2, r1, #3
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	4603      	mov	r3, r0
 8008478:	4642      	mov	r2, r8
 800847a:	189b      	adds	r3, r3, r2
 800847c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008480:	464b      	mov	r3, r9
 8008482:	460a      	mov	r2, r1
 8008484:	eb42 0303 	adc.w	r3, r2, r3
 8008488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008498:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800849c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084a0:	460b      	mov	r3, r1
 80084a2:	18db      	adds	r3, r3, r3
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80084a6:	4613      	mov	r3, r2
 80084a8:	eb42 0303 	adc.w	r3, r2, r3
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084b6:	f7f7 fef3 	bl	80002a0 <__aeabi_uldivmod>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <UART_SetConfig+0x2d4>)
 80084c0:	fba3 1302 	umull	r1, r3, r3, r2
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	2164      	movs	r1, #100	; 0x64
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	3332      	adds	r3, #50	; 0x32
 80084d2:	4a08      	ldr	r2, [pc, #32]	; (80084f4 <UART_SetConfig+0x2d4>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f003 0207 	and.w	r2, r3, #7
 80084de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4422      	add	r2, r4
 80084e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084e8:	e106      	b.n	80086f8 <UART_SetConfig+0x4d8>
 80084ea:	bf00      	nop
 80084ec:	40011000 	.word	0x40011000
 80084f0:	40011400 	.word	0x40011400
 80084f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008502:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008506:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800850a:	4642      	mov	r2, r8
 800850c:	464b      	mov	r3, r9
 800850e:	1891      	adds	r1, r2, r2
 8008510:	6239      	str	r1, [r7, #32]
 8008512:	415b      	adcs	r3, r3
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
 8008516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800851a:	4641      	mov	r1, r8
 800851c:	1854      	adds	r4, r2, r1
 800851e:	4649      	mov	r1, r9
 8008520:	eb43 0501 	adc.w	r5, r3, r1
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	00eb      	lsls	r3, r5, #3
 800852e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008532:	00e2      	lsls	r2, r4, #3
 8008534:	4614      	mov	r4, r2
 8008536:	461d      	mov	r5, r3
 8008538:	4643      	mov	r3, r8
 800853a:	18e3      	adds	r3, r4, r3
 800853c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008540:	464b      	mov	r3, r9
 8008542:	eb45 0303 	adc.w	r3, r5, r3
 8008546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800854a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008566:	4629      	mov	r1, r5
 8008568:	008b      	lsls	r3, r1, #2
 800856a:	4621      	mov	r1, r4
 800856c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008570:	4621      	mov	r1, r4
 8008572:	008a      	lsls	r2, r1, #2
 8008574:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008578:	f7f7 fe92 	bl	80002a0 <__aeabi_uldivmod>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4b60      	ldr	r3, [pc, #384]	; (8008704 <UART_SetConfig+0x4e4>)
 8008582:	fba3 2302 	umull	r2, r3, r3, r2
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	011c      	lsls	r4, r3, #4
 800858a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800858e:	2200      	movs	r2, #0
 8008590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008594:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008598:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800859c:	4642      	mov	r2, r8
 800859e:	464b      	mov	r3, r9
 80085a0:	1891      	adds	r1, r2, r2
 80085a2:	61b9      	str	r1, [r7, #24]
 80085a4:	415b      	adcs	r3, r3
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085ac:	4641      	mov	r1, r8
 80085ae:	1851      	adds	r1, r2, r1
 80085b0:	6139      	str	r1, [r7, #16]
 80085b2:	4649      	mov	r1, r9
 80085b4:	414b      	adcs	r3, r1
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	f04f 0300 	mov.w	r3, #0
 80085c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085c4:	4659      	mov	r1, fp
 80085c6:	00cb      	lsls	r3, r1, #3
 80085c8:	4651      	mov	r1, sl
 80085ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ce:	4651      	mov	r1, sl
 80085d0:	00ca      	lsls	r2, r1, #3
 80085d2:	4610      	mov	r0, r2
 80085d4:	4619      	mov	r1, r3
 80085d6:	4603      	mov	r3, r0
 80085d8:	4642      	mov	r2, r8
 80085da:	189b      	adds	r3, r3, r2
 80085dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085e0:	464b      	mov	r3, r9
 80085e2:	460a      	mov	r2, r1
 80085e4:	eb42 0303 	adc.w	r3, r2, r3
 80085e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80085f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008604:	4649      	mov	r1, r9
 8008606:	008b      	lsls	r3, r1, #2
 8008608:	4641      	mov	r1, r8
 800860a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800860e:	4641      	mov	r1, r8
 8008610:	008a      	lsls	r2, r1, #2
 8008612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008616:	f7f7 fe43 	bl	80002a0 <__aeabi_uldivmod>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	4611      	mov	r1, r2
 8008620:	4b38      	ldr	r3, [pc, #224]	; (8008704 <UART_SetConfig+0x4e4>)
 8008622:	fba3 2301 	umull	r2, r3, r3, r1
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	2264      	movs	r2, #100	; 0x64
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	1acb      	subs	r3, r1, r3
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	3332      	adds	r3, #50	; 0x32
 8008634:	4a33      	ldr	r2, [pc, #204]	; (8008704 <UART_SetConfig+0x4e4>)
 8008636:	fba2 2303 	umull	r2, r3, r2, r3
 800863a:	095b      	lsrs	r3, r3, #5
 800863c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008640:	441c      	add	r4, r3
 8008642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008646:	2200      	movs	r2, #0
 8008648:	673b      	str	r3, [r7, #112]	; 0x70
 800864a:	677a      	str	r2, [r7, #116]	; 0x74
 800864c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008650:	4642      	mov	r2, r8
 8008652:	464b      	mov	r3, r9
 8008654:	1891      	adds	r1, r2, r2
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	415b      	adcs	r3, r3
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008660:	4641      	mov	r1, r8
 8008662:	1851      	adds	r1, r2, r1
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	4649      	mov	r1, r9
 8008668:	414b      	adcs	r3, r1
 800866a:	607b      	str	r3, [r7, #4]
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	f04f 0300 	mov.w	r3, #0
 8008674:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008678:	4659      	mov	r1, fp
 800867a:	00cb      	lsls	r3, r1, #3
 800867c:	4651      	mov	r1, sl
 800867e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008682:	4651      	mov	r1, sl
 8008684:	00ca      	lsls	r2, r1, #3
 8008686:	4610      	mov	r0, r2
 8008688:	4619      	mov	r1, r3
 800868a:	4603      	mov	r3, r0
 800868c:	4642      	mov	r2, r8
 800868e:	189b      	adds	r3, r3, r2
 8008690:	66bb      	str	r3, [r7, #104]	; 0x68
 8008692:	464b      	mov	r3, r9
 8008694:	460a      	mov	r2, r1
 8008696:	eb42 0303 	adc.w	r3, r2, r3
 800869a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800869c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	663b      	str	r3, [r7, #96]	; 0x60
 80086a6:	667a      	str	r2, [r7, #100]	; 0x64
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086b4:	4649      	mov	r1, r9
 80086b6:	008b      	lsls	r3, r1, #2
 80086b8:	4641      	mov	r1, r8
 80086ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086be:	4641      	mov	r1, r8
 80086c0:	008a      	lsls	r2, r1, #2
 80086c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086c6:	f7f7 fdeb 	bl	80002a0 <__aeabi_uldivmod>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <UART_SetConfig+0x4e4>)
 80086d0:	fba3 1302 	umull	r1, r3, r3, r2
 80086d4:	095b      	lsrs	r3, r3, #5
 80086d6:	2164      	movs	r1, #100	; 0x64
 80086d8:	fb01 f303 	mul.w	r3, r1, r3
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	3332      	adds	r3, #50	; 0x32
 80086e2:	4a08      	ldr	r2, [pc, #32]	; (8008704 <UART_SetConfig+0x4e4>)
 80086e4:	fba2 2303 	umull	r2, r3, r2, r3
 80086e8:	095b      	lsrs	r3, r3, #5
 80086ea:	f003 020f 	and.w	r2, r3, #15
 80086ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4422      	add	r2, r4
 80086f6:	609a      	str	r2, [r3, #8]
}
 80086f8:	bf00      	nop
 80086fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086fe:	46bd      	mov	sp, r7
 8008700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008704:	51eb851f 	.word	0x51eb851f

08008708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008708:	b084      	sub	sp, #16
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	f107 001c 	add.w	r0, r7, #28
 8008716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	2b01      	cmp	r3, #1
 800871e:	d122      	bne.n	8008766 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874a:	2b01      	cmp	r3, #1
 800874c:	d105      	bne.n	800875a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 faa2 	bl	8008ca4 <USB_CoreReset>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
 8008764:	e01a      	b.n	800879c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa96 	bl	8008ca4 <USB_CoreReset>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800877c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800877e:	2b00      	cmp	r3, #0
 8008780:	d106      	bne.n	8008790 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	639a      	str	r2, [r3, #56]	; 0x38
 800878e:	e005      	b.n	800879c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d10b      	bne.n	80087ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f043 0206 	orr.w	r2, r3, #6
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f043 0220 	orr.w	r2, r3, #32
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087c6:	b004      	add	sp, #16
 80087c8:	4770      	bx	lr

080087ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d115      	bne.n	800883a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800881a:	2001      	movs	r0, #1
 800881c:	f7f9 fe64 	bl	80024e8 <HAL_Delay>
      ms++;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3301      	adds	r3, #1
 8008824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa2e 	bl	8008c88 <USB_GetMode>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d01e      	beq.n	8008870 <USB_SetCurrentMode+0x84>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b31      	cmp	r3, #49	; 0x31
 8008836:	d9f0      	bls.n	800881a <USB_SetCurrentMode+0x2e>
 8008838:	e01a      	b.n	8008870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d115      	bne.n	800886c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800884c:	2001      	movs	r0, #1
 800884e:	f7f9 fe4b 	bl	80024e8 <HAL_Delay>
      ms++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa15 	bl	8008c88 <USB_GetMode>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <USB_SetCurrentMode+0x84>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b31      	cmp	r3, #49	; 0x31
 8008868:	d9f0      	bls.n	800884c <USB_SetCurrentMode+0x60>
 800886a:	e001      	b.n	8008870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e005      	b.n	800887c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b32      	cmp	r3, #50	; 0x32
 8008874:	d101      	bne.n	800887a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008884:	b084      	sub	sp, #16
 8008886:	b580      	push	{r7, lr}
 8008888:	b086      	sub	sp, #24
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800889e:	2300      	movs	r3, #0
 80088a0:	613b      	str	r3, [r7, #16]
 80088a2:	e009      	b.n	80088b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	3340      	adds	r3, #64	; 0x40
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	2200      	movs	r2, #0
 80088b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	3301      	adds	r3, #1
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b0e      	cmp	r3, #14
 80088bc:	d9f2      	bls.n	80088a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d11c      	bne.n	80088fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088d2:	f043 0302 	orr.w	r3, r3, #2
 80088d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
 80088fc:	e00b      	b.n	8008916 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800891c:	461a      	mov	r2, r3
 800891e:	2300      	movs	r3, #0
 8008920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008928:	4619      	mov	r1, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008930:	461a      	mov	r2, r3
 8008932:	680b      	ldr	r3, [r1, #0]
 8008934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	2b01      	cmp	r3, #1
 800893a:	d10c      	bne.n	8008956 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008942:	2100      	movs	r1, #0
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f965 	bl	8008c14 <USB_SetDevSpeed>
 800894a:	e008      	b.n	800895e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800894c:	2101      	movs	r1, #1
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f960 	bl	8008c14 <USB_SetDevSpeed>
 8008954:	e003      	b.n	800895e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008956:	2103      	movs	r1, #3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f95b 	bl	8008c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800895e:	2110      	movs	r1, #16
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f8f3 	bl	8008b4c <USB_FlushTxFifo>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f91f 	bl	8008bb4 <USB_FlushRxFifo>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	461a      	mov	r2, r3
 8008988:	2300      	movs	r3, #0
 800898a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	461a      	mov	r2, r3
 8008994:	2300      	movs	r3, #0
 8008996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899e:	461a      	mov	r2, r3
 80089a0:	2300      	movs	r3, #0
 80089a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	e043      	b.n	8008a32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089c0:	d118      	bne.n	80089f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d4:	461a      	mov	r2, r3
 80089d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	e013      	b.n	8008a06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	461a      	mov	r2, r3
 80089ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	e008      	b.n	8008a06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a00:	461a      	mov	r2, r3
 8008a02:	2300      	movs	r3, #0
 8008a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	461a      	mov	r2, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	461a      	mov	r2, r3
 8008a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d3b7      	bcc.n	80089aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	e043      	b.n	8008ac8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a56:	d118      	bne.n	8008a8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10a      	bne.n	8008a74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	e013      	b.n	8008a9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a80:	461a      	mov	r2, r3
 8008a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	e008      	b.n	8008a9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a96:	461a      	mov	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	461a      	mov	r2, r3
 8008abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d3b7      	bcc.n	8008a40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f043 0210 	orr.w	r2, r3, #16
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <USB_DevInit+0x2c4>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f043 0208 	orr.w	r2, r3, #8
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d107      	bne.n	8008b38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b30:	f043 0304 	orr.w	r3, r3, #4
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b44:	b004      	add	sp, #16
 8008b46:	4770      	bx	lr
 8008b48:	803c3800 	.word	0x803c3800

08008b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4a13      	ldr	r2, [pc, #76]	; (8008bb0 <USB_FlushTxFifo+0x64>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d901      	bls.n	8008b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e01b      	b.n	8008ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	daf2      	bge.n	8008b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	019b      	lsls	r3, r3, #6
 8008b7c:	f043 0220 	orr.w	r2, r3, #32
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4a08      	ldr	r2, [pc, #32]	; (8008bb0 <USB_FlushTxFifo+0x64>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d901      	bls.n	8008b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e006      	b.n	8008ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d0f0      	beq.n	8008b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	00030d40 	.word	0x00030d40

08008bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a11      	ldr	r2, [pc, #68]	; (8008c10 <USB_FlushRxFifo+0x5c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d901      	bls.n	8008bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e018      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	daf2      	bge.n	8008bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2210      	movs	r2, #16
 8008be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4a08      	ldr	r2, [pc, #32]	; (8008c10 <USB_FlushRxFifo+0x5c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d901      	bls.n	8008bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e006      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b10      	cmp	r3, #16
 8008c00:	d0f0      	beq.n	8008be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	00030d40 	.word	0x00030d40

08008c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c34:	4313      	orrs	r3, r2
 8008c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c60:	f023 0303 	bic.w	r3, r3, #3
 8008c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c74:	f043 0302 	orr.w	r3, r3, #2
 8008c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	f003 0301 	and.w	r3, r3, #1
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4a13      	ldr	r2, [pc, #76]	; (8008d08 <USB_CoreReset+0x64>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d901      	bls.n	8008cc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e01b      	b.n	8008cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	daf2      	bge.n	8008cb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f043 0201 	orr.w	r2, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4a09      	ldr	r2, [pc, #36]	; (8008d08 <USB_CoreReset+0x64>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d901      	bls.n	8008cec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e006      	b.n	8008cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d0f0      	beq.n	8008cda <USB_CoreReset+0x36>

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	00030d40 	.word	0x00030d40

08008d0c <std>:
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	b510      	push	{r4, lr}
 8008d10:	4604      	mov	r4, r0
 8008d12:	e9c0 3300 	strd	r3, r3, [r0]
 8008d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d1a:	6083      	str	r3, [r0, #8]
 8008d1c:	8181      	strh	r1, [r0, #12]
 8008d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d20:	81c2      	strh	r2, [r0, #14]
 8008d22:	6183      	str	r3, [r0, #24]
 8008d24:	4619      	mov	r1, r3
 8008d26:	2208      	movs	r2, #8
 8008d28:	305c      	adds	r0, #92	; 0x5c
 8008d2a:	f000 fa4b 	bl	80091c4 <memset>
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <std+0x58>)
 8008d30:	6263      	str	r3, [r4, #36]	; 0x24
 8008d32:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <std+0x5c>)
 8008d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d36:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <std+0x60>)
 8008d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	; (8008d70 <std+0x64>)
 8008d3c:	6323      	str	r3, [r4, #48]	; 0x30
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <std+0x68>)
 8008d40:	6224      	str	r4, [r4, #32]
 8008d42:	429c      	cmp	r4, r3
 8008d44:	d006      	beq.n	8008d54 <std+0x48>
 8008d46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d4a:	4294      	cmp	r4, r2
 8008d4c:	d002      	beq.n	8008d54 <std+0x48>
 8008d4e:	33d0      	adds	r3, #208	; 0xd0
 8008d50:	429c      	cmp	r4, r3
 8008d52:	d105      	bne.n	8008d60 <std+0x54>
 8008d54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d5c:	f000 baaa 	b.w	80092b4 <__retarget_lock_init_recursive>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	bf00      	nop
 8008d64:	08009015 	.word	0x08009015
 8008d68:	08009037 	.word	0x08009037
 8008d6c:	0800906f 	.word	0x0800906f
 8008d70:	08009093 	.word	0x08009093
 8008d74:	20000b94 	.word	0x20000b94

08008d78 <stdio_exit_handler>:
 8008d78:	4a02      	ldr	r2, [pc, #8]	; (8008d84 <stdio_exit_handler+0xc>)
 8008d7a:	4903      	ldr	r1, [pc, #12]	; (8008d88 <stdio_exit_handler+0x10>)
 8008d7c:	4803      	ldr	r0, [pc, #12]	; (8008d8c <stdio_exit_handler+0x14>)
 8008d7e:	f000 b869 	b.w	8008e54 <_fwalk_sglue>
 8008d82:	bf00      	nop
 8008d84:	20000014 	.word	0x20000014
 8008d88:	08009e11 	.word	0x08009e11
 8008d8c:	20000020 	.word	0x20000020

08008d90 <cleanup_stdio>:
 8008d90:	6841      	ldr	r1, [r0, #4]
 8008d92:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <cleanup_stdio+0x34>)
 8008d94:	4299      	cmp	r1, r3
 8008d96:	b510      	push	{r4, lr}
 8008d98:	4604      	mov	r4, r0
 8008d9a:	d001      	beq.n	8008da0 <cleanup_stdio+0x10>
 8008d9c:	f001 f838 	bl	8009e10 <_fflush_r>
 8008da0:	68a1      	ldr	r1, [r4, #8]
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <cleanup_stdio+0x38>)
 8008da4:	4299      	cmp	r1, r3
 8008da6:	d002      	beq.n	8008dae <cleanup_stdio+0x1e>
 8008da8:	4620      	mov	r0, r4
 8008daa:	f001 f831 	bl	8009e10 <_fflush_r>
 8008dae:	68e1      	ldr	r1, [r4, #12]
 8008db0:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <cleanup_stdio+0x3c>)
 8008db2:	4299      	cmp	r1, r3
 8008db4:	d004      	beq.n	8008dc0 <cleanup_stdio+0x30>
 8008db6:	4620      	mov	r0, r4
 8008db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dbc:	f001 b828 	b.w	8009e10 <_fflush_r>
 8008dc0:	bd10      	pop	{r4, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000b94 	.word	0x20000b94
 8008dc8:	20000bfc 	.word	0x20000bfc
 8008dcc:	20000c64 	.word	0x20000c64

08008dd0 <global_stdio_init.part.0>:
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <global_stdio_init.part.0+0x30>)
 8008dd4:	4c0b      	ldr	r4, [pc, #44]	; (8008e04 <global_stdio_init.part.0+0x34>)
 8008dd6:	4a0c      	ldr	r2, [pc, #48]	; (8008e08 <global_stdio_init.part.0+0x38>)
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	4620      	mov	r0, r4
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2104      	movs	r1, #4
 8008de0:	f7ff ff94 	bl	8008d0c <std>
 8008de4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008de8:	2201      	movs	r2, #1
 8008dea:	2109      	movs	r1, #9
 8008dec:	f7ff ff8e 	bl	8008d0c <std>
 8008df0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008df4:	2202      	movs	r2, #2
 8008df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfa:	2112      	movs	r1, #18
 8008dfc:	f7ff bf86 	b.w	8008d0c <std>
 8008e00:	20000ccc 	.word	0x20000ccc
 8008e04:	20000b94 	.word	0x20000b94
 8008e08:	08008d79 	.word	0x08008d79

08008e0c <__sfp_lock_acquire>:
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <__sfp_lock_acquire+0x8>)
 8008e0e:	f000 ba52 	b.w	80092b6 <__retarget_lock_acquire_recursive>
 8008e12:	bf00      	nop
 8008e14:	20000cd5 	.word	0x20000cd5

08008e18 <__sfp_lock_release>:
 8008e18:	4801      	ldr	r0, [pc, #4]	; (8008e20 <__sfp_lock_release+0x8>)
 8008e1a:	f000 ba4d 	b.w	80092b8 <__retarget_lock_release_recursive>
 8008e1e:	bf00      	nop
 8008e20:	20000cd5 	.word	0x20000cd5

08008e24 <__sinit>:
 8008e24:	b510      	push	{r4, lr}
 8008e26:	4604      	mov	r4, r0
 8008e28:	f7ff fff0 	bl	8008e0c <__sfp_lock_acquire>
 8008e2c:	6a23      	ldr	r3, [r4, #32]
 8008e2e:	b11b      	cbz	r3, 8008e38 <__sinit+0x14>
 8008e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e34:	f7ff bff0 	b.w	8008e18 <__sfp_lock_release>
 8008e38:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <__sinit+0x28>)
 8008e3a:	6223      	str	r3, [r4, #32]
 8008e3c:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <__sinit+0x2c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1f5      	bne.n	8008e30 <__sinit+0xc>
 8008e44:	f7ff ffc4 	bl	8008dd0 <global_stdio_init.part.0>
 8008e48:	e7f2      	b.n	8008e30 <__sinit+0xc>
 8008e4a:	bf00      	nop
 8008e4c:	08008d91 	.word	0x08008d91
 8008e50:	20000ccc 	.word	0x20000ccc

08008e54 <_fwalk_sglue>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	4607      	mov	r7, r0
 8008e5a:	4688      	mov	r8, r1
 8008e5c:	4614      	mov	r4, r2
 8008e5e:	2600      	movs	r6, #0
 8008e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e64:	f1b9 0901 	subs.w	r9, r9, #1
 8008e68:	d505      	bpl.n	8008e76 <_fwalk_sglue+0x22>
 8008e6a:	6824      	ldr	r4, [r4, #0]
 8008e6c:	2c00      	cmp	r4, #0
 8008e6e:	d1f7      	bne.n	8008e60 <_fwalk_sglue+0xc>
 8008e70:	4630      	mov	r0, r6
 8008e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d907      	bls.n	8008e8c <_fwalk_sglue+0x38>
 8008e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e80:	3301      	adds	r3, #1
 8008e82:	d003      	beq.n	8008e8c <_fwalk_sglue+0x38>
 8008e84:	4629      	mov	r1, r5
 8008e86:	4638      	mov	r0, r7
 8008e88:	47c0      	blx	r8
 8008e8a:	4306      	orrs	r6, r0
 8008e8c:	3568      	adds	r5, #104	; 0x68
 8008e8e:	e7e9      	b.n	8008e64 <_fwalk_sglue+0x10>

08008e90 <iprintf>:
 8008e90:	b40f      	push	{r0, r1, r2, r3}
 8008e92:	b507      	push	{r0, r1, r2, lr}
 8008e94:	4906      	ldr	r1, [pc, #24]	; (8008eb0 <iprintf+0x20>)
 8008e96:	ab04      	add	r3, sp, #16
 8008e98:	6808      	ldr	r0, [r1, #0]
 8008e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9e:	6881      	ldr	r1, [r0, #8]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	f000 fc85 	bl	80097b0 <_vfiprintf_r>
 8008ea6:	b003      	add	sp, #12
 8008ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eac:	b004      	add	sp, #16
 8008eae:	4770      	bx	lr
 8008eb0:	2000006c 	.word	0x2000006c

08008eb4 <_puts_r>:
 8008eb4:	6a03      	ldr	r3, [r0, #32]
 8008eb6:	b570      	push	{r4, r5, r6, lr}
 8008eb8:	6884      	ldr	r4, [r0, #8]
 8008eba:	4605      	mov	r5, r0
 8008ebc:	460e      	mov	r6, r1
 8008ebe:	b90b      	cbnz	r3, 8008ec4 <_puts_r+0x10>
 8008ec0:	f7ff ffb0 	bl	8008e24 <__sinit>
 8008ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ec6:	07db      	lsls	r3, r3, #31
 8008ec8:	d405      	bmi.n	8008ed6 <_puts_r+0x22>
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	0598      	lsls	r0, r3, #22
 8008ece:	d402      	bmi.n	8008ed6 <_puts_r+0x22>
 8008ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ed2:	f000 f9f0 	bl	80092b6 <__retarget_lock_acquire_recursive>
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	0719      	lsls	r1, r3, #28
 8008eda:	d513      	bpl.n	8008f04 <_puts_r+0x50>
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	b18b      	cbz	r3, 8008f04 <_puts_r+0x50>
 8008ee0:	3e01      	subs	r6, #1
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	60a3      	str	r3, [r4, #8]
 8008eec:	b9e9      	cbnz	r1, 8008f2a <_puts_r+0x76>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	da2e      	bge.n	8008f50 <_puts_r+0x9c>
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	210a      	movs	r1, #10
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 f8cf 	bl	800909a <__swbuf_r>
 8008efc:	3001      	adds	r0, #1
 8008efe:	d007      	beq.n	8008f10 <_puts_r+0x5c>
 8008f00:	250a      	movs	r5, #10
 8008f02:	e007      	b.n	8008f14 <_puts_r+0x60>
 8008f04:	4621      	mov	r1, r4
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 f904 	bl	8009114 <__swsetup_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d0e7      	beq.n	8008ee0 <_puts_r+0x2c>
 8008f10:	f04f 35ff 	mov.w	r5, #4294967295
 8008f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f16:	07da      	lsls	r2, r3, #31
 8008f18:	d405      	bmi.n	8008f26 <_puts_r+0x72>
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	059b      	lsls	r3, r3, #22
 8008f1e:	d402      	bmi.n	8008f26 <_puts_r+0x72>
 8008f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f22:	f000 f9c9 	bl	80092b8 <__retarget_lock_release_recursive>
 8008f26:	4628      	mov	r0, r5
 8008f28:	bd70      	pop	{r4, r5, r6, pc}
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da04      	bge.n	8008f38 <_puts_r+0x84>
 8008f2e:	69a2      	ldr	r2, [r4, #24]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	dc06      	bgt.n	8008f42 <_puts_r+0x8e>
 8008f34:	290a      	cmp	r1, #10
 8008f36:	d004      	beq.n	8008f42 <_puts_r+0x8e>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	6022      	str	r2, [r4, #0]
 8008f3e:	7019      	strb	r1, [r3, #0]
 8008f40:	e7cf      	b.n	8008ee2 <_puts_r+0x2e>
 8008f42:	4622      	mov	r2, r4
 8008f44:	4628      	mov	r0, r5
 8008f46:	f000 f8a8 	bl	800909a <__swbuf_r>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d1c9      	bne.n	8008ee2 <_puts_r+0x2e>
 8008f4e:	e7df      	b.n	8008f10 <_puts_r+0x5c>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	250a      	movs	r5, #10
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	701d      	strb	r5, [r3, #0]
 8008f5a:	e7db      	b.n	8008f14 <_puts_r+0x60>

08008f5c <puts>:
 8008f5c:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <puts+0xc>)
 8008f5e:	4601      	mov	r1, r0
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	f7ff bfa7 	b.w	8008eb4 <_puts_r>
 8008f66:	bf00      	nop
 8008f68:	2000006c 	.word	0x2000006c

08008f6c <sniprintf>:
 8008f6c:	b40c      	push	{r2, r3}
 8008f6e:	b530      	push	{r4, r5, lr}
 8008f70:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <sniprintf+0x64>)
 8008f72:	1e0c      	subs	r4, r1, #0
 8008f74:	681d      	ldr	r5, [r3, #0]
 8008f76:	b09d      	sub	sp, #116	; 0x74
 8008f78:	da08      	bge.n	8008f8c <sniprintf+0x20>
 8008f7a:	238b      	movs	r3, #139	; 0x8b
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f82:	b01d      	add	sp, #116	; 0x74
 8008f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f88:	b002      	add	sp, #8
 8008f8a:	4770      	bx	lr
 8008f8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f94:	bf14      	ite	ne
 8008f96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f9a:	4623      	moveq	r3, r4
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	9307      	str	r3, [sp, #28]
 8008fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fa4:	9002      	str	r0, [sp, #8]
 8008fa6:	9006      	str	r0, [sp, #24]
 8008fa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008fae:	ab21      	add	r3, sp, #132	; 0x84
 8008fb0:	a902      	add	r1, sp, #8
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	f000 fad3 	bl	8009560 <_svfiprintf_r>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	bfbc      	itt	lt
 8008fbe:	238b      	movlt	r3, #139	; 0x8b
 8008fc0:	602b      	strlt	r3, [r5, #0]
 8008fc2:	2c00      	cmp	r4, #0
 8008fc4:	d0dd      	beq.n	8008f82 <sniprintf+0x16>
 8008fc6:	9b02      	ldr	r3, [sp, #8]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
 8008fcc:	e7d9      	b.n	8008f82 <sniprintf+0x16>
 8008fce:	bf00      	nop
 8008fd0:	2000006c 	.word	0x2000006c

08008fd4 <siprintf>:
 8008fd4:	b40e      	push	{r1, r2, r3}
 8008fd6:	b500      	push	{lr}
 8008fd8:	b09c      	sub	sp, #112	; 0x70
 8008fda:	ab1d      	add	r3, sp, #116	; 0x74
 8008fdc:	9002      	str	r0, [sp, #8]
 8008fde:	9006      	str	r0, [sp, #24]
 8008fe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fe4:	4809      	ldr	r0, [pc, #36]	; (800900c <siprintf+0x38>)
 8008fe6:	9107      	str	r1, [sp, #28]
 8008fe8:	9104      	str	r1, [sp, #16]
 8008fea:	4909      	ldr	r1, [pc, #36]	; (8009010 <siprintf+0x3c>)
 8008fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff0:	9105      	str	r1, [sp, #20]
 8008ff2:	6800      	ldr	r0, [r0, #0]
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	a902      	add	r1, sp, #8
 8008ff8:	f000 fab2 	bl	8009560 <_svfiprintf_r>
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	2200      	movs	r2, #0
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	b01c      	add	sp, #112	; 0x70
 8009004:	f85d eb04 	ldr.w	lr, [sp], #4
 8009008:	b003      	add	sp, #12
 800900a:	4770      	bx	lr
 800900c:	2000006c 	.word	0x2000006c
 8009010:	ffff0208 	.word	0xffff0208

08009014 <__sread>:
 8009014:	b510      	push	{r4, lr}
 8009016:	460c      	mov	r4, r1
 8009018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800901c:	f000 f8fc 	bl	8009218 <_read_r>
 8009020:	2800      	cmp	r0, #0
 8009022:	bfab      	itete	ge
 8009024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009026:	89a3      	ldrhlt	r3, [r4, #12]
 8009028:	181b      	addge	r3, r3, r0
 800902a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800902e:	bfac      	ite	ge
 8009030:	6563      	strge	r3, [r4, #84]	; 0x54
 8009032:	81a3      	strhlt	r3, [r4, #12]
 8009034:	bd10      	pop	{r4, pc}

08009036 <__swrite>:
 8009036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903a:	461f      	mov	r7, r3
 800903c:	898b      	ldrh	r3, [r1, #12]
 800903e:	05db      	lsls	r3, r3, #23
 8009040:	4605      	mov	r5, r0
 8009042:	460c      	mov	r4, r1
 8009044:	4616      	mov	r6, r2
 8009046:	d505      	bpl.n	8009054 <__swrite+0x1e>
 8009048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904c:	2302      	movs	r3, #2
 800904e:	2200      	movs	r2, #0
 8009050:	f000 f8d0 	bl	80091f4 <_lseek_r>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800905a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	4632      	mov	r2, r6
 8009062:	463b      	mov	r3, r7
 8009064:	4628      	mov	r0, r5
 8009066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906a:	f000 b8e7 	b.w	800923c <_write_r>

0800906e <__sseek>:
 800906e:	b510      	push	{r4, lr}
 8009070:	460c      	mov	r4, r1
 8009072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009076:	f000 f8bd 	bl	80091f4 <_lseek_r>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	bf15      	itete	ne
 8009080:	6560      	strne	r0, [r4, #84]	; 0x54
 8009082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800908a:	81a3      	strheq	r3, [r4, #12]
 800908c:	bf18      	it	ne
 800908e:	81a3      	strhne	r3, [r4, #12]
 8009090:	bd10      	pop	{r4, pc}

08009092 <__sclose>:
 8009092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009096:	f000 b89d 	b.w	80091d4 <_close_r>

0800909a <__swbuf_r>:
 800909a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909c:	460e      	mov	r6, r1
 800909e:	4614      	mov	r4, r2
 80090a0:	4605      	mov	r5, r0
 80090a2:	b118      	cbz	r0, 80090ac <__swbuf_r+0x12>
 80090a4:	6a03      	ldr	r3, [r0, #32]
 80090a6:	b90b      	cbnz	r3, 80090ac <__swbuf_r+0x12>
 80090a8:	f7ff febc 	bl	8008e24 <__sinit>
 80090ac:	69a3      	ldr	r3, [r4, #24]
 80090ae:	60a3      	str	r3, [r4, #8]
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	071a      	lsls	r2, r3, #28
 80090b4:	d525      	bpl.n	8009102 <__swbuf_r+0x68>
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	b31b      	cbz	r3, 8009102 <__swbuf_r+0x68>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	6922      	ldr	r2, [r4, #16]
 80090be:	1a98      	subs	r0, r3, r2
 80090c0:	6963      	ldr	r3, [r4, #20]
 80090c2:	b2f6      	uxtb	r6, r6
 80090c4:	4283      	cmp	r3, r0
 80090c6:	4637      	mov	r7, r6
 80090c8:	dc04      	bgt.n	80090d4 <__swbuf_r+0x3a>
 80090ca:	4621      	mov	r1, r4
 80090cc:	4628      	mov	r0, r5
 80090ce:	f000 fe9f 	bl	8009e10 <_fflush_r>
 80090d2:	b9e0      	cbnz	r0, 800910e <__swbuf_r+0x74>
 80090d4:	68a3      	ldr	r3, [r4, #8]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	60a3      	str	r3, [r4, #8]
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	6022      	str	r2, [r4, #0]
 80090e0:	701e      	strb	r6, [r3, #0]
 80090e2:	6962      	ldr	r2, [r4, #20]
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d004      	beq.n	80090f4 <__swbuf_r+0x5a>
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	07db      	lsls	r3, r3, #31
 80090ee:	d506      	bpl.n	80090fe <__swbuf_r+0x64>
 80090f0:	2e0a      	cmp	r6, #10
 80090f2:	d104      	bne.n	80090fe <__swbuf_r+0x64>
 80090f4:	4621      	mov	r1, r4
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 fe8a 	bl	8009e10 <_fflush_r>
 80090fc:	b938      	cbnz	r0, 800910e <__swbuf_r+0x74>
 80090fe:	4638      	mov	r0, r7
 8009100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f000 f805 	bl	8009114 <__swsetup_r>
 800910a:	2800      	cmp	r0, #0
 800910c:	d0d5      	beq.n	80090ba <__swbuf_r+0x20>
 800910e:	f04f 37ff 	mov.w	r7, #4294967295
 8009112:	e7f4      	b.n	80090fe <__swbuf_r+0x64>

08009114 <__swsetup_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <__swsetup_r+0xac>)
 8009118:	4605      	mov	r5, r0
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	460c      	mov	r4, r1
 800911e:	b118      	cbz	r0, 8009128 <__swsetup_r+0x14>
 8009120:	6a03      	ldr	r3, [r0, #32]
 8009122:	b90b      	cbnz	r3, 8009128 <__swsetup_r+0x14>
 8009124:	f7ff fe7e 	bl	8008e24 <__sinit>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800912e:	0718      	lsls	r0, r3, #28
 8009130:	d422      	bmi.n	8009178 <__swsetup_r+0x64>
 8009132:	06d9      	lsls	r1, r3, #27
 8009134:	d407      	bmi.n	8009146 <__swsetup_r+0x32>
 8009136:	2309      	movs	r3, #9
 8009138:	602b      	str	r3, [r5, #0]
 800913a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	e034      	b.n	80091b0 <__swsetup_r+0x9c>
 8009146:	0758      	lsls	r0, r3, #29
 8009148:	d512      	bpl.n	8009170 <__swsetup_r+0x5c>
 800914a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914c:	b141      	cbz	r1, 8009160 <__swsetup_r+0x4c>
 800914e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009152:	4299      	cmp	r1, r3
 8009154:	d002      	beq.n	800915c <__swsetup_r+0x48>
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f8b0 	bl	80092bc <_free_r>
 800915c:	2300      	movs	r3, #0
 800915e:	6363      	str	r3, [r4, #52]	; 0x34
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	2300      	movs	r3, #0
 800916a:	6063      	str	r3, [r4, #4]
 800916c:	6923      	ldr	r3, [r4, #16]
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f043 0308 	orr.w	r3, r3, #8
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	b94b      	cbnz	r3, 8009190 <__swsetup_r+0x7c>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009186:	d003      	beq.n	8009190 <__swsetup_r+0x7c>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 fe8e 	bl	8009eac <__smakebuf_r>
 8009190:	89a0      	ldrh	r0, [r4, #12]
 8009192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009196:	f010 0301 	ands.w	r3, r0, #1
 800919a:	d00a      	beq.n	80091b2 <__swsetup_r+0x9e>
 800919c:	2300      	movs	r3, #0
 800919e:	60a3      	str	r3, [r4, #8]
 80091a0:	6963      	ldr	r3, [r4, #20]
 80091a2:	425b      	negs	r3, r3
 80091a4:	61a3      	str	r3, [r4, #24]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	b943      	cbnz	r3, 80091bc <__swsetup_r+0xa8>
 80091aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ae:	d1c4      	bne.n	800913a <__swsetup_r+0x26>
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	0781      	lsls	r1, r0, #30
 80091b4:	bf58      	it	pl
 80091b6:	6963      	ldrpl	r3, [r4, #20]
 80091b8:	60a3      	str	r3, [r4, #8]
 80091ba:	e7f4      	b.n	80091a6 <__swsetup_r+0x92>
 80091bc:	2000      	movs	r0, #0
 80091be:	e7f7      	b.n	80091b0 <__swsetup_r+0x9c>
 80091c0:	2000006c 	.word	0x2000006c

080091c4 <memset>:
 80091c4:	4402      	add	r2, r0
 80091c6:	4603      	mov	r3, r0
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d100      	bne.n	80091ce <memset+0xa>
 80091cc:	4770      	bx	lr
 80091ce:	f803 1b01 	strb.w	r1, [r3], #1
 80091d2:	e7f9      	b.n	80091c8 <memset+0x4>

080091d4 <_close_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	; (80091f0 <_close_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f8 fdd9 	bl	8001d96 <_close>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_close_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_close_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000cd0 	.word	0x20000cd0

080091f4 <_lseek_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_lseek_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f8 fdee 	bl	8001de4 <_lseek>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_lseek_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_lseek_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20000cd0 	.word	0x20000cd0

08009218 <_read_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d07      	ldr	r5, [pc, #28]	; (8009238 <_read_r+0x20>)
 800921c:	4604      	mov	r4, r0
 800921e:	4608      	mov	r0, r1
 8009220:	4611      	mov	r1, r2
 8009222:	2200      	movs	r2, #0
 8009224:	602a      	str	r2, [r5, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	f7f8 fd98 	bl	8001d5c <_read>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_read_r+0x1e>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_read_r+0x1e>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20000cd0 	.word	0x20000cd0

0800923c <_write_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d07      	ldr	r5, [pc, #28]	; (800925c <_write_r+0x20>)
 8009240:	4604      	mov	r4, r0
 8009242:	4608      	mov	r0, r1
 8009244:	4611      	mov	r1, r2
 8009246:	2200      	movs	r2, #0
 8009248:	602a      	str	r2, [r5, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f7f7 fe7e 	bl	8000f4c <_write>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_write_r+0x1e>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_write_r+0x1e>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20000cd0 	.word	0x20000cd0

08009260 <__errno>:
 8009260:	4b01      	ldr	r3, [pc, #4]	; (8009268 <__errno+0x8>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	2000006c 	.word	0x2000006c

0800926c <__libc_init_array>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4d0d      	ldr	r5, [pc, #52]	; (80092a4 <__libc_init_array+0x38>)
 8009270:	4c0d      	ldr	r4, [pc, #52]	; (80092a8 <__libc_init_array+0x3c>)
 8009272:	1b64      	subs	r4, r4, r5
 8009274:	10a4      	asrs	r4, r4, #2
 8009276:	2600      	movs	r6, #0
 8009278:	42a6      	cmp	r6, r4
 800927a:	d109      	bne.n	8009290 <__libc_init_array+0x24>
 800927c:	4d0b      	ldr	r5, [pc, #44]	; (80092ac <__libc_init_array+0x40>)
 800927e:	4c0c      	ldr	r4, [pc, #48]	; (80092b0 <__libc_init_array+0x44>)
 8009280:	f000 fee2 	bl	800a048 <_init>
 8009284:	1b64      	subs	r4, r4, r5
 8009286:	10a4      	asrs	r4, r4, #2
 8009288:	2600      	movs	r6, #0
 800928a:	42a6      	cmp	r6, r4
 800928c:	d105      	bne.n	800929a <__libc_init_array+0x2e>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	f855 3b04 	ldr.w	r3, [r5], #4
 8009294:	4798      	blx	r3
 8009296:	3601      	adds	r6, #1
 8009298:	e7ee      	b.n	8009278 <__libc_init_array+0xc>
 800929a:	f855 3b04 	ldr.w	r3, [r5], #4
 800929e:	4798      	blx	r3
 80092a0:	3601      	adds	r6, #1
 80092a2:	e7f2      	b.n	800928a <__libc_init_array+0x1e>
 80092a4:	0800a294 	.word	0x0800a294
 80092a8:	0800a294 	.word	0x0800a294
 80092ac:	0800a294 	.word	0x0800a294
 80092b0:	0800a298 	.word	0x0800a298

080092b4 <__retarget_lock_init_recursive>:
 80092b4:	4770      	bx	lr

080092b6 <__retarget_lock_acquire_recursive>:
 80092b6:	4770      	bx	lr

080092b8 <__retarget_lock_release_recursive>:
 80092b8:	4770      	bx	lr
	...

080092bc <_free_r>:
 80092bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092be:	2900      	cmp	r1, #0
 80092c0:	d044      	beq.n	800934c <_free_r+0x90>
 80092c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c6:	9001      	str	r0, [sp, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f1a1 0404 	sub.w	r4, r1, #4
 80092ce:	bfb8      	it	lt
 80092d0:	18e4      	addlt	r4, r4, r3
 80092d2:	f000 f8df 	bl	8009494 <__malloc_lock>
 80092d6:	4a1e      	ldr	r2, [pc, #120]	; (8009350 <_free_r+0x94>)
 80092d8:	9801      	ldr	r0, [sp, #4]
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	b933      	cbnz	r3, 80092ec <_free_r+0x30>
 80092de:	6063      	str	r3, [r4, #4]
 80092e0:	6014      	str	r4, [r2, #0]
 80092e2:	b003      	add	sp, #12
 80092e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092e8:	f000 b8da 	b.w	80094a0 <__malloc_unlock>
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	d908      	bls.n	8009302 <_free_r+0x46>
 80092f0:	6825      	ldr	r5, [r4, #0]
 80092f2:	1961      	adds	r1, r4, r5
 80092f4:	428b      	cmp	r3, r1
 80092f6:	bf01      	itttt	eq
 80092f8:	6819      	ldreq	r1, [r3, #0]
 80092fa:	685b      	ldreq	r3, [r3, #4]
 80092fc:	1949      	addeq	r1, r1, r5
 80092fe:	6021      	streq	r1, [r4, #0]
 8009300:	e7ed      	b.n	80092de <_free_r+0x22>
 8009302:	461a      	mov	r2, r3
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b10b      	cbz	r3, 800930c <_free_r+0x50>
 8009308:	42a3      	cmp	r3, r4
 800930a:	d9fa      	bls.n	8009302 <_free_r+0x46>
 800930c:	6811      	ldr	r1, [r2, #0]
 800930e:	1855      	adds	r5, r2, r1
 8009310:	42a5      	cmp	r5, r4
 8009312:	d10b      	bne.n	800932c <_free_r+0x70>
 8009314:	6824      	ldr	r4, [r4, #0]
 8009316:	4421      	add	r1, r4
 8009318:	1854      	adds	r4, r2, r1
 800931a:	42a3      	cmp	r3, r4
 800931c:	6011      	str	r1, [r2, #0]
 800931e:	d1e0      	bne.n	80092e2 <_free_r+0x26>
 8009320:	681c      	ldr	r4, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	6053      	str	r3, [r2, #4]
 8009326:	440c      	add	r4, r1
 8009328:	6014      	str	r4, [r2, #0]
 800932a:	e7da      	b.n	80092e2 <_free_r+0x26>
 800932c:	d902      	bls.n	8009334 <_free_r+0x78>
 800932e:	230c      	movs	r3, #12
 8009330:	6003      	str	r3, [r0, #0]
 8009332:	e7d6      	b.n	80092e2 <_free_r+0x26>
 8009334:	6825      	ldr	r5, [r4, #0]
 8009336:	1961      	adds	r1, r4, r5
 8009338:	428b      	cmp	r3, r1
 800933a:	bf04      	itt	eq
 800933c:	6819      	ldreq	r1, [r3, #0]
 800933e:	685b      	ldreq	r3, [r3, #4]
 8009340:	6063      	str	r3, [r4, #4]
 8009342:	bf04      	itt	eq
 8009344:	1949      	addeq	r1, r1, r5
 8009346:	6021      	streq	r1, [r4, #0]
 8009348:	6054      	str	r4, [r2, #4]
 800934a:	e7ca      	b.n	80092e2 <_free_r+0x26>
 800934c:	b003      	add	sp, #12
 800934e:	bd30      	pop	{r4, r5, pc}
 8009350:	20000cd8 	.word	0x20000cd8

08009354 <sbrk_aligned>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	4e0e      	ldr	r6, [pc, #56]	; (8009390 <sbrk_aligned+0x3c>)
 8009358:	460c      	mov	r4, r1
 800935a:	6831      	ldr	r1, [r6, #0]
 800935c:	4605      	mov	r5, r0
 800935e:	b911      	cbnz	r1, 8009366 <sbrk_aligned+0x12>
 8009360:	f000 fe1c 	bl	8009f9c <_sbrk_r>
 8009364:	6030      	str	r0, [r6, #0]
 8009366:	4621      	mov	r1, r4
 8009368:	4628      	mov	r0, r5
 800936a:	f000 fe17 	bl	8009f9c <_sbrk_r>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	d00a      	beq.n	8009388 <sbrk_aligned+0x34>
 8009372:	1cc4      	adds	r4, r0, #3
 8009374:	f024 0403 	bic.w	r4, r4, #3
 8009378:	42a0      	cmp	r0, r4
 800937a:	d007      	beq.n	800938c <sbrk_aligned+0x38>
 800937c:	1a21      	subs	r1, r4, r0
 800937e:	4628      	mov	r0, r5
 8009380:	f000 fe0c 	bl	8009f9c <_sbrk_r>
 8009384:	3001      	adds	r0, #1
 8009386:	d101      	bne.n	800938c <sbrk_aligned+0x38>
 8009388:	f04f 34ff 	mov.w	r4, #4294967295
 800938c:	4620      	mov	r0, r4
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	20000cdc 	.word	0x20000cdc

08009394 <_malloc_r>:
 8009394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009398:	1ccd      	adds	r5, r1, #3
 800939a:	f025 0503 	bic.w	r5, r5, #3
 800939e:	3508      	adds	r5, #8
 80093a0:	2d0c      	cmp	r5, #12
 80093a2:	bf38      	it	cc
 80093a4:	250c      	movcc	r5, #12
 80093a6:	2d00      	cmp	r5, #0
 80093a8:	4607      	mov	r7, r0
 80093aa:	db01      	blt.n	80093b0 <_malloc_r+0x1c>
 80093ac:	42a9      	cmp	r1, r5
 80093ae:	d905      	bls.n	80093bc <_malloc_r+0x28>
 80093b0:	230c      	movs	r3, #12
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	2600      	movs	r6, #0
 80093b6:	4630      	mov	r0, r6
 80093b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009490 <_malloc_r+0xfc>
 80093c0:	f000 f868 	bl	8009494 <__malloc_lock>
 80093c4:	f8d8 3000 	ldr.w	r3, [r8]
 80093c8:	461c      	mov	r4, r3
 80093ca:	bb5c      	cbnz	r4, 8009424 <_malloc_r+0x90>
 80093cc:	4629      	mov	r1, r5
 80093ce:	4638      	mov	r0, r7
 80093d0:	f7ff ffc0 	bl	8009354 <sbrk_aligned>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	4604      	mov	r4, r0
 80093d8:	d155      	bne.n	8009486 <_malloc_r+0xf2>
 80093da:	f8d8 4000 	ldr.w	r4, [r8]
 80093de:	4626      	mov	r6, r4
 80093e0:	2e00      	cmp	r6, #0
 80093e2:	d145      	bne.n	8009470 <_malloc_r+0xdc>
 80093e4:	2c00      	cmp	r4, #0
 80093e6:	d048      	beq.n	800947a <_malloc_r+0xe6>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	4631      	mov	r1, r6
 80093ec:	4638      	mov	r0, r7
 80093ee:	eb04 0903 	add.w	r9, r4, r3
 80093f2:	f000 fdd3 	bl	8009f9c <_sbrk_r>
 80093f6:	4581      	cmp	r9, r0
 80093f8:	d13f      	bne.n	800947a <_malloc_r+0xe6>
 80093fa:	6821      	ldr	r1, [r4, #0]
 80093fc:	1a6d      	subs	r5, r5, r1
 80093fe:	4629      	mov	r1, r5
 8009400:	4638      	mov	r0, r7
 8009402:	f7ff ffa7 	bl	8009354 <sbrk_aligned>
 8009406:	3001      	adds	r0, #1
 8009408:	d037      	beq.n	800947a <_malloc_r+0xe6>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	442b      	add	r3, r5
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	f8d8 3000 	ldr.w	r3, [r8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d038      	beq.n	800948a <_malloc_r+0xf6>
 8009418:	685a      	ldr	r2, [r3, #4]
 800941a:	42a2      	cmp	r2, r4
 800941c:	d12b      	bne.n	8009476 <_malloc_r+0xe2>
 800941e:	2200      	movs	r2, #0
 8009420:	605a      	str	r2, [r3, #4]
 8009422:	e00f      	b.n	8009444 <_malloc_r+0xb0>
 8009424:	6822      	ldr	r2, [r4, #0]
 8009426:	1b52      	subs	r2, r2, r5
 8009428:	d41f      	bmi.n	800946a <_malloc_r+0xd6>
 800942a:	2a0b      	cmp	r2, #11
 800942c:	d917      	bls.n	800945e <_malloc_r+0xca>
 800942e:	1961      	adds	r1, r4, r5
 8009430:	42a3      	cmp	r3, r4
 8009432:	6025      	str	r5, [r4, #0]
 8009434:	bf18      	it	ne
 8009436:	6059      	strne	r1, [r3, #4]
 8009438:	6863      	ldr	r3, [r4, #4]
 800943a:	bf08      	it	eq
 800943c:	f8c8 1000 	streq.w	r1, [r8]
 8009440:	5162      	str	r2, [r4, r5]
 8009442:	604b      	str	r3, [r1, #4]
 8009444:	4638      	mov	r0, r7
 8009446:	f104 060b 	add.w	r6, r4, #11
 800944a:	f000 f829 	bl	80094a0 <__malloc_unlock>
 800944e:	f026 0607 	bic.w	r6, r6, #7
 8009452:	1d23      	adds	r3, r4, #4
 8009454:	1af2      	subs	r2, r6, r3
 8009456:	d0ae      	beq.n	80093b6 <_malloc_r+0x22>
 8009458:	1b9b      	subs	r3, r3, r6
 800945a:	50a3      	str	r3, [r4, r2]
 800945c:	e7ab      	b.n	80093b6 <_malloc_r+0x22>
 800945e:	42a3      	cmp	r3, r4
 8009460:	6862      	ldr	r2, [r4, #4]
 8009462:	d1dd      	bne.n	8009420 <_malloc_r+0x8c>
 8009464:	f8c8 2000 	str.w	r2, [r8]
 8009468:	e7ec      	b.n	8009444 <_malloc_r+0xb0>
 800946a:	4623      	mov	r3, r4
 800946c:	6864      	ldr	r4, [r4, #4]
 800946e:	e7ac      	b.n	80093ca <_malloc_r+0x36>
 8009470:	4634      	mov	r4, r6
 8009472:	6876      	ldr	r6, [r6, #4]
 8009474:	e7b4      	b.n	80093e0 <_malloc_r+0x4c>
 8009476:	4613      	mov	r3, r2
 8009478:	e7cc      	b.n	8009414 <_malloc_r+0x80>
 800947a:	230c      	movs	r3, #12
 800947c:	603b      	str	r3, [r7, #0]
 800947e:	4638      	mov	r0, r7
 8009480:	f000 f80e 	bl	80094a0 <__malloc_unlock>
 8009484:	e797      	b.n	80093b6 <_malloc_r+0x22>
 8009486:	6025      	str	r5, [r4, #0]
 8009488:	e7dc      	b.n	8009444 <_malloc_r+0xb0>
 800948a:	605b      	str	r3, [r3, #4]
 800948c:	deff      	udf	#255	; 0xff
 800948e:	bf00      	nop
 8009490:	20000cd8 	.word	0x20000cd8

08009494 <__malloc_lock>:
 8009494:	4801      	ldr	r0, [pc, #4]	; (800949c <__malloc_lock+0x8>)
 8009496:	f7ff bf0e 	b.w	80092b6 <__retarget_lock_acquire_recursive>
 800949a:	bf00      	nop
 800949c:	20000cd4 	.word	0x20000cd4

080094a0 <__malloc_unlock>:
 80094a0:	4801      	ldr	r0, [pc, #4]	; (80094a8 <__malloc_unlock+0x8>)
 80094a2:	f7ff bf09 	b.w	80092b8 <__retarget_lock_release_recursive>
 80094a6:	bf00      	nop
 80094a8:	20000cd4 	.word	0x20000cd4

080094ac <__ssputs_r>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	688e      	ldr	r6, [r1, #8]
 80094b2:	461f      	mov	r7, r3
 80094b4:	42be      	cmp	r6, r7
 80094b6:	680b      	ldr	r3, [r1, #0]
 80094b8:	4682      	mov	sl, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	4690      	mov	r8, r2
 80094be:	d82c      	bhi.n	800951a <__ssputs_r+0x6e>
 80094c0:	898a      	ldrh	r2, [r1, #12]
 80094c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094c6:	d026      	beq.n	8009516 <__ssputs_r+0x6a>
 80094c8:	6965      	ldr	r5, [r4, #20]
 80094ca:	6909      	ldr	r1, [r1, #16]
 80094cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d0:	eba3 0901 	sub.w	r9, r3, r1
 80094d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d8:	1c7b      	adds	r3, r7, #1
 80094da:	444b      	add	r3, r9
 80094dc:	106d      	asrs	r5, r5, #1
 80094de:	429d      	cmp	r5, r3
 80094e0:	bf38      	it	cc
 80094e2:	461d      	movcc	r5, r3
 80094e4:	0553      	lsls	r3, r2, #21
 80094e6:	d527      	bpl.n	8009538 <__ssputs_r+0x8c>
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7ff ff53 	bl	8009394 <_malloc_r>
 80094ee:	4606      	mov	r6, r0
 80094f0:	b360      	cbz	r0, 800954c <__ssputs_r+0xa0>
 80094f2:	6921      	ldr	r1, [r4, #16]
 80094f4:	464a      	mov	r2, r9
 80094f6:	f000 fd61 	bl	8009fbc <memcpy>
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	6126      	str	r6, [r4, #16]
 8009508:	6165      	str	r5, [r4, #20]
 800950a:	444e      	add	r6, r9
 800950c:	eba5 0509 	sub.w	r5, r5, r9
 8009510:	6026      	str	r6, [r4, #0]
 8009512:	60a5      	str	r5, [r4, #8]
 8009514:	463e      	mov	r6, r7
 8009516:	42be      	cmp	r6, r7
 8009518:	d900      	bls.n	800951c <__ssputs_r+0x70>
 800951a:	463e      	mov	r6, r7
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	4632      	mov	r2, r6
 8009520:	4641      	mov	r1, r8
 8009522:	f000 fcff 	bl	8009f24 <memmove>
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	1b9b      	subs	r3, r3, r6
 800952a:	60a3      	str	r3, [r4, #8]
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	4433      	add	r3, r6
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	2000      	movs	r0, #0
 8009534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009538:	462a      	mov	r2, r5
 800953a:	f000 fd4d 	bl	8009fd8 <_realloc_r>
 800953e:	4606      	mov	r6, r0
 8009540:	2800      	cmp	r0, #0
 8009542:	d1e0      	bne.n	8009506 <__ssputs_r+0x5a>
 8009544:	6921      	ldr	r1, [r4, #16]
 8009546:	4650      	mov	r0, sl
 8009548:	f7ff feb8 	bl	80092bc <_free_r>
 800954c:	230c      	movs	r3, #12
 800954e:	f8ca 3000 	str.w	r3, [sl]
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	f04f 30ff 	mov.w	r0, #4294967295
 800955e:	e7e9      	b.n	8009534 <__ssputs_r+0x88>

08009560 <_svfiprintf_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4698      	mov	r8, r3
 8009566:	898b      	ldrh	r3, [r1, #12]
 8009568:	061b      	lsls	r3, r3, #24
 800956a:	b09d      	sub	sp, #116	; 0x74
 800956c:	4607      	mov	r7, r0
 800956e:	460d      	mov	r5, r1
 8009570:	4614      	mov	r4, r2
 8009572:	d50e      	bpl.n	8009592 <_svfiprintf_r+0x32>
 8009574:	690b      	ldr	r3, [r1, #16]
 8009576:	b963      	cbnz	r3, 8009592 <_svfiprintf_r+0x32>
 8009578:	2140      	movs	r1, #64	; 0x40
 800957a:	f7ff ff0b 	bl	8009394 <_malloc_r>
 800957e:	6028      	str	r0, [r5, #0]
 8009580:	6128      	str	r0, [r5, #16]
 8009582:	b920      	cbnz	r0, 800958e <_svfiprintf_r+0x2e>
 8009584:	230c      	movs	r3, #12
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	f04f 30ff 	mov.w	r0, #4294967295
 800958c:	e0d0      	b.n	8009730 <_svfiprintf_r+0x1d0>
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	616b      	str	r3, [r5, #20]
 8009592:	2300      	movs	r3, #0
 8009594:	9309      	str	r3, [sp, #36]	; 0x24
 8009596:	2320      	movs	r3, #32
 8009598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800959c:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a0:	2330      	movs	r3, #48	; 0x30
 80095a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009748 <_svfiprintf_r+0x1e8>
 80095a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095aa:	f04f 0901 	mov.w	r9, #1
 80095ae:	4623      	mov	r3, r4
 80095b0:	469a      	mov	sl, r3
 80095b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b6:	b10a      	cbz	r2, 80095bc <_svfiprintf_r+0x5c>
 80095b8:	2a25      	cmp	r2, #37	; 0x25
 80095ba:	d1f9      	bne.n	80095b0 <_svfiprintf_r+0x50>
 80095bc:	ebba 0b04 	subs.w	fp, sl, r4
 80095c0:	d00b      	beq.n	80095da <_svfiprintf_r+0x7a>
 80095c2:	465b      	mov	r3, fp
 80095c4:	4622      	mov	r2, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ff6f 	bl	80094ac <__ssputs_r>
 80095ce:	3001      	adds	r0, #1
 80095d0:	f000 80a9 	beq.w	8009726 <_svfiprintf_r+0x1c6>
 80095d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d6:	445a      	add	r2, fp
 80095d8:	9209      	str	r2, [sp, #36]	; 0x24
 80095da:	f89a 3000 	ldrb.w	r3, [sl]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 80a1 	beq.w	8009726 <_svfiprintf_r+0x1c6>
 80095e4:	2300      	movs	r3, #0
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ee:	f10a 0a01 	add.w	sl, sl, #1
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	9307      	str	r3, [sp, #28]
 80095f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095fa:	931a      	str	r3, [sp, #104]	; 0x68
 80095fc:	4654      	mov	r4, sl
 80095fe:	2205      	movs	r2, #5
 8009600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009604:	4850      	ldr	r0, [pc, #320]	; (8009748 <_svfiprintf_r+0x1e8>)
 8009606:	f7f6 fdfb 	bl	8000200 <memchr>
 800960a:	9a04      	ldr	r2, [sp, #16]
 800960c:	b9d8      	cbnz	r0, 8009646 <_svfiprintf_r+0xe6>
 800960e:	06d0      	lsls	r0, r2, #27
 8009610:	bf44      	itt	mi
 8009612:	2320      	movmi	r3, #32
 8009614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009618:	0711      	lsls	r1, r2, #28
 800961a:	bf44      	itt	mi
 800961c:	232b      	movmi	r3, #43	; 0x2b
 800961e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009622:	f89a 3000 	ldrb.w	r3, [sl]
 8009626:	2b2a      	cmp	r3, #42	; 0x2a
 8009628:	d015      	beq.n	8009656 <_svfiprintf_r+0xf6>
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	4654      	mov	r4, sl
 800962e:	2000      	movs	r0, #0
 8009630:	f04f 0c0a 	mov.w	ip, #10
 8009634:	4621      	mov	r1, r4
 8009636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963a:	3b30      	subs	r3, #48	; 0x30
 800963c:	2b09      	cmp	r3, #9
 800963e:	d94d      	bls.n	80096dc <_svfiprintf_r+0x17c>
 8009640:	b1b0      	cbz	r0, 8009670 <_svfiprintf_r+0x110>
 8009642:	9207      	str	r2, [sp, #28]
 8009644:	e014      	b.n	8009670 <_svfiprintf_r+0x110>
 8009646:	eba0 0308 	sub.w	r3, r0, r8
 800964a:	fa09 f303 	lsl.w	r3, r9, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	46a2      	mov	sl, r4
 8009654:	e7d2      	b.n	80095fc <_svfiprintf_r+0x9c>
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	1d19      	adds	r1, r3, #4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	9103      	str	r1, [sp, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfbb      	ittet	lt
 8009662:	425b      	neglt	r3, r3
 8009664:	f042 0202 	orrlt.w	r2, r2, #2
 8009668:	9307      	strge	r3, [sp, #28]
 800966a:	9307      	strlt	r3, [sp, #28]
 800966c:	bfb8      	it	lt
 800966e:	9204      	strlt	r2, [sp, #16]
 8009670:	7823      	ldrb	r3, [r4, #0]
 8009672:	2b2e      	cmp	r3, #46	; 0x2e
 8009674:	d10c      	bne.n	8009690 <_svfiprintf_r+0x130>
 8009676:	7863      	ldrb	r3, [r4, #1]
 8009678:	2b2a      	cmp	r3, #42	; 0x2a
 800967a:	d134      	bne.n	80096e6 <_svfiprintf_r+0x186>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	1d1a      	adds	r2, r3, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	9203      	str	r2, [sp, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfb8      	it	lt
 8009688:	f04f 33ff 	movlt.w	r3, #4294967295
 800968c:	3402      	adds	r4, #2
 800968e:	9305      	str	r3, [sp, #20]
 8009690:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009758 <_svfiprintf_r+0x1f8>
 8009694:	7821      	ldrb	r1, [r4, #0]
 8009696:	2203      	movs	r2, #3
 8009698:	4650      	mov	r0, sl
 800969a:	f7f6 fdb1 	bl	8000200 <memchr>
 800969e:	b138      	cbz	r0, 80096b0 <_svfiprintf_r+0x150>
 80096a0:	9b04      	ldr	r3, [sp, #16]
 80096a2:	eba0 000a 	sub.w	r0, r0, sl
 80096a6:	2240      	movs	r2, #64	; 0x40
 80096a8:	4082      	lsls	r2, r0
 80096aa:	4313      	orrs	r3, r2
 80096ac:	3401      	adds	r4, #1
 80096ae:	9304      	str	r3, [sp, #16]
 80096b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b4:	4825      	ldr	r0, [pc, #148]	; (800974c <_svfiprintf_r+0x1ec>)
 80096b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096ba:	2206      	movs	r2, #6
 80096bc:	f7f6 fda0 	bl	8000200 <memchr>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d038      	beq.n	8009736 <_svfiprintf_r+0x1d6>
 80096c4:	4b22      	ldr	r3, [pc, #136]	; (8009750 <_svfiprintf_r+0x1f0>)
 80096c6:	bb1b      	cbnz	r3, 8009710 <_svfiprintf_r+0x1b0>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	3307      	adds	r3, #7
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	3308      	adds	r3, #8
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d6:	4433      	add	r3, r6
 80096d8:	9309      	str	r3, [sp, #36]	; 0x24
 80096da:	e768      	b.n	80095ae <_svfiprintf_r+0x4e>
 80096dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e0:	460c      	mov	r4, r1
 80096e2:	2001      	movs	r0, #1
 80096e4:	e7a6      	b.n	8009634 <_svfiprintf_r+0xd4>
 80096e6:	2300      	movs	r3, #0
 80096e8:	3401      	adds	r4, #1
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	4619      	mov	r1, r3
 80096ee:	f04f 0c0a 	mov.w	ip, #10
 80096f2:	4620      	mov	r0, r4
 80096f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f8:	3a30      	subs	r2, #48	; 0x30
 80096fa:	2a09      	cmp	r2, #9
 80096fc:	d903      	bls.n	8009706 <_svfiprintf_r+0x1a6>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0c6      	beq.n	8009690 <_svfiprintf_r+0x130>
 8009702:	9105      	str	r1, [sp, #20]
 8009704:	e7c4      	b.n	8009690 <_svfiprintf_r+0x130>
 8009706:	fb0c 2101 	mla	r1, ip, r1, r2
 800970a:	4604      	mov	r4, r0
 800970c:	2301      	movs	r3, #1
 800970e:	e7f0      	b.n	80096f2 <_svfiprintf_r+0x192>
 8009710:	ab03      	add	r3, sp, #12
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	462a      	mov	r2, r5
 8009716:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <_svfiprintf_r+0x1f4>)
 8009718:	a904      	add	r1, sp, #16
 800971a:	4638      	mov	r0, r7
 800971c:	f3af 8000 	nop.w
 8009720:	1c42      	adds	r2, r0, #1
 8009722:	4606      	mov	r6, r0
 8009724:	d1d6      	bne.n	80096d4 <_svfiprintf_r+0x174>
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	065b      	lsls	r3, r3, #25
 800972a:	f53f af2d 	bmi.w	8009588 <_svfiprintf_r+0x28>
 800972e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009730:	b01d      	add	sp, #116	; 0x74
 8009732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009736:	ab03      	add	r3, sp, #12
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	462a      	mov	r2, r5
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <_svfiprintf_r+0x1f4>)
 800973e:	a904      	add	r1, sp, #16
 8009740:	4638      	mov	r0, r7
 8009742:	f000 f9bd 	bl	8009ac0 <_printf_i>
 8009746:	e7eb      	b.n	8009720 <_svfiprintf_r+0x1c0>
 8009748:	0800a258 	.word	0x0800a258
 800974c:	0800a262 	.word	0x0800a262
 8009750:	00000000 	.word	0x00000000
 8009754:	080094ad 	.word	0x080094ad
 8009758:	0800a25e 	.word	0x0800a25e

0800975c <__sfputc_r>:
 800975c:	6893      	ldr	r3, [r2, #8]
 800975e:	3b01      	subs	r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	b410      	push	{r4}
 8009764:	6093      	str	r3, [r2, #8]
 8009766:	da08      	bge.n	800977a <__sfputc_r+0x1e>
 8009768:	6994      	ldr	r4, [r2, #24]
 800976a:	42a3      	cmp	r3, r4
 800976c:	db01      	blt.n	8009772 <__sfputc_r+0x16>
 800976e:	290a      	cmp	r1, #10
 8009770:	d103      	bne.n	800977a <__sfputc_r+0x1e>
 8009772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009776:	f7ff bc90 	b.w	800909a <__swbuf_r>
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	1c58      	adds	r0, r3, #1
 800977e:	6010      	str	r0, [r2, #0]
 8009780:	7019      	strb	r1, [r3, #0]
 8009782:	4608      	mov	r0, r1
 8009784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009788:	4770      	bx	lr

0800978a <__sfputs_r>:
 800978a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978c:	4606      	mov	r6, r0
 800978e:	460f      	mov	r7, r1
 8009790:	4614      	mov	r4, r2
 8009792:	18d5      	adds	r5, r2, r3
 8009794:	42ac      	cmp	r4, r5
 8009796:	d101      	bne.n	800979c <__sfputs_r+0x12>
 8009798:	2000      	movs	r0, #0
 800979a:	e007      	b.n	80097ac <__sfputs_r+0x22>
 800979c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a0:	463a      	mov	r2, r7
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ffda 	bl	800975c <__sfputc_r>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	d1f3      	bne.n	8009794 <__sfputs_r+0xa>
 80097ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097b0 <_vfiprintf_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	460d      	mov	r5, r1
 80097b6:	b09d      	sub	sp, #116	; 0x74
 80097b8:	4614      	mov	r4, r2
 80097ba:	4698      	mov	r8, r3
 80097bc:	4606      	mov	r6, r0
 80097be:	b118      	cbz	r0, 80097c8 <_vfiprintf_r+0x18>
 80097c0:	6a03      	ldr	r3, [r0, #32]
 80097c2:	b90b      	cbnz	r3, 80097c8 <_vfiprintf_r+0x18>
 80097c4:	f7ff fb2e 	bl	8008e24 <__sinit>
 80097c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ca:	07d9      	lsls	r1, r3, #31
 80097cc:	d405      	bmi.n	80097da <_vfiprintf_r+0x2a>
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	059a      	lsls	r2, r3, #22
 80097d2:	d402      	bmi.n	80097da <_vfiprintf_r+0x2a>
 80097d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097d6:	f7ff fd6e 	bl	80092b6 <__retarget_lock_acquire_recursive>
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	071b      	lsls	r3, r3, #28
 80097de:	d501      	bpl.n	80097e4 <_vfiprintf_r+0x34>
 80097e0:	692b      	ldr	r3, [r5, #16]
 80097e2:	b99b      	cbnz	r3, 800980c <_vfiprintf_r+0x5c>
 80097e4:	4629      	mov	r1, r5
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff fc94 	bl	8009114 <__swsetup_r>
 80097ec:	b170      	cbz	r0, 800980c <_vfiprintf_r+0x5c>
 80097ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f0:	07dc      	lsls	r4, r3, #31
 80097f2:	d504      	bpl.n	80097fe <_vfiprintf_r+0x4e>
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295
 80097f8:	b01d      	add	sp, #116	; 0x74
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	0598      	lsls	r0, r3, #22
 8009802:	d4f7      	bmi.n	80097f4 <_vfiprintf_r+0x44>
 8009804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009806:	f7ff fd57 	bl	80092b8 <__retarget_lock_release_recursive>
 800980a:	e7f3      	b.n	80097f4 <_vfiprintf_r+0x44>
 800980c:	2300      	movs	r3, #0
 800980e:	9309      	str	r3, [sp, #36]	; 0x24
 8009810:	2320      	movs	r3, #32
 8009812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009816:	f8cd 800c 	str.w	r8, [sp, #12]
 800981a:	2330      	movs	r3, #48	; 0x30
 800981c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099d0 <_vfiprintf_r+0x220>
 8009820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009824:	f04f 0901 	mov.w	r9, #1
 8009828:	4623      	mov	r3, r4
 800982a:	469a      	mov	sl, r3
 800982c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009830:	b10a      	cbz	r2, 8009836 <_vfiprintf_r+0x86>
 8009832:	2a25      	cmp	r2, #37	; 0x25
 8009834:	d1f9      	bne.n	800982a <_vfiprintf_r+0x7a>
 8009836:	ebba 0b04 	subs.w	fp, sl, r4
 800983a:	d00b      	beq.n	8009854 <_vfiprintf_r+0xa4>
 800983c:	465b      	mov	r3, fp
 800983e:	4622      	mov	r2, r4
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ffa1 	bl	800978a <__sfputs_r>
 8009848:	3001      	adds	r0, #1
 800984a:	f000 80a9 	beq.w	80099a0 <_vfiprintf_r+0x1f0>
 800984e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009850:	445a      	add	r2, fp
 8009852:	9209      	str	r2, [sp, #36]	; 0x24
 8009854:	f89a 3000 	ldrb.w	r3, [sl]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 80a1 	beq.w	80099a0 <_vfiprintf_r+0x1f0>
 800985e:	2300      	movs	r3, #0
 8009860:	f04f 32ff 	mov.w	r2, #4294967295
 8009864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009868:	f10a 0a01 	add.w	sl, sl, #1
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	9307      	str	r3, [sp, #28]
 8009870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009874:	931a      	str	r3, [sp, #104]	; 0x68
 8009876:	4654      	mov	r4, sl
 8009878:	2205      	movs	r2, #5
 800987a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800987e:	4854      	ldr	r0, [pc, #336]	; (80099d0 <_vfiprintf_r+0x220>)
 8009880:	f7f6 fcbe 	bl	8000200 <memchr>
 8009884:	9a04      	ldr	r2, [sp, #16]
 8009886:	b9d8      	cbnz	r0, 80098c0 <_vfiprintf_r+0x110>
 8009888:	06d1      	lsls	r1, r2, #27
 800988a:	bf44      	itt	mi
 800988c:	2320      	movmi	r3, #32
 800988e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009892:	0713      	lsls	r3, r2, #28
 8009894:	bf44      	itt	mi
 8009896:	232b      	movmi	r3, #43	; 0x2b
 8009898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989c:	f89a 3000 	ldrb.w	r3, [sl]
 80098a0:	2b2a      	cmp	r3, #42	; 0x2a
 80098a2:	d015      	beq.n	80098d0 <_vfiprintf_r+0x120>
 80098a4:	9a07      	ldr	r2, [sp, #28]
 80098a6:	4654      	mov	r4, sl
 80098a8:	2000      	movs	r0, #0
 80098aa:	f04f 0c0a 	mov.w	ip, #10
 80098ae:	4621      	mov	r1, r4
 80098b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b4:	3b30      	subs	r3, #48	; 0x30
 80098b6:	2b09      	cmp	r3, #9
 80098b8:	d94d      	bls.n	8009956 <_vfiprintf_r+0x1a6>
 80098ba:	b1b0      	cbz	r0, 80098ea <_vfiprintf_r+0x13a>
 80098bc:	9207      	str	r2, [sp, #28]
 80098be:	e014      	b.n	80098ea <_vfiprintf_r+0x13a>
 80098c0:	eba0 0308 	sub.w	r3, r0, r8
 80098c4:	fa09 f303 	lsl.w	r3, r9, r3
 80098c8:	4313      	orrs	r3, r2
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	46a2      	mov	sl, r4
 80098ce:	e7d2      	b.n	8009876 <_vfiprintf_r+0xc6>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	1d19      	adds	r1, r3, #4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	9103      	str	r1, [sp, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfbb      	ittet	lt
 80098dc:	425b      	neglt	r3, r3
 80098de:	f042 0202 	orrlt.w	r2, r2, #2
 80098e2:	9307      	strge	r3, [sp, #28]
 80098e4:	9307      	strlt	r3, [sp, #28]
 80098e6:	bfb8      	it	lt
 80098e8:	9204      	strlt	r2, [sp, #16]
 80098ea:	7823      	ldrb	r3, [r4, #0]
 80098ec:	2b2e      	cmp	r3, #46	; 0x2e
 80098ee:	d10c      	bne.n	800990a <_vfiprintf_r+0x15a>
 80098f0:	7863      	ldrb	r3, [r4, #1]
 80098f2:	2b2a      	cmp	r3, #42	; 0x2a
 80098f4:	d134      	bne.n	8009960 <_vfiprintf_r+0x1b0>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d1a      	adds	r2, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9203      	str	r2, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	f04f 33ff 	movlt.w	r3, #4294967295
 8009906:	3402      	adds	r4, #2
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80099e0 <_vfiprintf_r+0x230>
 800990e:	7821      	ldrb	r1, [r4, #0]
 8009910:	2203      	movs	r2, #3
 8009912:	4650      	mov	r0, sl
 8009914:	f7f6 fc74 	bl	8000200 <memchr>
 8009918:	b138      	cbz	r0, 800992a <_vfiprintf_r+0x17a>
 800991a:	9b04      	ldr	r3, [sp, #16]
 800991c:	eba0 000a 	sub.w	r0, r0, sl
 8009920:	2240      	movs	r2, #64	; 0x40
 8009922:	4082      	lsls	r2, r0
 8009924:	4313      	orrs	r3, r2
 8009926:	3401      	adds	r4, #1
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800992e:	4829      	ldr	r0, [pc, #164]	; (80099d4 <_vfiprintf_r+0x224>)
 8009930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009934:	2206      	movs	r2, #6
 8009936:	f7f6 fc63 	bl	8000200 <memchr>
 800993a:	2800      	cmp	r0, #0
 800993c:	d03f      	beq.n	80099be <_vfiprintf_r+0x20e>
 800993e:	4b26      	ldr	r3, [pc, #152]	; (80099d8 <_vfiprintf_r+0x228>)
 8009940:	bb1b      	cbnz	r3, 800998a <_vfiprintf_r+0x1da>
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	3307      	adds	r3, #7
 8009946:	f023 0307 	bic.w	r3, r3, #7
 800994a:	3308      	adds	r3, #8
 800994c:	9303      	str	r3, [sp, #12]
 800994e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009950:	443b      	add	r3, r7
 8009952:	9309      	str	r3, [sp, #36]	; 0x24
 8009954:	e768      	b.n	8009828 <_vfiprintf_r+0x78>
 8009956:	fb0c 3202 	mla	r2, ip, r2, r3
 800995a:	460c      	mov	r4, r1
 800995c:	2001      	movs	r0, #1
 800995e:	e7a6      	b.n	80098ae <_vfiprintf_r+0xfe>
 8009960:	2300      	movs	r3, #0
 8009962:	3401      	adds	r4, #1
 8009964:	9305      	str	r3, [sp, #20]
 8009966:	4619      	mov	r1, r3
 8009968:	f04f 0c0a 	mov.w	ip, #10
 800996c:	4620      	mov	r0, r4
 800996e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009972:	3a30      	subs	r2, #48	; 0x30
 8009974:	2a09      	cmp	r2, #9
 8009976:	d903      	bls.n	8009980 <_vfiprintf_r+0x1d0>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0c6      	beq.n	800990a <_vfiprintf_r+0x15a>
 800997c:	9105      	str	r1, [sp, #20]
 800997e:	e7c4      	b.n	800990a <_vfiprintf_r+0x15a>
 8009980:	fb0c 2101 	mla	r1, ip, r1, r2
 8009984:	4604      	mov	r4, r0
 8009986:	2301      	movs	r3, #1
 8009988:	e7f0      	b.n	800996c <_vfiprintf_r+0x1bc>
 800998a:	ab03      	add	r3, sp, #12
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	462a      	mov	r2, r5
 8009990:	4b12      	ldr	r3, [pc, #72]	; (80099dc <_vfiprintf_r+0x22c>)
 8009992:	a904      	add	r1, sp, #16
 8009994:	4630      	mov	r0, r6
 8009996:	f3af 8000 	nop.w
 800999a:	4607      	mov	r7, r0
 800999c:	1c78      	adds	r0, r7, #1
 800999e:	d1d6      	bne.n	800994e <_vfiprintf_r+0x19e>
 80099a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099a2:	07d9      	lsls	r1, r3, #31
 80099a4:	d405      	bmi.n	80099b2 <_vfiprintf_r+0x202>
 80099a6:	89ab      	ldrh	r3, [r5, #12]
 80099a8:	059a      	lsls	r2, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_vfiprintf_r+0x202>
 80099ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ae:	f7ff fc83 	bl	80092b8 <__retarget_lock_release_recursive>
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	065b      	lsls	r3, r3, #25
 80099b6:	f53f af1d 	bmi.w	80097f4 <_vfiprintf_r+0x44>
 80099ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099bc:	e71c      	b.n	80097f8 <_vfiprintf_r+0x48>
 80099be:	ab03      	add	r3, sp, #12
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	462a      	mov	r2, r5
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <_vfiprintf_r+0x22c>)
 80099c6:	a904      	add	r1, sp, #16
 80099c8:	4630      	mov	r0, r6
 80099ca:	f000 f879 	bl	8009ac0 <_printf_i>
 80099ce:	e7e4      	b.n	800999a <_vfiprintf_r+0x1ea>
 80099d0:	0800a258 	.word	0x0800a258
 80099d4:	0800a262 	.word	0x0800a262
 80099d8:	00000000 	.word	0x00000000
 80099dc:	0800978b 	.word	0x0800978b
 80099e0:	0800a25e 	.word	0x0800a25e

080099e4 <_printf_common>:
 80099e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	4616      	mov	r6, r2
 80099ea:	4699      	mov	r9, r3
 80099ec:	688a      	ldr	r2, [r1, #8]
 80099ee:	690b      	ldr	r3, [r1, #16]
 80099f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099f4:	4293      	cmp	r3, r2
 80099f6:	bfb8      	it	lt
 80099f8:	4613      	movlt	r3, r2
 80099fa:	6033      	str	r3, [r6, #0]
 80099fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a00:	4607      	mov	r7, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	b10a      	cbz	r2, 8009a0a <_printf_common+0x26>
 8009a06:	3301      	adds	r3, #1
 8009a08:	6033      	str	r3, [r6, #0]
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	0699      	lsls	r1, r3, #26
 8009a0e:	bf42      	ittt	mi
 8009a10:	6833      	ldrmi	r3, [r6, #0]
 8009a12:	3302      	addmi	r3, #2
 8009a14:	6033      	strmi	r3, [r6, #0]
 8009a16:	6825      	ldr	r5, [r4, #0]
 8009a18:	f015 0506 	ands.w	r5, r5, #6
 8009a1c:	d106      	bne.n	8009a2c <_printf_common+0x48>
 8009a1e:	f104 0a19 	add.w	sl, r4, #25
 8009a22:	68e3      	ldr	r3, [r4, #12]
 8009a24:	6832      	ldr	r2, [r6, #0]
 8009a26:	1a9b      	subs	r3, r3, r2
 8009a28:	42ab      	cmp	r3, r5
 8009a2a:	dc26      	bgt.n	8009a7a <_printf_common+0x96>
 8009a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a30:	1e13      	subs	r3, r2, #0
 8009a32:	6822      	ldr	r2, [r4, #0]
 8009a34:	bf18      	it	ne
 8009a36:	2301      	movne	r3, #1
 8009a38:	0692      	lsls	r2, r2, #26
 8009a3a:	d42b      	bmi.n	8009a94 <_printf_common+0xb0>
 8009a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a40:	4649      	mov	r1, r9
 8009a42:	4638      	mov	r0, r7
 8009a44:	47c0      	blx	r8
 8009a46:	3001      	adds	r0, #1
 8009a48:	d01e      	beq.n	8009a88 <_printf_common+0xa4>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	6922      	ldr	r2, [r4, #16]
 8009a4e:	f003 0306 	and.w	r3, r3, #6
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	bf02      	ittt	eq
 8009a56:	68e5      	ldreq	r5, [r4, #12]
 8009a58:	6833      	ldreq	r3, [r6, #0]
 8009a5a:	1aed      	subeq	r5, r5, r3
 8009a5c:	68a3      	ldr	r3, [r4, #8]
 8009a5e:	bf0c      	ite	eq
 8009a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a64:	2500      	movne	r5, #0
 8009a66:	4293      	cmp	r3, r2
 8009a68:	bfc4      	itt	gt
 8009a6a:	1a9b      	subgt	r3, r3, r2
 8009a6c:	18ed      	addgt	r5, r5, r3
 8009a6e:	2600      	movs	r6, #0
 8009a70:	341a      	adds	r4, #26
 8009a72:	42b5      	cmp	r5, r6
 8009a74:	d11a      	bne.n	8009aac <_printf_common+0xc8>
 8009a76:	2000      	movs	r0, #0
 8009a78:	e008      	b.n	8009a8c <_printf_common+0xa8>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4652      	mov	r2, sl
 8009a7e:	4649      	mov	r1, r9
 8009a80:	4638      	mov	r0, r7
 8009a82:	47c0      	blx	r8
 8009a84:	3001      	adds	r0, #1
 8009a86:	d103      	bne.n	8009a90 <_printf_common+0xac>
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a90:	3501      	adds	r5, #1
 8009a92:	e7c6      	b.n	8009a22 <_printf_common+0x3e>
 8009a94:	18e1      	adds	r1, r4, r3
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	2030      	movs	r0, #48	; 0x30
 8009a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a9e:	4422      	add	r2, r4
 8009aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	e7c7      	b.n	8009a3c <_printf_common+0x58>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4622      	mov	r2, r4
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	47c0      	blx	r8
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d0e6      	beq.n	8009a88 <_printf_common+0xa4>
 8009aba:	3601      	adds	r6, #1
 8009abc:	e7d9      	b.n	8009a72 <_printf_common+0x8e>
	...

08009ac0 <_printf_i>:
 8009ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	7e0f      	ldrb	r7, [r1, #24]
 8009ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ac8:	2f78      	cmp	r7, #120	; 0x78
 8009aca:	4691      	mov	r9, r2
 8009acc:	4680      	mov	r8, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	469a      	mov	sl, r3
 8009ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ad6:	d807      	bhi.n	8009ae8 <_printf_i+0x28>
 8009ad8:	2f62      	cmp	r7, #98	; 0x62
 8009ada:	d80a      	bhi.n	8009af2 <_printf_i+0x32>
 8009adc:	2f00      	cmp	r7, #0
 8009ade:	f000 80d4 	beq.w	8009c8a <_printf_i+0x1ca>
 8009ae2:	2f58      	cmp	r7, #88	; 0x58
 8009ae4:	f000 80c0 	beq.w	8009c68 <_printf_i+0x1a8>
 8009ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009af0:	e03a      	b.n	8009b68 <_printf_i+0xa8>
 8009af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009af6:	2b15      	cmp	r3, #21
 8009af8:	d8f6      	bhi.n	8009ae8 <_printf_i+0x28>
 8009afa:	a101      	add	r1, pc, #4	; (adr r1, 8009b00 <_printf_i+0x40>)
 8009afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b00:	08009b59 	.word	0x08009b59
 8009b04:	08009b6d 	.word	0x08009b6d
 8009b08:	08009ae9 	.word	0x08009ae9
 8009b0c:	08009ae9 	.word	0x08009ae9
 8009b10:	08009ae9 	.word	0x08009ae9
 8009b14:	08009ae9 	.word	0x08009ae9
 8009b18:	08009b6d 	.word	0x08009b6d
 8009b1c:	08009ae9 	.word	0x08009ae9
 8009b20:	08009ae9 	.word	0x08009ae9
 8009b24:	08009ae9 	.word	0x08009ae9
 8009b28:	08009ae9 	.word	0x08009ae9
 8009b2c:	08009c71 	.word	0x08009c71
 8009b30:	08009b99 	.word	0x08009b99
 8009b34:	08009c2b 	.word	0x08009c2b
 8009b38:	08009ae9 	.word	0x08009ae9
 8009b3c:	08009ae9 	.word	0x08009ae9
 8009b40:	08009c93 	.word	0x08009c93
 8009b44:	08009ae9 	.word	0x08009ae9
 8009b48:	08009b99 	.word	0x08009b99
 8009b4c:	08009ae9 	.word	0x08009ae9
 8009b50:	08009ae9 	.word	0x08009ae9
 8009b54:	08009c33 	.word	0x08009c33
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	1d1a      	adds	r2, r3, #4
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	602a      	str	r2, [r5, #0]
 8009b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e09f      	b.n	8009cac <_printf_i+0x1ec>
 8009b6c:	6820      	ldr	r0, [r4, #0]
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	0607      	lsls	r7, r0, #24
 8009b72:	f103 0104 	add.w	r1, r3, #4
 8009b76:	6029      	str	r1, [r5, #0]
 8009b78:	d501      	bpl.n	8009b7e <_printf_i+0xbe>
 8009b7a:	681e      	ldr	r6, [r3, #0]
 8009b7c:	e003      	b.n	8009b86 <_printf_i+0xc6>
 8009b7e:	0646      	lsls	r6, r0, #25
 8009b80:	d5fb      	bpl.n	8009b7a <_printf_i+0xba>
 8009b82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	da03      	bge.n	8009b92 <_printf_i+0xd2>
 8009b8a:	232d      	movs	r3, #45	; 0x2d
 8009b8c:	4276      	negs	r6, r6
 8009b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b92:	485a      	ldr	r0, [pc, #360]	; (8009cfc <_printf_i+0x23c>)
 8009b94:	230a      	movs	r3, #10
 8009b96:	e012      	b.n	8009bbe <_printf_i+0xfe>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	6820      	ldr	r0, [r4, #0]
 8009b9c:	1d19      	adds	r1, r3, #4
 8009b9e:	6029      	str	r1, [r5, #0]
 8009ba0:	0605      	lsls	r5, r0, #24
 8009ba2:	d501      	bpl.n	8009ba8 <_printf_i+0xe8>
 8009ba4:	681e      	ldr	r6, [r3, #0]
 8009ba6:	e002      	b.n	8009bae <_printf_i+0xee>
 8009ba8:	0641      	lsls	r1, r0, #25
 8009baa:	d5fb      	bpl.n	8009ba4 <_printf_i+0xe4>
 8009bac:	881e      	ldrh	r6, [r3, #0]
 8009bae:	4853      	ldr	r0, [pc, #332]	; (8009cfc <_printf_i+0x23c>)
 8009bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8009bb2:	bf0c      	ite	eq
 8009bb4:	2308      	moveq	r3, #8
 8009bb6:	230a      	movne	r3, #10
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bbe:	6865      	ldr	r5, [r4, #4]
 8009bc0:	60a5      	str	r5, [r4, #8]
 8009bc2:	2d00      	cmp	r5, #0
 8009bc4:	bfa2      	ittt	ge
 8009bc6:	6821      	ldrge	r1, [r4, #0]
 8009bc8:	f021 0104 	bicge.w	r1, r1, #4
 8009bcc:	6021      	strge	r1, [r4, #0]
 8009bce:	b90e      	cbnz	r6, 8009bd4 <_printf_i+0x114>
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	d04b      	beq.n	8009c6c <_printf_i+0x1ac>
 8009bd4:	4615      	mov	r5, r2
 8009bd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bda:	fb03 6711 	mls	r7, r3, r1, r6
 8009bde:	5dc7      	ldrb	r7, [r0, r7]
 8009be0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009be4:	4637      	mov	r7, r6
 8009be6:	42bb      	cmp	r3, r7
 8009be8:	460e      	mov	r6, r1
 8009bea:	d9f4      	bls.n	8009bd6 <_printf_i+0x116>
 8009bec:	2b08      	cmp	r3, #8
 8009bee:	d10b      	bne.n	8009c08 <_printf_i+0x148>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	07de      	lsls	r6, r3, #31
 8009bf4:	d508      	bpl.n	8009c08 <_printf_i+0x148>
 8009bf6:	6923      	ldr	r3, [r4, #16]
 8009bf8:	6861      	ldr	r1, [r4, #4]
 8009bfa:	4299      	cmp	r1, r3
 8009bfc:	bfde      	ittt	le
 8009bfe:	2330      	movle	r3, #48	; 0x30
 8009c00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c08:	1b52      	subs	r2, r2, r5
 8009c0a:	6122      	str	r2, [r4, #16]
 8009c0c:	f8cd a000 	str.w	sl, [sp]
 8009c10:	464b      	mov	r3, r9
 8009c12:	aa03      	add	r2, sp, #12
 8009c14:	4621      	mov	r1, r4
 8009c16:	4640      	mov	r0, r8
 8009c18:	f7ff fee4 	bl	80099e4 <_printf_common>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d14a      	bne.n	8009cb6 <_printf_i+0x1f6>
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295
 8009c24:	b004      	add	sp, #16
 8009c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	f043 0320 	orr.w	r3, r3, #32
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	4833      	ldr	r0, [pc, #204]	; (8009d00 <_printf_i+0x240>)
 8009c34:	2778      	movs	r7, #120	; 0x78
 8009c36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	6829      	ldr	r1, [r5, #0]
 8009c3e:	061f      	lsls	r7, r3, #24
 8009c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c44:	d402      	bmi.n	8009c4c <_printf_i+0x18c>
 8009c46:	065f      	lsls	r7, r3, #25
 8009c48:	bf48      	it	mi
 8009c4a:	b2b6      	uxthmi	r6, r6
 8009c4c:	07df      	lsls	r7, r3, #31
 8009c4e:	bf48      	it	mi
 8009c50:	f043 0320 	orrmi.w	r3, r3, #32
 8009c54:	6029      	str	r1, [r5, #0]
 8009c56:	bf48      	it	mi
 8009c58:	6023      	strmi	r3, [r4, #0]
 8009c5a:	b91e      	cbnz	r6, 8009c64 <_printf_i+0x1a4>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	f023 0320 	bic.w	r3, r3, #32
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	2310      	movs	r3, #16
 8009c66:	e7a7      	b.n	8009bb8 <_printf_i+0xf8>
 8009c68:	4824      	ldr	r0, [pc, #144]	; (8009cfc <_printf_i+0x23c>)
 8009c6a:	e7e4      	b.n	8009c36 <_printf_i+0x176>
 8009c6c:	4615      	mov	r5, r2
 8009c6e:	e7bd      	b.n	8009bec <_printf_i+0x12c>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	6826      	ldr	r6, [r4, #0]
 8009c74:	6961      	ldr	r1, [r4, #20]
 8009c76:	1d18      	adds	r0, r3, #4
 8009c78:	6028      	str	r0, [r5, #0]
 8009c7a:	0635      	lsls	r5, r6, #24
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	d501      	bpl.n	8009c84 <_printf_i+0x1c4>
 8009c80:	6019      	str	r1, [r3, #0]
 8009c82:	e002      	b.n	8009c8a <_printf_i+0x1ca>
 8009c84:	0670      	lsls	r0, r6, #25
 8009c86:	d5fb      	bpl.n	8009c80 <_printf_i+0x1c0>
 8009c88:	8019      	strh	r1, [r3, #0]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	6123      	str	r3, [r4, #16]
 8009c8e:	4615      	mov	r5, r2
 8009c90:	e7bc      	b.n	8009c0c <_printf_i+0x14c>
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	1d1a      	adds	r2, r3, #4
 8009c96:	602a      	str	r2, [r5, #0]
 8009c98:	681d      	ldr	r5, [r3, #0]
 8009c9a:	6862      	ldr	r2, [r4, #4]
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f7f6 faae 	bl	8000200 <memchr>
 8009ca4:	b108      	cbz	r0, 8009caa <_printf_i+0x1ea>
 8009ca6:	1b40      	subs	r0, r0, r5
 8009ca8:	6060      	str	r0, [r4, #4]
 8009caa:	6863      	ldr	r3, [r4, #4]
 8009cac:	6123      	str	r3, [r4, #16]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cb4:	e7aa      	b.n	8009c0c <_printf_i+0x14c>
 8009cb6:	6923      	ldr	r3, [r4, #16]
 8009cb8:	462a      	mov	r2, r5
 8009cba:	4649      	mov	r1, r9
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	47d0      	blx	sl
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d0ad      	beq.n	8009c20 <_printf_i+0x160>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	079b      	lsls	r3, r3, #30
 8009cc8:	d413      	bmi.n	8009cf2 <_printf_i+0x232>
 8009cca:	68e0      	ldr	r0, [r4, #12]
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	4298      	cmp	r0, r3
 8009cd0:	bfb8      	it	lt
 8009cd2:	4618      	movlt	r0, r3
 8009cd4:	e7a6      	b.n	8009c24 <_printf_i+0x164>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4649      	mov	r1, r9
 8009cdc:	4640      	mov	r0, r8
 8009cde:	47d0      	blx	sl
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d09d      	beq.n	8009c20 <_printf_i+0x160>
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	68e3      	ldr	r3, [r4, #12]
 8009ce8:	9903      	ldr	r1, [sp, #12]
 8009cea:	1a5b      	subs	r3, r3, r1
 8009cec:	42ab      	cmp	r3, r5
 8009cee:	dcf2      	bgt.n	8009cd6 <_printf_i+0x216>
 8009cf0:	e7eb      	b.n	8009cca <_printf_i+0x20a>
 8009cf2:	2500      	movs	r5, #0
 8009cf4:	f104 0619 	add.w	r6, r4, #25
 8009cf8:	e7f5      	b.n	8009ce6 <_printf_i+0x226>
 8009cfa:	bf00      	nop
 8009cfc:	0800a269 	.word	0x0800a269
 8009d00:	0800a27a 	.word	0x0800a27a

08009d04 <__sflush_r>:
 8009d04:	898a      	ldrh	r2, [r1, #12]
 8009d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	0710      	lsls	r0, r2, #28
 8009d0e:	460c      	mov	r4, r1
 8009d10:	d458      	bmi.n	8009dc4 <__sflush_r+0xc0>
 8009d12:	684b      	ldr	r3, [r1, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dc05      	bgt.n	8009d24 <__sflush_r+0x20>
 8009d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	dc02      	bgt.n	8009d24 <__sflush_r+0x20>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	d0f9      	beq.n	8009d1e <__sflush_r+0x1a>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d30:	682f      	ldr	r7, [r5, #0]
 8009d32:	6a21      	ldr	r1, [r4, #32]
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	d032      	beq.n	8009d9e <__sflush_r+0x9a>
 8009d38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	075a      	lsls	r2, r3, #29
 8009d3e:	d505      	bpl.n	8009d4c <__sflush_r+0x48>
 8009d40:	6863      	ldr	r3, [r4, #4]
 8009d42:	1ac0      	subs	r0, r0, r3
 8009d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d46:	b10b      	cbz	r3, 8009d4c <__sflush_r+0x48>
 8009d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d4a:	1ac0      	subs	r0, r0, r3
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4602      	mov	r2, r0
 8009d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d52:	6a21      	ldr	r1, [r4, #32]
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b0      	blx	r6
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	d106      	bne.n	8009d6c <__sflush_r+0x68>
 8009d5e:	6829      	ldr	r1, [r5, #0]
 8009d60:	291d      	cmp	r1, #29
 8009d62:	d82b      	bhi.n	8009dbc <__sflush_r+0xb8>
 8009d64:	4a29      	ldr	r2, [pc, #164]	; (8009e0c <__sflush_r+0x108>)
 8009d66:	410a      	asrs	r2, r1
 8009d68:	07d6      	lsls	r6, r2, #31
 8009d6a:	d427      	bmi.n	8009dbc <__sflush_r+0xb8>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	6062      	str	r2, [r4, #4]
 8009d70:	04d9      	lsls	r1, r3, #19
 8009d72:	6922      	ldr	r2, [r4, #16]
 8009d74:	6022      	str	r2, [r4, #0]
 8009d76:	d504      	bpl.n	8009d82 <__sflush_r+0x7e>
 8009d78:	1c42      	adds	r2, r0, #1
 8009d7a:	d101      	bne.n	8009d80 <__sflush_r+0x7c>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b903      	cbnz	r3, 8009d82 <__sflush_r+0x7e>
 8009d80:	6560      	str	r0, [r4, #84]	; 0x54
 8009d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d84:	602f      	str	r7, [r5, #0]
 8009d86:	2900      	cmp	r1, #0
 8009d88:	d0c9      	beq.n	8009d1e <__sflush_r+0x1a>
 8009d8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d8e:	4299      	cmp	r1, r3
 8009d90:	d002      	beq.n	8009d98 <__sflush_r+0x94>
 8009d92:	4628      	mov	r0, r5
 8009d94:	f7ff fa92 	bl	80092bc <_free_r>
 8009d98:	2000      	movs	r0, #0
 8009d9a:	6360      	str	r0, [r4, #52]	; 0x34
 8009d9c:	e7c0      	b.n	8009d20 <__sflush_r+0x1c>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b0      	blx	r6
 8009da4:	1c41      	adds	r1, r0, #1
 8009da6:	d1c8      	bne.n	8009d3a <__sflush_r+0x36>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0c5      	beq.n	8009d3a <__sflush_r+0x36>
 8009dae:	2b1d      	cmp	r3, #29
 8009db0:	d001      	beq.n	8009db6 <__sflush_r+0xb2>
 8009db2:	2b16      	cmp	r3, #22
 8009db4:	d101      	bne.n	8009dba <__sflush_r+0xb6>
 8009db6:	602f      	str	r7, [r5, #0]
 8009db8:	e7b1      	b.n	8009d1e <__sflush_r+0x1a>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	e7ad      	b.n	8009d20 <__sflush_r+0x1c>
 8009dc4:	690f      	ldr	r7, [r1, #16]
 8009dc6:	2f00      	cmp	r7, #0
 8009dc8:	d0a9      	beq.n	8009d1e <__sflush_r+0x1a>
 8009dca:	0793      	lsls	r3, r2, #30
 8009dcc:	680e      	ldr	r6, [r1, #0]
 8009dce:	bf08      	it	eq
 8009dd0:	694b      	ldreq	r3, [r1, #20]
 8009dd2:	600f      	str	r7, [r1, #0]
 8009dd4:	bf18      	it	ne
 8009dd6:	2300      	movne	r3, #0
 8009dd8:	eba6 0807 	sub.w	r8, r6, r7
 8009ddc:	608b      	str	r3, [r1, #8]
 8009dde:	f1b8 0f00 	cmp.w	r8, #0
 8009de2:	dd9c      	ble.n	8009d1e <__sflush_r+0x1a>
 8009de4:	6a21      	ldr	r1, [r4, #32]
 8009de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009de8:	4643      	mov	r3, r8
 8009dea:	463a      	mov	r2, r7
 8009dec:	4628      	mov	r0, r5
 8009dee:	47b0      	blx	r6
 8009df0:	2800      	cmp	r0, #0
 8009df2:	dc06      	bgt.n	8009e02 <__sflush_r+0xfe>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009e00:	e78e      	b.n	8009d20 <__sflush_r+0x1c>
 8009e02:	4407      	add	r7, r0
 8009e04:	eba8 0800 	sub.w	r8, r8, r0
 8009e08:	e7e9      	b.n	8009dde <__sflush_r+0xda>
 8009e0a:	bf00      	nop
 8009e0c:	dfbffffe 	.word	0xdfbffffe

08009e10 <_fflush_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	690b      	ldr	r3, [r1, #16]
 8009e14:	4605      	mov	r5, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	b913      	cbnz	r3, 8009e20 <_fflush_r+0x10>
 8009e1a:	2500      	movs	r5, #0
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	b118      	cbz	r0, 8009e2a <_fflush_r+0x1a>
 8009e22:	6a03      	ldr	r3, [r0, #32]
 8009e24:	b90b      	cbnz	r3, 8009e2a <_fflush_r+0x1a>
 8009e26:	f7fe fffd 	bl	8008e24 <__sinit>
 8009e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0f3      	beq.n	8009e1a <_fflush_r+0xa>
 8009e32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e34:	07d0      	lsls	r0, r2, #31
 8009e36:	d404      	bmi.n	8009e42 <_fflush_r+0x32>
 8009e38:	0599      	lsls	r1, r3, #22
 8009e3a:	d402      	bmi.n	8009e42 <_fflush_r+0x32>
 8009e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e3e:	f7ff fa3a 	bl	80092b6 <__retarget_lock_acquire_recursive>
 8009e42:	4628      	mov	r0, r5
 8009e44:	4621      	mov	r1, r4
 8009e46:	f7ff ff5d 	bl	8009d04 <__sflush_r>
 8009e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e4c:	07da      	lsls	r2, r3, #31
 8009e4e:	4605      	mov	r5, r0
 8009e50:	d4e4      	bmi.n	8009e1c <_fflush_r+0xc>
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	059b      	lsls	r3, r3, #22
 8009e56:	d4e1      	bmi.n	8009e1c <_fflush_r+0xc>
 8009e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e5a:	f7ff fa2d 	bl	80092b8 <__retarget_lock_release_recursive>
 8009e5e:	e7dd      	b.n	8009e1c <_fflush_r+0xc>

08009e60 <__swhatbuf_r>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	460c      	mov	r4, r1
 8009e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	b096      	sub	sp, #88	; 0x58
 8009e6c:	4615      	mov	r5, r2
 8009e6e:	461e      	mov	r6, r3
 8009e70:	da0d      	bge.n	8009e8e <__swhatbuf_r+0x2e>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e78:	f04f 0100 	mov.w	r1, #0
 8009e7c:	bf0c      	ite	eq
 8009e7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e82:	2340      	movne	r3, #64	; 0x40
 8009e84:	2000      	movs	r0, #0
 8009e86:	6031      	str	r1, [r6, #0]
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	b016      	add	sp, #88	; 0x58
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
 8009e8e:	466a      	mov	r2, sp
 8009e90:	f000 f862 	bl	8009f58 <_fstat_r>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	dbec      	blt.n	8009e72 <__swhatbuf_r+0x12>
 8009e98:	9901      	ldr	r1, [sp, #4]
 8009e9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009ea2:	4259      	negs	r1, r3
 8009ea4:	4159      	adcs	r1, r3
 8009ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eaa:	e7eb      	b.n	8009e84 <__swhatbuf_r+0x24>

08009eac <__smakebuf_r>:
 8009eac:	898b      	ldrh	r3, [r1, #12]
 8009eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009eb0:	079d      	lsls	r5, r3, #30
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	d507      	bpl.n	8009ec8 <__smakebuf_r+0x1c>
 8009eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	6123      	str	r3, [r4, #16]
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	6163      	str	r3, [r4, #20]
 8009ec4:	b002      	add	sp, #8
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	ab01      	add	r3, sp, #4
 8009eca:	466a      	mov	r2, sp
 8009ecc:	f7ff ffc8 	bl	8009e60 <__swhatbuf_r>
 8009ed0:	9900      	ldr	r1, [sp, #0]
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7ff fa5d 	bl	8009394 <_malloc_r>
 8009eda:	b948      	cbnz	r0, 8009ef0 <__smakebuf_r+0x44>
 8009edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee0:	059a      	lsls	r2, r3, #22
 8009ee2:	d4ef      	bmi.n	8009ec4 <__smakebuf_r+0x18>
 8009ee4:	f023 0303 	bic.w	r3, r3, #3
 8009ee8:	f043 0302 	orr.w	r3, r3, #2
 8009eec:	81a3      	strh	r3, [r4, #12]
 8009eee:	e7e3      	b.n	8009eb8 <__smakebuf_r+0xc>
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	6020      	str	r0, [r4, #0]
 8009ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	9b00      	ldr	r3, [sp, #0]
 8009efc:	6163      	str	r3, [r4, #20]
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	6120      	str	r0, [r4, #16]
 8009f02:	b15b      	cbz	r3, 8009f1c <__smakebuf_r+0x70>
 8009f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f000 f837 	bl	8009f7c <_isatty_r>
 8009f0e:	b128      	cbz	r0, 8009f1c <__smakebuf_r+0x70>
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	f023 0303 	bic.w	r3, r3, #3
 8009f16:	f043 0301 	orr.w	r3, r3, #1
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	431d      	orrs	r5, r3
 8009f20:	81a5      	strh	r5, [r4, #12]
 8009f22:	e7cf      	b.n	8009ec4 <__smakebuf_r+0x18>

08009f24 <memmove>:
 8009f24:	4288      	cmp	r0, r1
 8009f26:	b510      	push	{r4, lr}
 8009f28:	eb01 0402 	add.w	r4, r1, r2
 8009f2c:	d902      	bls.n	8009f34 <memmove+0x10>
 8009f2e:	4284      	cmp	r4, r0
 8009f30:	4623      	mov	r3, r4
 8009f32:	d807      	bhi.n	8009f44 <memmove+0x20>
 8009f34:	1e43      	subs	r3, r0, #1
 8009f36:	42a1      	cmp	r1, r4
 8009f38:	d008      	beq.n	8009f4c <memmove+0x28>
 8009f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f42:	e7f8      	b.n	8009f36 <memmove+0x12>
 8009f44:	4402      	add	r2, r0
 8009f46:	4601      	mov	r1, r0
 8009f48:	428a      	cmp	r2, r1
 8009f4a:	d100      	bne.n	8009f4e <memmove+0x2a>
 8009f4c:	bd10      	pop	{r4, pc}
 8009f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f56:	e7f7      	b.n	8009f48 <memmove+0x24>

08009f58 <_fstat_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d07      	ldr	r5, [pc, #28]	; (8009f78 <_fstat_r+0x20>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	f7f7 ff22 	bl	8001dae <_fstat>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d102      	bne.n	8009f74 <_fstat_r+0x1c>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	b103      	cbz	r3, 8009f74 <_fstat_r+0x1c>
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	20000cd0 	.word	0x20000cd0

08009f7c <_isatty_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_isatty_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f7 ff21 	bl	8001dce <_isatty>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_isatty_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_isatty_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20000cd0 	.word	0x20000cd0

08009f9c <_sbrk_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d06      	ldr	r5, [pc, #24]	; (8009fb8 <_sbrk_r+0x1c>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	602b      	str	r3, [r5, #0]
 8009fa8:	f7f7 ff2a 	bl	8001e00 <_sbrk>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_sbrk_r+0x1a>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_sbrk_r+0x1a>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	20000cd0 	.word	0x20000cd0

08009fbc <memcpy>:
 8009fbc:	440a      	add	r2, r1
 8009fbe:	4291      	cmp	r1, r2
 8009fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fc4:	d100      	bne.n	8009fc8 <memcpy+0xc>
 8009fc6:	4770      	bx	lr
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fd2:	4291      	cmp	r1, r2
 8009fd4:	d1f9      	bne.n	8009fca <memcpy+0xe>
 8009fd6:	bd10      	pop	{r4, pc}

08009fd8 <_realloc_r>:
 8009fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4614      	mov	r4, r2
 8009fe0:	460e      	mov	r6, r1
 8009fe2:	b921      	cbnz	r1, 8009fee <_realloc_r+0x16>
 8009fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	4611      	mov	r1, r2
 8009fea:	f7ff b9d3 	b.w	8009394 <_malloc_r>
 8009fee:	b92a      	cbnz	r2, 8009ffc <_realloc_r+0x24>
 8009ff0:	f7ff f964 	bl	80092bc <_free_r>
 8009ff4:	4625      	mov	r5, r4
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ffc:	f000 f81b 	bl	800a036 <_malloc_usable_size_r>
 800a000:	4284      	cmp	r4, r0
 800a002:	4607      	mov	r7, r0
 800a004:	d802      	bhi.n	800a00c <_realloc_r+0x34>
 800a006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a00a:	d812      	bhi.n	800a032 <_realloc_r+0x5a>
 800a00c:	4621      	mov	r1, r4
 800a00e:	4640      	mov	r0, r8
 800a010:	f7ff f9c0 	bl	8009394 <_malloc_r>
 800a014:	4605      	mov	r5, r0
 800a016:	2800      	cmp	r0, #0
 800a018:	d0ed      	beq.n	8009ff6 <_realloc_r+0x1e>
 800a01a:	42bc      	cmp	r4, r7
 800a01c:	4622      	mov	r2, r4
 800a01e:	4631      	mov	r1, r6
 800a020:	bf28      	it	cs
 800a022:	463a      	movcs	r2, r7
 800a024:	f7ff ffca 	bl	8009fbc <memcpy>
 800a028:	4631      	mov	r1, r6
 800a02a:	4640      	mov	r0, r8
 800a02c:	f7ff f946 	bl	80092bc <_free_r>
 800a030:	e7e1      	b.n	8009ff6 <_realloc_r+0x1e>
 800a032:	4635      	mov	r5, r6
 800a034:	e7df      	b.n	8009ff6 <_realloc_r+0x1e>

0800a036 <_malloc_usable_size_r>:
 800a036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a03a:	1f18      	subs	r0, r3, #4
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	bfbc      	itt	lt
 800a040:	580b      	ldrlt	r3, [r1, r0]
 800a042:	18c0      	addlt	r0, r0, r3
 800a044:	4770      	bx	lr
	...

0800a048 <_init>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	bf00      	nop
 800a04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04e:	bc08      	pop	{r3}
 800a050:	469e      	mov	lr, r3
 800a052:	4770      	bx	lr

0800a054 <_fini>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr
