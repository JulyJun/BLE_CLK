/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "eth.h"
#include "i2c.h"
#include "rtc.h"
#include "tim.h"
#include "usart.h"
#include "usb_otg.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

int _write(int file, char *ptr, int len)
{
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
	return len;
}

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define FLASH_USER_START_ADDR   ADDR_FLASH_SECTOR_22
#define FLASH_USER_END_ADDR     ADDR_FLASH_SECTOR_22  \
		+  GetSectorSize(ADDR_FLASH_SECTOR_22) -1 /* End @ of user Flash area : sector start address + sector size -1 */
#define FLASH_TIME_DATA 0
#define FLASH_ALARM_DATA 32

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
CLK_State_t clock_state = NORMAL_STATE;

uint8_t rx3Data, rx4Data;

RTC_AlarmTypeDef sAlarm;
RTC_DateTypeDef sDate;
RTC_TimeTypeDef sTime;
flashStatus_e status_f;
uint32_t Joycon[2];

char showTime[LCD_SIZE] = {0};
char showDate[LCD_SIZE] = {0};
char ampm[2][3] = {"AM", "PM"};
char copyTime[LCD_SIZE];
char controlTime[LCD_SIZE] = {0,};
bleBuffer_t ble = {0};
uint8_t cpyflag = 0, oneClick;
bool isSave = false, alarmFlag = false;

uint8_t temp_ap = 0xFF, temp_h = 0xFF, temp_m = 0xFF, temp_s = 0xFF;
uint8_t curr_ap = 0xFF, curr_h = 0xFF, curr_m = 0xFF, curr_s = 0xFF;
uint8_t alarm_ap = 0xFF, alarm_h = 0xFF, alarm_m = 0xFF, alarm_s = 0xFF;
uint8_t songIndex = 0; // default song index

uint32_t countUp = 0;

int adc1_val, adc2_val;

unsigned int pastTimer = 0, currentTimer= 0, interval, count = 0 , oneTimeCheckerOld = 0, oneTimeCheckerNew = 0;
unsigned int countPassedTime = 0, elaspeTime = 0 , nextButtonUp = 0, nextButtonDown = 0;
unsigned int dbclk, holdclk;
buttonState buttonPosition;
timeFormat_t timeFormatter;
target_flashRange_t flash;
unsigned char buf[120];

void (*songList[2])(int*) = { springWater_song, threeBear_song };
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t SECTORError = 0;
uint32_t saveData[DATASIZE_FLASH];

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_ETH_Init();
	MX_USART3_UART_Init();
	MX_USB_OTG_FS_PCD_Init();
	MX_I2C1_Init();
	MX_RTC_Init();
	MX_TIM2_Init();
	MX_UART4_Init();
	MX_ADC1_Init();
	MX_TIM3_Init();

	/* Initialize interrupts */
	MX_NVIC_Init();
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	HAL_ADC_Start_DMA(&hadc1, Joycon, sizeof(Joycon)/sizeof(Joycon[0]));
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
	HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));

	init();
	LCD_Clear();
	set_date(RTC_WEEKDAY_WEDNESDAY, 11, 22, 23);
//	set_time(13,25,0);
//	set_alarm(0, 0, 5);

	initFlash(&flash, FLASH_USER_START_ADDR, FLASH_USER_END_ADDR);

	clockEntry();
	//eraseFlash(FLASH_USER_START_ADDR);
	//springWater_song();
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//printf("x: %d\r\ny: %d\r\n",Joycon[0],Joycon[1]);
		//printf("current state: %d\r\n", clock_state);
#if 1
		switch(clock_state)
		{
		case NORMAL_STATE:
			get_time();
			HAL_Delay(300);
			ble.receivedCommand_flag = false;
			BLE_Command();
			break;
		case TIME_SETTING:
			// 1. timer setting
			// 2. save at flash
			timeSetter(TIME_SET);
			LCD_PrintAll("Set Time      ", controlTime);
			if(isSave == true)
			{
				saveCurrentTime(TIME_SET);
				set_time(curr_h, curr_m, curr_s);
				ble.receivedCommand_flag = false;
				BLE_Command();
				LCD_Clear();
			}
			printf("setting mode\r\n");
			HAL_Delay(500);
			break;
		case ALARM_TIME_SETTING:
			// 1. alarm time setting
			// 2. save at flash
			timeSetter(ALARM_SET);
			LCD_PrintAll("Wake Up Time", controlTime);
			if(isSave == true)
			{
				saveCurrentTime(ALARM_SET);
				set_alarm(alarm_h, alarm_m, alarm_s);
				ble.receivedCommand_flag = false;
				BLE_Command();
				LCD_Clear();
			}
			printf("alarm mode\r\n");
			HAL_Delay(500);
			break;
		case MUSIC_SELECT:
			// 1. music select
			// 2. save at flash
			selectSong();
			if(isSave == true)
			{
				remove_tone();
				saveCurrentTime(SONG_SET);
				ble.receivedCommand_flag = false;
				BLE_Command();
				LCD_Clear();
			}
			printf("music mode\r\n");
			break;
		default:
			clock_state = NORMAL_STATE;
			break;
		}

		if(alarmFlag == true)
		{
			alarmOn();
			alarmFlag = false;
		}

#endif
#if 0
		//selectSong();
#endif

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
	/* RTC_Alarm_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
	/* EXTI9_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(ADC_IRQn);
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART3_IRQn);
	/* UART4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(UART4_IRQn);
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

/* USER CODE BEGIN 4 */
// DATASIZE_FLASH
void clockEntry()
{
	if(readFlash(flash.USER_START_ADDR) == ACTIVE_FLASH)
	{
		for(uint32_t index = 0;
				index < DATASIZE_FLASH*4; index += 4)
		{
			saveData[index/4] = readFlash(flash.USER_START_ADDR + index);
		}
		timeLoad();
		printf(">>time data loaded\r\n");
		alarmLoad();
		printf(">>alarm data loaded\r\n");
	}
	else
	{
		printf("no data exist\r\n just start\r\n");
	}
	init_set_time();
}
void timeLoad()
{
	set_time(saveData[4], saveData[5], saveData[6]);
}
void alarmLoad()
{
	set_alarm(saveData[8], saveData[9], saveData[10]);
	songIndex = saveData[11];
}
void init_set_time()
{
	sTime.TimeFormat = saveData[AMPM_CUR];
	sTime.Hours = saveData[HOUR_CUR];
	sTime.Minutes = saveData[MIN_CUR];
	sTime.Seconds = saveData[SEC_CUR];
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
}

void set_time(uint8_t hh, uint8_t mm, uint8_t ss)
{
	//RTC_TimeTypeDef sTime;
	sTime.Hours = hh;
	sTime.Minutes = mm;
	sTime.Seconds = ss;
	if(hh >= 12)
	{
		sTime.TimeFormat = 1;
	}
	else
	{
		sTime.TimeFormat = 0;
	}
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
}
void set_alarm(uint8_t hh, uint8_t mm, uint8_t ss)
{
	sAlarm.AlarmTime.Hours = hh;
	sAlarm.AlarmTime.Minutes = mm;
	sAlarm.AlarmTime.Seconds = ss;
	sAlarm.AlarmTime.SubSeconds = 0x0;
	sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
	sAlarm.AlarmDateWeekDay = 0x1;
	sAlarm.Alarm = RTC_ALARM_A;
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
	{
		Error_Handler();
	}
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
}
void set_date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy)
{
	//RTC_DateTypeDef sDate;
	sDate.WeekDay = ww;
	sDate.Month = mm;
	sDate.Date = dd;
	sDate.Year = yy;
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
}

void get_time(void)
{
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

	temp_ap = sTime.TimeFormat;
	temp_h = sTime.Hours;
	temp_m = sTime.Minutes;
	temp_s = sTime.Seconds;

	if(temp_h >= 24)
	{
		set_time(0, 0, 0);
	}
	memset(showTime, 0, sizeof(showTime)/sizeof(showTime));
	memset(showDate, 0, sizeof(showDate)/sizeof(showDate));
	sprintf((char*)showTime, "%s %02d:%02d:%02d",ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
	sprintf((char*)showDate, "  %04d/%02d/%02d",2000+sDate.Year, sDate.Month, sDate.Date);
	LCD_PrintAll(showDate, showTime);
}

void timeSetter(flashStatus_e status)
{
	static bool toggleChar = false;
	static uint8_t choice = 0;
	BLE_ControlCommand();
	if(IsRight())
	{
		choice ++;
		if(choice > 3)
		{
			choice = 0;
		}
	}
	else if(IsLeft())
	{
		choice --;
		if(choice > 4)
		{
			choice = 3;
		}
	}
	switch (choice)
	{
	case AMPM:
		if(toggleChar)
		{
			sprintf(controlTime, "__ %02d:%02d:%02d",temp_h,temp_m,temp_s);
		}
		else
		{
			if(IsUP())
			{
				temp_ap++;
			}
			else if(IsDown())
			{
				temp_ap--;
			}

			temp_ap = temp_ap % 2;				// essential
			if(temp_ap == 1)
			{
				temp_h = temp_h % 12 + 12;
			}
			else
			{
				temp_h = temp_h % 12;
			}
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[temp_ap],temp_h,temp_m,temp_s);
		}
		break;
	case HOUR:
		if(toggleChar)
		{
			sprintf(controlTime, "%s __:%02d:%02d",ampm[temp_ap%2],temp_m,temp_s);
		}
		else
		{
			if(IsUP())
			{
				temp_h++;
			}
			else if(IsDown())
			{
				temp_h--;
			}
			//temp_h %= 24;
			if(temp_h == 0xFF)
			{
				temp_h = 23;
			}
			else
			{
				temp_h = temp_h % 24;	// 0 ~ 23
				if(temp_h >= 12)
				{
					temp_ap = 1;
				}
				else
				{
					temp_ap = 0;
				}
			}
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[temp_ap],temp_h,temp_m,temp_s);
		}
		break;
	case MIN:
		if(toggleChar)
		{
			sprintf(controlTime, "%s %02d:__:%02d",ampm[temp_ap],temp_h,temp_s);
		}
		else
		{
			if(IsUP())
			{
				temp_m++;
			}
			else if(IsDown())
			{
				temp_m--;
			}
			//temp_m %= 60;
			if(temp_m == 0xFF)
			{
				temp_m = 59;
			}
			else
			{
				temp_m %= 60;
			}
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[temp_ap],temp_h,temp_m,temp_s);
		}
		break;
	case SEC:
		if(toggleChar)
		{
			sprintf(controlTime, "%s %02d:%02d:__",ampm[temp_ap],temp_h,temp_m);
		}
		else
		{
			if(IsUP())
			{
				temp_s++;
			}
			else if(IsDown())
			{
				temp_s--;
			}
			//temp_s %= 60;
			if(temp_s == 0xFF)
			{
				temp_s = 59;
			}
			else
			{
				temp_s %= 60;
			}
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[temp_ap],temp_h,temp_m,temp_s);
		}
		break;
	default:
		break;
	}
	if(status == TIME_SET)
	{
		curr_ap = temp_ap;
		curr_h = temp_h;
		curr_m = temp_m;
		curr_s = temp_s;
	}
	else if(status == ALARM_SET)
	{
		alarm_ap = temp_ap;
		alarm_h = temp_h;
		alarm_m = temp_m;
		alarm_s = temp_s;
	}
	toggleChar = !toggleChar;
}
void saveCurrentTime(flashStatus_e status)
{
	if(status ==  TIME_SET)
	{
		saveData[FLASH_ON] = ACTIVE_FLASH;
	}
	else if(status == ALARM_SET)
	{
		saveData[ALARM_ON] = ACTIVE_ALARM;
	}
	else if(status == SONG_SET)
	{
		saveData[SONG_ON] = ACTIVE_SONG;
	}
	saveData[AMPM_CUR] = curr_ap;
	saveData[HOUR_CUR] = curr_h;
	saveData[MIN_CUR] = curr_m;
	saveData[SEC_CUR] = curr_s;

	saveData[AMPM_AL] = alarm_ap;
	saveData[HOUR_AL] = alarm_h;
	saveData[MIN_AL] = alarm_m;
	saveData[SEC_AL] = alarm_s;

	saveData[SONG_INDEX] = songIndex;

	eraseFlash(&flash);
	for(int index = 0; index < DATASIZE_FLASH * 4; index += 4)
	{
		overwriteFlash(&flash, saveData[index/4]);
		flash.USER_TARGET_ADDR += 4;
	}
	flash.USER_TARGET_ADDR = flash.USER_START_ADDR;
	isSave = false;
	clock_state = NORMAL_STATE;
}

void selectSong(void)
{
	static int now_playing = 0;
	char currentSong[LCD_SIZE] = {0};
	BLE_ControlCommand();
	if(IsUP())
	{
		songIndex++;
		now_playing = 0;
		LCD_Clear();
	}
	else if(IsDown())
	{
		songIndex--;
		now_playing = 0;
		LCD_Clear();
	}
	printf("y: %ld\r\n",Joycon[1]);
	songIndex %= 2;
	if(songIndex == 0)
	{
		memcpy(currentSong, "1. Spring Water", sizeof(currentSong)/sizeof(currentSong[0]));
	}
	else if(songIndex == 1)
	{
		memcpy(currentSong, "2. Three Bears", sizeof(currentSong)/sizeof(currentSong[0]));
	}
	LCD_PrintAll("Wake Up Call", currentSong);
	songList[songIndex](&now_playing);
}

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin);
	alarmFlag = true;
	printf("Should be Ring: %d:%d:%d\r\n", sAlarm.AlarmTime.Hours, sAlarm.AlarmTime.Minutes, sAlarm.AlarmTime.Seconds);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	//stime = HxAL_GetTick();
	// joystick switch
	GPIO_PinState pinstate;
	pastTimer = HAL_GetTick();
	interval = pastTimer - currentTimer;
	currentTimer = pastTimer;
	if(interval > 30)
	{
		if(GPIO_Pin == SWITCH_Pin && clock_state == NORMAL_STATE)
			{
				pinstate = HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin);
				if(pinstate == GPIO_PIN_SET)
				{
					elaspeTime = HAL_GetTick() - countPassedTime;

					nextButtonUp = HAL_GetTick();
				}
				else if(pinstate == GPIO_PIN_RESET)
				{
					countPassedTime = HAL_GetTick();

					nextButtonDown = HAL_GetTick() - nextButtonUp;
				}
				// one click
				if(elaspeTime > 150 && nextButtonDown > 500)
				{
					printf(">>>>>>>>>>>>>>>one click!\r\n");
					clock_state = TIME_SETTING;
				}
				// double click
				if(nextButtonDown > 50 && nextButtonDown < 500 && pinstate ==GPIO_PIN_RESET )
				{
					printf(">>>>>>>>>>>>>>>double click!!\r\n");
					clock_state = MUSIC_SELECT;
				}
				// long click
				if(elaspeTime > 2500)
				{
					printf(">>>>>>>>>LONG click\r\n");
					clock_state = ALARM_TIME_SETTING;
				}
			}
		// other states
		else
		{
			pinstate = HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin);
			if(pinstate == GPIO_PIN_SET)
			{
				oneTimeCheckerOld = HAL_GetTick();

			}
			else if(pinstate == GPIO_PIN_RESET)
			{
				oneTimeCheckerNew = HAL_GetTick() - oneTimeCheckerOld;
			}

			if(oneTimeCheckerNew > 500)
			{
				printf("set to Save\r\n");
				isSave = true;
			}
		}

	}

#if 0
	if(GPIO_Pin == SWITCH_Pin)
	{
		//printf("switch toggle\r\n");
		stime = HAL_GetTick();
		interval = stime - etime;
		etime = stime;
		if(interval > 100)
		{
			memset(buf,0, sizeof(buf));
			pinstate = HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin);
			if(pinstate == GPIO_PIN_SET)
			{
				printf("OFF\r\n");
				holdclk = interval;
				oneClick++;
				oneClick %= 2;
			}
			else if(pinstate == GPIO_PIN_RESET)
			{
				printf("ON\r\n");
				holdclk = 0;
				if(interval < 1000)
				{
					dbclk++;
				}
				else
				{
					dbclk = 0;
				}

			}
			//printf("intvl time: %d\r\n",interval);
			// Alarm time Setting State
			if(holdclk >= 3000)
			{
				printf("***held at least 3 sec ***\r\n");
			}
			// Morning call Setting State
			else if(dbclk >= 2)
			{
				printf("***double click activate***\r\n");
				if(clock_state == NORMAL_STATE)
				{
					clock_state = MUSIC_SELECT;
				}
				dbclk = 0;
			}
			// Timer Setting State
			if(oneClick == 1)
			{
				printf("timer setting\r\n");
				cpyflag = 1;
				if(clock_state == NORMAL_STATE)
				{
					clock_state = TIME_SETTING;
					printf("set to Time\r\n");
				}
				else if(clock_state == TIME_SETTING || clock_state == MUSIC_SELECT)
				{
					printf("set to Save\r\n");
					isSave = true;
				}
			}
		}
	}
#endif
}
void alarmOn()
{
	int now_playing = 0;
	songIndex %= 2;

	while(now_playing < 60)
	{
		printf("songIndex: %d, now_playing: %d", songIndex, now_playing);
		LCD_PrintAll("Wake Up!!!       ", "Good Morning");
		songList[songIndex](&now_playing);
		now_playing++;
	}

}
void BLE_ControlCommand()
{
	switch(ble.command[0])
	{
	case 'U':
		Joycon[1] = UP;
		ble.command[0] = ' ';
		break;
	case 'D':
		Joycon[1] = DOWN;
		ble.command[0] = ' ';
		break;
	case 'L':
		Joycon[0] = LEFT;
		ble.command[0] = ' ';
		break;
	case 'R':
		Joycon[0] = RIGHT;
		ble.command[0] = ' ';
		break;
	case 'O':
		isSave = true;
		ble.command[0] = ' ';
	default:
		break;
	}
}
void BLE_Command()
{
	switch (ble.command[0]) {
		case 'A':
			if(clock_state == NORMAL_STATE)
			{
				clock_state = ALARM_TIME_SETTING;
			}
			break;
		case 'T':
			if(clock_state == NORMAL_STATE)
			{
				clock_state = TIME_SETTING;
			}
			break;
		case 'M':
			if(clock_state == NORMAL_STATE)
			{
				clock_state = MUSIC_SELECT;
			}
			break;
		case 'N':
			//clock_state = NORMAL_STATE;
			if(clock_state != NORMAL_STATE)
			{
				isSave = true;
			}
			break;
		default:
			//printf("BLE bool: %d", ble.receivedCommand_flag);
			break;
	}
}

bool IsRight(void)
{
	return Joycon[0] >= RIGHT ? true : false;
}
bool IsLeft(void)
{
	return Joycon[0] <= LEFT ? true : false;
}
bool IsUP(void)
{
	return Joycon[1] >= UP ? true : false;
}
bool IsDown(void)
{
	return Joycon[1] <= DOWN ? true : false;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	// From COM3 ->(UART3)ST(UART4) ->BLE
	if(huart->Instance == USART3)
	{
		// received enter key
		if(rx3Data == '\r' || ble.cur_BLE_Index > 64)
		{
			printf("\r\n send following data to BLE \r\n");
			printf(ble.bleBuffer);
			printf("\r\n");
			HAL_UART_Transmit(&huart4, (uint8_t*)&ble.bleBuffer, ble.cur_BLE_Index, 500);
			memset(ble.bleBuffer, 0, sizeof(ble.bleBuffer)/sizeof(ble.bleBuffer[0]));
			ble.cur_BLE_Index = 0;
		}
		else
		{
			ble.bleBuffer[ble.cur_BLE_Index] = rx3Data;
			printf("collecting: %c\r\n", (char)rx3Data);
			ble.cur_BLE_Index++;
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
	}
	// From BLE ->(UART4)ST(UART3)->COM3
	else if(huart->Instance == UART4)
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)&rx4Data, sizeof(rx4Data), 100);
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
		if(rx4Data == '\n')
		{
			ble.comBuffer[ble.cur_COM_Index] = '\0';
			memcpy(ble.command, ble.comBuffer, sizeof(ble.comBuffer)/sizeof(ble.comBuffer[0]));
			memset(ble.comBuffer, 0, sizeof(ble.comBuffer)/sizeof(ble.comBuffer[0]));
			//strcat(ble.command, "\0", 1);
			ble.receivedCommand_flag = true;
			ble.cur_COM_Index = 0;
			printf("%c 로 시작하는 <끝>\r\n",ble.command[0]);
		}
		else
		{
			ble.comBuffer[ble.cur_COM_Index] = rx4Data;
			ble.cur_COM_Index++;
		}
#if 0
		if(ble.comBuffer[ble.cur_COM_Index] == '\0' | ble.cur_COM_Index > 64)
		{
			HAL_UART_Transmit(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data), 100);
			printf("data received from BLE\r\n");
			HAL_UART_Transmit(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data), 100);
			ble.cur_COM_Index = 0;
		}
		else
		{
			ble.comBuffer[ble.cur_COM_Index] = rx4Data;

			printf("something wrong here..%c\r\n", ble.comBuffer[ble.cur_COM_Index]);
			ble.cur_COM_Index++;
		}
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
#endif
	}

}

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
