
STM_CLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000820c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f0  080084f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080084f0  080084f0  000184f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f8  080084f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000a74  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ae4  20000ae4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b839  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003717  00000000  00000000  0003b91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a0  00000000  00000000  0003f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001358  00000000  00000000  000408d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004e6a  00000000  00000000  00041c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d5a8  00000000  00000000  00046a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000edefe  00000000  00000000  00064042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007434  00000000  00000000  00151f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00159374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080083a4 	.word	0x080083a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080083a4 	.word	0x080083a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
#include "lcd.h"

void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
  char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f005 fa81 	bl	8005ad6 <HAL_UART_Transmit>

  HAL_StatusTypeDef res;
  for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
      res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f002 fe53 	bl	8003294 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
	  char msg[64];
	  snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f006 fe5f 	bl	80072c8 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f005 fa5a 	bl	8005ad6 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
      } else {
	  HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f005 fa52 	bl	8005ad6 <HAL_UART_Transmit>
  for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
      }
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f005 fa42 	bl	8005ad6 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	080083cc 	.word	0x080083cc
 8000660:	200003b4 	.word	0x200003b4
 8000664:	200002b4 	.word	0x200002b4
 8000668:	080083bc 	.word	0x080083bc
 800066c:	080083c4 	.word	0x080083c4
 8000670:	080083c8 	.word	0x080083c8

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef res;
  for(;;) {
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f002 fdff 	bl	8003294 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
      if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
	break;
 80006a2:	bf00      	nop
  }

  uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
  uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

  uint8_t data_arr[4];
  data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
  data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
  data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
  data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

  res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f002 fcc8 	bl	8003098 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fae9 	bl	8001ce4 <HAL_Delay>
  return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200002b4 	.word	0x200002b4

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  // 4-bit mode, 2 lines, 5x7 format
  LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
  // display & cursor home (keep this!)
  LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
  // display on, right shift, underline off, blink off
  LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
  // clear display (optional here)
  LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
  while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
      LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
      str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
  while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
  }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <init>:

void init() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  I2C_Scan();
 80007dc:	f7ff fede 	bl	800059c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 80007e0:	204e      	movs	r0, #78	; 0x4e
 80007e2:	f7ff ffc1 	bl	8000768 <LCD_Init>

  // set address to 0x00
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f7ff ff99 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <init+0x34>)
 80007f0:	204e      	movs	r0, #78	; 0x4e
 80007f2:	f7ff ffd6 	bl	80007a2 <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80007f6:	21c0      	movs	r1, #192	; 0xc0
 80007f8:	204e      	movs	r0, #78	; 0x4e
 80007fa:	f7ff ff91 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "  over I2C bus");
 80007fe:	4904      	ldr	r1, [pc, #16]	; (8000810 <init+0x38>)
 8000800:	204e      	movs	r0, #78	; 0x4e
 8000802:	f7ff ffce 	bl	80007a2 <LCD_SendString>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	080083e4 	.word	0x080083e4
 8000810:	080083f4 	.word	0x080083f4

08000814 <LCD_PrintAll>:

void LCD_PrintAll(char *str1, char *str2)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	204e      	movs	r0, #78	; 0x4e
 8000822:	f7ff ff7d 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str1);
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	204e      	movs	r0, #78	; 0x4e
 800082a:	f7ff ffba 	bl	80007a2 <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 800082e:	21c0      	movs	r1, #192	; 0xc0
 8000830:	204e      	movs	r0, #78	; 0x4e
 8000832:	f7ff ff75 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str2);
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	204e      	movs	r0, #78	; 0x4e
 800083a:	f7ff ffb2 	bl	80007a2 <LCD_SendString>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <LCD_Clear>:
      LCD_SendCommand(LCD_ADDR, 0b11000000);
      LCD_SendString(LCD_ADDR, str);
    }
}
void LCD_Clear()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	204e      	movs	r0, #78	; 0x4e
 8000850:	f7ff ff66 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <LCD_Clear+0x28>)
 8000856:	204e      	movs	r0, #78	; 0x4e
 8000858:	f7ff ffa3 	bl	80007a2 <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 800085c:	21c0      	movs	r1, #192	; 0xc0
 800085e:	204e      	movs	r0, #78	; 0x4e
 8000860:	f7ff ff5e 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 8000864:	4902      	ldr	r1, [pc, #8]	; (8000870 <LCD_Clear+0x28>)
 8000866:	204e      	movs	r0, #78	; 0x4e
 8000868:	f7ff ff9b 	bl	80007a2 <LCD_SendString>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	08008404 	.word	0x08008404

08000874 <_write>:
/* USER CODE BEGIN Includes */
#include "lcd.h"
#include "flash.h"

int _write(int file, char *ptr, int len)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	b29a      	uxth	r2, r3
 8000884:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <_write+0x28>)
 800088c:	f005 f923 	bl	8005ad6 <HAL_UART_Transmit>
	return len;
 8000890:	687b      	ldr	r3, [r7, #4]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200003b4 	.word	0x200003b4

080008a0 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	460b      	mov	r3, r1
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime;

	sTime.Hours = hh + 1;
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	3301      	adds	r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = mm;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ss;
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	73bb      	strb	r3, [r7, #14]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <set_time+0x38>)
 80008cc:	f004 f880 	bl	80049d0 <HAL_RTC_SetTime>
}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000308 	.word	0x20000308

080008dc <set_alarm>:
void set_alarm(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
 80008e6:	460b      	mov	r3, r1
 80008e8:	71bb      	strb	r3, [r7, #6]
 80008ea:	4613      	mov	r3, r2
 80008ec:	717b      	strb	r3, [r7, #5]

	sAlarm.AlarmTime.Hours = hh;
 80008ee:	4a1d      	ldr	r2, [pc, #116]	; (8000964 <set_alarm+0x88>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = mm;
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <set_alarm+0x88>)
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = ss;
 80008fa:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <set_alarm+0x88>)
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <set_alarm+0x88>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <set_alarm+0x88>)
 8000908:	2200      	movs	r2, #0
 800090a:	70da      	strb	r2, [r3, #3]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <set_alarm+0x88>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <set_alarm+0x88>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <set_alarm+0x88>)
 800091a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800091e:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <set_alarm+0x88>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <set_alarm+0x88>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <set_alarm+0x88>)
 800092e:	2201      	movs	r2, #1
 8000930:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <set_alarm+0x88>)
 8000936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800093c:	2201      	movs	r2, #1
 800093e:	4909      	ldr	r1, [pc, #36]	; (8000964 <set_alarm+0x88>)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <set_alarm+0x8c>)
 8000942:	f004 fa11 	bl	8004d68 <HAL_RTC_SetAlarm_IT>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <set_alarm+0x74>
	{
		Error_Handler();
 800094c:	f000 fdec 	bl	8001528 <Error_Handler>
	}
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8000950:	2200      	movs	r2, #0
 8000952:	4904      	ldr	r1, [pc, #16]	; (8000964 <set_alarm+0x88>)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <set_alarm+0x8c>)
 8000956:	f004 fa07 	bl	8004d68 <HAL_RTC_SetAlarm_IT>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000904 	.word	0x20000904
 8000968:	20000308 	.word	0x20000308

0800096c <set_date>:
void set_date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	4604      	mov	r4, r0
 8000974:	4608      	mov	r0, r1
 8000976:	4611      	mov	r1, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4623      	mov	r3, r4
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	4603      	mov	r3, r0
 8000980:	71bb      	strb	r3, [r7, #6]
 8000982:	460b      	mov	r3, r1
 8000984:	717b      	strb	r3, [r7, #5]
 8000986:	4613      	mov	r3, r2
 8000988:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate;

	sDate.WeekDay = ww;
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	733b      	strb	r3, [r7, #12]
	sDate.Month = mm;
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	737b      	strb	r3, [r7, #13]
	sDate.Date = dd;
 8000992:	797b      	ldrb	r3, [r7, #5]
 8000994:	73bb      	strb	r3, [r7, #14]
	sDate.Year = yy;
 8000996:	793b      	ldrb	r3, [r7, #4]
 8000998:	73fb      	strb	r3, [r7, #15]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <set_date+0x44>)
 80009a4:	f004 f90c 	bl	8004bc0 <HAL_RTC_SetDate>
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	20000308 	.word	0x20000308

080009b4 <get_time>:

void get_time(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	481a      	ldr	r0, [pc, #104]	; (8000a2c <get_time+0x78>)
 80009c2:	f004 f89f 	bl	8004b04 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <get_time+0x78>)
 80009d0:	f004 f97a 	bl	8004cc8 <HAL_RTC_GetDate>
	sprintf((char*)showTime, "%s %02d:%02d:%02d",ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <get_time+0x7c>)
 80009e0:	441a      	add	r2, r3
 80009e2:	783b      	ldrb	r3, [r7, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	787b      	ldrb	r3, [r7, #1]
 80009e8:	78b9      	ldrb	r1, [r7, #2]
 80009ea:	9101      	str	r1, [sp, #4]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	4603      	mov	r3, r0
 80009f0:	4910      	ldr	r1, [pc, #64]	; (8000a34 <get_time+0x80>)
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <get_time+0x84>)
 80009f4:	f006 fc9c 	bl	8007330 <siprintf>
	sprintf((char*)showDate, "  %04d/%02d/%02d",2000+sDate.Year, sDate.Month, sDate.Date);
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80009fe:	7d7b      	ldrb	r3, [r7, #21]
 8000a00:	4619      	mov	r1, r3
 8000a02:	7dbb      	ldrb	r3, [r7, #22]
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	460b      	mov	r3, r1
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <get_time+0x88>)
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <get_time+0x8c>)
 8000a0c:	f006 fc90 	bl	8007330 <siprintf>
	LCD_PrintAll(showDate, showTime);
 8000a10:	4909      	ldr	r1, [pc, #36]	; (8000a38 <get_time+0x84>)
 8000a12:	480b      	ldr	r0, [pc, #44]	; (8000a40 <get_time+0x8c>)
 8000a14:	f7ff fefe 	bl	8000814 <LCD_PrintAll>
	printf("%s %s\r\n", showTime, showDate);
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <get_time+0x8c>)
 8000a1a:	4907      	ldr	r1, [pc, #28]	; (8000a38 <get_time+0x84>)
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <get_time+0x90>)
 8000a1e:	f006 fbe5 	bl	80071ec <iprintf>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000308 	.word	0x20000308
 8000a30:	20000000 	.word	0x20000000
 8000a34:	08008418 	.word	0x08008418
 8000a38:	2000092c 	.word	0x2000092c
 8000a3c:	0800842c 	.word	0x0800842c
 8000a40:	2000093c 	.word	0x2000093c
 8000a44:	08008440 	.word	0x08008440

08000a48 <readFlash>:
uint32_t FirstSector = 0, NbOfSectors = 0;
uint32_t SECTORError = 0;
__IO uint32_t data32 = 0 , MemoryProgramStatus = 0;

Status_flashRW readFlash(uint32_t StartADDR)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	unsigned int value = *(unsigned int*)StartADDR;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
	printf("addr[0x%08x] = %08x\r\n", StartADDR, value);
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <readFlash+0x24>)
 8000a5c:	f006 fbc6 	bl	80071ec <iprintf>
	return RW_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08008448 	.word	0x08008448

08000a70 <eraseFlash>:
Status_flashRW eraseFlash(uint32_t ADDR_FLASH_SECTOR_x)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	uint32_t Address = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Unlock();
 8000a7c:	f001 fe76 	bl	800276c <HAL_FLASH_Unlock>
	FirstSector = GetSector(FLASH_USER_START_ADDR);
 8000a80:	4829      	ldr	r0, [pc, #164]	; (8000b28 <eraseFlash+0xb8>)
 8000a82:	f000 fbe3 	bl	800124c <GetSector>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <eraseFlash+0xbc>)
 8000a8a:	6013      	str	r3, [r2, #0]
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8000a8c:	4828      	ldr	r0, [pc, #160]	; (8000b30 <eraseFlash+0xc0>)
 8000a8e:	f000 fd15 	bl	80014bc <GetSectorSize>
 8000a92:	4602      	mov	r2, r0
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <eraseFlash+0xc4>)
 8000a96:	4413      	add	r3, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fbd7 	bl	800124c <GetSector>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <eraseFlash+0xbc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <eraseFlash+0xc8>)
 8000aaa:	6013      	str	r3, [r2, #0]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <eraseFlash+0xcc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000ab2:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <eraseFlash+0xcc>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FirstSector;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <eraseFlash+0xbc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <eraseFlash+0xcc>)
 8000abe:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <eraseFlash+0xc8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <eraseFlash+0xcc>)
 8000ac6:	60d3      	str	r3, [r2, #12]

	Address = FLASH_USER_START_ADDR;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <eraseFlash+0xb8>)
 8000aca:	60fb      	str	r3, [r7, #12]
	while(Address < FLASH_USER_END_ADDR)
 8000acc:	e016      	b.n	8000afc <eraseFlash+0x8c>
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32) == HAL_OK)
 8000ace:	a314      	add	r3, pc, #80	; (adr r3, 8000b20 <eraseFlash+0xb0>)
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	68f9      	ldr	r1, [r7, #12]
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f001 fdf4 	bl	80026c4 <HAL_FLASH_Program>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d109      	bne.n	8000af6 <eraseFlash+0x86>
		{
			printf("Changed: ");
 8000ae2:	4817      	ldr	r0, [pc, #92]	; (8000b40 <eraseFlash+0xd0>)
 8000ae4:	f006 fb82 	bl	80071ec <iprintf>
			readFlash(Address);
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff ffad 	bl	8000a48 <readFlash>
			Address = Address + 4;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3304      	adds	r3, #4
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e002      	b.n	8000afc <eraseFlash+0x8c>
		}
		else
		{
			printf("error occurred");
 8000af6:	4813      	ldr	r0, [pc, #76]	; (8000b44 <eraseFlash+0xd4>)
 8000af8:	f006 fb78 	bl	80071ec <iprintf>
	while(Address < FLASH_USER_END_ADDR)
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <eraseFlash+0xc0>)
 8000afe:	f000 fcdd 	bl	80014bc <GetSectorSize>
 8000b02:	4602      	mov	r2, r0
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <eraseFlash+0xc4>)
 8000b06:	4413      	add	r3, r2
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3df      	bcc.n	8000ace <eraseFlash+0x5e>
		}
	}


	HAL_FLASH_Lock();
 8000b0e:	f001 fe4f 	bl	80027b0 <HAL_FLASH_Lock>
	return RW_OK;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	f3af 8000 	nop.w
 8000b20:	12345678 	.word	0x12345678
 8000b24:	00000000 	.word	0x00000000
 8000b28:	080c0000 	.word	0x080c0000
 8000b2c:	20000960 	.word	0x20000960
 8000b30:	080e0000 	.word	0x080e0000
 8000b34:	080dffff 	.word	0x080dffff
 8000b38:	20000964 	.word	0x20000964
 8000b3c:	2000094c 	.word	0x2000094c
 8000b40:	08008460 	.word	0x08008460
 8000b44:	0800846c 	.word	0x0800846c

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000b4e:	f001 f857 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f83f 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f000 fab7 	bl	80010c8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b5a:	f000 f8c3 	bl	8000ce4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b5e:	f000 fa5b 	bl	8001018 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b62:	f000 fa83 	bl	800106c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000b66:	f000 f90b 	bl	8000d80 <MX_I2C1_Init>
  MX_RTC_Init();
 8000b6a:	f000 f949 	bl	8000e00 <MX_RTC_Init>
  MX_TIM2_Init();
 8000b6e:	f000 f9db 	bl	8000f28 <MX_TIM2_Init>
  MX_UART4_Init();
 8000b72:	f000 fa27 	bl	8000fc4 <MX_UART4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b76:	f000 f899 	bl	8000cac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  unsigned int value, addr = FLASH_USER_START_ADDR, cnt = 0;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <main+0x80>)
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  unsigned char buf[30];
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8000b82:	2200      	movs	r2, #0
 8000b84:	4911      	ldr	r1, [pc, #68]	; (8000bcc <main+0x84>)
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <main+0x88>)
 8000b88:	f004 f8ee 	bl	8004d68 <HAL_RTC_SetAlarm_IT>
	init();
 8000b8c:	f7ff fe24 	bl	80007d8 <init>
	LCD_Clear();
 8000b90:	f7ff fe5a 	bl	8000848 <LCD_Clear>
	set_date(RTC_WEEKDAY_MONDAY, 11, 7, 23);
 8000b94:	2317      	movs	r3, #23
 8000b96:	2207      	movs	r2, #7
 8000b98:	210b      	movs	r1, #11
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fee6 	bl	800096c <set_date>
	set_time(12,52,0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2134      	movs	r1, #52	; 0x34
 8000ba4:	200c      	movs	r0, #12
 8000ba6:	f7ff fe7b 	bl	80008a0 <set_time>
	set_alarm(0, 0, 5);
 8000baa:	2205      	movs	r2, #5
 8000bac:	2100      	movs	r1, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fe94 	bl	80008dc <set_alarm>
	eraseFlash(FLASH_USER_START_ADDR);
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <main+0x80>)
 8000bb6:	f7ff ff5b 	bl	8000a70 <eraseFlash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		get_time();
 8000bba:	f7ff fefb 	bl	80009b4 <get_time>
		HAL_Delay(300);
 8000bbe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bc2:	f001 f88f 	bl	8001ce4 <HAL_Delay>
		get_time();
 8000bc6:	e7f8      	b.n	8000bba <main+0x72>
 8000bc8:	080c0000 	.word	0x080c0000
 8000bcc:	20000904 	.word	0x20000904
 8000bd0:	20000308 	.word	0x20000308

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	; 0x50
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	2230      	movs	r2, #48	; 0x30
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f006 fc9c 	bl	8007520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <SystemClock_Config+0xd0>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a28      	ldr	r2, [pc, #160]	; (8000ca4 <SystemClock_Config+0xd0>)
 8000c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <SystemClock_Config+0xd0>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <SystemClock_Config+0xd4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <SystemClock_Config+0xd4>)
 8000c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <SystemClock_Config+0xd4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c30:	2305      	movs	r3, #5
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c34:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c4c:	23a8      	movs	r3, #168	; 0xa8
 8000c4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c54:	2307      	movs	r3, #7
 8000c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0320 	add.w	r3, r7, #32
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 ffe9 	bl	8003c34 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c68:	f000 fc5e 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2302      	movs	r3, #2
 8000c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2105      	movs	r1, #5
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 fa4a 	bl	8004124 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c96:	f000 fc47 	bl	8001528 <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3750      	adds	r7, #80	; 0x50
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40007000 	.word	0x40007000

08000cac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	201c      	movs	r0, #28
 8000cb6:	f001 f914 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cba:	201c      	movs	r0, #28
 8000cbc:	f001 f92d 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2027      	movs	r0, #39	; 0x27
 8000cc6:	f001 f90c 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cca:	2027      	movs	r0, #39	; 0x27
 8000ccc:	f001 f925 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2029      	movs	r0, #41	; 0x29
 8000cd6:	f001 f904 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000cda:	2029      	movs	r0, #41	; 0x29
 8000cdc:	f001 f91d 	bl	8001f1a <HAL_NVIC_EnableIRQ>
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_ETH_Init+0x84>)
 8000cea:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <MX_ETH_Init+0x88>)
 8000cec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_ETH_Init+0x8c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_ETH_Init+0x8c>)
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_ETH_Init+0x8c>)
 8000cfc:	22e1      	movs	r2, #225	; 0xe1
 8000cfe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_ETH_Init+0x8c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_ETH_Init+0x8c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_ETH_Init+0x8c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_ETH_Init+0x84>)
 8000d14:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <MX_ETH_Init+0x8c>)
 8000d16:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_ETH_Init+0x84>)
 8000d1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d1e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_ETH_Init+0x84>)
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <MX_ETH_Init+0x90>)
 8000d24:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_ETH_Init+0x84>)
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <MX_ETH_Init+0x94>)
 8000d2a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_ETH_Init+0x84>)
 8000d2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d32:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_ETH_Init+0x84>)
 8000d36:	f001 f99d 	bl	8002074 <HAL_ETH_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d40:	f000 fbf2 	bl	8001528 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d44:	2238      	movs	r2, #56	; 0x38
 8000d46:	2100      	movs	r1, #0
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_ETH_Init+0x98>)
 8000d4a:	f006 fbe9 	bl	8007520 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_ETH_Init+0x98>)
 8000d50:	2221      	movs	r2, #33	; 0x21
 8000d52:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_ETH_Init+0x98>)
 8000d56:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000d5a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_ETH_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000204 	.word	0x20000204
 8000d6c:	40028000 	.word	0x40028000
 8000d70:	20000968 	.word	0x20000968
 8000d74:	20000164 	.word	0x20000164
 8000d78:	200000c4 	.word	0x200000c4
 8000d7c:	2000008c 	.word	0x2000008c

08000d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dbe:	f002 f827 	bl	8002e10 <HAL_I2C_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc8:	f000 fbae 	bl	8001528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dd0:	f002 fd97 	bl	8003902 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000dda:	f000 fba5 	bl	8001528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000de2:	f002 fdca 	bl	800397a <HAL_I2CEx_ConfigDigitalFilter>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000dec:	f000 fb9c 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200002b4 	.word	0x200002b4
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	000186a0 	.word	0x000186a0

08000e00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b090      	sub	sp, #64	; 0x40
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2228      	movs	r2, #40	; 0x28
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f006 fb7d 	bl	8007520 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e28:	4a3d      	ldr	r2, [pc, #244]	; (8000f20 <MX_RTC_Init+0x120>)
 8000e2a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e2e:	2240      	movs	r2, #64	; 0x40
 8000e30:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e32:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e34:	227f      	movs	r2, #127	; 0x7f
 8000e36:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e3a:	22ff      	movs	r2, #255	; 0xff
 8000e3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e44:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e50:	4832      	ldr	r0, [pc, #200]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e52:	f003 fd47 	bl	80048e4 <HAL_RTC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f000 fb64 	bl	8001528 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	2201      	movs	r2, #1
 8000e86:	4619      	mov	r1, r3
 8000e88:	4824      	ldr	r0, [pc, #144]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000e8a:	f003 fda1 	bl	80049d0 <HAL_RTC_SetTime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000e94:	f000 fb48 	bl	8001528 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000eba:	f003 fe81 	bl	8004bc0 <HAL_RTC_SetDate>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000ec4:	f000 fb30 	bl	8001528 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_RTC_Init+0x124>)
 8000ee6:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	2201      	movs	r2, #1
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_RTC_Init+0x11c>)
 8000f04:	f003 ff30 	bl	8004d68 <HAL_RTC_SetAlarm_IT>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8000f0e:	f000 fb0b 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3740      	adds	r7, #64	; 0x40
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000308 	.word	0x20000308
 8000f20:	40002800 	.word	0x40002800
 8000f24:	80808000 	.word	0x80808000

08000f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f4e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6e:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f70:	f004 f949 	bl	8005206 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f7a:	f000 fad5 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f8c:	f004 fa92 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f96:	f000 fac7 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000fa8:	f004 fcb8 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 fab9 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000328 	.word	0x20000328

08000fc4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_UART4_Init+0x4c>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_UART4_Init+0x50>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <MX_UART4_Init+0x4c>)
 8000fd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_UART4_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_UART4_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MX_UART4_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_UART4_Init+0x4c>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <MX_UART4_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_UART4_Init+0x4c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_UART4_Init+0x4c>)
 8000ffc:	f004 fd1e 	bl	8005a3c <HAL_UART_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001006:	f000 fa8f 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000370 	.word	0x20000370
 8001014:	40004c00 	.word	0x40004c00

08001018 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <MX_USART3_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USART3_UART_Init+0x4c>)
 8001050:	f004 fcf4 	bl	8005a3c <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 fa65 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200003b4 	.word	0x200003b4
 8001068:	40004800 	.word	0x40004800

0800106c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001072:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001076:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107a:	2204      	movs	r2, #4
 800107c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001080:	2202      	movs	r2, #2
 8001082:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108c:	2202      	movs	r2, #2
 800108e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001092:	2201      	movs	r2, #1
 8001094:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b0:	f002 fca2 	bl	80039f8 <HAL_PCD_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010ba:	f000 fa35 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200003f8 	.word	0x200003f8

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <MX_GPIO_Init+0x14c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <MX_GPIO_Init+0x14c>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b49      	ldr	r3, [pc, #292]	; (8001214 <MX_GPIO_Init+0x14c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b45      	ldr	r3, [pc, #276]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a44      	ldr	r2, [pc, #272]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b42      	ldr	r3, [pc, #264]	; (8001214 <MX_GPIO_Init+0x14c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b3e      	ldr	r3, [pc, #248]	; (8001214 <MX_GPIO_Init+0x14c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a3d      	ldr	r2, [pc, #244]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a36      	ldr	r2, [pc, #216]	; (8001214 <MX_GPIO_Init+0x14c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <MX_GPIO_Init+0x14c>)
 8001174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_GPIO_Init+0x14c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f244 0181 	movw	r1, #16513	; 0x4081
 800118c:	4822      	ldr	r0, [pc, #136]	; (8001218 <MX_GPIO_Init+0x150>)
 800118e:	f001 fe0b 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	4821      	ldr	r0, [pc, #132]	; (800121c <MX_GPIO_Init+0x154>)
 8001198:	f001 fe06 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800119c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	481b      	ldr	r0, [pc, #108]	; (8001220 <MX_GPIO_Init+0x158>)
 80011b4:	f001 fc4c 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4811      	ldr	r0, [pc, #68]	; (8001218 <MX_GPIO_Init+0x150>)
 80011d2:	f001 fc3d 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_GPIO_Init+0x154>)
 80011ee:	f001 fc2f 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_GPIO_Init+0x154>)
 8001206:	f001 fc23 	bl	8002a50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40020400 	.word	0x40020400
 800121c:	40021800 	.word	0x40021800
 8001220:	40020800 	.word	0x40020800

08001224 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin);
 800122c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <HAL_RTC_AlarmAEventCallback+0x20>)
 8001232:	f001 fdd2 	bl	8002dda <HAL_GPIO_TogglePin>
	printf("RINGRINGRINGRING!!!!!!!!!!!!!!!!!!!!\r\n");
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <HAL_RTC_AlarmAEventCallback+0x24>)
 8001238:	f006 f83e 	bl	80072b8 <puts>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40020400 	.word	0x40020400
 8001248:	0800847c 	.word	0x0800847c

0800124c <GetSector>:


static uint32_t GetSector(uint32_t Address)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]

	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a82      	ldr	r2, [pc, #520]	; (8001464 <GetSector+0x218>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d206      	bcs.n	800126e <GetSector+0x22>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001266:	d302      	bcc.n	800126e <GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e0f3      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a7d      	ldr	r2, [pc, #500]	; (8001468 <GetSector+0x21c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d206      	bcs.n	8001284 <GetSector+0x38>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a7a      	ldr	r2, [pc, #488]	; (8001464 <GetSector+0x218>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d302      	bcc.n	8001284 <GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
 800127e:	2301      	movs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e0e8      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a79      	ldr	r2, [pc, #484]	; (800146c <GetSector+0x220>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d206      	bcs.n	800129a <GetSector+0x4e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a76      	ldr	r2, [pc, #472]	; (8001468 <GetSector+0x21c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d302      	bcc.n	800129a <GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
 8001294:	2302      	movs	r3, #2
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e0dd      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a74      	ldr	r2, [pc, #464]	; (8001470 <GetSector+0x224>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d806      	bhi.n	80012b0 <GetSector+0x64>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a71      	ldr	r2, [pc, #452]	; (800146c <GetSector+0x220>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d302      	bcc.n	80012b0 <GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e0d2      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a70      	ldr	r2, [pc, #448]	; (8001474 <GetSector+0x228>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d806      	bhi.n	80012c6 <GetSector+0x7a>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a6d      	ldr	r2, [pc, #436]	; (8001470 <GetSector+0x224>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d902      	bls.n	80012c6 <GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e0c7      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a6b      	ldr	r2, [pc, #428]	; (8001478 <GetSector+0x22c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d806      	bhi.n	80012dc <GetSector+0x90>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <GetSector+0x228>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d902      	bls.n	80012dc <GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
 80012d6:	2305      	movs	r3, #5
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e0bc      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a67      	ldr	r2, [pc, #412]	; (800147c <GetSector+0x230>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d806      	bhi.n	80012f2 <GetSector+0xa6>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a64      	ldr	r2, [pc, #400]	; (8001478 <GetSector+0x22c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d902      	bls.n	80012f2 <GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
 80012ec:	2306      	movs	r3, #6
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	e0b1      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a62      	ldr	r2, [pc, #392]	; (8001480 <GetSector+0x234>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d806      	bhi.n	8001308 <GetSector+0xbc>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a5f      	ldr	r2, [pc, #380]	; (800147c <GetSector+0x230>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d902      	bls.n	8001308 <GetSector+0xbc>
	{
		sector = FLASH_SECTOR_7;
 8001302:	2307      	movs	r3, #7
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e0a6      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a5e      	ldr	r2, [pc, #376]	; (8001484 <GetSector+0x238>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d806      	bhi.n	800131e <GetSector+0xd2>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a5b      	ldr	r2, [pc, #364]	; (8001480 <GetSector+0x234>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d902      	bls.n	800131e <GetSector+0xd2>
	{
		sector = FLASH_SECTOR_8;
 8001318:	2308      	movs	r3, #8
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e09b      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a59      	ldr	r2, [pc, #356]	; (8001488 <GetSector+0x23c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d806      	bhi.n	8001334 <GetSector+0xe8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a56      	ldr	r2, [pc, #344]	; (8001484 <GetSector+0x238>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d902      	bls.n	8001334 <GetSector+0xe8>
	{
		sector = FLASH_SECTOR_9;
 800132e:	2309      	movs	r3, #9
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	e090      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a55      	ldr	r2, [pc, #340]	; (800148c <GetSector+0x240>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d806      	bhi.n	800134a <GetSector+0xfe>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a52      	ldr	r2, [pc, #328]	; (8001488 <GetSector+0x23c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d902      	bls.n	800134a <GetSector+0xfe>
	{
		sector = FLASH_SECTOR_10;
 8001344:	230a      	movs	r3, #10
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	e085      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001350:	d206      	bcs.n	8001360 <GetSector+0x114>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4d      	ldr	r2, [pc, #308]	; (800148c <GetSector+0x240>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d902      	bls.n	8001360 <GetSector+0x114>
	{
		sector = FLASH_SECTOR_11;
 800135a:	230b      	movs	r3, #11
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e07a      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <GetSector+0x244>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d206      	bcs.n	8001376 <GetSector+0x12a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800136e:	d302      	bcc.n	8001376 <GetSector+0x12a>
	{
		sector = FLASH_SECTOR_12;
 8001370:	230c      	movs	r3, #12
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e06f      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a46      	ldr	r2, [pc, #280]	; (8001494 <GetSector+0x248>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d206      	bcs.n	800138c <GetSector+0x140>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a43      	ldr	r2, [pc, #268]	; (8001490 <GetSector+0x244>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d302      	bcc.n	800138c <GetSector+0x140>
	{
		sector = FLASH_SECTOR_13;
 8001386:	230d      	movs	r3, #13
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e064      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a42      	ldr	r2, [pc, #264]	; (8001498 <GetSector+0x24c>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d206      	bcs.n	80013a2 <GetSector+0x156>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a3f      	ldr	r2, [pc, #252]	; (8001494 <GetSector+0x248>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d302      	bcc.n	80013a2 <GetSector+0x156>
	{
		sector = FLASH_SECTOR_14;
 800139c:	230e      	movs	r3, #14
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e059      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a3d      	ldr	r2, [pc, #244]	; (800149c <GetSector+0x250>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d806      	bhi.n	80013b8 <GetSector+0x16c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <GetSector+0x24c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d302      	bcc.n	80013b8 <GetSector+0x16c>
	{
		sector = FLASH_SECTOR_15;
 80013b2:	230f      	movs	r3, #15
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e04e      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a39      	ldr	r2, [pc, #228]	; (80014a0 <GetSector+0x254>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d806      	bhi.n	80013ce <GetSector+0x182>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a36      	ldr	r2, [pc, #216]	; (800149c <GetSector+0x250>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d902      	bls.n	80013ce <GetSector+0x182>
	{
		sector = FLASH_SECTOR_16;
 80013c8:	2310      	movs	r3, #16
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e043      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a34      	ldr	r2, [pc, #208]	; (80014a4 <GetSector+0x258>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d806      	bhi.n	80013e4 <GetSector+0x198>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a31      	ldr	r2, [pc, #196]	; (80014a0 <GetSector+0x254>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d902      	bls.n	80013e4 <GetSector+0x198>
	{
		sector = FLASH_SECTOR_17;
 80013de:	2311      	movs	r3, #17
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	e038      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <GetSector+0x25c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d806      	bhi.n	80013fa <GetSector+0x1ae>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <GetSector+0x258>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d902      	bls.n	80013fa <GetSector+0x1ae>
	{
		sector = FLASH_SECTOR_18;
 80013f4:	2312      	movs	r3, #18
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e02d      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <GetSector+0x260>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d806      	bhi.n	8001410 <GetSector+0x1c4>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <GetSector+0x25c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d902      	bls.n	8001410 <GetSector+0x1c4>
	{
		sector = FLASH_SECTOR_19;
 800140a:	2313      	movs	r3, #19
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e022      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <GetSector+0x264>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d806      	bhi.n	8001426 <GetSector+0x1da>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a24      	ldr	r2, [pc, #144]	; (80014ac <GetSector+0x260>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d902      	bls.n	8001426 <GetSector+0x1da>
	{
		sector = FLASH_SECTOR_20;
 8001420:	2314      	movs	r3, #20
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e017      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <GetSector+0x268>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d806      	bhi.n	800143c <GetSector+0x1f0>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <GetSector+0x264>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d902      	bls.n	800143c <GetSector+0x1f0>
	{
		sector = FLASH_SECTOR_21;
 8001436:	2315      	movs	r3, #21
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e00c      	b.n	8001456 <GetSector+0x20a>
	}
	else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <GetSector+0x26c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d806      	bhi.n	8001452 <GetSector+0x206>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <GetSector+0x268>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d902      	bls.n	8001452 <GetSector+0x206>
	{
		sector = FLASH_SECTOR_22;
 800144c:	2316      	movs	r3, #22
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	e001      	b.n	8001456 <GetSector+0x20a>
	}
	else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
	{
		sector = FLASH_SECTOR_23;
 8001452:	2317      	movs	r3, #23
 8001454:	60fb      	str	r3, [r7, #12]
	}
	return sector;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	08004000 	.word	0x08004000
 8001468:	08008000 	.word	0x08008000
 800146c:	0800c000 	.word	0x0800c000
 8001470:	0800ffff 	.word	0x0800ffff
 8001474:	0801ffff 	.word	0x0801ffff
 8001478:	0803ffff 	.word	0x0803ffff
 800147c:	0805ffff 	.word	0x0805ffff
 8001480:	0807ffff 	.word	0x0807ffff
 8001484:	0809ffff 	.word	0x0809ffff
 8001488:	080bffff 	.word	0x080bffff
 800148c:	080dffff 	.word	0x080dffff
 8001490:	08104000 	.word	0x08104000
 8001494:	08108000 	.word	0x08108000
 8001498:	0810c000 	.word	0x0810c000
 800149c:	0810ffff 	.word	0x0810ffff
 80014a0:	0811ffff 	.word	0x0811ffff
 80014a4:	0813ffff 	.word	0x0813ffff
 80014a8:	0815ffff 	.word	0x0815ffff
 80014ac:	0817ffff 	.word	0x0817ffff
 80014b0:	0819ffff 	.word	0x0819ffff
 80014b4:	081bffff 	.word	0x081bffff
 80014b8:	081dffff 	.word	0x081dffff

080014bc <GetSectorSize>:
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
static uint32_t GetSectorSize(uint32_t Sector)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	uint32_t sectorsize = 0x00;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
	if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) ||\
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d014      	beq.n	80014f8 <GetSectorSize+0x3c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d011      	beq.n	80014f8 <GetSectorSize+0x3c>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d00e      	beq.n	80014f8 <GetSectorSize+0x3c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d00b      	beq.n	80014f8 <GetSectorSize+0x3c>
			(Sector == FLASH_SECTOR_3) || (Sector == FLASH_SECTOR_12) || (Sector == FLASH_SECTOR_13) ||\
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d008      	beq.n	80014f8 <GetSectorSize+0x3c>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0d      	cmp	r3, #13
 80014ea:	d005      	beq.n	80014f8 <GetSectorSize+0x3c>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b0e      	cmp	r3, #14
 80014f0:	d002      	beq.n	80014f8 <GetSectorSize+0x3c>
			(Sector == FLASH_SECTOR_14) || (Sector == FLASH_SECTOR_15))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d103      	bne.n	8001500 <GetSectorSize+0x44>
	{
		sectorsize = 16 * 1024;
 80014f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e00c      	b.n	800151a <GetSectorSize+0x5e>
	}
	else if((Sector == FLASH_SECTOR_4) || (Sector == FLASH_SECTOR_16))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b04      	cmp	r3, #4
 8001504:	d002      	beq.n	800150c <GetSectorSize+0x50>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d103      	bne.n	8001514 <GetSectorSize+0x58>
	{
		sectorsize = 64 * 1024;
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e002      	b.n	800151a <GetSectorSize+0x5e>
	}
	else
	{
		sectorsize = 128 * 1024;
 8001514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001518:	60fb      	str	r3, [r7, #12]
	}
	return sectorsize;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_MspInit+0x4c>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x4c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <HAL_ETH_MspInit+0x174>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f040 80a4 	bne.w	80016f0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b6:	6313      	str	r3, [r2, #48]	; 0x30
 80015b8:	4b50      	ldr	r3, [pc, #320]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015d2:	6313      	str	r3, [r2, #48]	; 0x30
 80015d4:	4b49      	ldr	r3, [pc, #292]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	4a44      	ldr	r2, [pc, #272]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015ee:	6313      	str	r3, [r2, #48]	; 0x30
 80015f0:	4b42      	ldr	r3, [pc, #264]	; (80016fc <HAL_ETH_MspInit+0x178>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <HAL_ETH_MspInit+0x178>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a3d      	ldr	r2, [pc, #244]	; (80016fc <HAL_ETH_MspInit+0x178>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <HAL_ETH_MspInit+0x178>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_ETH_MspInit+0x178>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4a36      	ldr	r2, [pc, #216]	; (80016fc <HAL_ETH_MspInit+0x178>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6313      	str	r3, [r2, #48]	; 0x30
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_ETH_MspInit+0x178>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_ETH_MspInit+0x178>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <HAL_ETH_MspInit+0x178>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_ETH_MspInit+0x178>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_ETH_MspInit+0x178>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	4a28      	ldr	r2, [pc, #160]	; (80016fc <HAL_ETH_MspInit+0x178>)
 800165a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800165e:	6313      	str	r3, [r2, #48]	; 0x30
 8001660:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_ETH_MspInit+0x178>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800166c:	2332      	movs	r3, #50	; 0x32
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800167c:	230b      	movs	r3, #11
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	481e      	ldr	r0, [pc, #120]	; (8001700 <HAL_ETH_MspInit+0x17c>)
 8001688:	f001 f9e2 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800168c:	2386      	movs	r3, #134	; 0x86
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800169c:	230b      	movs	r3, #11
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4817      	ldr	r0, [pc, #92]	; (8001704 <HAL_ETH_MspInit+0x180>)
 80016a8:	f001 f9d2 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016be:	230b      	movs	r3, #11
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	480f      	ldr	r0, [pc, #60]	; (8001708 <HAL_ETH_MspInit+0x184>)
 80016ca:	f001 f9c1 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e0:	230b      	movs	r3, #11
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	4808      	ldr	r0, [pc, #32]	; (800170c <HAL_ETH_MspInit+0x188>)
 80016ec:	f001 f9b0 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3738      	adds	r7, #56	; 0x38
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40028000 	.word	0x40028000
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020800 	.word	0x40020800
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400
 800170c:	40021800 	.word	0x40021800

08001710 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_I2C_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12c      	bne.n	800178c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_I2C_MspInit+0x88>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800174e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001754:	2312      	movs	r3, #18
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001760:	2304      	movs	r3, #4
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <HAL_I2C_MspInit+0x8c>)
 800176c:	f001 f970 	bl	8002a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_I2C_MspInit+0x88>)
 800177a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_I2C_MspInit+0x88>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40005400 	.word	0x40005400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020400 	.word	0x40020400

080017a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	; 0x38
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	2230      	movs	r2, #48	; 0x30
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 feb5 	bl	8007520 <memset>
  if(hrtc->Instance==RTC)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_RTC_MspInit+0x4c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d111      	bne.n	80017e4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017c0:	2320      	movs	r3, #32
 80017c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fec8 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80017da:	f7ff fea5 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_RTC_MspInit+0x50>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3738      	adds	r7, #56	; 0x38
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40002800 	.word	0x40002800
 80017f0:	42470e3c 	.word	0x42470e3c

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001804:	d10d      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_TIM_Base_MspInit+0x3c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_TIM_Base_MspInit+0x3c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_TIM_Base_MspInit+0x3c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a33      	ldr	r2, [pc, #204]	; (8001920 <HAL_UART_MspInit+0xec>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12d      	bne.n	80018b2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_UART_MspInit+0xf0>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a31      	ldr	r2, [pc, #196]	; (8001924 <HAL_UART_MspInit+0xf0>)
 8001860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <HAL_UART_MspInit+0xf0>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_UART_MspInit+0xf0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <HAL_UART_MspInit+0xf0>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b28      	ldr	r3, [pc, #160]	; (8001924 <HAL_UART_MspInit+0xf0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800188e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018a0:	2308      	movs	r3, #8
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	481f      	ldr	r0, [pc, #124]	; (8001928 <HAL_UART_MspInit+0xf4>)
 80018ac:	f001 f8d0 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018b0:	e031      	b.n	8001916 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_UART_MspInit+0xf8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d12c      	bne.n	8001916 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_UART_MspInit+0xf0>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_UART_MspInit+0xf0>)
 80018c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_UART_MspInit+0xf0>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_UART_MspInit+0xf0>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4a10      	ldr	r2, [pc, #64]	; (8001924 <HAL_UART_MspInit+0xf0>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_UART_MspInit+0xf0>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001906:	2307      	movs	r3, #7
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <HAL_UART_MspInit+0xfc>)
 8001912:	f001 f89d 	bl	8002a50 <HAL_GPIO_Init>
}
 8001916:	bf00      	nop
 8001918:	3730      	adds	r7, #48	; 0x30
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40004c00 	.word	0x40004c00
 8001924:	40023800 	.word	0x40023800
 8001928:	40020800 	.word	0x40020800
 800192c:	40004800 	.word	0x40004800
 8001930:	40020c00 	.word	0x40020c00

08001934 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001954:	d13f      	bne.n	80019d6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001972:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001984:	230a      	movs	r3, #10
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4815      	ldr	r0, [pc, #84]	; (80019e4 <HAL_PCD_MspInit+0xb0>)
 8001990:	f001 f85e 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	480e      	ldr	r0, [pc, #56]	; (80019e4 <HAL_PCD_MspInit+0xb0>)
 80019aa:	f001 f851 	bl	8002a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	6353      	str	r3, [r2, #52]	; 0x34
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_PCD_MspInit+0xac>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 f936 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM2_IRQHandler+0x10>)
 8001a42:	f003 fc2f 	bl	80052a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000328 	.word	0x20000328

08001a50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <USART3_IRQHandler+0x10>)
 8001a56:	f004 f8d1 	bl	8005bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200003b4 	.word	0x200003b4

08001a64 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <RTC_Alarm_IRQHandler+0x10>)
 8001a6a:	f003 fabf 	bl	8004fec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000308 	.word	0x20000308

08001a78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e00a      	b.n	8001aa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8a:	f3af 8000 	nop.w
 8001a8e:	4601      	mov	r1, r0
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	b2ca      	uxtb	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dbf0      	blt.n	8001a8a <_read+0x12>
  }

  return len;
 8001aa8:	687b      	ldr	r3, [r7, #4]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ada:	605a      	str	r2, [r3, #4]
  return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_isatty>:

int _isatty(int file)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b24:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <_sbrk+0x5c>)
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <_sbrk+0x60>)
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <_sbrk+0x64>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <_sbrk+0x68>)
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d207      	bcs.n	8001b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b4c:	f005 fd36 	bl	80075bc <__errno>
 8001b50:	4603      	mov	r3, r0
 8001b52:	220c      	movs	r2, #12
 8001b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e009      	b.n	8001b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <_sbrk+0x64>)
 8001b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20030000 	.word	0x20030000
 8001b7c:	00000400 	.word	0x00000400
 8001b80:	20000970 	.word	0x20000970
 8001b84:	20000ae8 	.word	0x20000ae8

08001b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <SystemInit+0x20>)
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <SystemInit+0x20>)
 8001b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc8:	4c0b      	ldr	r4, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bd6:	f7ff ffd7 	bl	8001b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f005 fcf5 	bl	80075c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7fe ffb3 	bl	8000b48 <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001be4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bf0:	08008500 	.word	0x08008500
  ldr r2, =_sbss
 8001bf4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bf8:	20000ae4 	.word	0x20000ae4

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_Init+0x40>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_Init+0x40>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x40>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f94f 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fc7e 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f967 	bl	8001f36 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f92f 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000010 	.word	0x20000010
 8001ca0:	2000000c 	.word	0x2000000c

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000010 	.word	0x20000010
 8001cc8:	20000974 	.word	0x20000974

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000974 	.word	0x20000974

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000010 	.word	0x20000010

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff29 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff3e 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff8e 	bl	8001e20 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5d 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff31 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa2 	bl	8001e88 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff feb6 	bl	8001ccc <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d008      	beq.n	8001f80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e052      	b.n	8002026 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0216 	bic.w	r2, r2, #22
 8001f8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <HAL_DMA_Abort+0x62>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0208 	bic.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd0:	e013      	b.n	8001ffa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd2:	f7ff fe7b 	bl	8001ccc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d90c      	bls.n	8001ffa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e015      	b.n	8002026 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e4      	bne.n	8001fd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	223f      	movs	r2, #63	; 0x3f
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d004      	beq.n	800204c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e00c      	b.n	8002066 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06c      	b.n	8002160 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208c:	2b00      	cmp	r3, #0
 800208e:	d106      	bne.n	800209e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2223      	movs	r2, #35	; 0x23
 8002094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fa73 	bl	8001584 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_ETH_Init+0xf4>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a30      	ldr	r2, [pc, #192]	; (8002168 <HAL_ETH_Init+0xf4>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <HAL_ETH_Init+0xf4>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_ETH_Init+0xf8>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a2b      	ldr	r2, [pc, #172]	; (800216c <HAL_ETH_Init+0xf8>)
 80020c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_ETH_Init+0xf8>)
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4927      	ldr	r1, [pc, #156]	; (800216c <HAL_ETH_Init+0xf8>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_ETH_Init+0xf8>)
 80020d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f0:	f7ff fdec 	bl	8001ccc <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020f6:	e011      	b.n	800211c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020f8:	f7ff fde8 	bl	8001ccc <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002106:	d909      	bls.n	800211c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2204      	movs	r2, #4
 800210c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	22e0      	movs	r2, #224	; 0xe0
 8002114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e021      	b.n	8002160 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e4      	bne.n	80020f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f958 	bl	80023e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f9ff 	bl	8002538 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fa55 	bl	80025ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	461a      	mov	r2, r3
 8002146:	2100      	movs	r1, #0
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f9bd 	bl	80024c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2210      	movs	r2, #16
 800215a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800

08002170 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4b51      	ldr	r3, [pc, #324]	; (80022cc <ETH_SetMACConfig+0x15c>)
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	7c1b      	ldrb	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <ETH_SetMACConfig+0x28>
 8002192:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002196:	e000      	b.n	800219a <ETH_SetMACConfig+0x2a>
 8002198:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	7c5b      	ldrb	r3, [r3, #17]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <ETH_SetMACConfig+0x38>
 80021a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021a6:	e000      	b.n	80021aa <ETH_SetMACConfig+0x3a>
 80021a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	7fdb      	ldrb	r3, [r3, #31]
 80021b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	7f92      	ldrb	r2, [r2, #30]
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d102      	bne.n	80021ce <ETH_SetMACConfig+0x5e>
 80021c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021cc:	e000      	b.n	80021d0 <ETH_SetMACConfig+0x60>
 80021ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80021d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7f1b      	ldrb	r3, [r3, #28]
 80021d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d102      	bne.n	80021f8 <ETH_SetMACConfig+0x88>
 80021f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f6:	e000      	b.n	80021fa <ETH_SetMACConfig+0x8a>
 80021f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	7bdb      	ldrb	r3, [r3, #15]
 8002200:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002202:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002208:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002210:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002212:	4313      	orrs	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800222a:	2001      	movs	r0, #1
 800222c:	f7ff fd5a 	bl	8001ce4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002246:	4013      	ands	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002256:	2a00      	cmp	r2, #0
 8002258:	d101      	bne.n	800225e <ETH_SetMACConfig+0xee>
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	e000      	b.n	8002260 <ETH_SetMACConfig+0xf0>
 800225e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002260:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002266:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800226e:	2a01      	cmp	r2, #1
 8002270:	d101      	bne.n	8002276 <ETH_SetMACConfig+0x106>
 8002272:	2208      	movs	r2, #8
 8002274:	e000      	b.n	8002278 <ETH_SetMACConfig+0x108>
 8002276:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002278:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002280:	2a01      	cmp	r2, #1
 8002282:	d101      	bne.n	8002288 <ETH_SetMACConfig+0x118>
 8002284:	2204      	movs	r2, #4
 8002286:	e000      	b.n	800228a <ETH_SetMACConfig+0x11a>
 8002288:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800228a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002292:	2a01      	cmp	r2, #1
 8002294:	d101      	bne.n	800229a <ETH_SetMACConfig+0x12a>
 8002296:	2202      	movs	r2, #2
 8002298:	e000      	b.n	800229c <ETH_SetMACConfig+0x12c>
 800229a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800229c:	4313      	orrs	r3, r2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b4:	2001      	movs	r0, #1
 80022b6:	f7ff fd15 	bl	8001ce4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	619a      	str	r2, [r3, #24]
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	ff20810f 	.word	0xff20810f

080022d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <ETH_SetDMAConfig+0x110>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	7b1b      	ldrb	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <ETH_SetDMAConfig+0x2c>
 80022f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022fa:	e000      	b.n	80022fe <ETH_SetDMAConfig+0x2e>
 80022fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	7b5b      	ldrb	r3, [r3, #13]
 8002302:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002304:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	7f52      	ldrb	r2, [r2, #29]
 800230a:	2a00      	cmp	r2, #0
 800230c:	d102      	bne.n	8002314 <ETH_SetDMAConfig+0x44>
 800230e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002312:	e000      	b.n	8002316 <ETH_SetDMAConfig+0x46>
 8002314:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002316:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	7b9b      	ldrb	r3, [r3, #14]
 800231c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800231e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002324:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	7f1b      	ldrb	r3, [r3, #28]
 800232a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800232c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	7f9b      	ldrb	r3, [r3, #30]
 8002332:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002334:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800233a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002342:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002344:	4313      	orrs	r3, r2
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002354:	461a      	mov	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002366:	2001      	movs	r0, #1
 8002368:	f7ff fcbc 	bl	8001ce4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	461a      	mov	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	791b      	ldrb	r3, [r3, #4]
 800237e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002384:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800238a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002390:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002398:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800239a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff fc8d 	bl	8001ce4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	f8de3f23 	.word	0xf8de3f23

080023e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0a6      	sub	sp, #152	; 0x98
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002420:	2300      	movs	r3, #0
 8002422:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800242a:	2300      	movs	r3, #0
 800242c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800244c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002450:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fe86 	bl	8002170 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002464:	2301      	movs	r3, #1
 8002466:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002468:	2301      	movs	r3, #1
 800246a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800246c:	2301      	movs	r3, #1
 800246e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002472:	2301      	movs	r3, #1
 8002474:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002486:	2300      	movs	r3, #0
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002490:	2301      	movs	r3, #1
 8002492:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002498:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800249a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800249e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024b4:	f107 0308 	add.w	r3, r7, #8
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ff08 	bl	80022d0 <ETH_SetDMAConfig>
}
 80024c0:	bf00      	nop
 80024c2:	3798      	adds	r7, #152	; 0x98
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3305      	adds	r3, #5
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	3204      	adds	r2, #4
 80024e0:	7812      	ldrb	r2, [r2, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <ETH_MACAddressConfig+0x68>)
 80024ea:	4413      	add	r3, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3303      	adds	r3, #3
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	061a      	lsls	r2, r3, #24
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3302      	adds	r3, #2
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3301      	adds	r3, #1
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	4313      	orrs	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <ETH_MACAddressConfig+0x6c>)
 800251a:	4413      	add	r3, r2
 800251c:	461a      	mov	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6013      	str	r3, [r2, #0]
}
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40028040 	.word	0x40028040
 8002534:	40028044 	.word	0x40028044

08002538 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e03e      	b.n	80025c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68d9      	ldr	r1, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	3206      	adds	r2, #6
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d80c      	bhi.n	80025a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	440b      	add	r3, r1
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	e004      	b.n	80025b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3301      	adds	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d9bd      	bls.n	8002546 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025dc:	611a      	str	r2, [r3, #16]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	e046      	b.n	8002686 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6919      	ldr	r1, [r3, #16]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2200      	movs	r2, #0
 8002614:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2200      	movs	r2, #0
 8002626:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002634:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800263c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	3212      	adds	r2, #18
 8002652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d80c      	bhi.n	8002676 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6919      	ldr	r1, [r3, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	e004      	b.n	8002680 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d9b5      	bls.n	80025f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b6:	60da      	str	r2, [r3, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_FLASH_Program+0xa0>)
 80026d8:	7e1b      	ldrb	r3, [r3, #24]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_FLASH_Program+0x1e>
 80026de:	2302      	movs	r3, #2
 80026e0:	e03b      	b.n	800275a <HAL_FLASH_Program+0x96>
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_FLASH_Program+0xa0>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026ec:	f000 f870 	bl	80027d0 <FLASH_WaitForLastOperation>
 80026f0:	4603      	mov	r3, r0
 80026f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d12b      	bne.n	8002752 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002700:	783b      	ldrb	r3, [r7, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	68b8      	ldr	r0, [r7, #8]
 8002706:	f000 f91b 	bl	8002940 <FLASH_Program_Byte>
 800270a:	e016      	b.n	800273a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002712:	883b      	ldrh	r3, [r7, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	68b8      	ldr	r0, [r7, #8]
 8002718:	f000 f8ee 	bl	80028f8 <FLASH_Program_HalfWord>
 800271c:	e00d      	b.n	800273a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d105      	bne.n	8002730 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	68b8      	ldr	r0, [r7, #8]
 800272a:	f000 f8c3 	bl	80028b4 <FLASH_Program_Word>
 800272e:	e004      	b.n	800273a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002734:	68b8      	ldr	r0, [r7, #8]
 8002736:	f000 f88b 	bl	8002850 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800273a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800273e:	f000 f847 	bl	80027d0 <FLASH_WaitForLastOperation>
 8002742:	4603      	mov	r3, r0
 8002744:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_FLASH_Program+0xa4>)
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_FLASH_Program+0xa4>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_FLASH_Program+0xa0>)
 8002754:	2200      	movs	r2, #0
 8002756:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002758:	7dfb      	ldrb	r3, [r7, #23]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000978 	.word	0x20000978
 8002768:	40023c00 	.word	0x40023c00

0800276c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_FLASH_Unlock+0x38>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	da0b      	bge.n	8002796 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_FLASH_Unlock+0x38>)
 8002780:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_FLASH_Unlock+0x3c>)
 8002782:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_FLASH_Unlock+0x38>)
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_FLASH_Unlock+0x40>)
 8002788:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_FLASH_Unlock+0x38>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	da01      	bge.n	8002796 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002796:	79fb      	ldrb	r3, [r7, #7]
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40023c00 	.word	0x40023c00
 80027a8:	45670123 	.word	0x45670123
 80027ac:	cdef89ab 	.word	0xcdef89ab

080027b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_FLASH_Lock+0x1c>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_FLASH_Lock+0x1c>)
 80027ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027be:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <FLASH_WaitForLastOperation+0x78>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80027e2:	f7ff fa73 	bl	8001ccc <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027e8:	e010      	b.n	800280c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d00c      	beq.n	800280c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <FLASH_WaitForLastOperation+0x38>
 80027f8:	f7ff fa68 	bl	8001ccc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	d201      	bcs.n	800280c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e019      	b.n	8002840 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <FLASH_WaitForLastOperation+0x7c>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e8      	bne.n	80027ea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <FLASH_WaitForLastOperation+0x7c>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <FLASH_WaitForLastOperation+0x7c>)
 8002826:	2201      	movs	r2, #1
 8002828:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <FLASH_WaitForLastOperation+0x7c>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002836:	f000 f8a5 	bl	8002984 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
  
}  
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000978 	.word	0x20000978
 800284c:	40023c00 	.word	0x40023c00

08002850 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <FLASH_Program_DoubleWord+0x60>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <FLASH_Program_DoubleWord+0x60>)
 8002862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <FLASH_Program_DoubleWord+0x60>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <FLASH_Program_DoubleWord+0x60>)
 800286e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <FLASH_Program_DoubleWord+0x60>)
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <FLASH_Program_DoubleWord+0x60>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002886:	f3bf 8f6f 	isb	sy
}
 800288a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800288c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	000a      	movs	r2, r1
 800289a:	2300      	movs	r3, #0
 800289c:	68f9      	ldr	r1, [r7, #12]
 800289e:	3104      	adds	r1, #4
 80028a0:	4613      	mov	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40023c00 	.word	0x40023c00

080028b4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <FLASH_Program_Word+0x40>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <FLASH_Program_Word+0x40>)
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <FLASH_Program_Word+0x40>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <FLASH_Program_Word+0x40>)
 80028d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <FLASH_Program_Word+0x40>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <FLASH_Program_Word+0x40>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40023c00 	.word	0x40023c00

080028f8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <FLASH_Program_HalfWord+0x44>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	4a0c      	ldr	r2, [pc, #48]	; (800293c <FLASH_Program_HalfWord+0x44>)
 800290a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <FLASH_Program_HalfWord+0x44>)
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	4a09      	ldr	r2, [pc, #36]	; (800293c <FLASH_Program_HalfWord+0x44>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <FLASH_Program_HalfWord+0x44>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4a06      	ldr	r2, [pc, #24]	; (800293c <FLASH_Program_HalfWord+0x44>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	801a      	strh	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023c00 	.word	0x40023c00

08002940 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <FLASH_Program_Byte+0x40>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <FLASH_Program_Byte+0x40>)
 8002952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002956:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <FLASH_Program_Byte+0x40>)
 800295a:	4a09      	ldr	r2, [pc, #36]	; (8002980 <FLASH_Program_Byte+0x40>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <FLASH_Program_Byte+0x40>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4a06      	ldr	r2, [pc, #24]	; (8002980 <FLASH_Program_Byte+0x40>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	701a      	strb	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00

08002984 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002988:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 800299e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 80029a2:	2210      	movs	r2, #16
 80029a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f043 0308 	orr.w	r3, r3, #8
 80029ba:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 80029bc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 80029c0:	2220      	movs	r2, #32
 80029c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 80029da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 80029de:	2240      	movs	r2, #64	; 0x40
 80029e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f043 0302 	orr.w	r3, r3, #2
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 80029f8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 8002a16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 8002a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a1e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f043 0320 	orr.w	r3, r3, #32
 8002a34:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <FLASH_SetErrorCode+0xc8>)
 8002a36:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <FLASH_SetErrorCode+0xc4>)
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	60da      	str	r2, [r3, #12]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40023c00 	.word	0x40023c00
 8002a4c:	20000978 	.word	0x20000978

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e177      	b.n	8002d5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 8166 	bne.w	8002d56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80c0 	beq.w	8002d56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <HAL_GPIO_Init+0x324>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <HAL_GPIO_Init+0x324>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be4:	6453      	str	r3, [r2, #68]	; 0x44
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_GPIO_Init+0x324>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf2:	4a61      	ldr	r2, [pc, #388]	; (8002d78 <HAL_GPIO_Init+0x328>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_GPIO_Init+0x32c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d037      	beq.n	8002c8e <HAL_GPIO_Init+0x23e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a57      	ldr	r2, [pc, #348]	; (8002d80 <HAL_GPIO_Init+0x330>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_GPIO_Init+0x23a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_GPIO_Init+0x334>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02b      	beq.n	8002c86 <HAL_GPIO_Init+0x236>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a55      	ldr	r2, [pc, #340]	; (8002d88 <HAL_GPIO_Init+0x338>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d025      	beq.n	8002c82 <HAL_GPIO_Init+0x232>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a54      	ldr	r2, [pc, #336]	; (8002d8c <HAL_GPIO_Init+0x33c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01f      	beq.n	8002c7e <HAL_GPIO_Init+0x22e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a53      	ldr	r2, [pc, #332]	; (8002d90 <HAL_GPIO_Init+0x340>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d019      	beq.n	8002c7a <HAL_GPIO_Init+0x22a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a52      	ldr	r2, [pc, #328]	; (8002d94 <HAL_GPIO_Init+0x344>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0x226>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a51      	ldr	r2, [pc, #324]	; (8002d98 <HAL_GPIO_Init+0x348>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00d      	beq.n	8002c72 <HAL_GPIO_Init+0x222>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a50      	ldr	r2, [pc, #320]	; (8002d9c <HAL_GPIO_Init+0x34c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <HAL_GPIO_Init+0x21e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	; (8002da0 <HAL_GPIO_Init+0x350>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_GPIO_Init+0x21a>
 8002c66:	2309      	movs	r3, #9
 8002c68:	e012      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c6a:	230a      	movs	r3, #10
 8002c6c:	e010      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	e00e      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e00c      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c76:	2306      	movs	r3, #6
 8002c78:	e00a      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e008      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c82:	2303      	movs	r3, #3
 8002c84:	e004      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f002 0203 	and.w	r2, r2, #3
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca0:	4935      	ldr	r1, [pc, #212]	; (8002d78 <HAL_GPIO_Init+0x328>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_GPIO_Init+0x354>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd2:	4a34      	ldr	r2, [pc, #208]	; (8002da4 <HAL_GPIO_Init+0x354>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd8:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <HAL_GPIO_Init+0x354>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cfc:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <HAL_GPIO_Init+0x354>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_GPIO_Init+0x354>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <HAL_GPIO_Init+0x354>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_GPIO_Init+0x354>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <HAL_GPIO_Init+0x354>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	f67f ae84 	bls.w	8002a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	40020000 	.word	0x40020000
 8002d80:	40020400 	.word	0x40020400
 8002d84:	40020800 	.word	0x40020800
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40021400 	.word	0x40021400
 8002d94:	40021800 	.word	0x40021800
 8002d98:	40021c00 	.word	0x40021c00
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40022400 	.word	0x40022400
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dec:	887a      	ldrh	r2, [r7, #2]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	041a      	lsls	r2, r3, #16
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e12b      	b.n	800307a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe fc6a 	bl	8001710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	; 0x24
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e74:	f001 fb4e 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 8002e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a81      	ldr	r2, [pc, #516]	; (8003084 <HAL_I2C_Init+0x274>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d807      	bhi.n	8002e94 <HAL_I2C_Init+0x84>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a80      	ldr	r2, [pc, #512]	; (8003088 <HAL_I2C_Init+0x278>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e006      	b.n	8002ea2 <HAL_I2C_Init+0x92>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a7d      	ldr	r2, [pc, #500]	; (800308c <HAL_I2C_Init+0x27c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	bf94      	ite	ls
 8002e9c:	2301      	movls	r3, #1
 8002e9e:	2300      	movhi	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0e7      	b.n	800307a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a78      	ldr	r2, [pc, #480]	; (8003090 <HAL_I2C_Init+0x280>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a6a      	ldr	r2, [pc, #424]	; (8003084 <HAL_I2C_Init+0x274>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d802      	bhi.n	8002ee4 <HAL_I2C_Init+0xd4>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	e009      	b.n	8002ef8 <HAL_I2C_Init+0xe8>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	4a69      	ldr	r2, [pc, #420]	; (8003094 <HAL_I2C_Init+0x284>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	495c      	ldr	r1, [pc, #368]	; (8003084 <HAL_I2C_Init+0x274>)
 8002f14:	428b      	cmp	r3, r1
 8002f16:	d819      	bhi.n	8002f4c <HAL_I2C_Init+0x13c>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e59      	subs	r1, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f26:	1c59      	adds	r1, r3, #1
 8002f28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_I2C_Init+0x138>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e59      	subs	r1, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	e051      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e04f      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HAL_I2C_Init+0x168>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e012      	b.n	8002f9e <HAL_I2C_Init+0x18e>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	0099      	lsls	r1, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x196>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e022      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10e      	bne.n	8002fcc <HAL_I2C_Init+0x1bc>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e58      	subs	r0, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	440b      	add	r3, r1
 8002fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6809      	ldr	r1, [r1, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800301a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6911      	ldr	r1, [r2, #16]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	000186a0 	.word	0x000186a0
 8003088:	001e847f 	.word	0x001e847f
 800308c:	003d08ff 	.word	0x003d08ff
 8003090:	431bde83 	.word	0x431bde83
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	461a      	mov	r2, r3
 80030a4:	460b      	mov	r3, r1
 80030a6:	817b      	strh	r3, [r7, #10]
 80030a8:	4613      	mov	r3, r2
 80030aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7fe fe0e 	bl	8001ccc <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	f040 80e0 	bne.w	8003280 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2319      	movs	r3, #25
 80030c6:	2201      	movs	r2, #1
 80030c8:	4970      	ldr	r1, [pc, #448]	; (800328c <HAL_I2C_Master_Transmit+0x1f4>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fa92 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0d3      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x50>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0cc      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d007      	beq.n	800310e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2221      	movs	r2, #33	; 0x21
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2210      	movs	r2, #16
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	893a      	ldrh	r2, [r7, #8]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_I2C_Master_Transmit+0x1f8>)
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f9ca 	bl	80034f0 <I2C_MasterRequestWrite>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e08d      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800317c:	e066      	b.n	800324c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	6a39      	ldr	r1, [r7, #32]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fb0c 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b04      	cmp	r3, #4
 8003194:	d107      	bne.n	80031a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06b      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11b      	bne.n	8003220 <HAL_I2C_Master_Transmit+0x188>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	6a39      	ldr	r1, [r7, #32]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fafc 	bl	8003822 <I2C_WaitOnBTFFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00d      	beq.n	800324c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	2b04      	cmp	r3, #4
 8003236:	d107      	bne.n	8003248 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e01a      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d194      	bne.n	800317e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	00100002 	.word	0x00100002
 8003290:	ffff0000 	.word	0xffff0000

08003294 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	460b      	mov	r3, r1
 80032a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7fe fd12 	bl	8001ccc <HAL_GetTick>
 80032a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	f040 8111 	bne.w	80034de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2319      	movs	r3, #25
 80032c2:	2201      	movs	r2, #1
 80032c4:	4988      	ldr	r1, [pc, #544]	; (80034e8 <HAL_I2C_IsDeviceReady+0x254>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f994 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	e104      	b.n	80034e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_I2C_IsDeviceReady+0x50>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e0fd      	b.n	80034e0 <HAL_I2C_IsDeviceReady+0x24c>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d007      	beq.n	800330a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003318:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2224      	movs	r2, #36	; 0x24
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a70      	ldr	r2, [pc, #448]	; (80034ec <HAL_I2C_IsDeviceReady+0x258>)
 800332c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f952 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003364:	d103      	bne.n	800336e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0b6      	b.n	80034e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003380:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003382:	f7fe fca3 	bl	8001ccc <HAL_GetTick>
 8003386:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033b6:	e025      	b.n	8003404 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033b8:	f7fe fc88 	bl	8001ccc <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d302      	bcc.n	80033ce <HAL_I2C_IsDeviceReady+0x13a>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	22a0      	movs	r2, #160	; 0xa0
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2ba0      	cmp	r3, #160	; 0xa0
 800340e:	d005      	beq.n	800341c <HAL_I2C_IsDeviceReady+0x188>
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_I2C_IsDeviceReady+0x188>
 8003416:	7dbb      	ldrb	r3, [r7, #22]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0cd      	beq.n	80033b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d129      	bne.n	8003486 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2319      	movs	r3, #25
 800345e:	2201      	movs	r2, #1
 8003460:	4921      	ldr	r1, [pc, #132]	; (80034e8 <HAL_I2C_IsDeviceReady+0x254>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f8c6 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e036      	b.n	80034e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e02c      	b.n	80034e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003494:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800349e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2319      	movs	r3, #25
 80034a6:	2201      	movs	r2, #1
 80034a8:	490f      	ldr	r1, [pc, #60]	; (80034e8 <HAL_I2C_IsDeviceReady+0x254>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f8a2 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e012      	b.n	80034e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	3301      	adds	r3, #1
 80034be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	f4ff af32 	bcc.w	800332e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	00100002 	.word	0x00100002
 80034ec:	ffff0000 	.word	0xffff0000

080034f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	460b      	mov	r3, r1
 80034fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d006      	beq.n	800351a <I2C_MasterRequestWrite+0x2a>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d003      	beq.n	800351a <I2C_MasterRequestWrite+0x2a>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003518:	d108      	bne.n	800352c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e00b      	b.n	8003544 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	2b12      	cmp	r3, #18
 8003532:	d107      	bne.n	8003544 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003542:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f84f 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356a:	d103      	bne.n	8003574 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e035      	b.n	80035e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003580:	d108      	bne.n	8003594 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	e01b      	b.n	80035cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003594:	897b      	ldrh	r3, [r7, #10]
 8003596:	11db      	asrs	r3, r3, #7
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0306 	and.w	r3, r3, #6
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f063 030f 	orn	r3, r3, #15
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	490e      	ldr	r1, [pc, #56]	; (80035ec <I2C_MasterRequestWrite+0xfc>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f875 	bl	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e010      	b.n	80035e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035c2:	897b      	ldrh	r3, [r7, #10]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4907      	ldr	r1, [pc, #28]	; (80035f0 <I2C_MasterRequestWrite+0x100>)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f865 	bl	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	00010008 	.word	0x00010008
 80035f0:	00010002 	.word	0x00010002

080035f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003604:	e025      	b.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d021      	beq.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fb5d 	bl	8001ccc <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e023      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10d      	bne.n	8003678 <I2C_WaitOnFlagUntilTimeout+0x84>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	e00c      	b.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	429a      	cmp	r2, r3
 8003696:	d0b6      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b0:	e051      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d123      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0204 	orr.w	r2, r3, #4
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e046      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d021      	beq.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fe fadb 	bl	8001ccc <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d116      	bne.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e020      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10c      	bne.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	2300      	moveq	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	e00b      	b.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d18d      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ac:	e02d      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f878 	bl	80038a4 <I2C_IsAcknowledgeFailed>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e02d      	b.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d021      	beq.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe fa81 	bl	8001ccc <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e007      	b.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d1ca      	bne.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800382e:	e02d      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f837 	bl	80038a4 <I2C_IsAcknowledgeFailed>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e02d      	b.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d021      	beq.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003848:	f7fe fa40 	bl	8001ccc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	429a      	cmp	r2, r3
 8003856:	d302      	bcc.n	800385e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d116      	bne.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d1ca      	bne.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ba:	d11b      	bne.n	80038f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f043 0204 	orr.w	r2, r3, #4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d129      	bne.n	800396c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0210 	bic.w	r2, r2, #16
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b20      	cmp	r3, #32
 8003992:	d12a      	bne.n	80039ea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80039b4:	89fb      	ldrh	r3, [r7, #14]
 80039b6:	f023 030f 	bic.w	r3, r3, #15
 80039ba:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	89fa      	ldrh	r2, [r7, #14]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fa:	b08f      	sub	sp, #60	; 0x3c
 80039fc:	af0a      	add	r7, sp, #40	; 0x28
 80039fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e10f      	b.n	8003c2a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fd ff85 	bl	8001934 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 f86c 	bl	8006b26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	687e      	ldr	r6, [r7, #4]
 8003a56:	466d      	mov	r5, sp
 8003a58:	f106 0410 	add.w	r4, r6, #16
 8003a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a6c:	1d33      	adds	r3, r6, #4
 8003a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a70:	6838      	ldr	r0, [r7, #0]
 8003a72:	f002 fff7 	bl	8006a64 <USB_CoreInit>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0d0      	b.n	8003c2a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 f85a 	bl	8006b48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e04a      	b.n	8003b30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	333d      	adds	r3, #61	; 0x3d
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	333c      	adds	r3, #60	; 0x3c
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	b298      	uxth	r0, r3
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3344      	adds	r3, #68	; 0x44
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	3340      	adds	r3, #64	; 0x40
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3348      	adds	r3, #72	; 0x48
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	334c      	adds	r3, #76	; 0x4c
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	3354      	adds	r3, #84	; 0x54
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d3af      	bcc.n	8003a9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	e044      	b.n	8003bca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	7bfa      	ldrb	r2, [r7, #15]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d3b5      	bcc.n	8003b40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	687e      	ldr	r6, [r7, #4]
 8003bdc:	466d      	mov	r5, sp
 8003bde:	f106 0410 	add.w	r4, r6, #16
 8003be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bee:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bf2:	1d33      	adds	r3, r6, #4
 8003bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bf6:	6838      	ldr	r0, [r7, #0]
 8003bf8:	f002 fff2 	bl	8006be0 <USB_DevInit>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00d      	b.n	8003c2a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 f9bd 	bl	8006fa2 <USB_DevDisconnect>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e267      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d075      	beq.n	8003d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c52:	4b88      	ldr	r3, [pc, #544]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d00c      	beq.n	8003c78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5e:	4b85      	ldr	r3, [pc, #532]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d112      	bne.n	8003c90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4b82      	ldr	r3, [pc, #520]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c76:	d10b      	bne.n	8003c90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	4b7e      	ldr	r3, [pc, #504]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05b      	beq.n	8003d3c <HAL_RCC_OscConfig+0x108>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d157      	bne.n	8003d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e242      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c98:	d106      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x74>
 8003c9a:	4b76      	ldr	r3, [pc, #472]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a75      	ldr	r2, [pc, #468]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e01d      	b.n	8003ce4 <HAL_RCC_OscConfig+0xb0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x98>
 8003cb2:	4b70      	ldr	r3, [pc, #448]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6f      	ldr	r2, [pc, #444]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6c      	ldr	r2, [pc, #432]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCC_OscConfig+0xb0>
 8003ccc:	4b69      	ldr	r3, [pc, #420]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a68      	ldr	r2, [pc, #416]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b66      	ldr	r3, [pc, #408]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a65      	ldr	r2, [pc, #404]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fd ffee 	bl	8001ccc <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7fd ffea 	bl	8001ccc <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e207      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	4b5b      	ldr	r3, [pc, #364]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xc0>
 8003d12:	e014      	b.n	8003d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd ffda 	bl	8001ccc <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7fd ffd6 	bl	8001ccc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e1f3      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2e:	4b51      	ldr	r3, [pc, #324]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0xe8>
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d063      	beq.n	8003e12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d56:	4b47      	ldr	r3, [pc, #284]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d11c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b44      	ldr	r3, [pc, #272]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d116      	bne.n	8003d9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	4b41      	ldr	r3, [pc, #260]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_RCC_OscConfig+0x152>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e1c7      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d86:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4937      	ldr	r1, [pc, #220]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9a:	e03a      	b.n	8003e12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d020      	beq.n	8003de6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCC_OscConfig+0x244>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003daa:	f7fd ff8f 	bl	8001ccc <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db2:	f7fd ff8b 	bl	8001ccc <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1a8      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4925      	ldr	r1, [pc, #148]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]
 8003de4:	e015      	b.n	8003e12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_OscConfig+0x244>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd ff6e 	bl	8001ccc <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df4:	f7fd ff6a 	bl	8001ccc <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e187      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e06:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d036      	beq.n	8003e8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_RCC_OscConfig+0x248>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7fd ff4e 	bl	8001ccc <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e34:	f7fd ff4a 	bl	8001ccc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e167      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_OscConfig+0x240>)
 8003e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x200>
 8003e52:	e01b      	b.n	8003e8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RCC_OscConfig+0x248>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5a:	f7fd ff37 	bl	8001ccc <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e60:	e00e      	b.n	8003e80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e62:	f7fd ff33 	bl	8001ccc <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d907      	bls.n	8003e80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e150      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
 8003e74:	40023800 	.word	0x40023800
 8003e78:	42470000 	.word	0x42470000
 8003e7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ea      	bne.n	8003e62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8097 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9e:	4b81      	ldr	r3, [pc, #516]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	4b7d      	ldr	r3, [pc, #500]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a7c      	ldr	r2, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eba:	4b7a      	ldr	r3, [pc, #488]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eca:	4b77      	ldr	r3, [pc, #476]	; (80040a8 <HAL_RCC_OscConfig+0x474>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d118      	bne.n	8003f08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed6:	4b74      	ldr	r3, [pc, #464]	; (80040a8 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a73      	ldr	r2, [pc, #460]	; (80040a8 <HAL_RCC_OscConfig+0x474>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee2:	f7fd fef3 	bl	8001ccc <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eea:	f7fd feef 	bl	8001ccc <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e10c      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	4b6a      	ldr	r3, [pc, #424]	; (80040a8 <HAL_RCC_OscConfig+0x474>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCC_OscConfig+0x2ea>
 8003f10:	4b64      	ldr	r3, [pc, #400]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a63      	ldr	r2, [pc, #396]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	e01c      	b.n	8003f58 <HAL_RCC_OscConfig+0x324>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x30c>
 8003f26:	4b5f      	ldr	r3, [pc, #380]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a5e      	ldr	r2, [pc, #376]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	f043 0304 	orr.w	r3, r3, #4
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
 8003f32:	4b5c      	ldr	r3, [pc, #368]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a5b      	ldr	r2, [pc, #364]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3e:	e00b      	b.n	8003f58 <HAL_RCC_OscConfig+0x324>
 8003f40:	4b58      	ldr	r3, [pc, #352]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	4a57      	ldr	r2, [pc, #348]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4c:	4b55      	ldr	r3, [pc, #340]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a54      	ldr	r2, [pc, #336]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f52:	f023 0304 	bic.w	r3, r3, #4
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d015      	beq.n	8003f8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd feb4 	bl	8001ccc <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f68:	f7fd feb0 	bl	8001ccc <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e0cb      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7e:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0ee      	beq.n	8003f68 <HAL_RCC_OscConfig+0x334>
 8003f8a:	e014      	b.n	8003fb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8c:	f7fd fe9e 	bl	8001ccc <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f94:	f7fd fe9a 	bl	8001ccc <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e0b5      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003faa:	4b3e      	ldr	r3, [pc, #248]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ee      	bne.n	8003f94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d105      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	4a38      	ldr	r2, [pc, #224]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80a1 	beq.w	8004114 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d05c      	beq.n	8004098 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d141      	bne.n	800406a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCC_OscConfig+0x478>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd fe6e 	bl	8001ccc <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fd fe6a 	bl	8001ccc <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e087      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	019b      	lsls	r3, r3, #6
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	3b01      	subs	r3, #1
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	491b      	ldr	r1, [pc, #108]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 8004038:	4313      	orrs	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_RCC_OscConfig+0x478>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd fe43 	bl	8001ccc <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404a:	f7fd fe3f 	bl	8001ccc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e05c      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x416>
 8004068:	e054      	b.n	8004114 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_RCC_OscConfig+0x478>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fd fe2c 	bl	8001ccc <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004078:	f7fd fe28 	bl	8001ccc <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e045      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x470>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x444>
 8004096:	e03d      	b.n	8004114 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e038      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40007000 	.word	0x40007000
 80040ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_RCC_OscConfig+0x4ec>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d028      	beq.n	8004110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d121      	bne.n	8004110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d11a      	bne.n	8004110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040e0:	4013      	ands	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d111      	bne.n	8004110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	3b01      	subs	r3, #1
 80040fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800

08004124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0cc      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004138:	4b68      	ldr	r3, [pc, #416]	; (80042dc <HAL_RCC_ClockConfig+0x1b8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d90c      	bls.n	8004160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b65      	ldr	r3, [pc, #404]	; (80042dc <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b63      	ldr	r3, [pc, #396]	; (80042dc <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0b8      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004178:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a58      	ldr	r2, [pc, #352]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a52      	ldr	r2, [pc, #328]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419c:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	494d      	ldr	r1, [pc, #308]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d044      	beq.n	8004244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d119      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e07f      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d003      	beq.n	80041e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	4b3f      	ldr	r3, [pc, #252]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e06f      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f2:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e067      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004202:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4934      	ldr	r1, [pc, #208]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004214:	f7fd fd5a 	bl	8001ccc <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	e00a      	b.n	8004232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421c:	f7fd fd56 	bl	8001ccc <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e04f      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 020c 	and.w	r2, r3, #12
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	429a      	cmp	r2, r3
 8004242:	d1eb      	bne.n	800421c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004244:	4b25      	ldr	r3, [pc, #148]	; (80042dc <HAL_RCC_ClockConfig+0x1b8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d20c      	bcs.n	800426c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <HAL_RCC_ClockConfig+0x1b8>)
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e032      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4916      	ldr	r1, [pc, #88]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	490e      	ldr	r1, [pc, #56]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042aa:	f000 f821 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 80042ae:	4602      	mov	r2, r0
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	490a      	ldr	r1, [pc, #40]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	5ccb      	ldrb	r3, [r1, r3]
 80042be:	fa22 f303 	lsr.w	r3, r2, r3
 80042c2:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd fcba 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40023c00 	.word	0x40023c00
 80042e0:	40023800 	.word	0x40023800
 80042e4:	080084a4 	.word	0x080084a4
 80042e8:	20000008 	.word	0x20000008
 80042ec:	2000000c 	.word	0x2000000c

080042f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f4:	b094      	sub	sp, #80	; 0x50
 80042f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	647b      	str	r3, [r7, #68]	; 0x44
 80042fc:	2300      	movs	r3, #0
 80042fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004300:	2300      	movs	r3, #0
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004308:	4b79      	ldr	r3, [pc, #484]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b08      	cmp	r3, #8
 8004312:	d00d      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x40>
 8004314:	2b08      	cmp	r3, #8
 8004316:	f200 80e1 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x34>
 800431e:	2b04      	cmp	r3, #4
 8004320:	d003      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0x3a>
 8004322:	e0db      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004324:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004326:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004328:	e0db      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800432a:	4b73      	ldr	r3, [pc, #460]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800432c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432e:	e0d8      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004330:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800433a:	4b6d      	ldr	r3, [pc, #436]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d063      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004346:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	099b      	lsrs	r3, r3, #6
 800434c:	2200      	movs	r2, #0
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004350:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004358:	633b      	str	r3, [r7, #48]	; 0x30
 800435a:	2300      	movs	r3, #0
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
 800435e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	f04f 0000 	mov.w	r0, #0
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	0159      	lsls	r1, r3, #5
 8004370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004374:	0150      	lsls	r0, r2, #5
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4621      	mov	r1, r4
 800437c:	1a51      	subs	r1, r2, r1
 800437e:	6139      	str	r1, [r7, #16]
 8004380:	4629      	mov	r1, r5
 8004382:	eb63 0301 	sbc.w	r3, r3, r1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004394:	4659      	mov	r1, fp
 8004396:	018b      	lsls	r3, r1, #6
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439e:	4651      	mov	r1, sl
 80043a0:	018a      	lsls	r2, r1, #6
 80043a2:	4651      	mov	r1, sl
 80043a4:	ebb2 0801 	subs.w	r8, r2, r1
 80043a8:	4659      	mov	r1, fp
 80043aa:	eb63 0901 	sbc.w	r9, r3, r1
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043c2:	4690      	mov	r8, r2
 80043c4:	4699      	mov	r9, r3
 80043c6:	4623      	mov	r3, r4
 80043c8:	eb18 0303 	adds.w	r3, r8, r3
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	462b      	mov	r3, r5
 80043d0:	eb49 0303 	adc.w	r3, r9, r3
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043e2:	4629      	mov	r1, r5
 80043e4:	024b      	lsls	r3, r1, #9
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ec:	4621      	mov	r1, r4
 80043ee:	024a      	lsls	r2, r1, #9
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f6:	2200      	movs	r2, #0
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004400:	f7fb ff4e 	bl	80002a0 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440c:	e058      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	2200      	movs	r2, #0
 8004416:	4618      	mov	r0, r3
 8004418:	4611      	mov	r1, r2
 800441a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800441e:	623b      	str	r3, [r7, #32]
 8004420:	2300      	movs	r3, #0
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	f04f 0000 	mov.w	r0, #0
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	0159      	lsls	r1, r3, #5
 8004436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800443a:	0150      	lsls	r0, r2, #5
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4641      	mov	r1, r8
 8004442:	ebb2 0a01 	subs.w	sl, r2, r1
 8004446:	4649      	mov	r1, r9
 8004448:	eb63 0b01 	sbc.w	fp, r3, r1
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004458:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800445c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004460:	ebb2 040a 	subs.w	r4, r2, sl
 8004464:	eb63 050b 	sbc.w	r5, r3, fp
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	00eb      	lsls	r3, r5, #3
 8004472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004476:	00e2      	lsls	r2, r4, #3
 8004478:	4614      	mov	r4, r2
 800447a:	461d      	mov	r5, r3
 800447c:	4643      	mov	r3, r8
 800447e:	18e3      	adds	r3, r4, r3
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	464b      	mov	r3, r9
 8004484:	eb45 0303 	adc.w	r3, r5, r3
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004496:	4629      	mov	r1, r5
 8004498:	028b      	lsls	r3, r1, #10
 800449a:	4621      	mov	r1, r4
 800449c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a0:	4621      	mov	r1, r4
 80044a2:	028a      	lsls	r2, r1, #10
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044aa:	2200      	movs	r2, #0
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	61fa      	str	r2, [r7, #28]
 80044b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b4:	f7fb fef4 	bl	80002a0 <__aeabi_uldivmod>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4613      	mov	r3, r2
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	3301      	adds	r3, #1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044da:	e002      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80044de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3750      	adds	r7, #80	; 0x50
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	007a1200 	.word	0x007a1200

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_RCC_GetHCLKFreq+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000008 	.word	0x20000008

08004514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004518:	f7ff fff0 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	080084b4 	.word	0x080084b4

0800453c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004540:	f7ff ffdc 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0b5b      	lsrs	r3, r3, #13
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	080084b4 	.word	0x080084b4

08004564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004594:	2b00      	cmp	r3, #0
 8004596:	d075      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004598:	4b91      	ldr	r3, [pc, #580]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800459e:	f7fd fb95 	bl	8001ccc <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045a6:	f7fd fb91 	bl	8001ccc <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e189      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b8:	4b8a      	ldr	r3, [pc, #552]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	019a      	lsls	r2, r3, #6
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	071b      	lsls	r3, r3, #28
 80045dc:	4981      	ldr	r1, [pc, #516]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01f      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045f0:	4b7c      	ldr	r3, [pc, #496]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f6:	0f1b      	lsrs	r3, r3, #28
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	019a      	lsls	r2, r3, #6
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	431a      	orrs	r2, r3
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	071b      	lsls	r3, r3, #28
 8004610:	4974      	ldr	r1, [pc, #464]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004618:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461e:	f023 021f 	bic.w	r2, r3, #31
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	3b01      	subs	r3, #1
 8004628:	496e      	ldr	r1, [pc, #440]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	019a      	lsls	r2, r3, #6
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	071b      	lsls	r3, r3, #28
 8004650:	4964      	ldr	r1, [pc, #400]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004658:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800465e:	f7fd fb35 	bl	8001ccc <HAL_GetTick>
 8004662:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004666:	f7fd fb31 	bl	8001ccc <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e129      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004678:	4b5a      	ldr	r3, [pc, #360]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004698:	2b00      	cmp	r3, #0
 800469a:	d079      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800469c:	4b52      	ldr	r3, [pc, #328]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046a2:	f7fd fb13 	bl	8001ccc <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80046aa:	f7fd fb0f 	bl	8001ccc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e107      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046bc:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c8:	d0ef      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d020      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046d6:	4b43      	ldr	r3, [pc, #268]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	0f1b      	lsrs	r3, r3, #28
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	019a      	lsls	r2, r3, #6
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	061b      	lsls	r3, r3, #24
 80046f0:	431a      	orrs	r2, r3
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	071b      	lsls	r3, r3, #28
 80046f6:	493b      	ldr	r1, [pc, #236]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046fe:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004704:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	3b01      	subs	r3, #1
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	4934      	ldr	r1, [pc, #208]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01e      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004724:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	0e1b      	lsrs	r3, r3, #24
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	019a      	lsls	r2, r3, #6
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	061b      	lsls	r3, r3, #24
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	071b      	lsls	r3, r3, #28
 8004744:	4927      	ldr	r1, [pc, #156]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800474c:	4b25      	ldr	r3, [pc, #148]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004752:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	4922      	ldr	r1, [pc, #136]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004762:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004768:	f7fd fab0 	bl	8001ccc <HAL_GetTick>
 800476c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004770:	f7fd faac 	bl	8001ccc <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e0a4      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004782:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800478a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478e:	d1ef      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808b 	beq.w	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a0b      	ldr	r2, [pc, #44]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047c6:	f7fd fa81 	bl	8001ccc <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047cc:	e010      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fd fa7d 	bl	8001ccc <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d909      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e075      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80047e0:	42470068 	.word	0x42470068
 80047e4:	40023800 	.word	0x40023800
 80047e8:	42470070 	.word	0x42470070
 80047ec:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047f0:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0e8      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047fc:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004804:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d02f      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	429a      	cmp	r2, r3
 8004818:	d028      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800481a:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004824:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800482a:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004830:	4a29      	ldr	r2, [pc, #164]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004836:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d114      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004842:	f7fd fa43 	bl	8001ccc <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004848:	e00a      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fd fa3f 	bl	8001ccc <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e035      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ee      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004878:	d10d      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	4912      	ldr	r1, [pc, #72]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]
 8004894:	e005      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800489c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048a0:	6093      	str	r3, [r2, #8]
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ae:	490a      	ldr	r1, [pc, #40]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80048c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40007000 	.word	0x40007000
 80048d8:	40023800 	.word	0x40023800
 80048dc:	42470e40 	.word	0x42470e40
 80048e0:	424711e0 	.word	0x424711e0

080048e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e066      	b.n	80049c8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7f5b      	ldrb	r3, [r3, #29]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc ff48 	bl	80017a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	22ca      	movs	r2, #202	; 0xca
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2253      	movs	r2, #83	; 0x53
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fbce 	bl	80050c8 <RTC_EnterInitMode>
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d12c      	bne.n	8004990 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004948:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6899      	ldr	r1, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68d2      	ldr	r2, [r2, #12]
 8004970:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6919      	ldr	r1, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	041a      	lsls	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fbd5 	bl	8005136 <RTC_ExitInitMode>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d113      	bne.n	80049be <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699a      	ldr	r2, [r3, #24]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	7f1b      	ldrb	r3, [r3, #28]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_RTC_SetTime+0x1c>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e087      	b.n	8004afc <HAL_RTC_SetTime+0x12c>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2202      	movs	r2, #2
 80049f6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d126      	bne.n	8004a4c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fbb2 	bl	8005180 <RTC_ByteToBcd2>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	785b      	ldrb	r3, [r3, #1]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fbab 	bl	8005180 <RTC_ByteToBcd2>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a2e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	789b      	ldrb	r3, [r3, #2]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fba3 	bl	8005180 <RTC_ByteToBcd2>
 8004a3a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a3c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	78db      	ldrb	r3, [r3, #3]
 8004a44:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e018      	b.n	8004a7e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a6c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a72:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	78db      	ldrb	r3, [r3, #3]
 8004a78:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	22ca      	movs	r2, #202	; 0xca
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2253      	movs	r2, #83	; 0x53
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fb1a 	bl	80050c8 <RTC_EnterInitMode>
 8004a94:	4603      	mov	r3, r0
 8004a96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d120      	bne.n	8004ae0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004aa8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004aac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004abc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6899      	ldr	r1, [r3, #8]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fb2d 	bl	8005136 <RTC_ExitInitMode>
 8004adc:	4603      	mov	r3, r0
 8004ade:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	771a      	strb	r2, [r3, #28]

  return status;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd90      	pop	{r4, r7, pc}

08004b04 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	0d9b      	lsrs	r3, r3, #22
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11a      	bne.n	8004bb6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fb18 	bl	80051ba <RTC_Bcd2ToByte>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fb0f 	bl	80051ba <RTC_Bcd2ToByte>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	789b      	ldrb	r3, [r3, #2]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fb06 	bl	80051ba <RTC_Bcd2ToByte>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	7f1b      	ldrb	r3, [r3, #28]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_RTC_SetDate+0x1c>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e071      	b.n	8004cc0 <HAL_RTC_SetDate+0x100>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2202      	movs	r2, #2
 8004be6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10e      	bne.n	8004c0c <HAL_RTC_SetDate+0x4c>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	f023 0310 	bic.w	r3, r3, #16
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	330a      	adds	r3, #10
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11c      	bne.n	8004c4c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fab2 	bl	8005180 <RTC_ByteToBcd2>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 faab 	bl	8005180 <RTC_ByteToBcd2>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c2e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	789b      	ldrb	r3, [r3, #2]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 faa3 	bl	8005180 <RTC_ByteToBcd2>
 8004c3a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c3c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e00e      	b.n	8004c6a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	78db      	ldrb	r3, [r3, #3]
 8004c50:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	785b      	ldrb	r3, [r3, #1]
 8004c56:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c58:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c5e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	22ca      	movs	r2, #202	; 0xca
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2253      	movs	r2, #83	; 0x53
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fa24 	bl	80050c8 <RTC_EnterInitMode>
 8004c80:	4603      	mov	r3, r0
 8004c82:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004c84:	7cfb      	ldrb	r3, [r7, #19]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c98:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 fa4b 	bl	8005136 <RTC_ExitInitMode>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	771a      	strb	r2, [r3, #28]

  return status;
 8004cbe:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd90      	pop	{r4, r7, pc}

08004cc8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	0a1b      	lsrs	r3, r3, #8
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	0b5b      	lsrs	r3, r3, #13
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11a      	bne.n	8004d5c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	78db      	ldrb	r3, [r3, #3]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fa45 	bl	80051ba <RTC_Bcd2ToByte>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461a      	mov	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fa3c 	bl	80051ba <RTC_Bcd2ToByte>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461a      	mov	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	789b      	ldrb	r3, [r3, #2]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fa33 	bl	80051ba <RTC_Bcd2ToByte>
 8004d54:	4603      	mov	r3, r0
 8004d56:	461a      	mov	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004d74:	4b9a      	ldr	r3, [pc, #616]	; (8004fe0 <HAL_RTC_SetAlarm_IT+0x278>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a9a      	ldr	r2, [pc, #616]	; (8004fe4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0adb      	lsrs	r3, r3, #11
 8004d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	7f1b      	ldrb	r3, [r3, #28]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_RTC_SetAlarm_IT+0x36>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e11c      	b.n	8004fd8 <HAL_RTC_SetAlarm_IT+0x270>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2202      	movs	r2, #2
 8004da8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d137      	bne.n	8004e20 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 f9d9 	bl	8005180 <RTC_ByteToBcd2>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f9d2 	bl	8005180 <RTC_ByteToBcd2>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004de0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	789b      	ldrb	r3, [r3, #2]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f9ca 	bl	8005180 <RTC_ByteToBcd2>
 8004dec:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004dee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	78db      	ldrb	r3, [r3, #3]
 8004df6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004df8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f9bc 	bl	8005180 <RTC_ByteToBcd2>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004e0c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004e14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	e023      	b.n	8004e68 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	785b      	ldrb	r3, [r3, #1]
 8004e3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004e40:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004e46:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004e4e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004e58:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004e5e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	22ca      	movs	r2, #202	; 0xca
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2253      	movs	r2, #83	; 0x53
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8c:	d141      	bne.n	8004f12 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e9c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004eae:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1e5a      	subs	r2, r3, #1
 8004eb4:	617a      	str	r2, [r7, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	22ff      	movs	r2, #255	; 0xff
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e082      	b.n	8004fd8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0e7      	beq.n	8004eb0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004efe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	e04b      	b.n	8004faa <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f20:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004f32:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004f34:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <HAL_RTC_SetAlarm_IT+0x278>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	0adb      	lsrs	r3, r3, #11
 8004f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	1e5a      	subs	r2, r3, #1
 8004f4e:	617a      	str	r2, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	22ff      	movs	r2, #255	; 0xff
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e035      	b.n	8004fd8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0e7      	beq.n	8004f4a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f98:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RTC_SetAlarm_IT+0x280>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <HAL_RTC_SetAlarm_IT+0x280>)
 8004fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_RTC_SetAlarm_IT+0x280>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4a0b      	ldr	r2, [pc, #44]	; (8004fe8 <HAL_RTC_SetAlarm_IT+0x280>)
 8004fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	22ff      	movs	r2, #255	; 0xff
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3724      	adds	r7, #36	; 0x24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd90      	pop	{r4, r7, pc}
 8004fe0:	20000008 	.word	0x20000008
 8004fe4:	10624dd3 	.word	0x10624dd3
 8004fe8:	40013c00 	.word	0x40013c00

08004fec <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d012      	beq.n	8005028 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00b      	beq.n	8005028 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fc f907 	bl	8001224 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005026:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d012      	beq.n	800505c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f8d4 	bl	80051f2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f462 7220 	orn	r2, r2, #640	; 0x280
 800505a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RTC_AlarmIRQHandler+0x88>)
 800505e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005062:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	775a      	strb	r2, [r3, #29]
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40013c00 	.word	0x40013c00

08005078 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005092:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005094:	f7fc fe1a 	bl	8001ccc <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800509a:	e009      	b.n	80050b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800509c:	f7fc fe16 	bl	8001ccc <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050aa:	d901      	bls.n	80050b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e007      	b.n	80050c0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0ee      	beq.n	800509c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d122      	bne.n	800512c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050f6:	f7fc fde9 	bl	8001ccc <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80050fc:	e00c      	b.n	8005118 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050fe:	f7fc fde5 	bl	8001ccc <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510c:	d904      	bls.n	8005118 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2204      	movs	r2, #4
 8005112:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <RTC_EnterInitMode+0x64>
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d1e8      	bne.n	80050fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800512c:	7bfb      	ldrb	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005150:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff89 	bl	8005078 <HAL_RTC_WaitForSynchro>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2204      	movs	r2, #4
 8005170:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800518e:	e005      	b.n	800519c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	3301      	adds	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	3b0a      	subs	r3, #10
 800519a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	2b09      	cmp	r3, #9
 80051a0:	d8f6      	bhi.n	8005190 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b2db      	uxtb	r3, r3
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	4603      	mov	r3, r0
 80051c2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	091b      	lsrs	r3, r3, #4
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	0092      	lsls	r2, r2, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	4413      	add	r3, r2
 80051e4:	b2db      	uxtb	r3, r3
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e041      	b.n	800529c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d106      	bne.n	8005232 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7fc fae1 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f000 fa2f 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d122      	bne.n	8005300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d11b      	bne.n	8005300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0202 	mvn.w	r2, #2
 80052d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9bf 	bl	800566a <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9b1 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f9c2 	bl	800567e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d122      	bne.n	8005354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d11b      	bne.n	8005354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0204 	mvn.w	r2, #4
 8005324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f995 	bl	800566a <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f987 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f998 	bl	800567e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b08      	cmp	r3, #8
 8005360:	d122      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0208 	mvn.w	r2, #8
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2204      	movs	r2, #4
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f96b 	bl	800566a <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f95d 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f96e 	bl	800567e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0210 	mvn.w	r2, #16
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2208      	movs	r2, #8
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f941 	bl	800566a <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f933 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f944 	bl	800567e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10e      	bne.n	8005428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0201 	mvn.w	r2, #1
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f90d 	bl	8005642 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 faea 	bl	8005a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d10e      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d107      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f909 	bl	8005692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b20      	cmp	r3, #32
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b20      	cmp	r3, #32
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0220 	mvn.w	r2, #32
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fab4 	bl	8005a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_ConfigClockSource+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e0b4      	b.n	800563a <HAL_TIM_ConfigClockSource+0x186>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005508:	d03e      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0xd4>
 800550a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550e:	f200 8087 	bhi.w	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	f000 8086 	beq.w	8005626 <HAL_TIM_ConfigClockSource+0x172>
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551e:	d87f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b70      	cmp	r3, #112	; 0x70
 8005522:	d01a      	beq.n	800555a <HAL_TIM_ConfigClockSource+0xa6>
 8005524:	2b70      	cmp	r3, #112	; 0x70
 8005526:	d87b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b60      	cmp	r3, #96	; 0x60
 800552a:	d050      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x11a>
 800552c:	2b60      	cmp	r3, #96	; 0x60
 800552e:	d877      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b50      	cmp	r3, #80	; 0x50
 8005532:	d03c      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xfa>
 8005534:	2b50      	cmp	r3, #80	; 0x50
 8005536:	d873      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d058      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x13a>
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d86f      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b30      	cmp	r3, #48	; 0x30
 8005542:	d064      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d86b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d060      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d867      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05c      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005554:	2b10      	cmp	r3, #16
 8005556:	d05a      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x15a>
 8005558:	e062      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6899      	ldr	r1, [r3, #8]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f000 f9b7 	bl	80058dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800557c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	609a      	str	r2, [r3, #8]
      break;
 8005586:	e04f      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6899      	ldr	r1, [r3, #8]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f000 f9a0 	bl	80058dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055aa:	609a      	str	r2, [r3, #8]
      break;
 80055ac:	e03c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 f914 	bl	80057e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2150      	movs	r1, #80	; 0x50
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f96d 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e02c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 f933 	bl	8005846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2160      	movs	r1, #96	; 0x60
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f95d 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e01c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 f8f4 	bl	80057e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2140      	movs	r1, #64	; 0x40
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f94d 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 800560c:	e00c      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 f944 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 800561e:	e003      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
      break;
 8005624:	e000      	b.n	8005628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a40      	ldr	r2, [pc, #256]	; (80057bc <TIM_Base_SetConfig+0x114>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d00f      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3d      	ldr	r2, [pc, #244]	; (80057c0 <TIM_Base_SetConfig+0x118>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3c      	ldr	r2, [pc, #240]	; (80057c4 <TIM_Base_SetConfig+0x11c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3b      	ldr	r2, [pc, #236]	; (80057c8 <TIM_Base_SetConfig+0x120>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3a      	ldr	r2, [pc, #232]	; (80057cc <TIM_Base_SetConfig+0x124>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d108      	bne.n	80056fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <TIM_Base_SetConfig+0x114>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d027      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2c      	ldr	r2, [pc, #176]	; (80057c0 <TIM_Base_SetConfig+0x118>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d023      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2b      	ldr	r2, [pc, #172]	; (80057c4 <TIM_Base_SetConfig+0x11c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01f      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2a      	ldr	r2, [pc, #168]	; (80057c8 <TIM_Base_SetConfig+0x120>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a29      	ldr	r2, [pc, #164]	; (80057cc <TIM_Base_SetConfig+0x124>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d017      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <TIM_Base_SetConfig+0x128>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <TIM_Base_SetConfig+0x12c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00f      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a26      	ldr	r2, [pc, #152]	; (80057d8 <TIM_Base_SetConfig+0x130>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a25      	ldr	r2, [pc, #148]	; (80057dc <TIM_Base_SetConfig+0x134>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <TIM_Base_SetConfig+0x138>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a23      	ldr	r2, [pc, #140]	; (80057e4 <TIM_Base_SetConfig+0x13c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d108      	bne.n	800576c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <TIM_Base_SetConfig+0x114>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_Base_SetConfig+0xf8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <TIM_Base_SetConfig+0x124>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d103      	bne.n	80057a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	615a      	str	r2, [r3, #20]
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40010400 	.word	0x40010400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800
 80057dc:	40001800 	.word	0x40001800
 80057e0:	40001c00 	.word	0x40001c00
 80057e4:	40002000 	.word	0x40002000

080057e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 030a 	bic.w	r3, r3, #10
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f023 0210 	bic.w	r2, r3, #16
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	031b      	lsls	r3, r3, #12
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f043 0307 	orr.w	r3, r3, #7
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	021a      	lsls	r2, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	431a      	orrs	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e05a      	b.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d022      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d01d      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10c      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40001800 	.word	0x40001800

08005a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e03f      	b.n	8005ace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb fee6 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fd7b 	bl	800657c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08a      	sub	sp, #40	; 0x28
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d17c      	bne.n	8005bf0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_UART_Transmit+0x2c>
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e075      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit+0x3e>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e06e      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2221      	movs	r2, #33	; 0x21
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b2a:	f7fc f8cf 	bl	8001ccc <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d108      	bne.n	8005b58 <HAL_UART_Transmit+0x82>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e003      	b.n	8005b60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b68:	e02a      	b.n	8005bc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 faf9 	bl	800616c <UART_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e036      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	e007      	b.n	8005bb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1cf      	bne.n	8005b6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2140      	movs	r1, #64	; 0x40
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fac9 	bl	800616c <UART_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e006      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e000      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b0ba      	sub	sp, #232	; 0xe8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10f      	bne.n	8005c62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d009      	beq.n	8005c62 <HAL_UART_IRQHandler+0x66>
 8005c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fbd3 	bl	8006406 <UART_Receive_IT>
      return;
 8005c60:	e256      	b.n	8006110 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80de 	beq.w	8005e28 <HAL_UART_IRQHandler+0x22c>
 8005c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80d1 	beq.w	8005e28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <HAL_UART_IRQHandler+0xae>
 8005c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f043 0201 	orr.w	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <HAL_UART_IRQHandler+0xd2>
 8005cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f043 0202 	orr.w	r2, r3, #2
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xf6>
 8005cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f043 0204 	orr.w	r2, r3, #4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d011      	beq.n	8005d22 <HAL_UART_IRQHandler+0x126>
 8005cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d005      	beq.n	8005d22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f043 0208 	orr.w	r2, r3, #8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 81ed 	beq.w	8006106 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_UART_IRQHandler+0x14e>
 8005d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fb5e 	bl	8006406 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b40      	cmp	r3, #64	; 0x40
 8005d56:	bf0c      	ite	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <HAL_UART_IRQHandler+0x17a>
 8005d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d04f      	beq.n	8005e16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa66 	bl	8006248 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d141      	bne.n	8005e0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3314      	adds	r3, #20
 8005d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3314      	adds	r3, #20
 8005db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005db6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1d9      	bne.n	8005d8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d013      	beq.n	8005e06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	4a7d      	ldr	r2, [pc, #500]	; (8005fd8 <HAL_UART_IRQHandler+0x3dc>)
 8005de4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fc f91f 	bl	800202e <HAL_DMA_Abort_IT>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e00:	4610      	mov	r0, r2
 8005e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e04:	e00e      	b.n	8005e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f99a 	bl	8006140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	e00a      	b.n	8005e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f996 	bl	8006140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e14:	e006      	b.n	8005e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f992 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e22:	e170      	b.n	8006106 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	bf00      	nop
    return;
 8005e26:	e16e      	b.n	8006106 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	f040 814a 	bne.w	80060c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e36:	f003 0310 	and.w	r3, r3, #16
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8143 	beq.w	80060c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 813c 	beq.w	80060c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60bb      	str	r3, [r7, #8]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	f040 80b4 	bne.w	8005fdc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8140 	beq.w	800610a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e92:	429a      	cmp	r2, r3
 8005e94:	f080 8139 	bcs.w	800610a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eaa:	f000 8088 	beq.w	8005fbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005eda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1d9      	bne.n	8005eae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3314      	adds	r3, #20
 8005f00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e1      	bne.n	8005efa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3314      	adds	r3, #20
 8005f56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8e:	f023 0310 	bic.w	r3, r3, #16
 8005f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e3      	bne.n	8005f7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fb ffc8 	bl	8001f4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8c0 	bl	8006154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fd4:	e099      	b.n	800610a <HAL_UART_IRQHandler+0x50e>
 8005fd6:	bf00      	nop
 8005fd8:	0800630f 	.word	0x0800630f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 808b 	beq.w	800610e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8086 	beq.w	800610e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006026:	647a      	str	r2, [r7, #68]	; 0x44
 8006028:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800602c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e3      	bne.n	8006002 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3314      	adds	r3, #20
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	623b      	str	r3, [r7, #32]
   return(result);
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	f023 0301 	bic.w	r3, r3, #1
 8006050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3314      	adds	r3, #20
 800605a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800605e:	633a      	str	r2, [r7, #48]	; 0x30
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e3      	bne.n	800603a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0310 	bic.w	r3, r3, #16
 8006096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060a4:	61fa      	str	r2, [r7, #28]
 80060a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	69b9      	ldr	r1, [r7, #24]
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	617b      	str	r3, [r7, #20]
   return(result);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e3      	bne.n	8006080 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f848 	bl	8006154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060c4:	e023      	b.n	800610e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HAL_UART_IRQHandler+0x4ea>
 80060d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f929 	bl	8006336 <UART_Transmit_IT>
    return;
 80060e4:	e014      	b.n	8006110 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <HAL_UART_IRQHandler+0x514>
 80060f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d008      	beq.n	8006110 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f969 	bl	80063d6 <UART_EndTransmit_IT>
    return;
 8006104:	e004      	b.n	8006110 <HAL_UART_IRQHandler+0x514>
    return;
 8006106:	bf00      	nop
 8006108:	e002      	b.n	8006110 <HAL_UART_IRQHandler+0x514>
      return;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <HAL_UART_IRQHandler+0x514>
      return;
 800610e:	bf00      	nop
  }
}
 8006110:	37e8      	adds	r7, #232	; 0xe8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop

08006118 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b090      	sub	sp, #64	; 0x40
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617c:	e050      	b.n	8006220 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800617e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d04c      	beq.n	8006220 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006188:	2b00      	cmp	r3, #0
 800618a:	d007      	beq.n	800619c <UART_WaitOnFlagUntilTimeout+0x30>
 800618c:	f7fb fd9e 	bl	8001ccc <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006198:	429a      	cmp	r2, r3
 800619a:	d241      	bcs.n	8006220 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061bc:	637a      	str	r2, [r7, #52]	; 0x34
 80061be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e5      	bne.n	800619c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3314      	adds	r3, #20
 80061d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	613b      	str	r3, [r7, #16]
   return(result);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f023 0301 	bic.w	r3, r3, #1
 80061e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3314      	adds	r3, #20
 80061ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061f0:	623a      	str	r2, [r7, #32]
 80061f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	69f9      	ldr	r1, [r7, #28]
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e5      	bne.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e00f      	b.n	8006240 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4013      	ands	r3, r2
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	bf0c      	ite	eq
 8006230:	2301      	moveq	r3, #1
 8006232:	2300      	movne	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	429a      	cmp	r2, r3
 800623c:	d09f      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3740      	adds	r7, #64	; 0x40
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b095      	sub	sp, #84	; 0x54
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	330c      	adds	r3, #12
 800626e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006270:	643a      	str	r2, [r7, #64]	; 0x40
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e5      	bne.n	8006250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	61fb      	str	r3, [r7, #28]
   return(result);
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	64bb      	str	r3, [r7, #72]	; 0x48
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3314      	adds	r3, #20
 80062a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d119      	bne.n	80062f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f023 0310 	bic.w	r3, r3, #16
 80062d6:	647b      	str	r3, [r7, #68]	; 0x44
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	330c      	adds	r3, #12
 80062de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e0:	61ba      	str	r2, [r7, #24]
 80062e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	6979      	ldr	r1, [r7, #20]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	613b      	str	r3, [r7, #16]
   return(result);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e5      	bne.n	80062c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006302:	bf00      	nop
 8006304:	3754      	adds	r7, #84	; 0x54
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff ff09 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b21      	cmp	r3, #33	; 0x21
 8006348:	d13e      	bne.n	80063c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d114      	bne.n	800637e <UART_Transmit_IT+0x48>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d110      	bne.n	800637e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	1c9a      	adds	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]
 800637c:	e008      	b.n	8006390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6211      	str	r1, [r2, #32]
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29b      	uxth	r3, r3
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	4619      	mov	r1, r3
 800639e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10f      	bne.n	80063c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff fe8e 	bl	8006118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b08c      	sub	sp, #48	; 0x30
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b22      	cmp	r3, #34	; 0x22
 8006418:	f040 80ab 	bne.w	8006572 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006424:	d117      	bne.n	8006456 <UART_Receive_IT+0x50>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d113      	bne.n	8006456 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006444:	b29a      	uxth	r2, r3
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	1c9a      	adds	r2, r3, #2
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
 8006454:	e026      	b.n	80064a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006468:	d007      	beq.n	800647a <UART_Receive_IT+0x74>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <UART_Receive_IT+0x82>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e008      	b.n	800649a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006494:	b2da      	uxtb	r2, r3
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4619      	mov	r1, r3
 80064b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d15a      	bne.n	800656e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0220 	bic.w	r2, r2, #32
 80064c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d135      	bne.n	8006564 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f023 0310 	bic.w	r3, r3, #16
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	330c      	adds	r3, #12
 800651c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651e:	623a      	str	r2, [r7, #32]
 8006520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	61bb      	str	r3, [r7, #24]
   return(result);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b10      	cmp	r3, #16
 800653e:	d10a      	bne.n	8006556 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fdf9 	bl	8006154 <HAL_UARTEx_RxEventCallback>
 8006562:	e002      	b.n	800656a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fde1 	bl	800612c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e002      	b.n	8006574 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e000      	b.n	8006574 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006572:	2302      	movs	r3, #2
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3730      	adds	r7, #48	; 0x30
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800657c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006580:	b0c0      	sub	sp, #256	; 0x100
 8006582:	af00      	add	r7, sp, #0
 8006584:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006598:	68d9      	ldr	r1, [r3, #12]
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	ea40 0301 	orr.w	r3, r0, r1
 80065a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065d4:	f021 010c 	bic.w	r1, r1, #12
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065e2:	430b      	orrs	r3, r1
 80065e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f6:	6999      	ldr	r1, [r3, #24]
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	ea40 0301 	orr.w	r3, r0, r1
 8006602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b8f      	ldr	r3, [pc, #572]	; (8006848 <UART_SetConfig+0x2cc>)
 800660c:	429a      	cmp	r2, r3
 800660e:	d005      	beq.n	800661c <UART_SetConfig+0xa0>
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b8d      	ldr	r3, [pc, #564]	; (800684c <UART_SetConfig+0x2d0>)
 8006618:	429a      	cmp	r2, r3
 800661a:	d104      	bne.n	8006626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800661c:	f7fd ff8e 	bl	800453c <HAL_RCC_GetPCLK2Freq>
 8006620:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006624:	e003      	b.n	800662e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006626:	f7fd ff75 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 800662a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006638:	f040 810c 	bne.w	8006854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800663c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006640:	2200      	movs	r2, #0
 8006642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006646:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800664a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800664e:	4622      	mov	r2, r4
 8006650:	462b      	mov	r3, r5
 8006652:	1891      	adds	r1, r2, r2
 8006654:	65b9      	str	r1, [r7, #88]	; 0x58
 8006656:	415b      	adcs	r3, r3
 8006658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800665a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800665e:	4621      	mov	r1, r4
 8006660:	eb12 0801 	adds.w	r8, r2, r1
 8006664:	4629      	mov	r1, r5
 8006666:	eb43 0901 	adc.w	r9, r3, r1
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800667a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800667e:	4690      	mov	r8, r2
 8006680:	4699      	mov	r9, r3
 8006682:	4623      	mov	r3, r4
 8006684:	eb18 0303 	adds.w	r3, r8, r3
 8006688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800668c:	462b      	mov	r3, r5
 800668e:	eb49 0303 	adc.w	r3, r9, r3
 8006692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066aa:	460b      	mov	r3, r1
 80066ac:	18db      	adds	r3, r3, r3
 80066ae:	653b      	str	r3, [r7, #80]	; 0x50
 80066b0:	4613      	mov	r3, r2
 80066b2:	eb42 0303 	adc.w	r3, r2, r3
 80066b6:	657b      	str	r3, [r7, #84]	; 0x54
 80066b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066c0:	f7f9 fdee 	bl	80002a0 <__aeabi_uldivmod>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4b61      	ldr	r3, [pc, #388]	; (8006850 <UART_SetConfig+0x2d4>)
 80066ca:	fba3 2302 	umull	r2, r3, r3, r2
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	011c      	lsls	r4, r3, #4
 80066d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	1891      	adds	r1, r2, r2
 80066ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80066ec:	415b      	adcs	r3, r3
 80066ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066f4:	4641      	mov	r1, r8
 80066f6:	eb12 0a01 	adds.w	sl, r2, r1
 80066fa:	4649      	mov	r1, r9
 80066fc:	eb43 0b01 	adc.w	fp, r3, r1
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800670c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006714:	4692      	mov	sl, r2
 8006716:	469b      	mov	fp, r3
 8006718:	4643      	mov	r3, r8
 800671a:	eb1a 0303 	adds.w	r3, sl, r3
 800671e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006722:	464b      	mov	r3, r9
 8006724:	eb4b 0303 	adc.w	r3, fp, r3
 8006728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006738:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800673c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006740:	460b      	mov	r3, r1
 8006742:	18db      	adds	r3, r3, r3
 8006744:	643b      	str	r3, [r7, #64]	; 0x40
 8006746:	4613      	mov	r3, r2
 8006748:	eb42 0303 	adc.w	r3, r2, r3
 800674c:	647b      	str	r3, [r7, #68]	; 0x44
 800674e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006756:	f7f9 fda3 	bl	80002a0 <__aeabi_uldivmod>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4611      	mov	r1, r2
 8006760:	4b3b      	ldr	r3, [pc, #236]	; (8006850 <UART_SetConfig+0x2d4>)
 8006762:	fba3 2301 	umull	r2, r3, r3, r1
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	2264      	movs	r2, #100	; 0x64
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	1acb      	subs	r3, r1, r3
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006776:	4b36      	ldr	r3, [pc, #216]	; (8006850 <UART_SetConfig+0x2d4>)
 8006778:	fba3 2302 	umull	r2, r3, r3, r2
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006784:	441c      	add	r4, r3
 8006786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678a:	2200      	movs	r2, #0
 800678c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006790:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	1891      	adds	r1, r2, r2
 800679e:	63b9      	str	r1, [r7, #56]	; 0x38
 80067a0:	415b      	adcs	r3, r3
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067a8:	4641      	mov	r1, r8
 80067aa:	1851      	adds	r1, r2, r1
 80067ac:	6339      	str	r1, [r7, #48]	; 0x30
 80067ae:	4649      	mov	r1, r9
 80067b0:	414b      	adcs	r3, r1
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067c0:	4659      	mov	r1, fp
 80067c2:	00cb      	lsls	r3, r1, #3
 80067c4:	4651      	mov	r1, sl
 80067c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ca:	4651      	mov	r1, sl
 80067cc:	00ca      	lsls	r2, r1, #3
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	4642      	mov	r2, r8
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067dc:	464b      	mov	r3, r9
 80067de:	460a      	mov	r2, r1
 80067e0:	eb42 0303 	adc.w	r3, r2, r3
 80067e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067fc:	460b      	mov	r3, r1
 80067fe:	18db      	adds	r3, r3, r3
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
 8006802:	4613      	mov	r3, r2
 8006804:	eb42 0303 	adc.w	r3, r2, r3
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800680e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006812:	f7f9 fd45 	bl	80002a0 <__aeabi_uldivmod>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <UART_SetConfig+0x2d4>)
 800681c:	fba3 1302 	umull	r1, r3, r3, r2
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	2164      	movs	r1, #100	; 0x64
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	3332      	adds	r3, #50	; 0x32
 800682e:	4a08      	ldr	r2, [pc, #32]	; (8006850 <UART_SetConfig+0x2d4>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	f003 0207 	and.w	r2, r3, #7
 800683a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4422      	add	r2, r4
 8006842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006844:	e106      	b.n	8006a54 <UART_SetConfig+0x4d8>
 8006846:	bf00      	nop
 8006848:	40011000 	.word	0x40011000
 800684c:	40011400 	.word	0x40011400
 8006850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006858:	2200      	movs	r2, #0
 800685a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800685e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006866:	4642      	mov	r2, r8
 8006868:	464b      	mov	r3, r9
 800686a:	1891      	adds	r1, r2, r2
 800686c:	6239      	str	r1, [r7, #32]
 800686e:	415b      	adcs	r3, r3
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
 8006872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006876:	4641      	mov	r1, r8
 8006878:	1854      	adds	r4, r2, r1
 800687a:	4649      	mov	r1, r9
 800687c:	eb43 0501 	adc.w	r5, r3, r1
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	00eb      	lsls	r3, r5, #3
 800688a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800688e:	00e2      	lsls	r2, r4, #3
 8006890:	4614      	mov	r4, r2
 8006892:	461d      	mov	r5, r3
 8006894:	4643      	mov	r3, r8
 8006896:	18e3      	adds	r3, r4, r3
 8006898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800689c:	464b      	mov	r3, r9
 800689e:	eb45 0303 	adc.w	r3, r5, r3
 80068a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068c2:	4629      	mov	r1, r5
 80068c4:	008b      	lsls	r3, r1, #2
 80068c6:	4621      	mov	r1, r4
 80068c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068cc:	4621      	mov	r1, r4
 80068ce:	008a      	lsls	r2, r1, #2
 80068d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068d4:	f7f9 fce4 	bl	80002a0 <__aeabi_uldivmod>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4b60      	ldr	r3, [pc, #384]	; (8006a60 <UART_SetConfig+0x4e4>)
 80068de:	fba3 2302 	umull	r2, r3, r3, r2
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	011c      	lsls	r4, r3, #4
 80068e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	1891      	adds	r1, r2, r2
 80068fe:	61b9      	str	r1, [r7, #24]
 8006900:	415b      	adcs	r3, r3
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006908:	4641      	mov	r1, r8
 800690a:	1851      	adds	r1, r2, r1
 800690c:	6139      	str	r1, [r7, #16]
 800690e:	4649      	mov	r1, r9
 8006910:	414b      	adcs	r3, r1
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006920:	4659      	mov	r1, fp
 8006922:	00cb      	lsls	r3, r1, #3
 8006924:	4651      	mov	r1, sl
 8006926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800692a:	4651      	mov	r1, sl
 800692c:	00ca      	lsls	r2, r1, #3
 800692e:	4610      	mov	r0, r2
 8006930:	4619      	mov	r1, r3
 8006932:	4603      	mov	r3, r0
 8006934:	4642      	mov	r2, r8
 8006936:	189b      	adds	r3, r3, r2
 8006938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800693c:	464b      	mov	r3, r9
 800693e:	460a      	mov	r2, r1
 8006940:	eb42 0303 	adc.w	r3, r2, r3
 8006944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	67bb      	str	r3, [r7, #120]	; 0x78
 8006952:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006960:	4649      	mov	r1, r9
 8006962:	008b      	lsls	r3, r1, #2
 8006964:	4641      	mov	r1, r8
 8006966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800696a:	4641      	mov	r1, r8
 800696c:	008a      	lsls	r2, r1, #2
 800696e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006972:	f7f9 fc95 	bl	80002a0 <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4611      	mov	r1, r2
 800697c:	4b38      	ldr	r3, [pc, #224]	; (8006a60 <UART_SetConfig+0x4e4>)
 800697e:	fba3 2301 	umull	r2, r3, r3, r1
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	2264      	movs	r2, #100	; 0x64
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	1acb      	subs	r3, r1, r3
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	3332      	adds	r3, #50	; 0x32
 8006990:	4a33      	ldr	r2, [pc, #204]	; (8006a60 <UART_SetConfig+0x4e4>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800699c:	441c      	add	r4, r3
 800699e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a2:	2200      	movs	r2, #0
 80069a4:	673b      	str	r3, [r7, #112]	; 0x70
 80069a6:	677a      	str	r2, [r7, #116]	; 0x74
 80069a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069ac:	4642      	mov	r2, r8
 80069ae:	464b      	mov	r3, r9
 80069b0:	1891      	adds	r1, r2, r2
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	415b      	adcs	r3, r3
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069bc:	4641      	mov	r1, r8
 80069be:	1851      	adds	r1, r2, r1
 80069c0:	6039      	str	r1, [r7, #0]
 80069c2:	4649      	mov	r1, r9
 80069c4:	414b      	adcs	r3, r1
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069d4:	4659      	mov	r1, fp
 80069d6:	00cb      	lsls	r3, r1, #3
 80069d8:	4651      	mov	r1, sl
 80069da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069de:	4651      	mov	r1, sl
 80069e0:	00ca      	lsls	r2, r1, #3
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	4642      	mov	r2, r8
 80069ea:	189b      	adds	r3, r3, r2
 80069ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ee:	464b      	mov	r3, r9
 80069f0:	460a      	mov	r2, r1
 80069f2:	eb42 0303 	adc.w	r3, r2, r3
 80069f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	663b      	str	r3, [r7, #96]	; 0x60
 8006a02:	667a      	str	r2, [r7, #100]	; 0x64
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a10:	4649      	mov	r1, r9
 8006a12:	008b      	lsls	r3, r1, #2
 8006a14:	4641      	mov	r1, r8
 8006a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	008a      	lsls	r2, r1, #2
 8006a1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a22:	f7f9 fc3d 	bl	80002a0 <__aeabi_uldivmod>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <UART_SetConfig+0x4e4>)
 8006a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a30:	095b      	lsrs	r3, r3, #5
 8006a32:	2164      	movs	r1, #100	; 0x64
 8006a34:	fb01 f303 	mul.w	r3, r1, r3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	3332      	adds	r3, #50	; 0x32
 8006a3e:	4a08      	ldr	r2, [pc, #32]	; (8006a60 <UART_SetConfig+0x4e4>)
 8006a40:	fba2 2303 	umull	r2, r3, r2, r3
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	f003 020f 	and.w	r2, r3, #15
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4422      	add	r2, r4
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	bf00      	nop
 8006a56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a60:	51eb851f 	.word	0x51eb851f

08006a64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a64:	b084      	sub	sp, #16
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	f107 001c 	add.w	r0, r7, #28
 8006a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d122      	bne.n	8006ac2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d105      	bne.n	8006ab6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 faa2 	bl	8007000 <USB_CoreReset>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	e01a      	b.n	8006af8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa96 	bl	8007000 <USB_CoreReset>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8006aea:	e005      	b.n	8006af8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d10b      	bne.n	8006b16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f043 0206 	orr.w	r2, r3, #6
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f043 0220 	orr.w	r2, r3, #32
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b22:	b004      	add	sp, #16
 8006b24:	4770      	bx	lr

08006b26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f023 0201 	bic.w	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d115      	bne.n	8006b96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b76:	2001      	movs	r0, #1
 8006b78:	f7fb f8b4 	bl	8001ce4 <HAL_Delay>
      ms++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa2e 	bl	8006fe4 <USB_GetMode>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d01e      	beq.n	8006bcc <USB_SetCurrentMode+0x84>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b31      	cmp	r3, #49	; 0x31
 8006b92:	d9f0      	bls.n	8006b76 <USB_SetCurrentMode+0x2e>
 8006b94:	e01a      	b.n	8006bcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d115      	bne.n	8006bc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ba8:	2001      	movs	r0, #1
 8006baa:	f7fb f89b 	bl	8001ce4 <HAL_Delay>
      ms++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa15 	bl	8006fe4 <USB_GetMode>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <USB_SetCurrentMode+0x84>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b31      	cmp	r3, #49	; 0x31
 8006bc4:	d9f0      	bls.n	8006ba8 <USB_SetCurrentMode+0x60>
 8006bc6:	e001      	b.n	8006bcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e005      	b.n	8006bd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b32      	cmp	r3, #50	; 0x32
 8006bd0:	d101      	bne.n	8006bd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006be0:	b084      	sub	sp, #16
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	e009      	b.n	8006c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3340      	adds	r3, #64	; 0x40
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b0e      	cmp	r3, #14
 8006c18:	d9f2      	bls.n	8006c00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11c      	bne.n	8006c5a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c2e:	f043 0302 	orr.w	r3, r3, #2
 8006c32:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
 8006c58:	e00b      	b.n	8006c72 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	4619      	mov	r1, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	680b      	ldr	r3, [r1, #0]
 8006c90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d10c      	bne.n	8006cb2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d104      	bne.n	8006ca8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f965 	bl	8006f70 <USB_SetDevSpeed>
 8006ca6:	e008      	b.n	8006cba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f960 	bl	8006f70 <USB_SetDevSpeed>
 8006cb0:	e003      	b.n	8006cba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cb2:	2103      	movs	r1, #3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f95b 	bl	8006f70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cba:	2110      	movs	r1, #16
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f8f3 	bl	8006ea8 <USB_FlushTxFifo>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f91f 	bl	8006f10 <USB_FlushRxFifo>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d00:	2300      	movs	r3, #0
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	e043      	b.n	8006d8e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d1c:	d118      	bne.n	8006d50 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	461a      	mov	r2, r3
 8006d32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	e013      	b.n	8006d62 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	461a      	mov	r2, r3
 8006d48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	e008      	b.n	8006d62 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6e:	461a      	mov	r2, r3
 8006d70:	2300      	movs	r3, #0
 8006d72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d80:	461a      	mov	r2, r3
 8006d82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d3b7      	bcc.n	8006d06 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	e043      	b.n	8006e24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006db2:	d118      	bne.n	8006de6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e013      	b.n	8006df8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	461a      	mov	r2, r3
 8006dde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	e008      	b.n	8006df8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df2:	461a      	mov	r2, r3
 8006df4:	2300      	movs	r3, #0
 8006df6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	461a      	mov	r2, r3
 8006e06:	2300      	movs	r3, #0
 8006e08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e16:	461a      	mov	r2, r3
 8006e18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3301      	adds	r3, #1
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d3b7      	bcc.n	8006d9c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d105      	bne.n	8006e60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f043 0210 	orr.w	r2, r3, #16
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <USB_DevInit+0x2c4>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f043 0208 	orr.w	r2, r3, #8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d107      	bne.n	8006e94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e8c:	f043 0304 	orr.w	r3, r3, #4
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ea0:	b004      	add	sp, #16
 8006ea2:	4770      	bx	lr
 8006ea4:	803c3800 	.word	0x803c3800

08006ea8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <USB_FlushTxFifo+0x64>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d901      	bls.n	8006ec8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e01b      	b.n	8006f00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	daf2      	bge.n	8006eb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	019b      	lsls	r3, r3, #6
 8006ed8:	f043 0220 	orr.w	r2, r3, #32
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4a08      	ldr	r2, [pc, #32]	; (8006f0c <USB_FlushTxFifo+0x64>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e006      	b.n	8006f00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d0f0      	beq.n	8006ee0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	00030d40 	.word	0x00030d40

08006f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4a11      	ldr	r2, [pc, #68]	; (8006f6c <USB_FlushRxFifo+0x5c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d901      	bls.n	8006f2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e018      	b.n	8006f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	daf2      	bge.n	8006f1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2210      	movs	r2, #16
 8006f3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <USB_FlushRxFifo+0x5c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e006      	b.n	8006f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f003 0310 	and.w	r3, r3, #16
 8006f5a:	2b10      	cmp	r3, #16
 8006f5c:	d0f0      	beq.n	8006f40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	00030d40 	.word	0x00030d40

08006f70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	68f9      	ldr	r1, [r7, #12]
 8006f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f90:	4313      	orrs	r3, r2
 8006f92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fbc:	f023 0303 	bic.w	r3, r3, #3
 8006fc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd0:	f043 0302 	orr.w	r3, r3, #2
 8006fd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a13      	ldr	r2, [pc, #76]	; (8007064 <USB_CoreReset+0x64>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d901      	bls.n	800701e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e01b      	b.n	8007056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	daf2      	bge.n	800700c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f043 0201 	orr.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3301      	adds	r3, #1
 800703a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a09      	ldr	r2, [pc, #36]	; (8007064 <USB_CoreReset+0x64>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d901      	bls.n	8007048 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e006      	b.n	8007056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b01      	cmp	r3, #1
 8007052:	d0f0      	beq.n	8007036 <USB_CoreReset+0x36>

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	00030d40 	.word	0x00030d40

08007068 <std>:
 8007068:	2300      	movs	r3, #0
 800706a:	b510      	push	{r4, lr}
 800706c:	4604      	mov	r4, r0
 800706e:	e9c0 3300 	strd	r3, r3, [r0]
 8007072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007076:	6083      	str	r3, [r0, #8]
 8007078:	8181      	strh	r1, [r0, #12]
 800707a:	6643      	str	r3, [r0, #100]	; 0x64
 800707c:	81c2      	strh	r2, [r0, #14]
 800707e:	6183      	str	r3, [r0, #24]
 8007080:	4619      	mov	r1, r3
 8007082:	2208      	movs	r2, #8
 8007084:	305c      	adds	r0, #92	; 0x5c
 8007086:	f000 fa4b 	bl	8007520 <memset>
 800708a:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <std+0x58>)
 800708c:	6263      	str	r3, [r4, #36]	; 0x24
 800708e:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <std+0x5c>)
 8007090:	62a3      	str	r3, [r4, #40]	; 0x28
 8007092:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <std+0x60>)
 8007094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <std+0x64>)
 8007098:	6323      	str	r3, [r4, #48]	; 0x30
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <std+0x68>)
 800709c:	6224      	str	r4, [r4, #32]
 800709e:	429c      	cmp	r4, r3
 80070a0:	d006      	beq.n	80070b0 <std+0x48>
 80070a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070a6:	4294      	cmp	r4, r2
 80070a8:	d002      	beq.n	80070b0 <std+0x48>
 80070aa:	33d0      	adds	r3, #208	; 0xd0
 80070ac:	429c      	cmp	r4, r3
 80070ae:	d105      	bne.n	80070bc <std+0x54>
 80070b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b8:	f000 baaa 	b.w	8007610 <__retarget_lock_init_recursive>
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	bf00      	nop
 80070c0:	08007371 	.word	0x08007371
 80070c4:	08007393 	.word	0x08007393
 80070c8:	080073cb 	.word	0x080073cb
 80070cc:	080073ef 	.word	0x080073ef
 80070d0:	20000998 	.word	0x20000998

080070d4 <stdio_exit_handler>:
 80070d4:	4a02      	ldr	r2, [pc, #8]	; (80070e0 <stdio_exit_handler+0xc>)
 80070d6:	4903      	ldr	r1, [pc, #12]	; (80070e4 <stdio_exit_handler+0x10>)
 80070d8:	4803      	ldr	r0, [pc, #12]	; (80070e8 <stdio_exit_handler+0x14>)
 80070da:	f000 b869 	b.w	80071b0 <_fwalk_sglue>
 80070de:	bf00      	nop
 80070e0:	20000014 	.word	0x20000014
 80070e4:	0800816d 	.word	0x0800816d
 80070e8:	20000020 	.word	0x20000020

080070ec <cleanup_stdio>:
 80070ec:	6841      	ldr	r1, [r0, #4]
 80070ee:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <cleanup_stdio+0x34>)
 80070f0:	4299      	cmp	r1, r3
 80070f2:	b510      	push	{r4, lr}
 80070f4:	4604      	mov	r4, r0
 80070f6:	d001      	beq.n	80070fc <cleanup_stdio+0x10>
 80070f8:	f001 f838 	bl	800816c <_fflush_r>
 80070fc:	68a1      	ldr	r1, [r4, #8]
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <cleanup_stdio+0x38>)
 8007100:	4299      	cmp	r1, r3
 8007102:	d002      	beq.n	800710a <cleanup_stdio+0x1e>
 8007104:	4620      	mov	r0, r4
 8007106:	f001 f831 	bl	800816c <_fflush_r>
 800710a:	68e1      	ldr	r1, [r4, #12]
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <cleanup_stdio+0x3c>)
 800710e:	4299      	cmp	r1, r3
 8007110:	d004      	beq.n	800711c <cleanup_stdio+0x30>
 8007112:	4620      	mov	r0, r4
 8007114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007118:	f001 b828 	b.w	800816c <_fflush_r>
 800711c:	bd10      	pop	{r4, pc}
 800711e:	bf00      	nop
 8007120:	20000998 	.word	0x20000998
 8007124:	20000a00 	.word	0x20000a00
 8007128:	20000a68 	.word	0x20000a68

0800712c <global_stdio_init.part.0>:
 800712c:	b510      	push	{r4, lr}
 800712e:	4b0b      	ldr	r3, [pc, #44]	; (800715c <global_stdio_init.part.0+0x30>)
 8007130:	4c0b      	ldr	r4, [pc, #44]	; (8007160 <global_stdio_init.part.0+0x34>)
 8007132:	4a0c      	ldr	r2, [pc, #48]	; (8007164 <global_stdio_init.part.0+0x38>)
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	4620      	mov	r0, r4
 8007138:	2200      	movs	r2, #0
 800713a:	2104      	movs	r1, #4
 800713c:	f7ff ff94 	bl	8007068 <std>
 8007140:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007144:	2201      	movs	r2, #1
 8007146:	2109      	movs	r1, #9
 8007148:	f7ff ff8e 	bl	8007068 <std>
 800714c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007150:	2202      	movs	r2, #2
 8007152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007156:	2112      	movs	r1, #18
 8007158:	f7ff bf86 	b.w	8007068 <std>
 800715c:	20000ad0 	.word	0x20000ad0
 8007160:	20000998 	.word	0x20000998
 8007164:	080070d5 	.word	0x080070d5

08007168 <__sfp_lock_acquire>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__sfp_lock_acquire+0x8>)
 800716a:	f000 ba52 	b.w	8007612 <__retarget_lock_acquire_recursive>
 800716e:	bf00      	nop
 8007170:	20000ad9 	.word	0x20000ad9

08007174 <__sfp_lock_release>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__sfp_lock_release+0x8>)
 8007176:	f000 ba4d 	b.w	8007614 <__retarget_lock_release_recursive>
 800717a:	bf00      	nop
 800717c:	20000ad9 	.word	0x20000ad9

08007180 <__sinit>:
 8007180:	b510      	push	{r4, lr}
 8007182:	4604      	mov	r4, r0
 8007184:	f7ff fff0 	bl	8007168 <__sfp_lock_acquire>
 8007188:	6a23      	ldr	r3, [r4, #32]
 800718a:	b11b      	cbz	r3, 8007194 <__sinit+0x14>
 800718c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007190:	f7ff bff0 	b.w	8007174 <__sfp_lock_release>
 8007194:	4b04      	ldr	r3, [pc, #16]	; (80071a8 <__sinit+0x28>)
 8007196:	6223      	str	r3, [r4, #32]
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <__sinit+0x2c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f5      	bne.n	800718c <__sinit+0xc>
 80071a0:	f7ff ffc4 	bl	800712c <global_stdio_init.part.0>
 80071a4:	e7f2      	b.n	800718c <__sinit+0xc>
 80071a6:	bf00      	nop
 80071a8:	080070ed 	.word	0x080070ed
 80071ac:	20000ad0 	.word	0x20000ad0

080071b0 <_fwalk_sglue>:
 80071b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b4:	4607      	mov	r7, r0
 80071b6:	4688      	mov	r8, r1
 80071b8:	4614      	mov	r4, r2
 80071ba:	2600      	movs	r6, #0
 80071bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071c0:	f1b9 0901 	subs.w	r9, r9, #1
 80071c4:	d505      	bpl.n	80071d2 <_fwalk_sglue+0x22>
 80071c6:	6824      	ldr	r4, [r4, #0]
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	d1f7      	bne.n	80071bc <_fwalk_sglue+0xc>
 80071cc:	4630      	mov	r0, r6
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d907      	bls.n	80071e8 <_fwalk_sglue+0x38>
 80071d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071dc:	3301      	adds	r3, #1
 80071de:	d003      	beq.n	80071e8 <_fwalk_sglue+0x38>
 80071e0:	4629      	mov	r1, r5
 80071e2:	4638      	mov	r0, r7
 80071e4:	47c0      	blx	r8
 80071e6:	4306      	orrs	r6, r0
 80071e8:	3568      	adds	r5, #104	; 0x68
 80071ea:	e7e9      	b.n	80071c0 <_fwalk_sglue+0x10>

080071ec <iprintf>:
 80071ec:	b40f      	push	{r0, r1, r2, r3}
 80071ee:	b507      	push	{r0, r1, r2, lr}
 80071f0:	4906      	ldr	r1, [pc, #24]	; (800720c <iprintf+0x20>)
 80071f2:	ab04      	add	r3, sp, #16
 80071f4:	6808      	ldr	r0, [r1, #0]
 80071f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071fa:	6881      	ldr	r1, [r0, #8]
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	f000 fc85 	bl	8007b0c <_vfiprintf_r>
 8007202:	b003      	add	sp, #12
 8007204:	f85d eb04 	ldr.w	lr, [sp], #4
 8007208:	b004      	add	sp, #16
 800720a:	4770      	bx	lr
 800720c:	2000006c 	.word	0x2000006c

08007210 <_puts_r>:
 8007210:	6a03      	ldr	r3, [r0, #32]
 8007212:	b570      	push	{r4, r5, r6, lr}
 8007214:	6884      	ldr	r4, [r0, #8]
 8007216:	4605      	mov	r5, r0
 8007218:	460e      	mov	r6, r1
 800721a:	b90b      	cbnz	r3, 8007220 <_puts_r+0x10>
 800721c:	f7ff ffb0 	bl	8007180 <__sinit>
 8007220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007222:	07db      	lsls	r3, r3, #31
 8007224:	d405      	bmi.n	8007232 <_puts_r+0x22>
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	0598      	lsls	r0, r3, #22
 800722a:	d402      	bmi.n	8007232 <_puts_r+0x22>
 800722c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800722e:	f000 f9f0 	bl	8007612 <__retarget_lock_acquire_recursive>
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	0719      	lsls	r1, r3, #28
 8007236:	d513      	bpl.n	8007260 <_puts_r+0x50>
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	b18b      	cbz	r3, 8007260 <_puts_r+0x50>
 800723c:	3e01      	subs	r6, #1
 800723e:	68a3      	ldr	r3, [r4, #8]
 8007240:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007244:	3b01      	subs	r3, #1
 8007246:	60a3      	str	r3, [r4, #8]
 8007248:	b9e9      	cbnz	r1, 8007286 <_puts_r+0x76>
 800724a:	2b00      	cmp	r3, #0
 800724c:	da2e      	bge.n	80072ac <_puts_r+0x9c>
 800724e:	4622      	mov	r2, r4
 8007250:	210a      	movs	r1, #10
 8007252:	4628      	mov	r0, r5
 8007254:	f000 f8cf 	bl	80073f6 <__swbuf_r>
 8007258:	3001      	adds	r0, #1
 800725a:	d007      	beq.n	800726c <_puts_r+0x5c>
 800725c:	250a      	movs	r5, #10
 800725e:	e007      	b.n	8007270 <_puts_r+0x60>
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f000 f904 	bl	8007470 <__swsetup_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	d0e7      	beq.n	800723c <_puts_r+0x2c>
 800726c:	f04f 35ff 	mov.w	r5, #4294967295
 8007270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007272:	07da      	lsls	r2, r3, #31
 8007274:	d405      	bmi.n	8007282 <_puts_r+0x72>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	059b      	lsls	r3, r3, #22
 800727a:	d402      	bmi.n	8007282 <_puts_r+0x72>
 800727c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800727e:	f000 f9c9 	bl	8007614 <__retarget_lock_release_recursive>
 8007282:	4628      	mov	r0, r5
 8007284:	bd70      	pop	{r4, r5, r6, pc}
 8007286:	2b00      	cmp	r3, #0
 8007288:	da04      	bge.n	8007294 <_puts_r+0x84>
 800728a:	69a2      	ldr	r2, [r4, #24]
 800728c:	429a      	cmp	r2, r3
 800728e:	dc06      	bgt.n	800729e <_puts_r+0x8e>
 8007290:	290a      	cmp	r1, #10
 8007292:	d004      	beq.n	800729e <_puts_r+0x8e>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	7019      	strb	r1, [r3, #0]
 800729c:	e7cf      	b.n	800723e <_puts_r+0x2e>
 800729e:	4622      	mov	r2, r4
 80072a0:	4628      	mov	r0, r5
 80072a2:	f000 f8a8 	bl	80073f6 <__swbuf_r>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d1c9      	bne.n	800723e <_puts_r+0x2e>
 80072aa:	e7df      	b.n	800726c <_puts_r+0x5c>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	250a      	movs	r5, #10
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	701d      	strb	r5, [r3, #0]
 80072b6:	e7db      	b.n	8007270 <_puts_r+0x60>

080072b8 <puts>:
 80072b8:	4b02      	ldr	r3, [pc, #8]	; (80072c4 <puts+0xc>)
 80072ba:	4601      	mov	r1, r0
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f7ff bfa7 	b.w	8007210 <_puts_r>
 80072c2:	bf00      	nop
 80072c4:	2000006c 	.word	0x2000006c

080072c8 <sniprintf>:
 80072c8:	b40c      	push	{r2, r3}
 80072ca:	b530      	push	{r4, r5, lr}
 80072cc:	4b17      	ldr	r3, [pc, #92]	; (800732c <sniprintf+0x64>)
 80072ce:	1e0c      	subs	r4, r1, #0
 80072d0:	681d      	ldr	r5, [r3, #0]
 80072d2:	b09d      	sub	sp, #116	; 0x74
 80072d4:	da08      	bge.n	80072e8 <sniprintf+0x20>
 80072d6:	238b      	movs	r3, #139	; 0x8b
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	f04f 30ff 	mov.w	r0, #4294967295
 80072de:	b01d      	add	sp, #116	; 0x74
 80072e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072e4:	b002      	add	sp, #8
 80072e6:	4770      	bx	lr
 80072e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80072ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80072f0:	bf14      	ite	ne
 80072f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80072f6:	4623      	moveq	r3, r4
 80072f8:	9304      	str	r3, [sp, #16]
 80072fa:	9307      	str	r3, [sp, #28]
 80072fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007300:	9002      	str	r0, [sp, #8]
 8007302:	9006      	str	r0, [sp, #24]
 8007304:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007308:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800730a:	ab21      	add	r3, sp, #132	; 0x84
 800730c:	a902      	add	r1, sp, #8
 800730e:	4628      	mov	r0, r5
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	f000 fad3 	bl	80078bc <_svfiprintf_r>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	bfbc      	itt	lt
 800731a:	238b      	movlt	r3, #139	; 0x8b
 800731c:	602b      	strlt	r3, [r5, #0]
 800731e:	2c00      	cmp	r4, #0
 8007320:	d0dd      	beq.n	80072de <sniprintf+0x16>
 8007322:	9b02      	ldr	r3, [sp, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	e7d9      	b.n	80072de <sniprintf+0x16>
 800732a:	bf00      	nop
 800732c:	2000006c 	.word	0x2000006c

08007330 <siprintf>:
 8007330:	b40e      	push	{r1, r2, r3}
 8007332:	b500      	push	{lr}
 8007334:	b09c      	sub	sp, #112	; 0x70
 8007336:	ab1d      	add	r3, sp, #116	; 0x74
 8007338:	9002      	str	r0, [sp, #8]
 800733a:	9006      	str	r0, [sp, #24]
 800733c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007340:	4809      	ldr	r0, [pc, #36]	; (8007368 <siprintf+0x38>)
 8007342:	9107      	str	r1, [sp, #28]
 8007344:	9104      	str	r1, [sp, #16]
 8007346:	4909      	ldr	r1, [pc, #36]	; (800736c <siprintf+0x3c>)
 8007348:	f853 2b04 	ldr.w	r2, [r3], #4
 800734c:	9105      	str	r1, [sp, #20]
 800734e:	6800      	ldr	r0, [r0, #0]
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	a902      	add	r1, sp, #8
 8007354:	f000 fab2 	bl	80078bc <_svfiprintf_r>
 8007358:	9b02      	ldr	r3, [sp, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	b01c      	add	sp, #112	; 0x70
 8007360:	f85d eb04 	ldr.w	lr, [sp], #4
 8007364:	b003      	add	sp, #12
 8007366:	4770      	bx	lr
 8007368:	2000006c 	.word	0x2000006c
 800736c:	ffff0208 	.word	0xffff0208

08007370 <__sread>:
 8007370:	b510      	push	{r4, lr}
 8007372:	460c      	mov	r4, r1
 8007374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007378:	f000 f8fc 	bl	8007574 <_read_r>
 800737c:	2800      	cmp	r0, #0
 800737e:	bfab      	itete	ge
 8007380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007382:	89a3      	ldrhlt	r3, [r4, #12]
 8007384:	181b      	addge	r3, r3, r0
 8007386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800738a:	bfac      	ite	ge
 800738c:	6563      	strge	r3, [r4, #84]	; 0x54
 800738e:	81a3      	strhlt	r3, [r4, #12]
 8007390:	bd10      	pop	{r4, pc}

08007392 <__swrite>:
 8007392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	461f      	mov	r7, r3
 8007398:	898b      	ldrh	r3, [r1, #12]
 800739a:	05db      	lsls	r3, r3, #23
 800739c:	4605      	mov	r5, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	4616      	mov	r6, r2
 80073a2:	d505      	bpl.n	80073b0 <__swrite+0x1e>
 80073a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a8:	2302      	movs	r3, #2
 80073aa:	2200      	movs	r2, #0
 80073ac:	f000 f8d0 	bl	8007550 <_lseek_r>
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	4632      	mov	r2, r6
 80073be:	463b      	mov	r3, r7
 80073c0:	4628      	mov	r0, r5
 80073c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c6:	f000 b8e7 	b.w	8007598 <_write_r>

080073ca <__sseek>:
 80073ca:	b510      	push	{r4, lr}
 80073cc:	460c      	mov	r4, r1
 80073ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d2:	f000 f8bd 	bl	8007550 <_lseek_r>
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	bf15      	itete	ne
 80073dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80073de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073e6:	81a3      	strheq	r3, [r4, #12]
 80073e8:	bf18      	it	ne
 80073ea:	81a3      	strhne	r3, [r4, #12]
 80073ec:	bd10      	pop	{r4, pc}

080073ee <__sclose>:
 80073ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f2:	f000 b89d 	b.w	8007530 <_close_r>

080073f6 <__swbuf_r>:
 80073f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f8:	460e      	mov	r6, r1
 80073fa:	4614      	mov	r4, r2
 80073fc:	4605      	mov	r5, r0
 80073fe:	b118      	cbz	r0, 8007408 <__swbuf_r+0x12>
 8007400:	6a03      	ldr	r3, [r0, #32]
 8007402:	b90b      	cbnz	r3, 8007408 <__swbuf_r+0x12>
 8007404:	f7ff febc 	bl	8007180 <__sinit>
 8007408:	69a3      	ldr	r3, [r4, #24]
 800740a:	60a3      	str	r3, [r4, #8]
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	071a      	lsls	r2, r3, #28
 8007410:	d525      	bpl.n	800745e <__swbuf_r+0x68>
 8007412:	6923      	ldr	r3, [r4, #16]
 8007414:	b31b      	cbz	r3, 800745e <__swbuf_r+0x68>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	6922      	ldr	r2, [r4, #16]
 800741a:	1a98      	subs	r0, r3, r2
 800741c:	6963      	ldr	r3, [r4, #20]
 800741e:	b2f6      	uxtb	r6, r6
 8007420:	4283      	cmp	r3, r0
 8007422:	4637      	mov	r7, r6
 8007424:	dc04      	bgt.n	8007430 <__swbuf_r+0x3a>
 8007426:	4621      	mov	r1, r4
 8007428:	4628      	mov	r0, r5
 800742a:	f000 fe9f 	bl	800816c <_fflush_r>
 800742e:	b9e0      	cbnz	r0, 800746a <__swbuf_r+0x74>
 8007430:	68a3      	ldr	r3, [r4, #8]
 8007432:	3b01      	subs	r3, #1
 8007434:	60a3      	str	r3, [r4, #8]
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	6022      	str	r2, [r4, #0]
 800743c:	701e      	strb	r6, [r3, #0]
 800743e:	6962      	ldr	r2, [r4, #20]
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	429a      	cmp	r2, r3
 8007444:	d004      	beq.n	8007450 <__swbuf_r+0x5a>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	07db      	lsls	r3, r3, #31
 800744a:	d506      	bpl.n	800745a <__swbuf_r+0x64>
 800744c:	2e0a      	cmp	r6, #10
 800744e:	d104      	bne.n	800745a <__swbuf_r+0x64>
 8007450:	4621      	mov	r1, r4
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fe8a 	bl	800816c <_fflush_r>
 8007458:	b938      	cbnz	r0, 800746a <__swbuf_r+0x74>
 800745a:	4638      	mov	r0, r7
 800745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745e:	4621      	mov	r1, r4
 8007460:	4628      	mov	r0, r5
 8007462:	f000 f805 	bl	8007470 <__swsetup_r>
 8007466:	2800      	cmp	r0, #0
 8007468:	d0d5      	beq.n	8007416 <__swbuf_r+0x20>
 800746a:	f04f 37ff 	mov.w	r7, #4294967295
 800746e:	e7f4      	b.n	800745a <__swbuf_r+0x64>

08007470 <__swsetup_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4b2a      	ldr	r3, [pc, #168]	; (800751c <__swsetup_r+0xac>)
 8007474:	4605      	mov	r5, r0
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	460c      	mov	r4, r1
 800747a:	b118      	cbz	r0, 8007484 <__swsetup_r+0x14>
 800747c:	6a03      	ldr	r3, [r0, #32]
 800747e:	b90b      	cbnz	r3, 8007484 <__swsetup_r+0x14>
 8007480:	f7ff fe7e 	bl	8007180 <__sinit>
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800748a:	0718      	lsls	r0, r3, #28
 800748c:	d422      	bmi.n	80074d4 <__swsetup_r+0x64>
 800748e:	06d9      	lsls	r1, r3, #27
 8007490:	d407      	bmi.n	80074a2 <__swsetup_r+0x32>
 8007492:	2309      	movs	r3, #9
 8007494:	602b      	str	r3, [r5, #0]
 8007496:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800749a:	81a3      	strh	r3, [r4, #12]
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	e034      	b.n	800750c <__swsetup_r+0x9c>
 80074a2:	0758      	lsls	r0, r3, #29
 80074a4:	d512      	bpl.n	80074cc <__swsetup_r+0x5c>
 80074a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a8:	b141      	cbz	r1, 80074bc <__swsetup_r+0x4c>
 80074aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ae:	4299      	cmp	r1, r3
 80074b0:	d002      	beq.n	80074b8 <__swsetup_r+0x48>
 80074b2:	4628      	mov	r0, r5
 80074b4:	f000 f8b0 	bl	8007618 <_free_r>
 80074b8:	2300      	movs	r3, #0
 80074ba:	6363      	str	r3, [r4, #52]	; 0x34
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	2300      	movs	r3, #0
 80074c6:	6063      	str	r3, [r4, #4]
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f043 0308 	orr.w	r3, r3, #8
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	b94b      	cbnz	r3, 80074ec <__swsetup_r+0x7c>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e2:	d003      	beq.n	80074ec <__swsetup_r+0x7c>
 80074e4:	4621      	mov	r1, r4
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 fe8e 	bl	8008208 <__smakebuf_r>
 80074ec:	89a0      	ldrh	r0, [r4, #12]
 80074ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074f2:	f010 0301 	ands.w	r3, r0, #1
 80074f6:	d00a      	beq.n	800750e <__swsetup_r+0x9e>
 80074f8:	2300      	movs	r3, #0
 80074fa:	60a3      	str	r3, [r4, #8]
 80074fc:	6963      	ldr	r3, [r4, #20]
 80074fe:	425b      	negs	r3, r3
 8007500:	61a3      	str	r3, [r4, #24]
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	b943      	cbnz	r3, 8007518 <__swsetup_r+0xa8>
 8007506:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800750a:	d1c4      	bne.n	8007496 <__swsetup_r+0x26>
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	0781      	lsls	r1, r0, #30
 8007510:	bf58      	it	pl
 8007512:	6963      	ldrpl	r3, [r4, #20]
 8007514:	60a3      	str	r3, [r4, #8]
 8007516:	e7f4      	b.n	8007502 <__swsetup_r+0x92>
 8007518:	2000      	movs	r0, #0
 800751a:	e7f7      	b.n	800750c <__swsetup_r+0x9c>
 800751c:	2000006c 	.word	0x2000006c

08007520 <memset>:
 8007520:	4402      	add	r2, r0
 8007522:	4603      	mov	r3, r0
 8007524:	4293      	cmp	r3, r2
 8007526:	d100      	bne.n	800752a <memset+0xa>
 8007528:	4770      	bx	lr
 800752a:	f803 1b01 	strb.w	r1, [r3], #1
 800752e:	e7f9      	b.n	8007524 <memset+0x4>

08007530 <_close_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d06      	ldr	r5, [pc, #24]	; (800754c <_close_r+0x1c>)
 8007534:	2300      	movs	r3, #0
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	602b      	str	r3, [r5, #0]
 800753c:	f7fa fab9 	bl	8001ab2 <_close>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_close_r+0x1a>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_close_r+0x1a>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20000ad4 	.word	0x20000ad4

08007550 <_lseek_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d07      	ldr	r5, [pc, #28]	; (8007570 <_lseek_r+0x20>)
 8007554:	4604      	mov	r4, r0
 8007556:	4608      	mov	r0, r1
 8007558:	4611      	mov	r1, r2
 800755a:	2200      	movs	r2, #0
 800755c:	602a      	str	r2, [r5, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f7fa face 	bl	8001b00 <_lseek>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_lseek_r+0x1e>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_lseek_r+0x1e>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20000ad4 	.word	0x20000ad4

08007574 <_read_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d07      	ldr	r5, [pc, #28]	; (8007594 <_read_r+0x20>)
 8007578:	4604      	mov	r4, r0
 800757a:	4608      	mov	r0, r1
 800757c:	4611      	mov	r1, r2
 800757e:	2200      	movs	r2, #0
 8007580:	602a      	str	r2, [r5, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	f7fa fa78 	bl	8001a78 <_read>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_read_r+0x1e>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_read_r+0x1e>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20000ad4 	.word	0x20000ad4

08007598 <_write_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d07      	ldr	r5, [pc, #28]	; (80075b8 <_write_r+0x20>)
 800759c:	4604      	mov	r4, r0
 800759e:	4608      	mov	r0, r1
 80075a0:	4611      	mov	r1, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	602a      	str	r2, [r5, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	f7f9 f964 	bl	8000874 <_write>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_write_r+0x1e>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_write_r+0x1e>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	20000ad4 	.word	0x20000ad4

080075bc <__errno>:
 80075bc:	4b01      	ldr	r3, [pc, #4]	; (80075c4 <__errno+0x8>)
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	2000006c 	.word	0x2000006c

080075c8 <__libc_init_array>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	4d0d      	ldr	r5, [pc, #52]	; (8007600 <__libc_init_array+0x38>)
 80075cc:	4c0d      	ldr	r4, [pc, #52]	; (8007604 <__libc_init_array+0x3c>)
 80075ce:	1b64      	subs	r4, r4, r5
 80075d0:	10a4      	asrs	r4, r4, #2
 80075d2:	2600      	movs	r6, #0
 80075d4:	42a6      	cmp	r6, r4
 80075d6:	d109      	bne.n	80075ec <__libc_init_array+0x24>
 80075d8:	4d0b      	ldr	r5, [pc, #44]	; (8007608 <__libc_init_array+0x40>)
 80075da:	4c0c      	ldr	r4, [pc, #48]	; (800760c <__libc_init_array+0x44>)
 80075dc:	f000 fee2 	bl	80083a4 <_init>
 80075e0:	1b64      	subs	r4, r4, r5
 80075e2:	10a4      	asrs	r4, r4, #2
 80075e4:	2600      	movs	r6, #0
 80075e6:	42a6      	cmp	r6, r4
 80075e8:	d105      	bne.n	80075f6 <__libc_init_array+0x2e>
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f0:	4798      	blx	r3
 80075f2:	3601      	adds	r6, #1
 80075f4:	e7ee      	b.n	80075d4 <__libc_init_array+0xc>
 80075f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fa:	4798      	blx	r3
 80075fc:	3601      	adds	r6, #1
 80075fe:	e7f2      	b.n	80075e6 <__libc_init_array+0x1e>
 8007600:	080084f8 	.word	0x080084f8
 8007604:	080084f8 	.word	0x080084f8
 8007608:	080084f8 	.word	0x080084f8
 800760c:	080084fc 	.word	0x080084fc

08007610 <__retarget_lock_init_recursive>:
 8007610:	4770      	bx	lr

08007612 <__retarget_lock_acquire_recursive>:
 8007612:	4770      	bx	lr

08007614 <__retarget_lock_release_recursive>:
 8007614:	4770      	bx	lr
	...

08007618 <_free_r>:
 8007618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800761a:	2900      	cmp	r1, #0
 800761c:	d044      	beq.n	80076a8 <_free_r+0x90>
 800761e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007622:	9001      	str	r0, [sp, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f1a1 0404 	sub.w	r4, r1, #4
 800762a:	bfb8      	it	lt
 800762c:	18e4      	addlt	r4, r4, r3
 800762e:	f000 f8df 	bl	80077f0 <__malloc_lock>
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <_free_r+0x94>)
 8007634:	9801      	ldr	r0, [sp, #4]
 8007636:	6813      	ldr	r3, [r2, #0]
 8007638:	b933      	cbnz	r3, 8007648 <_free_r+0x30>
 800763a:	6063      	str	r3, [r4, #4]
 800763c:	6014      	str	r4, [r2, #0]
 800763e:	b003      	add	sp, #12
 8007640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007644:	f000 b8da 	b.w	80077fc <__malloc_unlock>
 8007648:	42a3      	cmp	r3, r4
 800764a:	d908      	bls.n	800765e <_free_r+0x46>
 800764c:	6825      	ldr	r5, [r4, #0]
 800764e:	1961      	adds	r1, r4, r5
 8007650:	428b      	cmp	r3, r1
 8007652:	bf01      	itttt	eq
 8007654:	6819      	ldreq	r1, [r3, #0]
 8007656:	685b      	ldreq	r3, [r3, #4]
 8007658:	1949      	addeq	r1, r1, r5
 800765a:	6021      	streq	r1, [r4, #0]
 800765c:	e7ed      	b.n	800763a <_free_r+0x22>
 800765e:	461a      	mov	r2, r3
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	b10b      	cbz	r3, 8007668 <_free_r+0x50>
 8007664:	42a3      	cmp	r3, r4
 8007666:	d9fa      	bls.n	800765e <_free_r+0x46>
 8007668:	6811      	ldr	r1, [r2, #0]
 800766a:	1855      	adds	r5, r2, r1
 800766c:	42a5      	cmp	r5, r4
 800766e:	d10b      	bne.n	8007688 <_free_r+0x70>
 8007670:	6824      	ldr	r4, [r4, #0]
 8007672:	4421      	add	r1, r4
 8007674:	1854      	adds	r4, r2, r1
 8007676:	42a3      	cmp	r3, r4
 8007678:	6011      	str	r1, [r2, #0]
 800767a:	d1e0      	bne.n	800763e <_free_r+0x26>
 800767c:	681c      	ldr	r4, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	6053      	str	r3, [r2, #4]
 8007682:	440c      	add	r4, r1
 8007684:	6014      	str	r4, [r2, #0]
 8007686:	e7da      	b.n	800763e <_free_r+0x26>
 8007688:	d902      	bls.n	8007690 <_free_r+0x78>
 800768a:	230c      	movs	r3, #12
 800768c:	6003      	str	r3, [r0, #0]
 800768e:	e7d6      	b.n	800763e <_free_r+0x26>
 8007690:	6825      	ldr	r5, [r4, #0]
 8007692:	1961      	adds	r1, r4, r5
 8007694:	428b      	cmp	r3, r1
 8007696:	bf04      	itt	eq
 8007698:	6819      	ldreq	r1, [r3, #0]
 800769a:	685b      	ldreq	r3, [r3, #4]
 800769c:	6063      	str	r3, [r4, #4]
 800769e:	bf04      	itt	eq
 80076a0:	1949      	addeq	r1, r1, r5
 80076a2:	6021      	streq	r1, [r4, #0]
 80076a4:	6054      	str	r4, [r2, #4]
 80076a6:	e7ca      	b.n	800763e <_free_r+0x26>
 80076a8:	b003      	add	sp, #12
 80076aa:	bd30      	pop	{r4, r5, pc}
 80076ac:	20000adc 	.word	0x20000adc

080076b0 <sbrk_aligned>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	4e0e      	ldr	r6, [pc, #56]	; (80076ec <sbrk_aligned+0x3c>)
 80076b4:	460c      	mov	r4, r1
 80076b6:	6831      	ldr	r1, [r6, #0]
 80076b8:	4605      	mov	r5, r0
 80076ba:	b911      	cbnz	r1, 80076c2 <sbrk_aligned+0x12>
 80076bc:	f000 fe1c 	bl	80082f8 <_sbrk_r>
 80076c0:	6030      	str	r0, [r6, #0]
 80076c2:	4621      	mov	r1, r4
 80076c4:	4628      	mov	r0, r5
 80076c6:	f000 fe17 	bl	80082f8 <_sbrk_r>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	d00a      	beq.n	80076e4 <sbrk_aligned+0x34>
 80076ce:	1cc4      	adds	r4, r0, #3
 80076d0:	f024 0403 	bic.w	r4, r4, #3
 80076d4:	42a0      	cmp	r0, r4
 80076d6:	d007      	beq.n	80076e8 <sbrk_aligned+0x38>
 80076d8:	1a21      	subs	r1, r4, r0
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 fe0c 	bl	80082f8 <_sbrk_r>
 80076e0:	3001      	adds	r0, #1
 80076e2:	d101      	bne.n	80076e8 <sbrk_aligned+0x38>
 80076e4:	f04f 34ff 	mov.w	r4, #4294967295
 80076e8:	4620      	mov	r0, r4
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	20000ae0 	.word	0x20000ae0

080076f0 <_malloc_r>:
 80076f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	1ccd      	adds	r5, r1, #3
 80076f6:	f025 0503 	bic.w	r5, r5, #3
 80076fa:	3508      	adds	r5, #8
 80076fc:	2d0c      	cmp	r5, #12
 80076fe:	bf38      	it	cc
 8007700:	250c      	movcc	r5, #12
 8007702:	2d00      	cmp	r5, #0
 8007704:	4607      	mov	r7, r0
 8007706:	db01      	blt.n	800770c <_malloc_r+0x1c>
 8007708:	42a9      	cmp	r1, r5
 800770a:	d905      	bls.n	8007718 <_malloc_r+0x28>
 800770c:	230c      	movs	r3, #12
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	2600      	movs	r6, #0
 8007712:	4630      	mov	r0, r6
 8007714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077ec <_malloc_r+0xfc>
 800771c:	f000 f868 	bl	80077f0 <__malloc_lock>
 8007720:	f8d8 3000 	ldr.w	r3, [r8]
 8007724:	461c      	mov	r4, r3
 8007726:	bb5c      	cbnz	r4, 8007780 <_malloc_r+0x90>
 8007728:	4629      	mov	r1, r5
 800772a:	4638      	mov	r0, r7
 800772c:	f7ff ffc0 	bl	80076b0 <sbrk_aligned>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	4604      	mov	r4, r0
 8007734:	d155      	bne.n	80077e2 <_malloc_r+0xf2>
 8007736:	f8d8 4000 	ldr.w	r4, [r8]
 800773a:	4626      	mov	r6, r4
 800773c:	2e00      	cmp	r6, #0
 800773e:	d145      	bne.n	80077cc <_malloc_r+0xdc>
 8007740:	2c00      	cmp	r4, #0
 8007742:	d048      	beq.n	80077d6 <_malloc_r+0xe6>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	4631      	mov	r1, r6
 8007748:	4638      	mov	r0, r7
 800774a:	eb04 0903 	add.w	r9, r4, r3
 800774e:	f000 fdd3 	bl	80082f8 <_sbrk_r>
 8007752:	4581      	cmp	r9, r0
 8007754:	d13f      	bne.n	80077d6 <_malloc_r+0xe6>
 8007756:	6821      	ldr	r1, [r4, #0]
 8007758:	1a6d      	subs	r5, r5, r1
 800775a:	4629      	mov	r1, r5
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff ffa7 	bl	80076b0 <sbrk_aligned>
 8007762:	3001      	adds	r0, #1
 8007764:	d037      	beq.n	80077d6 <_malloc_r+0xe6>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	442b      	add	r3, r5
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	f8d8 3000 	ldr.w	r3, [r8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d038      	beq.n	80077e6 <_malloc_r+0xf6>
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	42a2      	cmp	r2, r4
 8007778:	d12b      	bne.n	80077d2 <_malloc_r+0xe2>
 800777a:	2200      	movs	r2, #0
 800777c:	605a      	str	r2, [r3, #4]
 800777e:	e00f      	b.n	80077a0 <_malloc_r+0xb0>
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	1b52      	subs	r2, r2, r5
 8007784:	d41f      	bmi.n	80077c6 <_malloc_r+0xd6>
 8007786:	2a0b      	cmp	r2, #11
 8007788:	d917      	bls.n	80077ba <_malloc_r+0xca>
 800778a:	1961      	adds	r1, r4, r5
 800778c:	42a3      	cmp	r3, r4
 800778e:	6025      	str	r5, [r4, #0]
 8007790:	bf18      	it	ne
 8007792:	6059      	strne	r1, [r3, #4]
 8007794:	6863      	ldr	r3, [r4, #4]
 8007796:	bf08      	it	eq
 8007798:	f8c8 1000 	streq.w	r1, [r8]
 800779c:	5162      	str	r2, [r4, r5]
 800779e:	604b      	str	r3, [r1, #4]
 80077a0:	4638      	mov	r0, r7
 80077a2:	f104 060b 	add.w	r6, r4, #11
 80077a6:	f000 f829 	bl	80077fc <__malloc_unlock>
 80077aa:	f026 0607 	bic.w	r6, r6, #7
 80077ae:	1d23      	adds	r3, r4, #4
 80077b0:	1af2      	subs	r2, r6, r3
 80077b2:	d0ae      	beq.n	8007712 <_malloc_r+0x22>
 80077b4:	1b9b      	subs	r3, r3, r6
 80077b6:	50a3      	str	r3, [r4, r2]
 80077b8:	e7ab      	b.n	8007712 <_malloc_r+0x22>
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	6862      	ldr	r2, [r4, #4]
 80077be:	d1dd      	bne.n	800777c <_malloc_r+0x8c>
 80077c0:	f8c8 2000 	str.w	r2, [r8]
 80077c4:	e7ec      	b.n	80077a0 <_malloc_r+0xb0>
 80077c6:	4623      	mov	r3, r4
 80077c8:	6864      	ldr	r4, [r4, #4]
 80077ca:	e7ac      	b.n	8007726 <_malloc_r+0x36>
 80077cc:	4634      	mov	r4, r6
 80077ce:	6876      	ldr	r6, [r6, #4]
 80077d0:	e7b4      	b.n	800773c <_malloc_r+0x4c>
 80077d2:	4613      	mov	r3, r2
 80077d4:	e7cc      	b.n	8007770 <_malloc_r+0x80>
 80077d6:	230c      	movs	r3, #12
 80077d8:	603b      	str	r3, [r7, #0]
 80077da:	4638      	mov	r0, r7
 80077dc:	f000 f80e 	bl	80077fc <__malloc_unlock>
 80077e0:	e797      	b.n	8007712 <_malloc_r+0x22>
 80077e2:	6025      	str	r5, [r4, #0]
 80077e4:	e7dc      	b.n	80077a0 <_malloc_r+0xb0>
 80077e6:	605b      	str	r3, [r3, #4]
 80077e8:	deff      	udf	#255	; 0xff
 80077ea:	bf00      	nop
 80077ec:	20000adc 	.word	0x20000adc

080077f0 <__malloc_lock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	; (80077f8 <__malloc_lock+0x8>)
 80077f2:	f7ff bf0e 	b.w	8007612 <__retarget_lock_acquire_recursive>
 80077f6:	bf00      	nop
 80077f8:	20000ad8 	.word	0x20000ad8

080077fc <__malloc_unlock>:
 80077fc:	4801      	ldr	r0, [pc, #4]	; (8007804 <__malloc_unlock+0x8>)
 80077fe:	f7ff bf09 	b.w	8007614 <__retarget_lock_release_recursive>
 8007802:	bf00      	nop
 8007804:	20000ad8 	.word	0x20000ad8

08007808 <__ssputs_r>:
 8007808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800780c:	688e      	ldr	r6, [r1, #8]
 800780e:	461f      	mov	r7, r3
 8007810:	42be      	cmp	r6, r7
 8007812:	680b      	ldr	r3, [r1, #0]
 8007814:	4682      	mov	sl, r0
 8007816:	460c      	mov	r4, r1
 8007818:	4690      	mov	r8, r2
 800781a:	d82c      	bhi.n	8007876 <__ssputs_r+0x6e>
 800781c:	898a      	ldrh	r2, [r1, #12]
 800781e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007822:	d026      	beq.n	8007872 <__ssputs_r+0x6a>
 8007824:	6965      	ldr	r5, [r4, #20]
 8007826:	6909      	ldr	r1, [r1, #16]
 8007828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800782c:	eba3 0901 	sub.w	r9, r3, r1
 8007830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007834:	1c7b      	adds	r3, r7, #1
 8007836:	444b      	add	r3, r9
 8007838:	106d      	asrs	r5, r5, #1
 800783a:	429d      	cmp	r5, r3
 800783c:	bf38      	it	cc
 800783e:	461d      	movcc	r5, r3
 8007840:	0553      	lsls	r3, r2, #21
 8007842:	d527      	bpl.n	8007894 <__ssputs_r+0x8c>
 8007844:	4629      	mov	r1, r5
 8007846:	f7ff ff53 	bl	80076f0 <_malloc_r>
 800784a:	4606      	mov	r6, r0
 800784c:	b360      	cbz	r0, 80078a8 <__ssputs_r+0xa0>
 800784e:	6921      	ldr	r1, [r4, #16]
 8007850:	464a      	mov	r2, r9
 8007852:	f000 fd61 	bl	8008318 <memcpy>
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800785c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	6126      	str	r6, [r4, #16]
 8007864:	6165      	str	r5, [r4, #20]
 8007866:	444e      	add	r6, r9
 8007868:	eba5 0509 	sub.w	r5, r5, r9
 800786c:	6026      	str	r6, [r4, #0]
 800786e:	60a5      	str	r5, [r4, #8]
 8007870:	463e      	mov	r6, r7
 8007872:	42be      	cmp	r6, r7
 8007874:	d900      	bls.n	8007878 <__ssputs_r+0x70>
 8007876:	463e      	mov	r6, r7
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	4632      	mov	r2, r6
 800787c:	4641      	mov	r1, r8
 800787e:	f000 fcff 	bl	8008280 <memmove>
 8007882:	68a3      	ldr	r3, [r4, #8]
 8007884:	1b9b      	subs	r3, r3, r6
 8007886:	60a3      	str	r3, [r4, #8]
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	4433      	add	r3, r6
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	2000      	movs	r0, #0
 8007890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007894:	462a      	mov	r2, r5
 8007896:	f000 fd4d 	bl	8008334 <_realloc_r>
 800789a:	4606      	mov	r6, r0
 800789c:	2800      	cmp	r0, #0
 800789e:	d1e0      	bne.n	8007862 <__ssputs_r+0x5a>
 80078a0:	6921      	ldr	r1, [r4, #16]
 80078a2:	4650      	mov	r0, sl
 80078a4:	f7ff feb8 	bl	8007618 <_free_r>
 80078a8:	230c      	movs	r3, #12
 80078aa:	f8ca 3000 	str.w	r3, [sl]
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	e7e9      	b.n	8007890 <__ssputs_r+0x88>

080078bc <_svfiprintf_r>:
 80078bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c0:	4698      	mov	r8, r3
 80078c2:	898b      	ldrh	r3, [r1, #12]
 80078c4:	061b      	lsls	r3, r3, #24
 80078c6:	b09d      	sub	sp, #116	; 0x74
 80078c8:	4607      	mov	r7, r0
 80078ca:	460d      	mov	r5, r1
 80078cc:	4614      	mov	r4, r2
 80078ce:	d50e      	bpl.n	80078ee <_svfiprintf_r+0x32>
 80078d0:	690b      	ldr	r3, [r1, #16]
 80078d2:	b963      	cbnz	r3, 80078ee <_svfiprintf_r+0x32>
 80078d4:	2140      	movs	r1, #64	; 0x40
 80078d6:	f7ff ff0b 	bl	80076f0 <_malloc_r>
 80078da:	6028      	str	r0, [r5, #0]
 80078dc:	6128      	str	r0, [r5, #16]
 80078de:	b920      	cbnz	r0, 80078ea <_svfiprintf_r+0x2e>
 80078e0:	230c      	movs	r3, #12
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	e0d0      	b.n	8007a8c <_svfiprintf_r+0x1d0>
 80078ea:	2340      	movs	r3, #64	; 0x40
 80078ec:	616b      	str	r3, [r5, #20]
 80078ee:	2300      	movs	r3, #0
 80078f0:	9309      	str	r3, [sp, #36]	; 0x24
 80078f2:	2320      	movs	r3, #32
 80078f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078fc:	2330      	movs	r3, #48	; 0x30
 80078fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007aa4 <_svfiprintf_r+0x1e8>
 8007902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007906:	f04f 0901 	mov.w	r9, #1
 800790a:	4623      	mov	r3, r4
 800790c:	469a      	mov	sl, r3
 800790e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007912:	b10a      	cbz	r2, 8007918 <_svfiprintf_r+0x5c>
 8007914:	2a25      	cmp	r2, #37	; 0x25
 8007916:	d1f9      	bne.n	800790c <_svfiprintf_r+0x50>
 8007918:	ebba 0b04 	subs.w	fp, sl, r4
 800791c:	d00b      	beq.n	8007936 <_svfiprintf_r+0x7a>
 800791e:	465b      	mov	r3, fp
 8007920:	4622      	mov	r2, r4
 8007922:	4629      	mov	r1, r5
 8007924:	4638      	mov	r0, r7
 8007926:	f7ff ff6f 	bl	8007808 <__ssputs_r>
 800792a:	3001      	adds	r0, #1
 800792c:	f000 80a9 	beq.w	8007a82 <_svfiprintf_r+0x1c6>
 8007930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007932:	445a      	add	r2, fp
 8007934:	9209      	str	r2, [sp, #36]	; 0x24
 8007936:	f89a 3000 	ldrb.w	r3, [sl]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80a1 	beq.w	8007a82 <_svfiprintf_r+0x1c6>
 8007940:	2300      	movs	r3, #0
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794a:	f10a 0a01 	add.w	sl, sl, #1
 800794e:	9304      	str	r3, [sp, #16]
 8007950:	9307      	str	r3, [sp, #28]
 8007952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007956:	931a      	str	r3, [sp, #104]	; 0x68
 8007958:	4654      	mov	r4, sl
 800795a:	2205      	movs	r2, #5
 800795c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007960:	4850      	ldr	r0, [pc, #320]	; (8007aa4 <_svfiprintf_r+0x1e8>)
 8007962:	f7f8 fc4d 	bl	8000200 <memchr>
 8007966:	9a04      	ldr	r2, [sp, #16]
 8007968:	b9d8      	cbnz	r0, 80079a2 <_svfiprintf_r+0xe6>
 800796a:	06d0      	lsls	r0, r2, #27
 800796c:	bf44      	itt	mi
 800796e:	2320      	movmi	r3, #32
 8007970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007974:	0711      	lsls	r1, r2, #28
 8007976:	bf44      	itt	mi
 8007978:	232b      	movmi	r3, #43	; 0x2b
 800797a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800797e:	f89a 3000 	ldrb.w	r3, [sl]
 8007982:	2b2a      	cmp	r3, #42	; 0x2a
 8007984:	d015      	beq.n	80079b2 <_svfiprintf_r+0xf6>
 8007986:	9a07      	ldr	r2, [sp, #28]
 8007988:	4654      	mov	r4, sl
 800798a:	2000      	movs	r0, #0
 800798c:	f04f 0c0a 	mov.w	ip, #10
 8007990:	4621      	mov	r1, r4
 8007992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007996:	3b30      	subs	r3, #48	; 0x30
 8007998:	2b09      	cmp	r3, #9
 800799a:	d94d      	bls.n	8007a38 <_svfiprintf_r+0x17c>
 800799c:	b1b0      	cbz	r0, 80079cc <_svfiprintf_r+0x110>
 800799e:	9207      	str	r2, [sp, #28]
 80079a0:	e014      	b.n	80079cc <_svfiprintf_r+0x110>
 80079a2:	eba0 0308 	sub.w	r3, r0, r8
 80079a6:	fa09 f303 	lsl.w	r3, r9, r3
 80079aa:	4313      	orrs	r3, r2
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	46a2      	mov	sl, r4
 80079b0:	e7d2      	b.n	8007958 <_svfiprintf_r+0x9c>
 80079b2:	9b03      	ldr	r3, [sp, #12]
 80079b4:	1d19      	adds	r1, r3, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	9103      	str	r1, [sp, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfbb      	ittet	lt
 80079be:	425b      	neglt	r3, r3
 80079c0:	f042 0202 	orrlt.w	r2, r2, #2
 80079c4:	9307      	strge	r3, [sp, #28]
 80079c6:	9307      	strlt	r3, [sp, #28]
 80079c8:	bfb8      	it	lt
 80079ca:	9204      	strlt	r2, [sp, #16]
 80079cc:	7823      	ldrb	r3, [r4, #0]
 80079ce:	2b2e      	cmp	r3, #46	; 0x2e
 80079d0:	d10c      	bne.n	80079ec <_svfiprintf_r+0x130>
 80079d2:	7863      	ldrb	r3, [r4, #1]
 80079d4:	2b2a      	cmp	r3, #42	; 0x2a
 80079d6:	d134      	bne.n	8007a42 <_svfiprintf_r+0x186>
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	9203      	str	r2, [sp, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfb8      	it	lt
 80079e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e8:	3402      	adds	r4, #2
 80079ea:	9305      	str	r3, [sp, #20]
 80079ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ab4 <_svfiprintf_r+0x1f8>
 80079f0:	7821      	ldrb	r1, [r4, #0]
 80079f2:	2203      	movs	r2, #3
 80079f4:	4650      	mov	r0, sl
 80079f6:	f7f8 fc03 	bl	8000200 <memchr>
 80079fa:	b138      	cbz	r0, 8007a0c <_svfiprintf_r+0x150>
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	eba0 000a 	sub.w	r0, r0, sl
 8007a02:	2240      	movs	r2, #64	; 0x40
 8007a04:	4082      	lsls	r2, r0
 8007a06:	4313      	orrs	r3, r2
 8007a08:	3401      	adds	r4, #1
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a10:	4825      	ldr	r0, [pc, #148]	; (8007aa8 <_svfiprintf_r+0x1ec>)
 8007a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a16:	2206      	movs	r2, #6
 8007a18:	f7f8 fbf2 	bl	8000200 <memchr>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d038      	beq.n	8007a92 <_svfiprintf_r+0x1d6>
 8007a20:	4b22      	ldr	r3, [pc, #136]	; (8007aac <_svfiprintf_r+0x1f0>)
 8007a22:	bb1b      	cbnz	r3, 8007a6c <_svfiprintf_r+0x1b0>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	3307      	adds	r3, #7
 8007a28:	f023 0307 	bic.w	r3, r3, #7
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	9303      	str	r3, [sp, #12]
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	4433      	add	r3, r6
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	e768      	b.n	800790a <_svfiprintf_r+0x4e>
 8007a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	2001      	movs	r0, #1
 8007a40:	e7a6      	b.n	8007990 <_svfiprintf_r+0xd4>
 8007a42:	2300      	movs	r3, #0
 8007a44:	3401      	adds	r4, #1
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f04f 0c0a 	mov.w	ip, #10
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a54:	3a30      	subs	r2, #48	; 0x30
 8007a56:	2a09      	cmp	r2, #9
 8007a58:	d903      	bls.n	8007a62 <_svfiprintf_r+0x1a6>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0c6      	beq.n	80079ec <_svfiprintf_r+0x130>
 8007a5e:	9105      	str	r1, [sp, #20]
 8007a60:	e7c4      	b.n	80079ec <_svfiprintf_r+0x130>
 8007a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a66:	4604      	mov	r4, r0
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e7f0      	b.n	8007a4e <_svfiprintf_r+0x192>
 8007a6c:	ab03      	add	r3, sp, #12
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	462a      	mov	r2, r5
 8007a72:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <_svfiprintf_r+0x1f4>)
 8007a74:	a904      	add	r1, sp, #16
 8007a76:	4638      	mov	r0, r7
 8007a78:	f3af 8000 	nop.w
 8007a7c:	1c42      	adds	r2, r0, #1
 8007a7e:	4606      	mov	r6, r0
 8007a80:	d1d6      	bne.n	8007a30 <_svfiprintf_r+0x174>
 8007a82:	89ab      	ldrh	r3, [r5, #12]
 8007a84:	065b      	lsls	r3, r3, #25
 8007a86:	f53f af2d 	bmi.w	80078e4 <_svfiprintf_r+0x28>
 8007a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a8c:	b01d      	add	sp, #116	; 0x74
 8007a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a92:	ab03      	add	r3, sp, #12
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	462a      	mov	r2, r5
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <_svfiprintf_r+0x1f4>)
 8007a9a:	a904      	add	r1, sp, #16
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	f000 f9bd 	bl	8007e1c <_printf_i>
 8007aa2:	e7eb      	b.n	8007a7c <_svfiprintf_r+0x1c0>
 8007aa4:	080084bc 	.word	0x080084bc
 8007aa8:	080084c6 	.word	0x080084c6
 8007aac:	00000000 	.word	0x00000000
 8007ab0:	08007809 	.word	0x08007809
 8007ab4:	080084c2 	.word	0x080084c2

08007ab8 <__sfputc_r>:
 8007ab8:	6893      	ldr	r3, [r2, #8]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	b410      	push	{r4}
 8007ac0:	6093      	str	r3, [r2, #8]
 8007ac2:	da08      	bge.n	8007ad6 <__sfputc_r+0x1e>
 8007ac4:	6994      	ldr	r4, [r2, #24]
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	db01      	blt.n	8007ace <__sfputc_r+0x16>
 8007aca:	290a      	cmp	r1, #10
 8007acc:	d103      	bne.n	8007ad6 <__sfputc_r+0x1e>
 8007ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ad2:	f7ff bc90 	b.w	80073f6 <__swbuf_r>
 8007ad6:	6813      	ldr	r3, [r2, #0]
 8007ad8:	1c58      	adds	r0, r3, #1
 8007ada:	6010      	str	r0, [r2, #0]
 8007adc:	7019      	strb	r1, [r3, #0]
 8007ade:	4608      	mov	r0, r1
 8007ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <__sfputs_r>:
 8007ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae8:	4606      	mov	r6, r0
 8007aea:	460f      	mov	r7, r1
 8007aec:	4614      	mov	r4, r2
 8007aee:	18d5      	adds	r5, r2, r3
 8007af0:	42ac      	cmp	r4, r5
 8007af2:	d101      	bne.n	8007af8 <__sfputs_r+0x12>
 8007af4:	2000      	movs	r0, #0
 8007af6:	e007      	b.n	8007b08 <__sfputs_r+0x22>
 8007af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afc:	463a      	mov	r2, r7
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7ff ffda 	bl	8007ab8 <__sfputc_r>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d1f3      	bne.n	8007af0 <__sfputs_r+0xa>
 8007b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b0c <_vfiprintf_r>:
 8007b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b10:	460d      	mov	r5, r1
 8007b12:	b09d      	sub	sp, #116	; 0x74
 8007b14:	4614      	mov	r4, r2
 8007b16:	4698      	mov	r8, r3
 8007b18:	4606      	mov	r6, r0
 8007b1a:	b118      	cbz	r0, 8007b24 <_vfiprintf_r+0x18>
 8007b1c:	6a03      	ldr	r3, [r0, #32]
 8007b1e:	b90b      	cbnz	r3, 8007b24 <_vfiprintf_r+0x18>
 8007b20:	f7ff fb2e 	bl	8007180 <__sinit>
 8007b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b26:	07d9      	lsls	r1, r3, #31
 8007b28:	d405      	bmi.n	8007b36 <_vfiprintf_r+0x2a>
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	059a      	lsls	r2, r3, #22
 8007b2e:	d402      	bmi.n	8007b36 <_vfiprintf_r+0x2a>
 8007b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b32:	f7ff fd6e 	bl	8007612 <__retarget_lock_acquire_recursive>
 8007b36:	89ab      	ldrh	r3, [r5, #12]
 8007b38:	071b      	lsls	r3, r3, #28
 8007b3a:	d501      	bpl.n	8007b40 <_vfiprintf_r+0x34>
 8007b3c:	692b      	ldr	r3, [r5, #16]
 8007b3e:	b99b      	cbnz	r3, 8007b68 <_vfiprintf_r+0x5c>
 8007b40:	4629      	mov	r1, r5
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff fc94 	bl	8007470 <__swsetup_r>
 8007b48:	b170      	cbz	r0, 8007b68 <_vfiprintf_r+0x5c>
 8007b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b4c:	07dc      	lsls	r4, r3, #31
 8007b4e:	d504      	bpl.n	8007b5a <_vfiprintf_r+0x4e>
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	b01d      	add	sp, #116	; 0x74
 8007b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5a:	89ab      	ldrh	r3, [r5, #12]
 8007b5c:	0598      	lsls	r0, r3, #22
 8007b5e:	d4f7      	bmi.n	8007b50 <_vfiprintf_r+0x44>
 8007b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b62:	f7ff fd57 	bl	8007614 <__retarget_lock_release_recursive>
 8007b66:	e7f3      	b.n	8007b50 <_vfiprintf_r+0x44>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6c:	2320      	movs	r3, #32
 8007b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b76:	2330      	movs	r3, #48	; 0x30
 8007b78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007d2c <_vfiprintf_r+0x220>
 8007b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b80:	f04f 0901 	mov.w	r9, #1
 8007b84:	4623      	mov	r3, r4
 8007b86:	469a      	mov	sl, r3
 8007b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b8c:	b10a      	cbz	r2, 8007b92 <_vfiprintf_r+0x86>
 8007b8e:	2a25      	cmp	r2, #37	; 0x25
 8007b90:	d1f9      	bne.n	8007b86 <_vfiprintf_r+0x7a>
 8007b92:	ebba 0b04 	subs.w	fp, sl, r4
 8007b96:	d00b      	beq.n	8007bb0 <_vfiprintf_r+0xa4>
 8007b98:	465b      	mov	r3, fp
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff ffa1 	bl	8007ae6 <__sfputs_r>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f000 80a9 	beq.w	8007cfc <_vfiprintf_r+0x1f0>
 8007baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bac:	445a      	add	r2, fp
 8007bae:	9209      	str	r2, [sp, #36]	; 0x24
 8007bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 80a1 	beq.w	8007cfc <_vfiprintf_r+0x1f0>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc4:	f10a 0a01 	add.w	sl, sl, #1
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	9307      	str	r3, [sp, #28]
 8007bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007bd2:	4654      	mov	r4, sl
 8007bd4:	2205      	movs	r2, #5
 8007bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bda:	4854      	ldr	r0, [pc, #336]	; (8007d2c <_vfiprintf_r+0x220>)
 8007bdc:	f7f8 fb10 	bl	8000200 <memchr>
 8007be0:	9a04      	ldr	r2, [sp, #16]
 8007be2:	b9d8      	cbnz	r0, 8007c1c <_vfiprintf_r+0x110>
 8007be4:	06d1      	lsls	r1, r2, #27
 8007be6:	bf44      	itt	mi
 8007be8:	2320      	movmi	r3, #32
 8007bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bee:	0713      	lsls	r3, r2, #28
 8007bf0:	bf44      	itt	mi
 8007bf2:	232b      	movmi	r3, #43	; 0x2b
 8007bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfe:	d015      	beq.n	8007c2c <_vfiprintf_r+0x120>
 8007c00:	9a07      	ldr	r2, [sp, #28]
 8007c02:	4654      	mov	r4, sl
 8007c04:	2000      	movs	r0, #0
 8007c06:	f04f 0c0a 	mov.w	ip, #10
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c10:	3b30      	subs	r3, #48	; 0x30
 8007c12:	2b09      	cmp	r3, #9
 8007c14:	d94d      	bls.n	8007cb2 <_vfiprintf_r+0x1a6>
 8007c16:	b1b0      	cbz	r0, 8007c46 <_vfiprintf_r+0x13a>
 8007c18:	9207      	str	r2, [sp, #28]
 8007c1a:	e014      	b.n	8007c46 <_vfiprintf_r+0x13a>
 8007c1c:	eba0 0308 	sub.w	r3, r0, r8
 8007c20:	fa09 f303 	lsl.w	r3, r9, r3
 8007c24:	4313      	orrs	r3, r2
 8007c26:	9304      	str	r3, [sp, #16]
 8007c28:	46a2      	mov	sl, r4
 8007c2a:	e7d2      	b.n	8007bd2 <_vfiprintf_r+0xc6>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1d19      	adds	r1, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	9103      	str	r1, [sp, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bfbb      	ittet	lt
 8007c38:	425b      	neglt	r3, r3
 8007c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c3e:	9307      	strge	r3, [sp, #28]
 8007c40:	9307      	strlt	r3, [sp, #28]
 8007c42:	bfb8      	it	lt
 8007c44:	9204      	strlt	r2, [sp, #16]
 8007c46:	7823      	ldrb	r3, [r4, #0]
 8007c48:	2b2e      	cmp	r3, #46	; 0x2e
 8007c4a:	d10c      	bne.n	8007c66 <_vfiprintf_r+0x15a>
 8007c4c:	7863      	ldrb	r3, [r4, #1]
 8007c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c50:	d134      	bne.n	8007cbc <_vfiprintf_r+0x1b0>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	1d1a      	adds	r2, r3, #4
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	9203      	str	r2, [sp, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	bfb8      	it	lt
 8007c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c62:	3402      	adds	r4, #2
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007d3c <_vfiprintf_r+0x230>
 8007c6a:	7821      	ldrb	r1, [r4, #0]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	4650      	mov	r0, sl
 8007c70:	f7f8 fac6 	bl	8000200 <memchr>
 8007c74:	b138      	cbz	r0, 8007c86 <_vfiprintf_r+0x17a>
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	eba0 000a 	sub.w	r0, r0, sl
 8007c7c:	2240      	movs	r2, #64	; 0x40
 8007c7e:	4082      	lsls	r2, r0
 8007c80:	4313      	orrs	r3, r2
 8007c82:	3401      	adds	r4, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	4829      	ldr	r0, [pc, #164]	; (8007d30 <_vfiprintf_r+0x224>)
 8007c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c90:	2206      	movs	r2, #6
 8007c92:	f7f8 fab5 	bl	8000200 <memchr>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d03f      	beq.n	8007d1a <_vfiprintf_r+0x20e>
 8007c9a:	4b26      	ldr	r3, [pc, #152]	; (8007d34 <_vfiprintf_r+0x228>)
 8007c9c:	bb1b      	cbnz	r3, 8007ce6 <_vfiprintf_r+0x1da>
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	3307      	adds	r3, #7
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cac:	443b      	add	r3, r7
 8007cae:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb0:	e768      	b.n	8007b84 <_vfiprintf_r+0x78>
 8007cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	2001      	movs	r0, #1
 8007cba:	e7a6      	b.n	8007c0a <_vfiprintf_r+0xfe>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	3401      	adds	r4, #1
 8007cc0:	9305      	str	r3, [sp, #20]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f04f 0c0a 	mov.w	ip, #10
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cce:	3a30      	subs	r2, #48	; 0x30
 8007cd0:	2a09      	cmp	r2, #9
 8007cd2:	d903      	bls.n	8007cdc <_vfiprintf_r+0x1d0>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0c6      	beq.n	8007c66 <_vfiprintf_r+0x15a>
 8007cd8:	9105      	str	r1, [sp, #20]
 8007cda:	e7c4      	b.n	8007c66 <_vfiprintf_r+0x15a>
 8007cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e7f0      	b.n	8007cc8 <_vfiprintf_r+0x1bc>
 8007ce6:	ab03      	add	r3, sp, #12
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	462a      	mov	r2, r5
 8007cec:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <_vfiprintf_r+0x22c>)
 8007cee:	a904      	add	r1, sp, #16
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f3af 8000 	nop.w
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	1c78      	adds	r0, r7, #1
 8007cfa:	d1d6      	bne.n	8007caa <_vfiprintf_r+0x19e>
 8007cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cfe:	07d9      	lsls	r1, r3, #31
 8007d00:	d405      	bmi.n	8007d0e <_vfiprintf_r+0x202>
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	059a      	lsls	r2, r3, #22
 8007d06:	d402      	bmi.n	8007d0e <_vfiprintf_r+0x202>
 8007d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d0a:	f7ff fc83 	bl	8007614 <__retarget_lock_release_recursive>
 8007d0e:	89ab      	ldrh	r3, [r5, #12]
 8007d10:	065b      	lsls	r3, r3, #25
 8007d12:	f53f af1d 	bmi.w	8007b50 <_vfiprintf_r+0x44>
 8007d16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d18:	e71c      	b.n	8007b54 <_vfiprintf_r+0x48>
 8007d1a:	ab03      	add	r3, sp, #12
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	462a      	mov	r2, r5
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <_vfiprintf_r+0x22c>)
 8007d22:	a904      	add	r1, sp, #16
 8007d24:	4630      	mov	r0, r6
 8007d26:	f000 f879 	bl	8007e1c <_printf_i>
 8007d2a:	e7e4      	b.n	8007cf6 <_vfiprintf_r+0x1ea>
 8007d2c:	080084bc 	.word	0x080084bc
 8007d30:	080084c6 	.word	0x080084c6
 8007d34:	00000000 	.word	0x00000000
 8007d38:	08007ae7 	.word	0x08007ae7
 8007d3c:	080084c2 	.word	0x080084c2

08007d40 <_printf_common>:
 8007d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	4616      	mov	r6, r2
 8007d46:	4699      	mov	r9, r3
 8007d48:	688a      	ldr	r2, [r1, #8]
 8007d4a:	690b      	ldr	r3, [r1, #16]
 8007d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	bfb8      	it	lt
 8007d54:	4613      	movlt	r3, r2
 8007d56:	6033      	str	r3, [r6, #0]
 8007d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	b10a      	cbz	r2, 8007d66 <_printf_common+0x26>
 8007d62:	3301      	adds	r3, #1
 8007d64:	6033      	str	r3, [r6, #0]
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	0699      	lsls	r1, r3, #26
 8007d6a:	bf42      	ittt	mi
 8007d6c:	6833      	ldrmi	r3, [r6, #0]
 8007d6e:	3302      	addmi	r3, #2
 8007d70:	6033      	strmi	r3, [r6, #0]
 8007d72:	6825      	ldr	r5, [r4, #0]
 8007d74:	f015 0506 	ands.w	r5, r5, #6
 8007d78:	d106      	bne.n	8007d88 <_printf_common+0x48>
 8007d7a:	f104 0a19 	add.w	sl, r4, #25
 8007d7e:	68e3      	ldr	r3, [r4, #12]
 8007d80:	6832      	ldr	r2, [r6, #0]
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	42ab      	cmp	r3, r5
 8007d86:	dc26      	bgt.n	8007dd6 <_printf_common+0x96>
 8007d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d8c:	1e13      	subs	r3, r2, #0
 8007d8e:	6822      	ldr	r2, [r4, #0]
 8007d90:	bf18      	it	ne
 8007d92:	2301      	movne	r3, #1
 8007d94:	0692      	lsls	r2, r2, #26
 8007d96:	d42b      	bmi.n	8007df0 <_printf_common+0xb0>
 8007d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	4638      	mov	r0, r7
 8007da0:	47c0      	blx	r8
 8007da2:	3001      	adds	r0, #1
 8007da4:	d01e      	beq.n	8007de4 <_printf_common+0xa4>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	6922      	ldr	r2, [r4, #16]
 8007daa:	f003 0306 	and.w	r3, r3, #6
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	bf02      	ittt	eq
 8007db2:	68e5      	ldreq	r5, [r4, #12]
 8007db4:	6833      	ldreq	r3, [r6, #0]
 8007db6:	1aed      	subeq	r5, r5, r3
 8007db8:	68a3      	ldr	r3, [r4, #8]
 8007dba:	bf0c      	ite	eq
 8007dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dc0:	2500      	movne	r5, #0
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	bfc4      	itt	gt
 8007dc6:	1a9b      	subgt	r3, r3, r2
 8007dc8:	18ed      	addgt	r5, r5, r3
 8007dca:	2600      	movs	r6, #0
 8007dcc:	341a      	adds	r4, #26
 8007dce:	42b5      	cmp	r5, r6
 8007dd0:	d11a      	bne.n	8007e08 <_printf_common+0xc8>
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	e008      	b.n	8007de8 <_printf_common+0xa8>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4652      	mov	r2, sl
 8007dda:	4649      	mov	r1, r9
 8007ddc:	4638      	mov	r0, r7
 8007dde:	47c0      	blx	r8
 8007de0:	3001      	adds	r0, #1
 8007de2:	d103      	bne.n	8007dec <_printf_common+0xac>
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dec:	3501      	adds	r5, #1
 8007dee:	e7c6      	b.n	8007d7e <_printf_common+0x3e>
 8007df0:	18e1      	adds	r1, r4, r3
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	2030      	movs	r0, #48	; 0x30
 8007df6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dfa:	4422      	add	r2, r4
 8007dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e04:	3302      	adds	r3, #2
 8007e06:	e7c7      	b.n	8007d98 <_printf_common+0x58>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c0      	blx	r8
 8007e12:	3001      	adds	r0, #1
 8007e14:	d0e6      	beq.n	8007de4 <_printf_common+0xa4>
 8007e16:	3601      	adds	r6, #1
 8007e18:	e7d9      	b.n	8007dce <_printf_common+0x8e>
	...

08007e1c <_printf_i>:
 8007e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	7e0f      	ldrb	r7, [r1, #24]
 8007e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e24:	2f78      	cmp	r7, #120	; 0x78
 8007e26:	4691      	mov	r9, r2
 8007e28:	4680      	mov	r8, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	469a      	mov	sl, r3
 8007e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e32:	d807      	bhi.n	8007e44 <_printf_i+0x28>
 8007e34:	2f62      	cmp	r7, #98	; 0x62
 8007e36:	d80a      	bhi.n	8007e4e <_printf_i+0x32>
 8007e38:	2f00      	cmp	r7, #0
 8007e3a:	f000 80d4 	beq.w	8007fe6 <_printf_i+0x1ca>
 8007e3e:	2f58      	cmp	r7, #88	; 0x58
 8007e40:	f000 80c0 	beq.w	8007fc4 <_printf_i+0x1a8>
 8007e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e4c:	e03a      	b.n	8007ec4 <_printf_i+0xa8>
 8007e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e52:	2b15      	cmp	r3, #21
 8007e54:	d8f6      	bhi.n	8007e44 <_printf_i+0x28>
 8007e56:	a101      	add	r1, pc, #4	; (adr r1, 8007e5c <_printf_i+0x40>)
 8007e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e5c:	08007eb5 	.word	0x08007eb5
 8007e60:	08007ec9 	.word	0x08007ec9
 8007e64:	08007e45 	.word	0x08007e45
 8007e68:	08007e45 	.word	0x08007e45
 8007e6c:	08007e45 	.word	0x08007e45
 8007e70:	08007e45 	.word	0x08007e45
 8007e74:	08007ec9 	.word	0x08007ec9
 8007e78:	08007e45 	.word	0x08007e45
 8007e7c:	08007e45 	.word	0x08007e45
 8007e80:	08007e45 	.word	0x08007e45
 8007e84:	08007e45 	.word	0x08007e45
 8007e88:	08007fcd 	.word	0x08007fcd
 8007e8c:	08007ef5 	.word	0x08007ef5
 8007e90:	08007f87 	.word	0x08007f87
 8007e94:	08007e45 	.word	0x08007e45
 8007e98:	08007e45 	.word	0x08007e45
 8007e9c:	08007fef 	.word	0x08007fef
 8007ea0:	08007e45 	.word	0x08007e45
 8007ea4:	08007ef5 	.word	0x08007ef5
 8007ea8:	08007e45 	.word	0x08007e45
 8007eac:	08007e45 	.word	0x08007e45
 8007eb0:	08007f8f 	.word	0x08007f8f
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	1d1a      	adds	r2, r3, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	602a      	str	r2, [r5, #0]
 8007ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e09f      	b.n	8008008 <_printf_i+0x1ec>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	682b      	ldr	r3, [r5, #0]
 8007ecc:	0607      	lsls	r7, r0, #24
 8007ece:	f103 0104 	add.w	r1, r3, #4
 8007ed2:	6029      	str	r1, [r5, #0]
 8007ed4:	d501      	bpl.n	8007eda <_printf_i+0xbe>
 8007ed6:	681e      	ldr	r6, [r3, #0]
 8007ed8:	e003      	b.n	8007ee2 <_printf_i+0xc6>
 8007eda:	0646      	lsls	r6, r0, #25
 8007edc:	d5fb      	bpl.n	8007ed6 <_printf_i+0xba>
 8007ede:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ee2:	2e00      	cmp	r6, #0
 8007ee4:	da03      	bge.n	8007eee <_printf_i+0xd2>
 8007ee6:	232d      	movs	r3, #45	; 0x2d
 8007ee8:	4276      	negs	r6, r6
 8007eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eee:	485a      	ldr	r0, [pc, #360]	; (8008058 <_printf_i+0x23c>)
 8007ef0:	230a      	movs	r3, #10
 8007ef2:	e012      	b.n	8007f1a <_printf_i+0xfe>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	6820      	ldr	r0, [r4, #0]
 8007ef8:	1d19      	adds	r1, r3, #4
 8007efa:	6029      	str	r1, [r5, #0]
 8007efc:	0605      	lsls	r5, r0, #24
 8007efe:	d501      	bpl.n	8007f04 <_printf_i+0xe8>
 8007f00:	681e      	ldr	r6, [r3, #0]
 8007f02:	e002      	b.n	8007f0a <_printf_i+0xee>
 8007f04:	0641      	lsls	r1, r0, #25
 8007f06:	d5fb      	bpl.n	8007f00 <_printf_i+0xe4>
 8007f08:	881e      	ldrh	r6, [r3, #0]
 8007f0a:	4853      	ldr	r0, [pc, #332]	; (8008058 <_printf_i+0x23c>)
 8007f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f0e:	bf0c      	ite	eq
 8007f10:	2308      	moveq	r3, #8
 8007f12:	230a      	movne	r3, #10
 8007f14:	2100      	movs	r1, #0
 8007f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f1a:	6865      	ldr	r5, [r4, #4]
 8007f1c:	60a5      	str	r5, [r4, #8]
 8007f1e:	2d00      	cmp	r5, #0
 8007f20:	bfa2      	ittt	ge
 8007f22:	6821      	ldrge	r1, [r4, #0]
 8007f24:	f021 0104 	bicge.w	r1, r1, #4
 8007f28:	6021      	strge	r1, [r4, #0]
 8007f2a:	b90e      	cbnz	r6, 8007f30 <_printf_i+0x114>
 8007f2c:	2d00      	cmp	r5, #0
 8007f2e:	d04b      	beq.n	8007fc8 <_printf_i+0x1ac>
 8007f30:	4615      	mov	r5, r2
 8007f32:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f36:	fb03 6711 	mls	r7, r3, r1, r6
 8007f3a:	5dc7      	ldrb	r7, [r0, r7]
 8007f3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f40:	4637      	mov	r7, r6
 8007f42:	42bb      	cmp	r3, r7
 8007f44:	460e      	mov	r6, r1
 8007f46:	d9f4      	bls.n	8007f32 <_printf_i+0x116>
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d10b      	bne.n	8007f64 <_printf_i+0x148>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	07de      	lsls	r6, r3, #31
 8007f50:	d508      	bpl.n	8007f64 <_printf_i+0x148>
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	6861      	ldr	r1, [r4, #4]
 8007f56:	4299      	cmp	r1, r3
 8007f58:	bfde      	ittt	le
 8007f5a:	2330      	movle	r3, #48	; 0x30
 8007f5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f64:	1b52      	subs	r2, r2, r5
 8007f66:	6122      	str	r2, [r4, #16]
 8007f68:	f8cd a000 	str.w	sl, [sp]
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	aa03      	add	r2, sp, #12
 8007f70:	4621      	mov	r1, r4
 8007f72:	4640      	mov	r0, r8
 8007f74:	f7ff fee4 	bl	8007d40 <_printf_common>
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d14a      	bne.n	8008012 <_printf_i+0x1f6>
 8007f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f80:	b004      	add	sp, #16
 8007f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	f043 0320 	orr.w	r3, r3, #32
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	4833      	ldr	r0, [pc, #204]	; (800805c <_printf_i+0x240>)
 8007f90:	2778      	movs	r7, #120	; 0x78
 8007f92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	6829      	ldr	r1, [r5, #0]
 8007f9a:	061f      	lsls	r7, r3, #24
 8007f9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fa0:	d402      	bmi.n	8007fa8 <_printf_i+0x18c>
 8007fa2:	065f      	lsls	r7, r3, #25
 8007fa4:	bf48      	it	mi
 8007fa6:	b2b6      	uxthmi	r6, r6
 8007fa8:	07df      	lsls	r7, r3, #31
 8007faa:	bf48      	it	mi
 8007fac:	f043 0320 	orrmi.w	r3, r3, #32
 8007fb0:	6029      	str	r1, [r5, #0]
 8007fb2:	bf48      	it	mi
 8007fb4:	6023      	strmi	r3, [r4, #0]
 8007fb6:	b91e      	cbnz	r6, 8007fc0 <_printf_i+0x1a4>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	f023 0320 	bic.w	r3, r3, #32
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	2310      	movs	r3, #16
 8007fc2:	e7a7      	b.n	8007f14 <_printf_i+0xf8>
 8007fc4:	4824      	ldr	r0, [pc, #144]	; (8008058 <_printf_i+0x23c>)
 8007fc6:	e7e4      	b.n	8007f92 <_printf_i+0x176>
 8007fc8:	4615      	mov	r5, r2
 8007fca:	e7bd      	b.n	8007f48 <_printf_i+0x12c>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	6826      	ldr	r6, [r4, #0]
 8007fd0:	6961      	ldr	r1, [r4, #20]
 8007fd2:	1d18      	adds	r0, r3, #4
 8007fd4:	6028      	str	r0, [r5, #0]
 8007fd6:	0635      	lsls	r5, r6, #24
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	d501      	bpl.n	8007fe0 <_printf_i+0x1c4>
 8007fdc:	6019      	str	r1, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <_printf_i+0x1ca>
 8007fe0:	0670      	lsls	r0, r6, #25
 8007fe2:	d5fb      	bpl.n	8007fdc <_printf_i+0x1c0>
 8007fe4:	8019      	strh	r1, [r3, #0]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6123      	str	r3, [r4, #16]
 8007fea:	4615      	mov	r5, r2
 8007fec:	e7bc      	b.n	8007f68 <_printf_i+0x14c>
 8007fee:	682b      	ldr	r3, [r5, #0]
 8007ff0:	1d1a      	adds	r2, r3, #4
 8007ff2:	602a      	str	r2, [r5, #0]
 8007ff4:	681d      	ldr	r5, [r3, #0]
 8007ff6:	6862      	ldr	r2, [r4, #4]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f7f8 f900 	bl	8000200 <memchr>
 8008000:	b108      	cbz	r0, 8008006 <_printf_i+0x1ea>
 8008002:	1b40      	subs	r0, r0, r5
 8008004:	6060      	str	r0, [r4, #4]
 8008006:	6863      	ldr	r3, [r4, #4]
 8008008:	6123      	str	r3, [r4, #16]
 800800a:	2300      	movs	r3, #0
 800800c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008010:	e7aa      	b.n	8007f68 <_printf_i+0x14c>
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	462a      	mov	r2, r5
 8008016:	4649      	mov	r1, r9
 8008018:	4640      	mov	r0, r8
 800801a:	47d0      	blx	sl
 800801c:	3001      	adds	r0, #1
 800801e:	d0ad      	beq.n	8007f7c <_printf_i+0x160>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	079b      	lsls	r3, r3, #30
 8008024:	d413      	bmi.n	800804e <_printf_i+0x232>
 8008026:	68e0      	ldr	r0, [r4, #12]
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	4298      	cmp	r0, r3
 800802c:	bfb8      	it	lt
 800802e:	4618      	movlt	r0, r3
 8008030:	e7a6      	b.n	8007f80 <_printf_i+0x164>
 8008032:	2301      	movs	r3, #1
 8008034:	4632      	mov	r2, r6
 8008036:	4649      	mov	r1, r9
 8008038:	4640      	mov	r0, r8
 800803a:	47d0      	blx	sl
 800803c:	3001      	adds	r0, #1
 800803e:	d09d      	beq.n	8007f7c <_printf_i+0x160>
 8008040:	3501      	adds	r5, #1
 8008042:	68e3      	ldr	r3, [r4, #12]
 8008044:	9903      	ldr	r1, [sp, #12]
 8008046:	1a5b      	subs	r3, r3, r1
 8008048:	42ab      	cmp	r3, r5
 800804a:	dcf2      	bgt.n	8008032 <_printf_i+0x216>
 800804c:	e7eb      	b.n	8008026 <_printf_i+0x20a>
 800804e:	2500      	movs	r5, #0
 8008050:	f104 0619 	add.w	r6, r4, #25
 8008054:	e7f5      	b.n	8008042 <_printf_i+0x226>
 8008056:	bf00      	nop
 8008058:	080084cd 	.word	0x080084cd
 800805c:	080084de 	.word	0x080084de

08008060 <__sflush_r>:
 8008060:	898a      	ldrh	r2, [r1, #12]
 8008062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008066:	4605      	mov	r5, r0
 8008068:	0710      	lsls	r0, r2, #28
 800806a:	460c      	mov	r4, r1
 800806c:	d458      	bmi.n	8008120 <__sflush_r+0xc0>
 800806e:	684b      	ldr	r3, [r1, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	dc05      	bgt.n	8008080 <__sflush_r+0x20>
 8008074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	dc02      	bgt.n	8008080 <__sflush_r+0x20>
 800807a:	2000      	movs	r0, #0
 800807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008082:	2e00      	cmp	r6, #0
 8008084:	d0f9      	beq.n	800807a <__sflush_r+0x1a>
 8008086:	2300      	movs	r3, #0
 8008088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800808c:	682f      	ldr	r7, [r5, #0]
 800808e:	6a21      	ldr	r1, [r4, #32]
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	d032      	beq.n	80080fa <__sflush_r+0x9a>
 8008094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	075a      	lsls	r2, r3, #29
 800809a:	d505      	bpl.n	80080a8 <__sflush_r+0x48>
 800809c:	6863      	ldr	r3, [r4, #4]
 800809e:	1ac0      	subs	r0, r0, r3
 80080a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080a2:	b10b      	cbz	r3, 80080a8 <__sflush_r+0x48>
 80080a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a6:	1ac0      	subs	r0, r0, r3
 80080a8:	2300      	movs	r3, #0
 80080aa:	4602      	mov	r2, r0
 80080ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ae:	6a21      	ldr	r1, [r4, #32]
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b0      	blx	r6
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	d106      	bne.n	80080c8 <__sflush_r+0x68>
 80080ba:	6829      	ldr	r1, [r5, #0]
 80080bc:	291d      	cmp	r1, #29
 80080be:	d82b      	bhi.n	8008118 <__sflush_r+0xb8>
 80080c0:	4a29      	ldr	r2, [pc, #164]	; (8008168 <__sflush_r+0x108>)
 80080c2:	410a      	asrs	r2, r1
 80080c4:	07d6      	lsls	r6, r2, #31
 80080c6:	d427      	bmi.n	8008118 <__sflush_r+0xb8>
 80080c8:	2200      	movs	r2, #0
 80080ca:	6062      	str	r2, [r4, #4]
 80080cc:	04d9      	lsls	r1, r3, #19
 80080ce:	6922      	ldr	r2, [r4, #16]
 80080d0:	6022      	str	r2, [r4, #0]
 80080d2:	d504      	bpl.n	80080de <__sflush_r+0x7e>
 80080d4:	1c42      	adds	r2, r0, #1
 80080d6:	d101      	bne.n	80080dc <__sflush_r+0x7c>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b903      	cbnz	r3, 80080de <__sflush_r+0x7e>
 80080dc:	6560      	str	r0, [r4, #84]	; 0x54
 80080de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080e0:	602f      	str	r7, [r5, #0]
 80080e2:	2900      	cmp	r1, #0
 80080e4:	d0c9      	beq.n	800807a <__sflush_r+0x1a>
 80080e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ea:	4299      	cmp	r1, r3
 80080ec:	d002      	beq.n	80080f4 <__sflush_r+0x94>
 80080ee:	4628      	mov	r0, r5
 80080f0:	f7ff fa92 	bl	8007618 <_free_r>
 80080f4:	2000      	movs	r0, #0
 80080f6:	6360      	str	r0, [r4, #52]	; 0x34
 80080f8:	e7c0      	b.n	800807c <__sflush_r+0x1c>
 80080fa:	2301      	movs	r3, #1
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b0      	blx	r6
 8008100:	1c41      	adds	r1, r0, #1
 8008102:	d1c8      	bne.n	8008096 <__sflush_r+0x36>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0c5      	beq.n	8008096 <__sflush_r+0x36>
 800810a:	2b1d      	cmp	r3, #29
 800810c:	d001      	beq.n	8008112 <__sflush_r+0xb2>
 800810e:	2b16      	cmp	r3, #22
 8008110:	d101      	bne.n	8008116 <__sflush_r+0xb6>
 8008112:	602f      	str	r7, [r5, #0]
 8008114:	e7b1      	b.n	800807a <__sflush_r+0x1a>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800811c:	81a3      	strh	r3, [r4, #12]
 800811e:	e7ad      	b.n	800807c <__sflush_r+0x1c>
 8008120:	690f      	ldr	r7, [r1, #16]
 8008122:	2f00      	cmp	r7, #0
 8008124:	d0a9      	beq.n	800807a <__sflush_r+0x1a>
 8008126:	0793      	lsls	r3, r2, #30
 8008128:	680e      	ldr	r6, [r1, #0]
 800812a:	bf08      	it	eq
 800812c:	694b      	ldreq	r3, [r1, #20]
 800812e:	600f      	str	r7, [r1, #0]
 8008130:	bf18      	it	ne
 8008132:	2300      	movne	r3, #0
 8008134:	eba6 0807 	sub.w	r8, r6, r7
 8008138:	608b      	str	r3, [r1, #8]
 800813a:	f1b8 0f00 	cmp.w	r8, #0
 800813e:	dd9c      	ble.n	800807a <__sflush_r+0x1a>
 8008140:	6a21      	ldr	r1, [r4, #32]
 8008142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008144:	4643      	mov	r3, r8
 8008146:	463a      	mov	r2, r7
 8008148:	4628      	mov	r0, r5
 800814a:	47b0      	blx	r6
 800814c:	2800      	cmp	r0, #0
 800814e:	dc06      	bgt.n	800815e <__sflush_r+0xfe>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	f04f 30ff 	mov.w	r0, #4294967295
 800815c:	e78e      	b.n	800807c <__sflush_r+0x1c>
 800815e:	4407      	add	r7, r0
 8008160:	eba8 0800 	sub.w	r8, r8, r0
 8008164:	e7e9      	b.n	800813a <__sflush_r+0xda>
 8008166:	bf00      	nop
 8008168:	dfbffffe 	.word	0xdfbffffe

0800816c <_fflush_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	690b      	ldr	r3, [r1, #16]
 8008170:	4605      	mov	r5, r0
 8008172:	460c      	mov	r4, r1
 8008174:	b913      	cbnz	r3, 800817c <_fflush_r+0x10>
 8008176:	2500      	movs	r5, #0
 8008178:	4628      	mov	r0, r5
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	b118      	cbz	r0, 8008186 <_fflush_r+0x1a>
 800817e:	6a03      	ldr	r3, [r0, #32]
 8008180:	b90b      	cbnz	r3, 8008186 <_fflush_r+0x1a>
 8008182:	f7fe fffd 	bl	8007180 <__sinit>
 8008186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0f3      	beq.n	8008176 <_fflush_r+0xa>
 800818e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008190:	07d0      	lsls	r0, r2, #31
 8008192:	d404      	bmi.n	800819e <_fflush_r+0x32>
 8008194:	0599      	lsls	r1, r3, #22
 8008196:	d402      	bmi.n	800819e <_fflush_r+0x32>
 8008198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800819a:	f7ff fa3a 	bl	8007612 <__retarget_lock_acquire_recursive>
 800819e:	4628      	mov	r0, r5
 80081a0:	4621      	mov	r1, r4
 80081a2:	f7ff ff5d 	bl	8008060 <__sflush_r>
 80081a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081a8:	07da      	lsls	r2, r3, #31
 80081aa:	4605      	mov	r5, r0
 80081ac:	d4e4      	bmi.n	8008178 <_fflush_r+0xc>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	059b      	lsls	r3, r3, #22
 80081b2:	d4e1      	bmi.n	8008178 <_fflush_r+0xc>
 80081b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b6:	f7ff fa2d 	bl	8007614 <__retarget_lock_release_recursive>
 80081ba:	e7dd      	b.n	8008178 <_fflush_r+0xc>

080081bc <__swhatbuf_r>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	460c      	mov	r4, r1
 80081c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c4:	2900      	cmp	r1, #0
 80081c6:	b096      	sub	sp, #88	; 0x58
 80081c8:	4615      	mov	r5, r2
 80081ca:	461e      	mov	r6, r3
 80081cc:	da0d      	bge.n	80081ea <__swhatbuf_r+0x2e>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081d4:	f04f 0100 	mov.w	r1, #0
 80081d8:	bf0c      	ite	eq
 80081da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081de:	2340      	movne	r3, #64	; 0x40
 80081e0:	2000      	movs	r0, #0
 80081e2:	6031      	str	r1, [r6, #0]
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	b016      	add	sp, #88	; 0x58
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	466a      	mov	r2, sp
 80081ec:	f000 f862 	bl	80082b4 <_fstat_r>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	dbec      	blt.n	80081ce <__swhatbuf_r+0x12>
 80081f4:	9901      	ldr	r1, [sp, #4]
 80081f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081fe:	4259      	negs	r1, r3
 8008200:	4159      	adcs	r1, r3
 8008202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008206:	e7eb      	b.n	80081e0 <__swhatbuf_r+0x24>

08008208 <__smakebuf_r>:
 8008208:	898b      	ldrh	r3, [r1, #12]
 800820a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800820c:	079d      	lsls	r5, r3, #30
 800820e:	4606      	mov	r6, r0
 8008210:	460c      	mov	r4, r1
 8008212:	d507      	bpl.n	8008224 <__smakebuf_r+0x1c>
 8008214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	6123      	str	r3, [r4, #16]
 800821c:	2301      	movs	r3, #1
 800821e:	6163      	str	r3, [r4, #20]
 8008220:	b002      	add	sp, #8
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	ab01      	add	r3, sp, #4
 8008226:	466a      	mov	r2, sp
 8008228:	f7ff ffc8 	bl	80081bc <__swhatbuf_r>
 800822c:	9900      	ldr	r1, [sp, #0]
 800822e:	4605      	mov	r5, r0
 8008230:	4630      	mov	r0, r6
 8008232:	f7ff fa5d 	bl	80076f0 <_malloc_r>
 8008236:	b948      	cbnz	r0, 800824c <__smakebuf_r+0x44>
 8008238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823c:	059a      	lsls	r2, r3, #22
 800823e:	d4ef      	bmi.n	8008220 <__smakebuf_r+0x18>
 8008240:	f023 0303 	bic.w	r3, r3, #3
 8008244:	f043 0302 	orr.w	r3, r3, #2
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	e7e3      	b.n	8008214 <__smakebuf_r+0xc>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	6020      	str	r0, [r4, #0]
 8008250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	9b00      	ldr	r3, [sp, #0]
 8008258:	6163      	str	r3, [r4, #20]
 800825a:	9b01      	ldr	r3, [sp, #4]
 800825c:	6120      	str	r0, [r4, #16]
 800825e:	b15b      	cbz	r3, 8008278 <__smakebuf_r+0x70>
 8008260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008264:	4630      	mov	r0, r6
 8008266:	f000 f837 	bl	80082d8 <_isatty_r>
 800826a:	b128      	cbz	r0, 8008278 <__smakebuf_r+0x70>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f023 0303 	bic.w	r3, r3, #3
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	431d      	orrs	r5, r3
 800827c:	81a5      	strh	r5, [r4, #12]
 800827e:	e7cf      	b.n	8008220 <__smakebuf_r+0x18>

08008280 <memmove>:
 8008280:	4288      	cmp	r0, r1
 8008282:	b510      	push	{r4, lr}
 8008284:	eb01 0402 	add.w	r4, r1, r2
 8008288:	d902      	bls.n	8008290 <memmove+0x10>
 800828a:	4284      	cmp	r4, r0
 800828c:	4623      	mov	r3, r4
 800828e:	d807      	bhi.n	80082a0 <memmove+0x20>
 8008290:	1e43      	subs	r3, r0, #1
 8008292:	42a1      	cmp	r1, r4
 8008294:	d008      	beq.n	80082a8 <memmove+0x28>
 8008296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800829a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829e:	e7f8      	b.n	8008292 <memmove+0x12>
 80082a0:	4402      	add	r2, r0
 80082a2:	4601      	mov	r1, r0
 80082a4:	428a      	cmp	r2, r1
 80082a6:	d100      	bne.n	80082aa <memmove+0x2a>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082b2:	e7f7      	b.n	80082a4 <memmove+0x24>

080082b4 <_fstat_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d07      	ldr	r5, [pc, #28]	; (80082d4 <_fstat_r+0x20>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	f7f9 fc02 	bl	8001aca <_fstat>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	d102      	bne.n	80082d0 <_fstat_r+0x1c>
 80082ca:	682b      	ldr	r3, [r5, #0]
 80082cc:	b103      	cbz	r3, 80082d0 <_fstat_r+0x1c>
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
 80082d2:	bf00      	nop
 80082d4:	20000ad4 	.word	0x20000ad4

080082d8 <_isatty_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d06      	ldr	r5, [pc, #24]	; (80082f4 <_isatty_r+0x1c>)
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7f9 fc01 	bl	8001aea <_isatty>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_isatty_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_isatty_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	20000ad4 	.word	0x20000ad4

080082f8 <_sbrk_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d06      	ldr	r5, [pc, #24]	; (8008314 <_sbrk_r+0x1c>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	f7f9 fc0a 	bl	8001b1c <_sbrk>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_sbrk_r+0x1a>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_sbrk_r+0x1a>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20000ad4 	.word	0x20000ad4

08008318 <memcpy>:
 8008318:	440a      	add	r2, r1
 800831a:	4291      	cmp	r1, r2
 800831c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008320:	d100      	bne.n	8008324 <memcpy+0xc>
 8008322:	4770      	bx	lr
 8008324:	b510      	push	{r4, lr}
 8008326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800832a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800832e:	4291      	cmp	r1, r2
 8008330:	d1f9      	bne.n	8008326 <memcpy+0xe>
 8008332:	bd10      	pop	{r4, pc}

08008334 <_realloc_r>:
 8008334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008338:	4680      	mov	r8, r0
 800833a:	4614      	mov	r4, r2
 800833c:	460e      	mov	r6, r1
 800833e:	b921      	cbnz	r1, 800834a <_realloc_r+0x16>
 8008340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008344:	4611      	mov	r1, r2
 8008346:	f7ff b9d3 	b.w	80076f0 <_malloc_r>
 800834a:	b92a      	cbnz	r2, 8008358 <_realloc_r+0x24>
 800834c:	f7ff f964 	bl	8007618 <_free_r>
 8008350:	4625      	mov	r5, r4
 8008352:	4628      	mov	r0, r5
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008358:	f000 f81b 	bl	8008392 <_malloc_usable_size_r>
 800835c:	4284      	cmp	r4, r0
 800835e:	4607      	mov	r7, r0
 8008360:	d802      	bhi.n	8008368 <_realloc_r+0x34>
 8008362:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008366:	d812      	bhi.n	800838e <_realloc_r+0x5a>
 8008368:	4621      	mov	r1, r4
 800836a:	4640      	mov	r0, r8
 800836c:	f7ff f9c0 	bl	80076f0 <_malloc_r>
 8008370:	4605      	mov	r5, r0
 8008372:	2800      	cmp	r0, #0
 8008374:	d0ed      	beq.n	8008352 <_realloc_r+0x1e>
 8008376:	42bc      	cmp	r4, r7
 8008378:	4622      	mov	r2, r4
 800837a:	4631      	mov	r1, r6
 800837c:	bf28      	it	cs
 800837e:	463a      	movcs	r2, r7
 8008380:	f7ff ffca 	bl	8008318 <memcpy>
 8008384:	4631      	mov	r1, r6
 8008386:	4640      	mov	r0, r8
 8008388:	f7ff f946 	bl	8007618 <_free_r>
 800838c:	e7e1      	b.n	8008352 <_realloc_r+0x1e>
 800838e:	4635      	mov	r5, r6
 8008390:	e7df      	b.n	8008352 <_realloc_r+0x1e>

08008392 <_malloc_usable_size_r>:
 8008392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008396:	1f18      	subs	r0, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	bfbc      	itt	lt
 800839c:	580b      	ldrlt	r3, [r1, r0]
 800839e:	18c0      	addlt	r0, r0, r3
 80083a0:	4770      	bx	lr
	...

080083a4 <_init>:
 80083a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a6:	bf00      	nop
 80083a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083aa:	bc08      	pop	{r3}
 80083ac:	469e      	mov	lr, r3
 80083ae:	4770      	bx	lr

080083b0 <_fini>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	bf00      	nop
 80083b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b6:	bc08      	pop	{r3}
 80083b8:	469e      	mov	lr, r3
 80083ba:	4770      	bx	lr
