
STM_CLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800a968  0800a968  0001a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af7c  0800af7c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af84  0800af84  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af84  0800af84  0001af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800af8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000cb4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d2c  20000d2c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020545  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d9e  00000000  00000000  00040630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bf0  00000000  00000000  000453d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015b2  00000000  00000000  00046fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c57c  00000000  00000000  00048572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002775c  00000000  00000000  00074aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb06c  00000000  00000000  0009c24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007ea8  00000000  00000000  001972b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0019f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a950 	.word	0x0800a950

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800a950 	.word	0x0800a950

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005b0:	4a28      	ldr	r2, [pc, #160]	; (8000654 <MX_ADC1_Init+0xb8>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_ADC1_Init+0xbc>)
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005fe:	f002 f967 	bl	80028d0 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f001 fb92 	bl	8001d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800060c:	230a      	movs	r3, #10
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000614:	2303      	movs	r3, #3
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_ADC1_Init+0xb4>)
 800061e:	f002 fbe3 	bl	8002de8 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f001 fb82 	bl	8001d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062c:	2303      	movs	r3, #3
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC1_Init+0xb4>)
 800063a:	f002 fbd5 	bl	8002de8 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000644:	f001 fb74 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000094 	.word	0x20000094
 8000654:	40012000 	.word	0x40012000
 8000658:	0f000001 	.word	0x0f000001

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a3c      	ldr	r2, [pc, #240]	; (800076c <HAL_ADC_MspInit+0x110>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d171      	bne.n	8000762 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	4a3a      	ldr	r2, [pc, #232]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068c:	6453      	str	r3, [r2, #68]	; 0x44
 800068e:	4b38      	ldr	r3, [pc, #224]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a33      	ldr	r2, [pc, #204]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4823      	ldr	r0, [pc, #140]	; (8000774 <HAL_ADC_MspInit+0x118>)
 80006e6:	f004 f83b 	bl	8004760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ea:	2308      	movs	r3, #8
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	481e      	ldr	r0, [pc, #120]	; (8000778 <HAL_ADC_MspInit+0x11c>)
 80006fe:	f004 f82f 	bl	8004760 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <HAL_ADC_MspInit+0x124>)
 8000706:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <HAL_ADC_MspInit+0x120>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000728:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_ADC_MspInit+0x120>)
 800072c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000738:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_ADC_MspInit+0x120>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000748:	f002 ff1a 	bl	8003580 <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000752:	f001 faed 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_ADC_MspInit+0x120>)
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_ADC_MspInit+0x120>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40012000 	.word	0x40012000
 8000770:	40023800 	.word	0x40023800
 8000774:	40020800 	.word	0x40020800
 8000778:	40020000 	.word	0x40020000
 800077c:	200000dc 	.word	0x200000dc
 8000780:	40026410 	.word	0x40026410

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2038      	movs	r0, #56	; 0x38
 80007ac:	f002 feb1 	bl	8003512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b0:	2038      	movs	r0, #56	; 0x38
 80007b2:	f002 feca 	bl	800354a <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ETH_Init+0x84>)
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <MX_ETH_Init+0x88>)
 80007cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ETH_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_ETH_Init+0x8c>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ETH_Init+0x8c>)
 80007dc:	22e1      	movs	r2, #225	; 0xe1
 80007de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_ETH_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ETH_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_ETH_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ETH_Init+0x84>)
 80007f4:	4a16      	ldr	r2, [pc, #88]	; (8000850 <MX_ETH_Init+0x8c>)
 80007f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ETH_Init+0x84>)
 80007fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007fe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ETH_Init+0x84>)
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <MX_ETH_Init+0x90>)
 8000804:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_ETH_Init+0x84>)
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_ETH_Init+0x94>)
 800080a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_ETH_Init+0x84>)
 800080e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000812:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_ETH_Init+0x84>)
 8000816:	f003 fab5 	bl	8003d84 <HAL_ETH_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000820:	f001 fa86 	bl	8001d30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000824:	2238      	movs	r2, #56	; 0x38
 8000826:	2100      	movs	r1, #0
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x98>)
 800082a:	f009 f94f 	bl	8009acc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_ETH_Init+0x98>)
 8000830:	2221      	movs	r2, #33	; 0x21
 8000832:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_ETH_Init+0x98>)
 8000836:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800083a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_ETH_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002b4 	.word	0x200002b4
 800084c:	40028000 	.word	0x40028000
 8000850:	20000364 	.word	0x20000364
 8000854:	200001dc 	.word	0x200001dc
 8000858:	2000013c 	.word	0x2000013c
 800085c:	2000027c 	.word	0x2000027c

08000860 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a55      	ldr	r2, [pc, #340]	; (80009d4 <HAL_ETH_MspInit+0x174>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80a4 	bne.w	80009cc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
 8000888:	4b53      	ldr	r3, [pc, #332]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a52      	ldr	r2, [pc, #328]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800088e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a44      	ldr	r2, [pc, #272]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
 80008cc:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a3d      	ldr	r2, [pc, #244]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
 80008e8:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a36      	ldr	r2, [pc, #216]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000948:	2332      	movs	r3, #50	; 0x32
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000958:	230b      	movs	r3, #11
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	481e      	ldr	r0, [pc, #120]	; (80009dc <HAL_ETH_MspInit+0x17c>)
 8000964:	f003 fefc 	bl	8004760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000968:	2386      	movs	r3, #134	; 0x86
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000978:	230b      	movs	r3, #11
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4817      	ldr	r0, [pc, #92]	; (80009e0 <HAL_ETH_MspInit+0x180>)
 8000984:	f003 feec 	bl	8004760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099a:	230b      	movs	r3, #11
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <HAL_ETH_MspInit+0x184>)
 80009a6:	f003 fedb 	bl	8004760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009bc:	230b      	movs	r3, #11
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80009c8:	f003 feca 	bl	8004760 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	; 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40028000 	.word	0x40028000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800

080009ec <initFlash>:
 * @retval The sector of a given address
 */
uint32_t FirstSector, NbOfSectors;

void initFlash(target_flashRange_t* target, uint32_t startAddr, uint32_t endAddr)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
	target->USER_START_ADDR = startAddr;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	601a      	str	r2, [r3, #0]
	target->USER_END_ADDR = endAddr;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	605a      	str	r2, [r3, #4]
	target->USER_TARGET_ADDR = target->USER_START_ADDR;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	609a      	str	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <GetSectorSize>:
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
uint32_t GetSectorSize(uint32_t Sector)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) ||\
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d014      	beq.n	8000a54 <GetSectorSize+0x3c>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d011      	beq.n	8000a54 <GetSectorSize+0x3c>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d00e      	beq.n	8000a54 <GetSectorSize+0x3c>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d00b      	beq.n	8000a54 <GetSectorSize+0x3c>
      (Sector == FLASH_SECTOR_3) || (Sector == FLASH_SECTOR_12) || (Sector == FLASH_SECTOR_13) ||\
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b0c      	cmp	r3, #12
 8000a40:	d008      	beq.n	8000a54 <GetSectorSize+0x3c>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0d      	cmp	r3, #13
 8000a46:	d005      	beq.n	8000a54 <GetSectorSize+0x3c>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b0e      	cmp	r3, #14
 8000a4c:	d002      	beq.n	8000a54 <GetSectorSize+0x3c>
      (Sector == FLASH_SECTOR_14) || (Sector == FLASH_SECTOR_15))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d103      	bne.n	8000a5c <GetSectorSize+0x44>
    {
      sectorsize = 16 * 1024;
 8000a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e00c      	b.n	8000a76 <GetSectorSize+0x5e>
    }
  else if((Sector == FLASH_SECTOR_4) || (Sector == FLASH_SECTOR_16))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d002      	beq.n	8000a68 <GetSectorSize+0x50>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b10      	cmp	r3, #16
 8000a66:	d103      	bne.n	8000a70 <GetSectorSize+0x58>
    {
      sectorsize = 64 * 1024;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e002      	b.n	8000a76 <GetSectorSize+0x5e>
    }
  else
    {
      sectorsize = 128 * 1024;
 8000a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a74:	60fb      	str	r3, [r7, #12]
    }
  return sectorsize;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <readFlash>:

Status_flashRW readFlash(uint32_t StartADDR)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  unsigned int value = *(unsigned int*)StartADDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  printf("addr[0x%08x] = %08x\r\n", StartADDR, value);
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <readFlash+0x24>)
 8000a98:	f008 fe7e 	bl	8009798 <iprintf>
  return RW_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	0800a968 	.word	0x0800a968

08000aac <overWriteFlash>:

Status_flashRW overWriteFlash(target_flashRange_t* target, uint32_t DATA)
{
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000ab6:	f003 fce1 	bl	800447c <HAL_FLASH_Unlock>
	uint32_t Address = target->USER_TARGET_ADDR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	60fb      	str	r3, [r7, #12]
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA) == HAL_OK)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	4615      	mov	r5, r2
 8000ac8:	4622      	mov	r2, r4
 8000aca:	462b      	mov	r3, r5
 8000acc:	68f9      	ldr	r1, [r7, #12]
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f003 fc80 	bl	80043d4 <HAL_FLASH_Program>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d109      	bne.n	8000aee <overWriteFlash+0x42>
	{
		printf("Changed: ");
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <overWriteFlash+0x4c>)
 8000adc:	f008 fe5c 	bl	8009798 <iprintf>
		readFlash(Address);
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff ffcf 	bl	8000a84 <readFlash>
	else
	{
		return RW_ERROR;
	}

	HAL_FLASH_Lock();
 8000ae6:	f003 fceb 	bl	80044c0 <HAL_FLASH_Lock>
	return RW_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <overWriteFlash+0x44>
		return RW_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bdb0      	pop	{r4, r5, r7, pc}
 8000af8:	0800a980 	.word	0x0800a980

08000afc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
 8000b16:	4b52      	ldr	r3, [pc, #328]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a51      	ldr	r2, [pc, #324]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b4f      	ldr	r3, [pc, #316]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a4a      	ldr	r2, [pc, #296]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b48      	ldr	r3, [pc, #288]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b44      	ldr	r3, [pc, #272]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a43      	ldr	r2, [pc, #268]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b41      	ldr	r3, [pc, #260]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a3c      	ldr	r2, [pc, #240]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a35      	ldr	r2, [pc, #212]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <MX_GPIO_Init+0x164>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bc0:	4828      	ldr	r0, [pc, #160]	; (8000c64 <MX_GPIO_Init+0x168>)
 8000bc2:	f003 ff91 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_GPIO_Init+0x16c>)
 8000bcc:	f003 ff8c 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bd6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_GPIO_Init+0x170>)
 8000be8:	f003 fdba 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bec:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <MX_GPIO_Init+0x168>)
 8000c06:	f003 fdab 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_GPIO_Init+0x16c>)
 8000c22:	f003 fd9d 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <MX_GPIO_Init+0x16c>)
 8000c3a:	f003 fd91 	bl	8004760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c42:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_GPIO_Init+0x174>)
 8000c54:	f003 fd84 	bl	8004760 <HAL_GPIO_Init>

}
 8000c58:	bf00      	nop
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40021800 	.word	0x40021800
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020c00 	.word	0x40020c00

08000c74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <MX_I2C1_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000c80:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <MX_I2C1_Init+0x7c>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000cb2:	f003 ff65 	bl	8004b80 <HAL_I2C_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cbc:	f001 f838 	bl	8001d30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000cc4:	f004 fcd5 	bl	8005672 <HAL_I2CEx_ConfigAnalogFilter>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000cce:	f001 f82f 	bl	8001d30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_I2C1_Init+0x74>)
 8000cd6:	f004 fd08 	bl	80056ea <HAL_I2CEx_ConfigDigitalFilter>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f001 f826 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000036c 	.word	0x2000036c
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	000186a0 	.word	0x000186a0

08000cf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_I2C_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12c      	bne.n	8000d70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d44:	2304      	movs	r3, #4
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <HAL_I2C_MspInit+0x8c>)
 8000d50:	f003 fd06 	bl	8004760 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_I2C_MspInit+0x88>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <I2C_Scan>:
#include "lcd.h"

void I2C_Scan() {
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b098      	sub	sp, #96	; 0x60
 8000d88:	af00      	add	r7, sp, #0
  char info[] = "Scanning I2C bus...\r\n";
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <I2C_Scan+0xc0>)
 8000d8c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000d90:	461d      	mov	r5, r3
 8000d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d9a:	6020      	str	r0, [r4, #0]
 8000d9c:	3404      	adds	r4, #4
 8000d9e:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000da0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa23 	bl	80001f0 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	4824      	ldr	r0, [pc, #144]	; (8000e48 <I2C_Scan+0xc4>)
 8000db8:	f007 f8ff 	bl	8007fba <HAL_UART_Transmit>

  HAL_StatusTypeDef res;
  for(uint16_t i = 0; i < 128; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000dc2:	e02f      	b.n	8000e24 <I2C_Scan+0xa0>
      res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000dc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	b299      	uxth	r1, r3
 8000dcc:	230a      	movs	r3, #10
 8000dce:	2201      	movs	r2, #1
 8000dd0:	481e      	ldr	r0, [pc, #120]	; (8000e4c <I2C_Scan+0xc8>)
 8000dd2:	f004 f917 	bl	8005004 <HAL_I2C_IsDeviceReady>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      if(res == HAL_OK) {
 8000ddc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d113      	bne.n	8000e0c <I2C_Scan+0x88>
	  char msg[64];
	  snprintf(msg, sizeof(msg), "0x%02X", i);
 8000de4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000de8:	1d38      	adds	r0, r7, #4
 8000dea:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <I2C_Scan+0xcc>)
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	f008 fd41 	bl	8009874 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9fb 	bl	80001f0 <strlen>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	1d39      	adds	r1, r7, #4
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
 8000e04:	4810      	ldr	r0, [pc, #64]	; (8000e48 <I2C_Scan+0xc4>)
 8000e06:	f007 f8d8 	bl	8007fba <HAL_UART_Transmit>
 8000e0a:	e006      	b.n	8000e1a <I2C_Scan+0x96>
      } else {
	  HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	2201      	movs	r2, #1
 8000e12:	4910      	ldr	r1, [pc, #64]	; (8000e54 <I2C_Scan+0xd0>)
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <I2C_Scan+0xc4>)
 8000e16:	f007 f8d0 	bl	8007fba <HAL_UART_Transmit>
  for(uint16_t i = 0; i < 128; i++) {
 8000e1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000e24:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e28:	2b7f      	cmp	r3, #127	; 0x7f
 8000e2a:	d9cb      	bls.n	8000dc4 <I2C_Scan+0x40>
      }
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e30:	2202      	movs	r2, #2
 8000e32:	4909      	ldr	r1, [pc, #36]	; (8000e58 <I2C_Scan+0xd4>)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <I2C_Scan+0xc4>)
 8000e36:	f007 f8c0 	bl	8007fba <HAL_UART_Transmit>
}
 8000e3a:	bf00      	nop
 8000e3c:	3760      	adds	r7, #96	; 0x60
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bdb0      	pop	{r4, r5, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	0800a9ac 	.word	0x0800a9ac
 8000e48:	2000066c 	.word	0x2000066c
 8000e4c:	2000036c 	.word	0x2000036c
 8000e50:	0800a99c 	.word	0x0800a99c
 8000e54:	0800a9a4 	.word	0x0800a9a4
 8000e58:	0800a9a8 	.word	0x0800a9a8

08000e5c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef res;
  for(;;) {
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	b299      	uxth	r1, r3
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	2201      	movs	r2, #1
 8000e78:	4822      	ldr	r0, [pc, #136]	; (8000f04 <LCD_SendInternal+0xa8>)
 8000e7a:	f004 f8c3 	bl	8005004 <HAL_I2C_IsDeviceReady>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	73fb      	strb	r3, [r7, #15]
      if(res == HAL_OK)
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d000      	beq.n	8000e8a <LCD_SendInternal+0x2e>
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000e88:	e7f1      	b.n	8000e6e <LCD_SendInternal+0x12>
	break;
 8000e8a:	bf00      	nop
  }

  uint8_t up = data & 0xF0;
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	f023 030f 	bic.w	r3, r3, #15
 8000e92:	73bb      	strb	r3, [r7, #14]
  uint8_t lo = (data << 4) & 0xF0;
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	737b      	strb	r3, [r7, #13]

  uint8_t data_arr[4];
  data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000e9a:	7bba      	ldrb	r2, [r7, #14]
 8000e9c:	797b      	ldrb	r3, [r7, #5]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f043 030c 	orr.w	r3, r3, #12
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	723b      	strb	r3, [r7, #8]
  data_arr[1] = up|flags|BACKLIGHT;
 8000eaa:	7bba      	ldrb	r2, [r7, #14]
 8000eac:	797b      	ldrb	r3, [r7, #5]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	727b      	strb	r3, [r7, #9]
  data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000eba:	7b7a      	ldrb	r2, [r7, #13]
 8000ebc:	797b      	ldrb	r3, [r7, #5]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	f043 030c 	orr.w	r3, r3, #12
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	72bb      	strb	r3, [r7, #10]
  data_arr[3] = lo|flags|BACKLIGHT;
 8000eca:	7b7a      	ldrb	r2, [r7, #13]
 8000ecc:	797b      	ldrb	r3, [r7, #5]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	72fb      	strb	r3, [r7, #11]

  res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	b299      	uxth	r1, r3
 8000ede:	f107 0208 	add.w	r2, r7, #8
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2304      	movs	r3, #4
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <LCD_SendInternal+0xa8>)
 8000eec:	f003 ff8c 	bl	8004e08 <HAL_I2C_Master_Transmit>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(LCD_DELAY_MS);
 8000ef4:	2005      	movs	r0, #5
 8000ef6:	f001 fcc7 	bl	8002888 <HAL_Delay>
  return res;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000036c 	.word	0x2000036c

08000f08 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, cmd, 0);
 8000f18:	79b9      	ldrb	r1, [r7, #6]
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff9c 	bl	8000e5c <LCD_SendInternal>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000f3c:	79b9      	ldrb	r1, [r7, #6]
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2201      	movs	r2, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff8a 	bl	8000e5c <LCD_SendInternal>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  // 4-bit mode, 2 lines, 5x7 format
  LCD_SendCommand(lcd_addr, 0b00110000);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2130      	movs	r1, #48	; 0x30
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ffd2 	bl	8000f08 <LCD_SendCommand>
  // display & cursor home (keep this!)
  LCD_SendCommand(lcd_addr, 0b00000010);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2102      	movs	r1, #2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffcd 	bl	8000f08 <LCD_SendCommand>
  // display on, right shift, underline off, blink off
  LCD_SendCommand(lcd_addr, 0b00001100);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	210c      	movs	r1, #12
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ffc8 	bl	8000f08 <LCD_SendCommand>
  // clear display (optional here)
  LCD_SendCommand(lcd_addr, 0b00000001);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffc3 	bl	8000f08 <LCD_SendCommand>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	6039      	str	r1, [r7, #0]
 8000f94:	71fb      	strb	r3, [r7, #7]
  while(*str) {
 8000f96:	e009      	b.n	8000fac <LCD_SendString+0x22>
      LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ffc3 	bl	8000f2c <LCD_SendData>
      str++;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	603b      	str	r3, [r7, #0]
  while(*str) {
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f1      	bne.n	8000f98 <LCD_SendString+0xe>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <init>:

void init() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  I2C_Scan();
 8000fc4:	f7ff fede 	bl	8000d84 <I2C_Scan>
  LCD_Init(LCD_ADDR);
 8000fc8:	204e      	movs	r0, #78	; 0x4e
 8000fca:	f7ff ffc1 	bl	8000f50 <LCD_Init>

  // set address to 0x00
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	204e      	movs	r0, #78	; 0x4e
 8000fd2:	f7ff ff99 	bl	8000f08 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 8000fd6:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <init+0x34>)
 8000fd8:	204e      	movs	r0, #78	; 0x4e
 8000fda:	f7ff ffd6 	bl	8000f8a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000fde:	21c0      	movs	r1, #192	; 0xc0
 8000fe0:	204e      	movs	r0, #78	; 0x4e
 8000fe2:	f7ff ff91 	bl	8000f08 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000fe6:	4904      	ldr	r1, [pc, #16]	; (8000ff8 <init+0x38>)
 8000fe8:	204e      	movs	r0, #78	; 0x4e
 8000fea:	f7ff ffce 	bl	8000f8a <LCD_SendString>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	0800a9c4 	.word	0x0800a9c4
 8000ff8:	0800a9d4 	.word	0x0800a9d4

08000ffc <LCD_PrintAll>:

void LCD_PrintAll(char *str1, char *str2)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	204e      	movs	r0, #78	; 0x4e
 800100a:	f7ff ff7d 	bl	8000f08 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str1);
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	204e      	movs	r0, #78	; 0x4e
 8001012:	f7ff ffba 	bl	8000f8a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001016:	21c0      	movs	r1, #192	; 0xc0
 8001018:	204e      	movs	r0, #78	; 0x4e
 800101a:	f7ff ff75 	bl	8000f08 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str2);
 800101e:	6839      	ldr	r1, [r7, #0]
 8001020:	204e      	movs	r0, #78	; 0x4e
 8001022:	f7ff ffb2 	bl	8000f8a <LCD_SendString>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <LCD_Clear>:
      LCD_SendCommand(LCD_ADDR, 0b11000000);
      LCD_SendString(LCD_ADDR, str);
    }
}
void LCD_Clear()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	204e      	movs	r0, #78	; 0x4e
 8001038:	f7ff ff66 	bl	8000f08 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 800103c:	4906      	ldr	r1, [pc, #24]	; (8001058 <LCD_Clear+0x28>)
 800103e:	204e      	movs	r0, #78	; 0x4e
 8001040:	f7ff ffa3 	bl	8000f8a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001044:	21c0      	movs	r1, #192	; 0xc0
 8001046:	204e      	movs	r0, #78	; 0x4e
 8001048:	f7ff ff5e 	bl	8000f08 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 800104c:	4902      	ldr	r1, [pc, #8]	; (8001058 <LCD_Clear+0x28>)
 800104e:	204e      	movs	r0, #78	; 0x4e
 8001050:	f7ff ff9b 	bl	8000f8a <LCD_SendString>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	0800a9e4 	.word	0x0800a9e4

0800105c <_write>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

int _write(int file, char *ptr, int len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b29a      	uxth	r2, r3
 800106c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <_write+0x28>)
 8001074:	f006 ffa1 	bl	8007fba <HAL_UART_Transmit>
	return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000066c 	.word	0x2000066c

08001088 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001088:	b598      	push	{r3, r4, r7, lr}
 800108a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800108c:	f001 fb8a 	bl	80027a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001090:	f000 f8ba 	bl	8001208 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001094:	f7ff fd32 	bl	8000afc <MX_GPIO_Init>
	MX_DMA_Init();
 8001098:	f7ff fb74 	bl	8000784 <MX_DMA_Init>
	MX_ETH_Init();
 800109c:	f7ff fb92 	bl	80007c4 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80010a0:	f001 fa24 	bl	80024ec <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80010a4:	f001 facc 	bl	8002640 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 80010a8:	f7ff fde4 	bl	8000c74 <MX_I2C1_Init>
	MX_RTC_Init();
 80010ac:	f000 fe46 	bl	8001d3c <MX_RTC_Init>
	MX_TIM2_Init();
 80010b0:	f001 f8be 	bl	8002230 <MX_TIM2_Init>
	MX_UART4_Init();
 80010b4:	f001 f9f0 	bl	8002498 <MX_UART4_Init>
	MX_ADC1_Init();
 80010b8:	f7ff fa70 	bl	800059c <MX_ADC1_Init>
	MX_TIM3_Init();
 80010bc:	f001 f906 	bl	80022cc <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80010c0:	f000 f90e 	bl	80012e0 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80010c4:	2108      	movs	r1, #8
 80010c6:	483c      	ldr	r0, [pc, #240]	; (80011b8 <main+0x130>)
 80010c8:	f005 fffe 	bl	80070c8 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, Joycon, sizeof(Joycon)/sizeof(Joycon[0]));
 80010cc:	2202      	movs	r2, #2
 80010ce:	493b      	ldr	r1, [pc, #236]	; (80011bc <main+0x134>)
 80010d0:	483b      	ldr	r0, [pc, #236]	; (80011c0 <main+0x138>)
 80010d2:	f001 fd51 	bl	8002b78 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
 80010d6:	2201      	movs	r2, #1
 80010d8:	493a      	ldr	r1, [pc, #232]	; (80011c4 <main+0x13c>)
 80010da:	483b      	ldr	r0, [pc, #236]	; (80011c8 <main+0x140>)
 80010dc:	f006 ffff 	bl	80080de <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
 80010e0:	2201      	movs	r2, #1
 80010e2:	493a      	ldr	r1, [pc, #232]	; (80011cc <main+0x144>)
 80010e4:	483a      	ldr	r0, [pc, #232]	; (80011d0 <main+0x148>)
 80010e6:	f006 fffa 	bl	80080de <HAL_UART_Receive_IT>

	//unsigned int value, addr = FLASH_USER_START_ADDR, cnt = 0;
	//unsigned char buf[30];
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80010ea:	2200      	movs	r2, #0
 80010ec:	4939      	ldr	r1, [pc, #228]	; (80011d4 <main+0x14c>)
 80010ee:	483a      	ldr	r0, [pc, #232]	; (80011d8 <main+0x150>)
 80010f0:	f005 fcf2 	bl	8006ad8 <HAL_RTC_SetAlarm_IT>
	init();
 80010f4:	f7ff ff64 	bl	8000fc0 <init>
	LCD_Clear();
 80010f8:	f7ff ff9a 	bl	8001030 <LCD_Clear>
	set_date(RTC_WEEKDAY_MONDAY, 11, 13, 23);
 80010fc:	2317      	movs	r3, #23
 80010fe:	220d      	movs	r2, #13
 8001100:	210b      	movs	r1, #11
 8001102:	2001      	movs	r0, #1
 8001104:	f000 f992 	bl	800142c <set_date>
	set_time(13,25,0);
 8001108:	2200      	movs	r2, #0
 800110a:	2119      	movs	r1, #25
 800110c:	200d      	movs	r0, #13
 800110e:	f000 f923 	bl	8001358 <set_time>
	set_alarm(0, 0, 5);
 8001112:	2205      	movs	r2, #5
 8001114:	2100      	movs	r1, #0
 8001116:	2000      	movs	r0, #0
 8001118:	f000 f940 	bl	800139c <set_alarm>

	initFlash(&flash, FLASH_USER_START_ADDR, FLASH_USER_END_ADDR);
 800111c:	482f      	ldr	r0, [pc, #188]	; (80011dc <main+0x154>)
 800111e:	f7ff fc7b 	bl	8000a18 <GetSectorSize>
 8001122:	4602      	mov	r2, r0
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <main+0x158>)
 8001126:	4413      	add	r3, r2
 8001128:	461a      	mov	r2, r3
 800112a:	492c      	ldr	r1, [pc, #176]	; (80011dc <main+0x154>)
 800112c:	482d      	ldr	r0, [pc, #180]	; (80011e4 <main+0x15c>)
 800112e:	f7ff fc5d 	bl	80009ec <initFlash>
	while (1)
	{
		//printf("x: %d\r\ny: %d\r\n",Joycon[0],Joycon[1]);
		//printf("current state: %d\r\n", clock_state);
#if 1
		switch(clock_state)
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <main+0x160>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d838      	bhi.n	80011ac <main+0x124>
 800113a:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <main+0xb8>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	08001151 	.word	0x08001151
 8001144:	0800115f 	.word	0x0800115f
 8001148:	08001199 	.word	0x08001199
 800114c:	080011a1 	.word	0x080011a1
		{
		case NORMAL_STATE:
			get_time();
 8001150:	f000 f994 	bl	800147c <get_time>
			HAL_Delay(300);
 8001154:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001158:	f001 fb96 	bl	8002888 <HAL_Delay>
			break;
 800115c:	e02a      	b.n	80011b4 <main+0x12c>
		case TIME_SETTING:
			if(cpyflag == 1)
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <main+0x164>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <main+0xf0>
			{
				memcpy(copyTime, showTime, sizeof(showTime)/sizeof(showTime[0]));
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <main+0x168>)
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <main+0x16c>)
 800116a:	4614      	mov	r4, r2
 800116c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				cpyflag = 0;
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <main+0x164>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
			}
			// 1. timer setting
			// 2. save at flash
			timeSetter();
 8001178:	f000 f9e8 	bl	800154c <timeSetter>
			if(isSave == true)
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <main+0x170>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <main+0x100>
			{
				saveCurrentTime();
 8001184:	f000 fbac 	bl	80018e0 <saveCurrentTime>
			}
			printf("setting mode\r\n");
 8001188:	481c      	ldr	r0, [pc, #112]	; (80011fc <main+0x174>)
 800118a:	f008 fb6b 	bl	8009864 <puts>
			HAL_Delay(500);
 800118e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001192:	f001 fb79 	bl	8002888 <HAL_Delay>
			break;
 8001196:	e00d      	b.n	80011b4 <main+0x12c>
		case ALARM_TIME_SETTING:
			// 1. alarm time setting
			// 2. save at flash
			printf("alarm mode\r\n");
 8001198:	4819      	ldr	r0, [pc, #100]	; (8001200 <main+0x178>)
 800119a:	f008 fb63 	bl	8009864 <puts>
			break;
 800119e:	e009      	b.n	80011b4 <main+0x12c>
		case MUSIC_SELECT:
			// 1. music select
			// 2. save at flash
			selectSong();
 80011a0:	f000 fbca 	bl	8001938 <selectSong>
//			{
//				remove_tone();
//				saveCurrentSong();
//				LCD_Clear();
//			}
			printf("music mode\r\n");
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <main+0x17c>)
 80011a6:	f008 fb5d 	bl	8009864 <puts>
			break;
 80011aa:	e003      	b.n	80011b4 <main+0x12c>
		default:
			clock_state = NORMAL_STATE;
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <main+0x160>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
			break;
 80011b2:	bf00      	nop
		switch(clock_state)
 80011b4:	e7bd      	b.n	8001132 <main+0xaa>
 80011b6:	bf00      	nop
 80011b8:	200005e0 	.word	0x200005e0
 80011bc:	20000404 	.word	0x20000404
 80011c0:	20000094 	.word	0x20000094
 80011c4:	200003c1 	.word	0x200003c1
 80011c8:	2000066c 	.word	0x2000066c
 80011cc:	200003c2 	.word	0x200003c2
 80011d0:	20000628 	.word	0x20000628
 80011d4:	200003c4 	.word	0x200003c4
 80011d8:	20000574 	.word	0x20000574
 80011dc:	081c0000 	.word	0x081c0000
 80011e0:	081bffff 	.word	0x081bffff
 80011e4:	200004ec 	.word	0x200004ec
 80011e8:	200003c0 	.word	0x200003c0
 80011ec:	200004ce 	.word	0x200004ce
 80011f0:	2000042c 	.word	0x2000042c
 80011f4:	2000040c 	.word	0x2000040c
 80011f8:	200004d0 	.word	0x200004d0
 80011fc:	0800a9f8 	.word	0x0800a9f8
 8001200:	0800aa08 	.word	0x0800aa08
 8001204:	0800aa14 	.word	0x0800aa14

08001208 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f008 fc58 	bl	8009acc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <SystemClock_Config+0xd0>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a28      	ldr	r2, [pc, #160]	; (80012d8 <SystemClock_Config+0xd0>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <SystemClock_Config+0xd0>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <SystemClock_Config+0xd4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a22      	ldr	r2, [pc, #136]	; (80012dc <SystemClock_Config+0xd4>)
 8001252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <SystemClock_Config+0xd4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001264:	2305      	movs	r3, #5
 8001266:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001268:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800126e:	2301      	movs	r3, #1
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800127c:	2304      	movs	r3, #4
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001280:	23a8      	movs	r3, #168	; 0xa8
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001284:	2302      	movs	r3, #2
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001288:	2307      	movs	r3, #7
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4618      	mov	r0, r3
 8001292:	f004 fb87 	bl	80059a4 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800129c:	f000 fd48 	bl	8001d30 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
 80012a2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012b0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2105      	movs	r1, #5
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 fde8 	bl	8005e94 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80012ca:	f000 fd31 	bl	8001d30 <Error_Handler>
	}
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	; 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	201c      	movs	r0, #28
 80012ea:	f002 f912 	bl	8003512 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ee:	201c      	movs	r0, #28
 80012f0:	f002 f92b 	bl	800354a <HAL_NVIC_EnableIRQ>
	/* RTC_Alarm_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2029      	movs	r0, #41	; 0x29
 80012fa:	f002 f90a 	bl	8003512 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80012fe:	2029      	movs	r0, #41	; 0x29
 8001300:	f002 f923 	bl	800354a <HAL_NVIC_EnableIRQ>
	/* EXTI9_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2017      	movs	r0, #23
 800130a:	f002 f902 	bl	8003512 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800130e:	2017      	movs	r0, #23
 8001310:	f002 f91b 	bl	800354a <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2012      	movs	r0, #18
 800131a:	f002 f8fa 	bl	8003512 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800131e:	2012      	movs	r0, #18
 8001320:	f002 f913 	bl	800354a <HAL_NVIC_EnableIRQ>
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2027      	movs	r0, #39	; 0x27
 800132a:	f002 f8f2 	bl	8003512 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 800132e:	2027      	movs	r0, #39	; 0x27
 8001330:	f002 f90b 	bl	800354a <HAL_NVIC_EnableIRQ>
	/* UART4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2034      	movs	r0, #52	; 0x34
 800133a:	f002 f8ea 	bl	8003512 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART4_IRQn);
 800133e:	2034      	movs	r0, #52	; 0x34
 8001340:	f002 f903 	bl	800354a <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2028      	movs	r0, #40	; 0x28
 800134a:	f002 f8e2 	bl	8003512 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800134e:	2028      	movs	r0, #40	; 0x28
 8001350:	f002 f8fb 	bl	800354a <HAL_NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <set_time>:

/* USER CODE BEGIN 4 */
void set_time(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	460b      	mov	r3, r1
 8001364:	71bb      	strb	r3, [r7, #6]
 8001366:	4613      	mov	r3, r2
 8001368:	717b      	strb	r3, [r7, #5]
	//RTC_TimeTypeDef sTime;

	sTime.Hours = hh + 1;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	3301      	adds	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <set_time+0x3c>)
 8001372:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = mm;
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <set_time+0x3c>)
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = ss;
 800137a:	4a06      	ldr	r2, [pc, #24]	; (8001394 <set_time+0x3c>)
 800137c:	797b      	ldrb	r3, [r7, #5]
 800137e:	7093      	strb	r3, [r2, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001380:	2200      	movs	r2, #0
 8001382:	4904      	ldr	r1, [pc, #16]	; (8001394 <set_time+0x3c>)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <set_time+0x40>)
 8001386:	f005 f9db 	bl	8006740 <HAL_RTC_SetTime>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200003f0 	.word	0x200003f0
 8001398:	20000574 	.word	0x20000574

0800139c <set_alarm>:
void set_alarm(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	460b      	mov	r3, r1
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	4613      	mov	r3, r2
 80013ac:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Hours = hh;
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <set_alarm+0x88>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = mm;
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <set_alarm+0x88>)
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = ss;
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <set_alarm+0x88>)
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <set_alarm+0x88>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <set_alarm+0x88>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	70da      	strb	r2, [r3, #3]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <set_alarm+0x88>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <set_alarm+0x88>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <set_alarm+0x88>)
 80013da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013de:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <set_alarm+0x88>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <set_alarm+0x88>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <set_alarm+0x88>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <set_alarm+0x88>)
 80013f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013fc:	2201      	movs	r2, #1
 80013fe:	4909      	ldr	r1, [pc, #36]	; (8001424 <set_alarm+0x88>)
 8001400:	4809      	ldr	r0, [pc, #36]	; (8001428 <set_alarm+0x8c>)
 8001402:	f005 fb69 	bl	8006ad8 <HAL_RTC_SetAlarm_IT>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <set_alarm+0x74>
	{
		Error_Handler();
 800140c:	f000 fc90 	bl	8001d30 <Error_Handler>
	}
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001410:	2200      	movs	r2, #0
 8001412:	4904      	ldr	r1, [pc, #16]	; (8001424 <set_alarm+0x88>)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <set_alarm+0x8c>)
 8001416:	f005 fb5f 	bl	8006ad8 <HAL_RTC_SetAlarm_IT>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200003c4 	.word	0x200003c4
 8001428:	20000574 	.word	0x20000574

0800142c <set_date>:
void set_date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4623      	mov	r3, r4
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	4603      	mov	r3, r0
 8001440:	71bb      	strb	r3, [r7, #6]
 8001442:	460b      	mov	r3, r1
 8001444:	717b      	strb	r3, [r7, #5]
 8001446:	4613      	mov	r3, r2
 8001448:	713b      	strb	r3, [r7, #4]
	//RTC_DateTypeDef sDate;

	sDate.WeekDay = ww;
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <set_date+0x48>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	7013      	strb	r3, [r2, #0]
	sDate.Month = mm;
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <set_date+0x48>)
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	7053      	strb	r3, [r2, #1]
	sDate.Date = dd;
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <set_date+0x48>)
 8001458:	797b      	ldrb	r3, [r7, #5]
 800145a:	7093      	strb	r3, [r2, #2]
	sDate.Year = yy;
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <set_date+0x48>)
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	70d3      	strb	r3, [r2, #3]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001462:	2200      	movs	r2, #0
 8001464:	4903      	ldr	r1, [pc, #12]	; (8001474 <set_date+0x48>)
 8001466:	4804      	ldr	r0, [pc, #16]	; (8001478 <set_date+0x4c>)
 8001468:	f005 fa62 	bl	8006930 <HAL_RTC_SetDate>
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	200003ec 	.word	0x200003ec
 8001478:	20000574 	.word	0x20000574

0800147c <get_time>:

void get_time(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af02      	add	r7, sp, #8

	int longer;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001482:	2200      	movs	r2, #0
 8001484:	4925      	ldr	r1, [pc, #148]	; (800151c <get_time+0xa0>)
 8001486:	4826      	ldr	r0, [pc, #152]	; (8001520 <get_time+0xa4>)
 8001488:	f005 f9f4 	bl	8006874 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800148c:	2200      	movs	r2, #0
 800148e:	4925      	ldr	r1, [pc, #148]	; (8001524 <get_time+0xa8>)
 8001490:	4823      	ldr	r0, [pc, #140]	; (8001520 <get_time+0xa4>)
 8001492:	f005 fad1 	bl	8006a38 <HAL_RTC_GetDate>
	curr_ap = sTime.TimeFormat;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <get_time+0xa0>)
 8001498:	78da      	ldrb	r2, [r3, #3]
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <get_time+0xac>)
 800149c:	701a      	strb	r2, [r3, #0]
	curr_h = sTime.Hours;
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <get_time+0xa0>)
 80014a0:	781a      	ldrb	r2, [r3, #0]
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <get_time+0xb0>)
 80014a4:	701a      	strb	r2, [r3, #0]
	curr_m = sTime.Minutes;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <get_time+0xa0>)
 80014a8:	785a      	ldrb	r2, [r3, #1]
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <get_time+0xb4>)
 80014ac:	701a      	strb	r2, [r3, #0]
	curr_s = sTime.Seconds;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <get_time+0xa0>)
 80014b0:	789a      	ldrb	r2, [r3, #2]
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <get_time+0xb8>)
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <get_time+0xbc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <get_time+0xc0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
	memset(showTime, 0, sizeof(showTime)/sizeof(showTime));
	memset(showDate, 0, sizeof(showDate)/sizeof(showDate));
	sprintf((char*)showTime, "%s %02d:%02d:%02d",ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <get_time+0xa0>)
 80014c4:	78db      	ldrb	r3, [r3, #3]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <get_time+0xc4>)
 80014d0:	441a      	add	r2, r3
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <get_time+0xa0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <get_time+0xa0>)
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	4619      	mov	r1, r3
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <get_time+0xa0>)
 80014e0:	789b      	ldrb	r3, [r3, #2]
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	9100      	str	r1, [sp, #0]
 80014e6:	4603      	mov	r3, r0
 80014e8:	4916      	ldr	r1, [pc, #88]	; (8001544 <get_time+0xc8>)
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <get_time+0xbc>)
 80014ec:	f008 f9f6 	bl	80098dc <siprintf>
	sprintf((char*)showDate, "  %04d/%02d/%02d",2000+sDate.Year, sDate.Month, sDate.Date);
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <get_time+0xa8>)
 80014f2:	78db      	ldrb	r3, [r3, #3]
 80014f4:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <get_time+0xa8>)
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <get_time+0xa8>)
 8001500:	789b      	ldrb	r3, [r3, #2]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	4910      	ldr	r1, [pc, #64]	; (8001548 <get_time+0xcc>)
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <get_time+0xc0>)
 800150a:	f008 f9e7 	bl	80098dc <siprintf>
	LCD_PrintAll(showDate, showTime);
 800150e:	490a      	ldr	r1, [pc, #40]	; (8001538 <get_time+0xbc>)
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <get_time+0xc0>)
 8001512:	f7ff fd73 	bl	8000ffc <LCD_PrintAll>
	//printf("%s %s\r\n", showTime, showDate);
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200003f0 	.word	0x200003f0
 8001520:	20000574 	.word	0x20000574
 8001524:	200003ec 	.word	0x200003ec
 8001528:	200004d1 	.word	0x200004d1
 800152c:	200004d2 	.word	0x200004d2
 8001530:	200004d3 	.word	0x200004d3
 8001534:	200004d4 	.word	0x200004d4
 8001538:	2000040c 	.word	0x2000040c
 800153c:	2000041c 	.word	0x2000041c
 8001540:	20000000 	.word	0x20000000
 8001544:	0800aa20 	.word	0x0800aa20
 8001548:	0800aa34 	.word	0x0800aa34

0800154c <timeSetter>:


void timeSetter()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af02      	add	r7, sp, #8
	static bool toggleChar = false;
	static uint8_t choice = 0;

	if(IsRight())
 8001552:	f000 fb31 	bl	8001bb8 <IsRight>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00d      	beq.n	8001578 <timeSetter+0x2c>
	{
		choice ++;
 800155c:	4b9d      	ldr	r3, [pc, #628]	; (80017d4 <timeSetter+0x288>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b9b      	ldr	r3, [pc, #620]	; (80017d4 <timeSetter+0x288>)
 8001566:	701a      	strb	r2, [r3, #0]
		if(choice > 3)
 8001568:	4b9a      	ldr	r3, [pc, #616]	; (80017d4 <timeSetter+0x288>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d915      	bls.n	800159c <timeSetter+0x50>
		{
			choice = 0;
 8001570:	4b98      	ldr	r3, [pc, #608]	; (80017d4 <timeSetter+0x288>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e011      	b.n	800159c <timeSetter+0x50>
		}
	}
	else if(IsLeft())
 8001578:	f000 fb30 	bl	8001bdc <IsLeft>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00c      	beq.n	800159c <timeSetter+0x50>
	{
		choice --;
 8001582:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <timeSetter+0x288>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	3b01      	subs	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <timeSetter+0x288>)
 800158c:	701a      	strb	r2, [r3, #0]
		if(choice > 4)
 800158e:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <timeSetter+0x288>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b04      	cmp	r3, #4
 8001594:	d902      	bls.n	800159c <timeSetter+0x50>
		{
			choice = 3;
 8001596:	4b8f      	ldr	r3, [pc, #572]	; (80017d4 <timeSetter+0x288>)
 8001598:	2203      	movs	r2, #3
 800159a:	701a      	strb	r2, [r3, #0]
		}
	}
	//"%s %02d:%02d:%02d"
	switch (choice)
 800159c:	4b8d      	ldr	r3, [pc, #564]	; (80017d4 <timeSetter+0x288>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	f200 8172 	bhi.w	800188a <timeSetter+0x33e>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <timeSetter+0x60>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080015bd 	.word	0x080015bd
 80015b0:	0800164f 	.word	0x0800164f
 80015b4:	080016fb 	.word	0x080016fb
 80015b8:	080017a5 	.word	0x080017a5
	{
	case AMPM:
		if(toggleChar)
 80015bc:	4b86      	ldr	r3, [pc, #536]	; (80017d8 <timeSetter+0x28c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00e      	beq.n	80015e2 <timeSetter+0x96>
		{
			sprintf(controlTime, "__ %02d:%02d:%02d",curr_h,curr_m,curr_s);
 80015c4:	4b85      	ldr	r3, [pc, #532]	; (80017dc <timeSetter+0x290>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b85      	ldr	r3, [pc, #532]	; (80017e0 <timeSetter+0x294>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4b84      	ldr	r3, [pc, #528]	; (80017e4 <timeSetter+0x298>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	460b      	mov	r3, r1
 80015d8:	4983      	ldr	r1, [pc, #524]	; (80017e8 <timeSetter+0x29c>)
 80015da:	4884      	ldr	r0, [pc, #528]	; (80017ec <timeSetter+0x2a0>)
 80015dc:	f008 f97e 	bl	80098dc <siprintf>
				curr_ap--;
			}
			curr_ap = curr_ap % 2;
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
		}
		break;
 80015e0:	e154      	b.n	800188c <timeSetter+0x340>
			if(IsUP())
 80015e2:	f000 fb0d 	bl	8001c00 <IsUP>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <timeSetter+0xae>
				curr_ap++;
 80015ec:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <timeSetter+0x2a4>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b7e      	ldr	r3, [pc, #504]	; (80017f0 <timeSetter+0x2a4>)
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e00a      	b.n	8001610 <timeSetter+0xc4>
			else if(IsDown())
 80015fa:	f000 fb13 	bl	8001c24 <IsDown>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <timeSetter+0xc4>
				curr_ap--;
 8001604:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <timeSetter+0x2a4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	3b01      	subs	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <timeSetter+0x2a4>)
 800160e:	701a      	strb	r2, [r3, #0]
			curr_ap = curr_ap % 2;
 8001610:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <timeSetter+0x2a4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b75      	ldr	r3, [pc, #468]	; (80017f0 <timeSetter+0x2a4>)
 800161c:	701a      	strb	r2, [r3, #0]
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 800161e:	4b74      	ldr	r3, [pc, #464]	; (80017f0 <timeSetter+0x2a4>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	4a72      	ldr	r2, [pc, #456]	; (80017f4 <timeSetter+0x2a8>)
 800162c:	441a      	add	r2, r3
 800162e:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <timeSetter+0x290>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <timeSetter+0x294>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <timeSetter+0x298>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	9100      	str	r1, [sp, #0]
 8001642:	4603      	mov	r3, r0
 8001644:	496c      	ldr	r1, [pc, #432]	; (80017f8 <timeSetter+0x2ac>)
 8001646:	4869      	ldr	r0, [pc, #420]	; (80017ec <timeSetter+0x2a0>)
 8001648:	f008 f948 	bl	80098dc <siprintf>
		break;
 800164c:	e11e      	b.n	800188c <timeSetter+0x340>
	case HOUR:
		if(toggleChar)
 800164e:	4b62      	ldr	r3, [pc, #392]	; (80017d8 <timeSetter+0x28c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d014      	beq.n	8001680 <timeSetter+0x134>
		{
			sprintf(controlTime, "%s __:%02d:%02d",ampm[curr_ap%2],curr_m,curr_s);
 8001656:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <timeSetter+0x2a4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	4a63      	ldr	r2, [pc, #396]	; (80017f4 <timeSetter+0x2a8>)
 8001666:	441a      	add	r2, r3
 8001668:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <timeSetter+0x294>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	4b5d      	ldr	r3, [pc, #372]	; (80017e4 <timeSetter+0x298>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	460b      	mov	r3, r1
 8001676:	4961      	ldr	r1, [pc, #388]	; (80017fc <timeSetter+0x2b0>)
 8001678:	485c      	ldr	r0, [pc, #368]	; (80017ec <timeSetter+0x2a0>)
 800167a:	f008 f92f 	bl	80098dc <siprintf>
				curr_h--;
			}
			curr_h %= 24;
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
		}
		break;
 800167e:	e105      	b.n	800188c <timeSetter+0x340>
			if(IsUP())
 8001680:	f000 fabe 	bl	8001c00 <IsUP>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <timeSetter+0x14c>
				curr_h++;
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <timeSetter+0x290>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b52      	ldr	r3, [pc, #328]	; (80017dc <timeSetter+0x290>)
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e00a      	b.n	80016ae <timeSetter+0x162>
			else if(IsDown())
 8001698:	f000 fac4 	bl	8001c24 <IsDown>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <timeSetter+0x162>
				curr_h--;
 80016a2:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <timeSetter+0x290>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <timeSetter+0x290>)
 80016ac:	701a      	strb	r2, [r3, #0]
			curr_h %= 24;
 80016ae:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <timeSetter+0x290>)
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <timeSetter+0x2b4>)
 80016b4:	fba3 1302 	umull	r1, r3, r3, r2
 80016b8:	0919      	lsrs	r1, r3, #4
 80016ba:	460b      	mov	r3, r1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	440b      	add	r3, r1
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b45      	ldr	r3, [pc, #276]	; (80017dc <timeSetter+0x290>)
 80016c8:	701a      	strb	r2, [r3, #0]
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 80016ca:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <timeSetter+0x2a4>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	4a47      	ldr	r2, [pc, #284]	; (80017f4 <timeSetter+0x2a8>)
 80016d8:	441a      	add	r2, r3
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <timeSetter+0x290>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <timeSetter+0x294>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <timeSetter+0x298>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9100      	str	r1, [sp, #0]
 80016ee:	4603      	mov	r3, r0
 80016f0:	4941      	ldr	r1, [pc, #260]	; (80017f8 <timeSetter+0x2ac>)
 80016f2:	483e      	ldr	r0, [pc, #248]	; (80017ec <timeSetter+0x2a0>)
 80016f4:	f008 f8f2 	bl	80098dc <siprintf>
		break;
 80016f8:	e0c8      	b.n	800188c <timeSetter+0x340>
	case MIN:
		if(toggleChar)
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <timeSetter+0x28c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d013      	beq.n	800172a <timeSetter+0x1de>
		{
			sprintf(controlTime, "%s %02d:__:%02d",ampm[curr_ap],curr_h,curr_s);
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <timeSetter+0x2a4>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	4a39      	ldr	r2, [pc, #228]	; (80017f4 <timeSetter+0x2a8>)
 8001710:	441a      	add	r2, r3
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <timeSetter+0x290>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	4619      	mov	r1, r3
 8001718:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <timeSetter+0x298>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	460b      	mov	r3, r1
 8001720:	4938      	ldr	r1, [pc, #224]	; (8001804 <timeSetter+0x2b8>)
 8001722:	4832      	ldr	r0, [pc, #200]	; (80017ec <timeSetter+0x2a0>)
 8001724:	f008 f8da 	bl	80098dc <siprintf>
				curr_m--;
			}
			curr_m %= 60;
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
		}
		break;
 8001728:	e0b0      	b.n	800188c <timeSetter+0x340>
			if(IsUP())
 800172a:	f000 fa69 	bl	8001c00 <IsUP>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <timeSetter+0x1f6>
				curr_m++;
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <timeSetter+0x294>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <timeSetter+0x294>)
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e00a      	b.n	8001758 <timeSetter+0x20c>
			else if(IsDown())
 8001742:	f000 fa6f 	bl	8001c24 <IsDown>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <timeSetter+0x20c>
				curr_m--;
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <timeSetter+0x294>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	3b01      	subs	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <timeSetter+0x294>)
 8001756:	701a      	strb	r2, [r3, #0]
			curr_m %= 60;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <timeSetter+0x294>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <timeSetter+0x2bc>)
 800175e:	fba3 1302 	umull	r1, r3, r3, r2
 8001762:	0959      	lsrs	r1, r3, #5
 8001764:	460b      	mov	r3, r1
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	1a5b      	subs	r3, r3, r1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <timeSetter+0x294>)
 8001772:	701a      	strb	r2, [r3, #0]
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <timeSetter+0x2a4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <timeSetter+0x2a8>)
 8001782:	441a      	add	r2, r3
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <timeSetter+0x290>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <timeSetter+0x294>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <timeSetter+0x298>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	9100      	str	r1, [sp, #0]
 8001798:	4603      	mov	r3, r0
 800179a:	4917      	ldr	r1, [pc, #92]	; (80017f8 <timeSetter+0x2ac>)
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <timeSetter+0x2a0>)
 800179e:	f008 f89d 	bl	80098dc <siprintf>
		break;
 80017a2:	e073      	b.n	800188c <timeSetter+0x340>
	case SEC:
		if(toggleChar)
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <timeSetter+0x28c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d031      	beq.n	8001810 <timeSetter+0x2c4>
		{
			sprintf(controlTime, "%s %02d:%02d:__",ampm[curr_ap],curr_h,curr_m);
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <timeSetter+0x2a4>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <timeSetter+0x2a8>)
 80017ba:	441a      	add	r2, r3
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <timeSetter+0x290>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <timeSetter+0x294>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	460b      	mov	r3, r1
 80017ca:	4910      	ldr	r1, [pc, #64]	; (800180c <timeSetter+0x2c0>)
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <timeSetter+0x2a0>)
 80017ce:	f008 f885 	bl	80098dc <siprintf>
				curr_s--;
			}
			curr_s %= 60;
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
		}
		break;
 80017d2:	e05b      	b.n	800188c <timeSetter+0x340>
 80017d4:	20000570 	.word	0x20000570
 80017d8:	20000571 	.word	0x20000571
 80017dc:	200004d2 	.word	0x200004d2
 80017e0:	200004d3 	.word	0x200004d3
 80017e4:	200004d4 	.word	0x200004d4
 80017e8:	0800aa48 	.word	0x0800aa48
 80017ec:	2000043c 	.word	0x2000043c
 80017f0:	200004d1 	.word	0x200004d1
 80017f4:	20000000 	.word	0x20000000
 80017f8:	0800aa20 	.word	0x0800aa20
 80017fc:	0800aa5c 	.word	0x0800aa5c
 8001800:	aaaaaaab 	.word	0xaaaaaaab
 8001804:	0800aa6c 	.word	0x0800aa6c
 8001808:	88888889 	.word	0x88888889
 800180c:	0800aa7c 	.word	0x0800aa7c
			if(IsUP())
 8001810:	f000 f9f6 	bl	8001c00 <IsUP>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <timeSetter+0x2dc>
				curr_s++;
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <timeSetter+0x36c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <timeSetter+0x36c>)
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e00a      	b.n	800183e <timeSetter+0x2f2>
			else if(IsDown())
 8001828:	f000 f9fc 	bl	8001c24 <IsDown>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <timeSetter+0x2f2>
				curr_s--;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <timeSetter+0x36c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <timeSetter+0x36c>)
 800183c:	701a      	strb	r2, [r3, #0]
			curr_s %= 60;
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <timeSetter+0x36c>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <timeSetter+0x370>)
 8001844:	fba3 1302 	umull	r1, r3, r3, r2
 8001848:	0959      	lsrs	r1, r3, #5
 800184a:	460b      	mov	r3, r1
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a5b      	subs	r3, r3, r1
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <timeSetter+0x36c>)
 8001858:	701a      	strb	r2, [r3, #0]
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <timeSetter+0x374>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <timeSetter+0x378>)
 8001868:	441a      	add	r2, r3
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <timeSetter+0x37c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <timeSetter+0x380>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <timeSetter+0x36c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	9100      	str	r1, [sp, #0]
 800187e:	4603      	mov	r3, r0
 8001880:	4913      	ldr	r1, [pc, #76]	; (80018d0 <timeSetter+0x384>)
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <timeSetter+0x388>)
 8001884:	f008 f82a 	bl	80098dc <siprintf>
		break;
 8001888:	e000      	b.n	800188c <timeSetter+0x340>
	default:
		break;
 800188a:	bf00      	nop
	}
	LCD_PrintAll("Set Time      ", controlTime);
 800188c:	4911      	ldr	r1, [pc, #68]	; (80018d4 <timeSetter+0x388>)
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <timeSetter+0x38c>)
 8001890:	f7ff fbb4 	bl	8000ffc <LCD_PrintAll>
	toggleChar = !toggleChar;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <timeSetter+0x390>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f083 0301 	eor.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <timeSetter+0x390>)
 80018b0:	701a      	strb	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200004d4 	.word	0x200004d4
 80018bc:	88888889 	.word	0x88888889
 80018c0:	200004d1 	.word	0x200004d1
 80018c4:	20000000 	.word	0x20000000
 80018c8:	200004d2 	.word	0x200004d2
 80018cc:	200004d3 	.word	0x200004d3
 80018d0:	0800aa20 	.word	0x0800aa20
 80018d4:	2000043c 	.word	0x2000043c
 80018d8:	0800aa8c 	.word	0x0800aa8c
 80018dc:	20000571 	.word	0x20000571

080018e0 <saveCurrentTime>:
void saveCurrentTime()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
//	overWriteFlash(&flash, 11);				// HH
//	flash.USER_TARGET_ADDR += 4;
//	overWriteFlash(&flash, 30);				// MM
//	flash.USER_TARGET_ADDR += 4;
//	overWriteFlash(&flash, 30);				//SS
	for(int index = 0; index < FLASH_TIME_DATA + 20; index += 4)
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	e00b      	b.n	8001904 <saveCurrentTime+0x24>
	{
		overWriteFlash(&flash, 0x12345678);
 80018ec:	490e      	ldr	r1, [pc, #56]	; (8001928 <saveCurrentTime+0x48>)
 80018ee:	480f      	ldr	r0, [pc, #60]	; (800192c <saveCurrentTime+0x4c>)
 80018f0:	f7ff f8dc 	bl	8000aac <overWriteFlash>
		flash.USER_TARGET_ADDR += 4;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <saveCurrentTime+0x4c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	3304      	adds	r3, #4
 80018fa:	4a0c      	ldr	r2, [pc, #48]	; (800192c <saveCurrentTime+0x4c>)
 80018fc:	6093      	str	r3, [r2, #8]
	for(int index = 0; index < FLASH_TIME_DATA + 20; index += 4)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b13      	cmp	r3, #19
 8001908:	ddf0      	ble.n	80018ec <saveCurrentTime+0xc>
	}
	flash.USER_TARGET_ADDR = flash.USER_START_ADDR;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <saveCurrentTime+0x4c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <saveCurrentTime+0x4c>)
 8001910:	6093      	str	r3, [r2, #8]
	isSave = false;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <saveCurrentTime+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	clock_state = NORMAL_STATE;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <saveCurrentTime+0x54>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	12345678 	.word	0x12345678
 800192c:	200004ec 	.word	0x200004ec
 8001930:	200004d0 	.word	0x200004d0
 8001934:	200003c0 	.word	0x200003c0

08001938 <selectSong>:
{
	isSave = false;
	clock_state = NORMAL_STATE;
}
void selectSong(void)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
	static uint8_t songIndex = 0, now_playing = 0;
	char currentSong[LCD_SIZE] = {0};
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]

	if(IsUP())
 800194c:	f000 f958 	bl	8001c00 <IsUP>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <selectSong+0x36>
	{
		songIndex++;
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <selectSong+0xbc>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <selectSong+0xbc>)
 8001960:	701a      	strb	r2, [r3, #0]
		now_playing = 0;
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <selectSong+0xc0>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]

		LCD_Clear();
 8001968:	f7ff fb62 	bl	8001030 <LCD_Clear>
 800196c:	e00f      	b.n	800198e <selectSong+0x56>
	}
	else if(IsDown())
 800196e:	f000 f959 	bl	8001c24 <IsDown>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <selectSong+0x56>
	{
		songIndex--;
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <selectSong+0xbc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <selectSong+0xbc>)
 8001982:	701a      	strb	r2, [r3, #0]
		now_playing = 0;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <selectSong+0xc0>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]

		LCD_Clear();
 800198a:	f7ff fb51 	bl	8001030 <LCD_Clear>
	}
	printf("y: %d\r\n",Joycon[1]);
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <selectSong+0xc4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4619      	mov	r1, r3
 8001994:	481a      	ldr	r0, [pc, #104]	; (8001a00 <selectSong+0xc8>)
 8001996:	f007 feff 	bl	8009798 <iprintf>
	songIndex %= 2;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <selectSong+0xbc>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <selectSong+0xbc>)
 80019a6:	701a      	strb	r2, [r3, #0]
	if(songIndex == 0)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <selectSong+0xbc>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <selectSong+0x84>
	{
		memcpy(currentSong, "1. Spring Water", sizeof(currentSong)/sizeof(currentSong[0]));
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <selectSong+0xcc>)
 80019b2:	463c      	mov	r4, r7
 80019b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019ba:	e009      	b.n	80019d0 <selectSong+0x98>
	}
	else if(songIndex == 1)
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <selectSong+0xbc>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d105      	bne.n	80019d0 <selectSong+0x98>
	{
		memcpy(currentSong, "2. Three Bears", sizeof(currentSong)/sizeof(currentSong[0]));
 80019c4:	463b      	mov	r3, r7
 80019c6:	2210      	movs	r2, #16
 80019c8:	490f      	ldr	r1, [pc, #60]	; (8001a08 <selectSong+0xd0>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f008 f8f9 	bl	8009bc2 <memcpy>
	}
	LCD_PrintAll("Wake Up Call", currentSong);
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <selectSong+0xd4>)
 80019d6:	f7ff fb11 	bl	8000ffc <LCD_PrintAll>
	songList[songIndex](&now_playing);
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <selectSong+0xbc>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <selectSong+0xd8>)
 80019e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <selectSong+0xc0>)
 80019e8:	4798      	blx	r3

}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000572 	.word	0x20000572
 80019f8:	20000573 	.word	0x20000573
 80019fc:	20000404 	.word	0x20000404
 8001a00:	0800aa9c 	.word	0x0800aa9c
 8001a04:	0800aaa4 	.word	0x0800aaa4
 8001a08:	0800aab4 	.word	0x0800aab4
 8001a0c:	0800aac4 	.word	0x0800aac4
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin);
 8001a1c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <HAL_RTC_AlarmAEventCallback+0x20>)
 8001a22:	f003 f87a 	bl	8004b1a <HAL_GPIO_TogglePin>
	printf("RINGRINGRINGRING!!!!!!!!!!!!!!!!!!!!\r\n");
 8001a26:	4804      	ldr	r0, [pc, #16]	; (8001a38 <HAL_RTC_AlarmAEventCallback+0x24>)
 8001a28:	f007 ff1c 	bl	8009864 <puts>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40020400 	.word	0x40020400
 8001a38:	0800aad4 	.word	0x0800aad4

08001a3c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
	//stime = HxAL_GetTick();
	// joystick switch
	GPIO_PinState pinstate;
	if(GPIO_Pin == SWITCH_Pin)
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	f040 808c 	bne.w	8001b66 <HAL_GPIO_EXTI_Callback+0x12a>
	{
		//printf("switch toggle\r\n");
		stime = HAL_GetTick();
 8001a4e:	f000 ff0f 	bl	8002870 <HAL_GetTick>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x134>)
 8001a56:	6013      	str	r3, [r2, #0]
		interval = stime - etime;
 8001a58:	4b45      	ldr	r3, [pc, #276]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x134>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x138>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001a64:	6013      	str	r3, [r2, #0]
		etime = stime;
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x134>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a42      	ldr	r2, [pc, #264]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x138>)
 8001a6c:	6013      	str	r3, [r2, #0]
		if(interval > 100)
 8001a6e:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d977      	bls.n	8001b66 <HAL_GPIO_EXTI_Callback+0x12a>
		{
			memset(buf,0, sizeof(buf));
 8001a76:	2278      	movs	r2, #120	; 0x78
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4840      	ldr	r0, [pc, #256]	; (8001b7c <HAL_GPIO_EXTI_Callback+0x140>)
 8001a7c:	f008 f826 	bl	8009acc <memset>
			pinstate = HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin);
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	483f      	ldr	r0, [pc, #252]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x144>)
 8001a84:	f003 f818 	bl	8004ab8 <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
			if(pinstate == GPIO_PIN_SET)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d114      	bne.n	8001abc <HAL_GPIO_EXTI_Callback+0x80>
			{
				printf("OFF\r\n");
 8001a92:	483c      	ldr	r0, [pc, #240]	; (8001b84 <HAL_GPIO_EXTI_Callback+0x148>)
 8001a94:	f007 fee6 	bl	8009864 <puts>
				holdclk = interval;
 8001a98:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001a9e:	6013      	str	r3, [r2, #0]
				oneClick++;
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x150>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x150>)
 8001aaa:	701a      	strb	r2, [r3, #0]
				oneClick %= 2;
 8001aac:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x150>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x150>)
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e016      	b.n	8001aea <HAL_GPIO_EXTI_Callback+0xae>
			}
			else if(pinstate == GPIO_PIN_RESET)
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d113      	bne.n	8001aea <HAL_GPIO_EXTI_Callback+0xae>
			{
				printf("ON\r\n");
 8001ac2:	4833      	ldr	r0, [pc, #204]	; (8001b90 <HAL_GPIO_EXTI_Callback+0x154>)
 8001ac4:	f007 fece 	bl	8009864 <puts>
				holdclk = 0;
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
				if(interval < 1000)
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ad6:	d205      	bcs.n	8001ae4 <HAL_GPIO_EXTI_Callback+0xa8>
				{
					dbclk++;
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x158>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x158>)
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_EXTI_Callback+0xae>
				}
				else
				{
					dbclk = 0;
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x158>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
				}

			}
			//printf("intvl time: %d\r\n",interval);
			// Alarm time Setting State
			if(holdclk >= 3000)
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d903      	bls.n	8001afe <HAL_GPIO_EXTI_Callback+0xc2>
			{
				printf("***held at least 3 sec ***\r\n");
 8001af6:	4828      	ldr	r0, [pc, #160]	; (8001b98 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001af8:	f007 feb4 	bl	8009864 <puts>
 8001afc:	e010      	b.n	8001b20 <HAL_GPIO_EXTI_Callback+0xe4>
			}
			// Morning call Setting State
			else if(dbclk >= 2)
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x158>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d90c      	bls.n	8001b20 <HAL_GPIO_EXTI_Callback+0xe4>
			{
				printf("***double click activate***\r\n");
 8001b06:	4825      	ldr	r0, [pc, #148]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x160>)
 8001b08:	f007 feac 	bl	8009864 <puts>
				if(clock_state == NORMAL_STATE)
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <HAL_GPIO_EXTI_Callback+0xde>
				{
					clock_state = MUSIC_SELECT;
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001b16:	2203      	movs	r2, #3
 8001b18:	701a      	strb	r2, [r3, #0]
				}
				dbclk = 0;
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_GPIO_EXTI_Callback+0x158>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
			}
			// Timer Setting State
			if(oneClick == 1)
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x150>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11e      	bne.n	8001b66 <HAL_GPIO_EXTI_Callback+0x12a>
			{
				printf("timer setting\r\n");
 8001b28:	481e      	ldr	r0, [pc, #120]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001b2a:	f007 fe9b 	bl	8009864 <puts>
				cpyflag = 1;
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
				if(clock_state == NORMAL_STATE)
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x10e>
				{
					clock_state = TIME_SETTING;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
					printf("set to Time\r\n");
 8001b42:	481a      	ldr	r0, [pc, #104]	; (8001bac <HAL_GPIO_EXTI_Callback+0x170>)
 8001b44:	f007 fe8e 	bl	8009864 <puts>
					isSave = true;
				}
			}
		}
	}
}
 8001b48:	e00d      	b.n	8001b66 <HAL_GPIO_EXTI_Callback+0x12a>
				else if(clock_state == TIME_SETTING || clock_state == MUSIC_SELECT)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_EXTI_Callback+0x11e>
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d105      	bne.n	8001b66 <HAL_GPIO_EXTI_Callback+0x12a>
					printf("set to Save\r\n");
 8001b5a:	4815      	ldr	r0, [pc, #84]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001b5c:	f007 fe82 	bl	8009864 <puts>
					isSave = true;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_GPIO_EXTI_Callback+0x178>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200004d8 	.word	0x200004d8
 8001b74:	200004dc 	.word	0x200004dc
 8001b78:	200004e0 	.word	0x200004e0
 8001b7c:	200004f8 	.word	0x200004f8
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	0800aafc 	.word	0x0800aafc
 8001b88:	200004e8 	.word	0x200004e8
 8001b8c:	200004cf 	.word	0x200004cf
 8001b90:	0800ab04 	.word	0x0800ab04
 8001b94:	200004e4 	.word	0x200004e4
 8001b98:	0800ab08 	.word	0x0800ab08
 8001b9c:	0800ab24 	.word	0x0800ab24
 8001ba0:	200003c0 	.word	0x200003c0
 8001ba4:	0800ab44 	.word	0x0800ab44
 8001ba8:	200004ce 	.word	0x200004ce
 8001bac:	0800ab54 	.word	0x0800ab54
 8001bb0:	0800ab64 	.word	0x0800ab64
 8001bb4:	200004d0 	.word	0x200004d0

08001bb8 <IsRight>:

bool IsRight(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	return Joycon[0] >= RIGHT ? true : false;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <IsRight+0x20>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	bf8c      	ite	hi
 8001bc8:	2301      	movhi	r3, #1
 8001bca:	2300      	movls	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	20000404 	.word	0x20000404

08001bdc <IsLeft>:
bool IsLeft(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	return Joycon[0] <= LEFT ? true : false;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <IsLeft+0x20>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be8:	bf94      	ite	ls
 8001bea:	2301      	movls	r3, #1
 8001bec:	2300      	movhi	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000404 	.word	0x20000404

08001c00 <IsUP>:
bool IsUP(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
	return Joycon[1] >= UP ? true : false;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <IsUP+0x20>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	bf8c      	ite	hi
 8001c10:	2301      	movhi	r3, #1
 8001c12:	2300      	movls	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	20000404 	.word	0x20000404

08001c24 <IsDown>:
bool IsDown(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	return Joycon[1] <= DOWN ? true : false;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <IsDown+0x20>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c30:	bf94      	ite	ls
 8001c32:	2301      	movls	r3, #1
 8001c34:	2300      	movhi	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000404 	.word	0x20000404

08001c48 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	// From COM3 ->(UART3)ST(UART4) ->BLE
	if(huart->Instance == USART3)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2c      	ldr	r2, [pc, #176]	; (8001d08 <HAL_UART_RxCpltCallback+0xc0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d141      	bne.n	8001cde <HAL_UART_RxCpltCallback+0x96>
	{
		// received enter key
		if(rx3Data == '\r' || ble.cur_BLE_Index > 64)
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <HAL_UART_RxCpltCallback+0xc4>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b0d      	cmp	r3, #13
 8001c60:	d004      	beq.n	8001c6c <HAL_UART_RxCpltCallback+0x24>
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001c64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001c68:	2b40      	cmp	r3, #64	; 0x40
 8001c6a:	d91c      	bls.n	8001ca6 <HAL_UART_RxCpltCallback+0x5e>
		{
			printf("\r\n send following data to BLE \r\n");
 8001c6c:	4829      	ldr	r0, [pc, #164]	; (8001d14 <HAL_UART_RxCpltCallback+0xcc>)
 8001c6e:	f007 fdf9 	bl	8009864 <puts>
			printf(ble.bleBuffer);
 8001c72:	4827      	ldr	r0, [pc, #156]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001c74:	f007 fd90 	bl	8009798 <iprintf>
			printf("\r\n");
 8001c78:	4827      	ldr	r0, [pc, #156]	; (8001d18 <HAL_UART_RxCpltCallback+0xd0>)
 8001c7a:	f007 fdf3 	bl	8009864 <puts>
			HAL_UART_Transmit(&huart4, (uint8_t*)&ble.bleBuffer, ble.cur_BLE_Index, 500);
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001c80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c8a:	4921      	ldr	r1, [pc, #132]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001c8c:	4823      	ldr	r0, [pc, #140]	; (8001d1c <HAL_UART_RxCpltCallback+0xd4>)
 8001c8e:	f006 f994 	bl	8007fba <HAL_UART_Transmit>
			memset(ble.bleBuffer, 0, sizeof(ble.bleBuffer)/sizeof(ble.bleBuffer[0]));
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	2100      	movs	r1, #0
 8001c96:	481e      	ldr	r0, [pc, #120]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001c98:	f007 ff18 	bl	8009acc <memset>
			ble.cur_BLE_Index = 0;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001ca4:	e015      	b.n	8001cd2 <HAL_UART_RxCpltCallback+0x8a>
		}
		else
		{

			ble.bleBuffer[ble.cur_BLE_Index] = rx3Data;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_UART_RxCpltCallback+0xc4>)
 8001cb0:	7819      	ldrb	r1, [r3, #0]
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001cb4:	5499      	strb	r1, [r3, r2]
			printf("collecting: %c\r\n", (char)rx3Data);
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_UART_RxCpltCallback+0xc4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4818      	ldr	r0, [pc, #96]	; (8001d20 <HAL_UART_RxCpltCallback+0xd8>)
 8001cbe:	f007 fd6b 	bl	8009798 <iprintf>
			ble.cur_BLE_Index++;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001cc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_UART_RxCpltCallback+0xc8>)
 8001cce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	490d      	ldr	r1, [pc, #52]	; (8001d0c <HAL_UART_RxCpltCallback+0xc4>)
 8001cd6:	4813      	ldr	r0, [pc, #76]	; (8001d24 <HAL_UART_RxCpltCallback+0xdc>)
 8001cd8:	f006 fa01 	bl	80080de <HAL_UART_Receive_IT>
		}
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
#endif
	}

}
 8001cdc:	e00f      	b.n	8001cfe <HAL_UART_RxCpltCallback+0xb6>
	else if(huart->Instance == UART4)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_UART_RxCpltCallback+0xe0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d10a      	bne.n	8001cfe <HAL_UART_RxCpltCallback+0xb6>
		HAL_UART_Transmit(&huart3, (uint8_t*)&rx4Data, sizeof(rx4Data), 100);
 8001ce8:	2364      	movs	r3, #100	; 0x64
 8001cea:	2201      	movs	r2, #1
 8001cec:	490f      	ldr	r1, [pc, #60]	; (8001d2c <HAL_UART_RxCpltCallback+0xe4>)
 8001cee:	480d      	ldr	r0, [pc, #52]	; (8001d24 <HAL_UART_RxCpltCallback+0xdc>)
 8001cf0:	f006 f963 	bl	8007fba <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	490d      	ldr	r1, [pc, #52]	; (8001d2c <HAL_UART_RxCpltCallback+0xe4>)
 8001cf8:	4808      	ldr	r0, [pc, #32]	; (8001d1c <HAL_UART_RxCpltCallback+0xd4>)
 8001cfa:	f006 f9f0 	bl	80080de <HAL_UART_Receive_IT>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40004800 	.word	0x40004800
 8001d0c:	200003c1 	.word	0x200003c1
 8001d10:	2000044c 	.word	0x2000044c
 8001d14:	0800ab74 	.word	0x0800ab74
 8001d18:	0800ab94 	.word	0x0800ab94
 8001d1c:	20000628 	.word	0x20000628
 8001d20:	0800ab98 	.word	0x0800ab98
 8001d24:	2000066c 	.word	0x2000066c
 8001d28:	40004c00 	.word	0x40004c00
 8001d2c:	200003c2 	.word	0x200003c2

08001d30 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>
	...

08001d3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b090      	sub	sp, #64	; 0x40
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001d56:	463b      	mov	r3, r7
 8001d58:	2228      	movs	r2, #40	; 0x28
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 feb5 	bl	8009acc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001d64:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <MX_RTC_Init+0x120>)
 8001d66:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001d68:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001d70:	227f      	movs	r2, #127	; 0x7f
 8001d72:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001d76:	22ff      	movs	r2, #255	; 0xff
 8001d78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d8c:	4832      	ldr	r0, [pc, #200]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001d8e:	f004 fc61 	bl	8006654 <HAL_RTC_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d98:	f7ff ffca 	bl	8001d30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4824      	ldr	r0, [pc, #144]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001dc6:	f004 fcbb 	bl	8006740 <HAL_RTC_SetTime>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001dd0:	f7ff ffae 	bl	8001d30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df0:	2201      	movs	r2, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	4818      	ldr	r0, [pc, #96]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001df6:	f004 fd9b 	bl	8006930 <HAL_RTC_SetDate>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001e00:	f7ff ff96 	bl	8001d30 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001e14:	2300      	movs	r3, #0
 8001e16:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_RTC_Init+0x124>)
 8001e22:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e38:	463b      	mov	r3, r7
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4806      	ldr	r0, [pc, #24]	; (8001e58 <MX_RTC_Init+0x11c>)
 8001e40:	f004 fe4a 	bl	8006ad8 <HAL_RTC_SetAlarm_IT>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8001e4a:	f7ff ff71 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	3740      	adds	r7, #64	; 0x40
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000574 	.word	0x20000574
 8001e5c:	40002800 	.word	0x40002800
 8001e60:	80808000 	.word	0x80808000

08001e64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	; 0x38
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	2230      	movs	r2, #48	; 0x30
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f007 fe29 	bl	8009acc <memset>
  if(rtcHandle->Instance==RTC)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <HAL_RTC_MspInit+0x4c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d111      	bne.n	8001ea8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e84:	2320      	movs	r3, #32
 8001e86:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fa1e 	bl	80062d4 <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001e9e:	f7ff ff47 	bl	8001d30 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RTC_MspInit+0x50>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3738      	adds	r7, #56	; 0x38
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40002800 	.word	0x40002800
 8001eb4:	42470e3c 	.word	0x42470e3c

08001eb8 <threeBear_song>:
		20,20,20,20,20,20,80,
		0
};

void threeBear_song(int* index)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
		TIM3->CCR3 = 0;
		HAL_Delay(threeBears_intvl[index]);
		TIM3->CCR3 = threeBears_note[index]/2;
	}
	*/
	TIM3->ARR = threeBears_note[*index];
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <threeBear_song+0x78>)
 8001ec6:	491b      	ldr	r1, [pc, #108]	; (8001f34 <threeBear_song+0x7c>)
 8001ec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ecc:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CCR3 = threeBears_note[*index]/2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <threeBear_song+0x7c>)
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <threeBear_song+0x78>)
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(300);
 8001ede:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ee2:	f000 fcd1 	bl	8002888 <HAL_Delay>
	TIM3->CCR3 = 0;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <threeBear_song+0x78>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(threeBears_intvl[*index]);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <threeBear_song+0x80>)
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fcc6 	bl	8002888 <HAL_Delay>
	TIM3->CCR3 = threeBears_note[*index]/2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <threeBear_song+0x7c>)
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <threeBear_song+0x78>)
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	63d3      	str	r3, [r2, #60]	; 0x3c
	if(*index > sizeof(threeBears_note)/sizeof(threeBears_note[0])-1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b33      	cmp	r3, #51	; 0x33
 8001f12:	d903      	bls.n	8001f1c <threeBear_song+0x64>
	{
		*index = 0;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		(*index) ++;
	}
}
 8001f1a:	e004      	b.n	8001f26 <threeBear_song+0x6e>
		(*index) ++;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40000400 	.word	0x40000400
 8001f34:	0800abac 	.word	0x0800abac
 8001f38:	0800ac7c 	.word	0x0800ac7c

08001f3c <springWater_song>:

void springWater_song(int* index)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
		TIM3->CCR3 = 0;
		HAL_Delay(springWater_intvl[index]);
		TIM3->CCR3 = springWater_note[index]/2;
	}
	*/
	TIM3->ARR = springWater_note[*index];
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <springWater_song+0x78>)
 8001f4a:	491b      	ldr	r1, [pc, #108]	; (8001fb8 <springWater_song+0x7c>)
 8001f4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f50:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CCR3 = springWater_note[*index]/2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <springWater_song+0x7c>)
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <springWater_song+0x78>)
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(300);
 8001f62:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f66:	f000 fc8f 	bl	8002888 <HAL_Delay>
	TIM3->CCR3 = 0;
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <springWater_song+0x78>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(springWater_intvl[*index]);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <springWater_song+0x80>)
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fc84 	bl	8002888 <HAL_Delay>
	TIM3->CCR3 = springWater_note[*index]/2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <springWater_song+0x7c>)
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <springWater_song+0x78>)
 8001f8c:	085b      	lsrs	r3, r3, #1
 8001f8e:	63d3      	str	r3, [r2, #60]	; 0x3c
	if(*index > sizeof(springWater_note) / sizeof(springWater_note[0])-1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b3a      	cmp	r3, #58	; 0x3a
 8001f96:	d903      	bls.n	8001fa0 <springWater_song+0x64>
	{
		*index = 0;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		(*index) ++;
	}
}
 8001f9e:	e004      	b.n	8001faa <springWater_song+0x6e>
		(*index) ++;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	0800ad4c 	.word	0x0800ad4c
 8001fbc:	0800ae38 	.word	0x0800ae38

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <HAL_MspInit+0x4c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_MspInit+0x4c>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <NMI_Handler+0x4>

08002016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <MemManage_Handler+0x4>

08002022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <UsageFault_Handler+0x4>

0800202e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205c:	f000 fbf4 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <ADC_IRQHandler+0x10>)
 800206a:	f000 fc74 	bl	8002956 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000094 	.word	0x20000094

08002078 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 800207c:	2080      	movs	r0, #128	; 0x80
 800207e:	f002 fd67 	bl	8004b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <TIM2_IRQHandler+0x10>)
 800208e:	f005 f8e3 	bl	8007258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000598 	.word	0x20000598

0800209c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <USART3_IRQHandler+0x10>)
 80020a2:	f006 f84d 	bl	8008140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000066c 	.word	0x2000066c

080020b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80020b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020b8:	f002 fd4a 	bl	8004b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <RTC_Alarm_IRQHandler+0x10>)
 80020c6:	f004 fe49 	bl	8006d5c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000574 	.word	0x20000574

080020d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <UART4_IRQHandler+0x10>)
 80020da:	f006 f831 	bl	8008140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000628 	.word	0x20000628

080020e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <DMA2_Stream0_IRQHandler+0x10>)
 80020ee:	f001 fbdf 	bl	80038b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200000dc 	.word	0x200000dc

080020fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e00a      	b.n	8002124 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800210e:	f3af 8000 	nop.w
 8002112:	4601      	mov	r1, r0
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60ba      	str	r2, [r7, #8]
 800211a:	b2ca      	uxtb	r2, r1
 800211c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf0      	blt.n	800210e <_read+0x12>
  }

  return len;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215e:	605a      	str	r2, [r3, #4]
  return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_isatty>:

int _isatty(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f007 fcca 	bl	8009b68 <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	220c      	movs	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20030000 	.word	0x20030000
 8002200:	00000400 	.word	0x00000400
 8002204:	20000594 	.word	0x20000594
 8002208:	20000d30 	.word	0x20000d30

0800220c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <SystemInit+0x20>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <SystemInit+0x20>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	463b      	mov	r3, r7
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <MX_TIM2_Init+0x98>)
 800224e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002252:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <MX_TIM2_Init+0x98>)
 8002256:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800225a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <MX_TIM2_Init+0x98>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <MX_TIM2_Init+0x98>)
 8002264:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002268:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_TIM2_Init+0x98>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <MX_TIM2_Init+0x98>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002276:	4814      	ldr	r0, [pc, #80]	; (80022c8 <MX_TIM2_Init+0x98>)
 8002278:	f004 fe7d 	bl	8006f76 <HAL_TIM_Base_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002282:	f7ff fd55 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	4619      	mov	r1, r3
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <MX_TIM2_Init+0x98>)
 8002294:	f005 f9aa 	bl	80075ec <HAL_TIM_ConfigClockSource>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800229e:	f7ff fd47 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022aa:	463b      	mov	r3, r7
 80022ac:	4619      	mov	r1, r3
 80022ae:	4806      	ldr	r0, [pc, #24]	; (80022c8 <MX_TIM2_Init+0x98>)
 80022b0:	f005 fda6 	bl	8007e00 <HAL_TIMEx_MasterConfigSynchronization>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80022ba:	f7ff fd39 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000598 	.word	0x20000598

080022cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
 80022f8:	615a      	str	r2, [r3, #20]
 80022fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <MX_TIM3_Init+0xe4>)
 80022fe:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <MX_TIM3_Init+0xe8>)
 8002300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002302:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <MX_TIM3_Init+0xe4>)
 8002304:	2253      	movs	r2, #83	; 0x53
 8002306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <MX_TIM3_Init+0xe4>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <MX_TIM3_Init+0xe4>)
 8002310:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002314:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <MX_TIM3_Init+0xe4>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <MX_TIM3_Init+0xe4>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002322:	4823      	ldr	r0, [pc, #140]	; (80023b0 <MX_TIM3_Init+0xe4>)
 8002324:	f004 fe27 	bl	8006f76 <HAL_TIM_Base_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800232e:	f7ff fcff 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233c:	4619      	mov	r1, r3
 800233e:	481c      	ldr	r0, [pc, #112]	; (80023b0 <MX_TIM3_Init+0xe4>)
 8002340:	f005 f954 	bl	80075ec <HAL_TIM_ConfigClockSource>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800234a:	f7ff fcf1 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800234e:	4818      	ldr	r0, [pc, #96]	; (80023b0 <MX_TIM3_Init+0xe4>)
 8002350:	f004 fe60 	bl	8007014 <HAL_TIM_PWM_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800235a:	f7ff fce9 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002366:	f107 0320 	add.w	r3, r7, #32
 800236a:	4619      	mov	r1, r3
 800236c:	4810      	ldr	r0, [pc, #64]	; (80023b0 <MX_TIM3_Init+0xe4>)
 800236e:	f005 fd47 	bl	8007e00 <HAL_TIMEx_MasterConfigSynchronization>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002378:	f7ff fcda 	bl	8001d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237c:	2360      	movs	r3, #96	; 0x60
 800237e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2208      	movs	r2, #8
 8002390:	4619      	mov	r1, r3
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <MX_TIM3_Init+0xe4>)
 8002394:	f005 f868 	bl	8007468 <HAL_TIM_PWM_ConfigChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800239e:	f7ff fcc7 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023a2:	4803      	ldr	r0, [pc, #12]	; (80023b0 <MX_TIM3_Init+0xe4>)
 80023a4:	f000 f83e 	bl	8002424 <HAL_TIM_MspPostInit>

}
 80023a8:	bf00      	nop
 80023aa:	3738      	adds	r7, #56	; 0x38
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200005e0 	.word	0x200005e0
 80023b4:	40000400 	.word	0x40000400

080023b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d10e      	bne.n	80023e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023e6:	e012      	b.n	800240e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_TIM_Base_MspInit+0x68>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10d      	bne.n	800240e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_TIM_Base_MspInit+0x64>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40000400 	.word	0x40000400

08002424 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_TIM_MspPostInit+0x68>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11e      	bne.n	8002484 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_TIM_MspPostInit+0x6c>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_TIM_MspPostInit+0x6c>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_TIM_MspPostInit+0x6c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002466:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002474:	2302      	movs	r3, #2
 8002476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_TIM_MspPostInit+0x70>)
 8002480:	f002 f96e 	bl	8004760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40000400 	.word	0x40000400
 8002490:	40023800 	.word	0x40023800
 8002494:	40020800 	.word	0x40020800

08002498 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MX_UART4_Init+0x4c>)
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <MX_UART4_Init+0x50>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <MX_UART4_Init+0x4c>)
 80024a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <MX_UART4_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_UART4_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <MX_UART4_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_UART4_Init+0x4c>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <MX_UART4_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_UART4_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_UART4_Init+0x4c>)
 80024d0:	f005 fd26 	bl	8007f20 <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80024da:	f7ff fc29 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000628 	.word	0x20000628
 80024e8:	40004c00 	.word	0x40004c00

080024ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <MX_USART3_UART_Init+0x50>)
 80024f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 80024f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 8002512:	220c      	movs	r2, #12
 8002514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002522:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_USART3_UART_Init+0x4c>)
 8002524:	f005 fcfc 	bl	8007f20 <HAL_UART_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800252e:	f7ff fbff 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000066c 	.word	0x2000066c
 800253c:	40004800 	.word	0x40004800

08002540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a33      	ldr	r2, [pc, #204]	; (800262c <HAL_UART_MspInit+0xec>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d12d      	bne.n	80025be <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_UART_MspInit+0xf0>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a31      	ldr	r2, [pc, #196]	; (8002630 <HAL_UART_MspInit+0xf0>)
 800256c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_UART_MspInit+0xf0>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_UART_MspInit+0xf0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_UART_MspInit+0xf0>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_UART_MspInit+0xf0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800259a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	2303      	movs	r3, #3
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025ac:	2308      	movs	r3, #8
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	481f      	ldr	r0, [pc, #124]	; (8002634 <HAL_UART_MspInit+0xf4>)
 80025b8:	f002 f8d2 	bl	8004760 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025bc:	e031      	b.n	8002622 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART3)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_UART_MspInit+0xf8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d12c      	bne.n	8002622 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_UART_MspInit+0xf0>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_UART_MspInit+0xf0>)
 80025d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_UART_MspInit+0xf0>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_UART_MspInit+0xf0>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	4a10      	ldr	r2, [pc, #64]	; (8002630 <HAL_UART_MspInit+0xf0>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6313      	str	r3, [r2, #48]	; 0x30
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_UART_MspInit+0xf0>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002600:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002612:	2307      	movs	r3, #7
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4619      	mov	r1, r3
 800261c:	4807      	ldr	r0, [pc, #28]	; (800263c <HAL_UART_MspInit+0xfc>)
 800261e:	f002 f89f 	bl	8004760 <HAL_GPIO_Init>
}
 8002622:	bf00      	nop
 8002624:	3730      	adds	r7, #48	; 0x30
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40004c00 	.word	0x40004c00
 8002630:	40023800 	.word	0x40023800
 8002634:	40020800 	.word	0x40020800
 8002638:	40004800 	.word	0x40004800
 800263c:	40020c00 	.word	0x40020c00

08002640 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002646:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800264a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800264e:	2204      	movs	r2, #4
 8002650:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002654:	2202      	movs	r2, #2
 8002656:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002660:	2202      	movs	r2, #2
 8002662:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002666:	2201      	movs	r2, #1
 8002668:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002678:	2201      	movs	r2, #1
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002684:	f003 f870 	bl	8005768 <HAL_PCD_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800268e:	f7ff fb4f 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200006b0 	.word	0x200006b0

0800269c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026bc:	d13f      	bne.n	800273e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_PCD_MspInit+0xac>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_PCD_MspInit+0xac>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_PCD_MspInit+0xac>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80026da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80026de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026ec:	230a      	movs	r3, #10
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	4815      	ldr	r0, [pc, #84]	; (800274c <HAL_PCD_MspInit+0xb0>)
 80026f8:	f002 f832 	bl	8004760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	480e      	ldr	r0, [pc, #56]	; (800274c <HAL_PCD_MspInit+0xb0>)
 8002712:	f002 f825 	bl	8004760 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_PCD_MspInit+0xac>)
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <HAL_PCD_MspInit+0xac>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	6353      	str	r3, [r2, #52]	; 0x34
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_PCD_MspInit+0xac>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_PCD_MspInit+0xac>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_PCD_MspInit+0xac>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800273e:	bf00      	nop
 8002740:	3728      	adds	r7, #40	; 0x28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40020000 	.word	0x40020000

08002750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002788 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002754:	480d      	ldr	r0, [pc, #52]	; (800278c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002756:	490e      	ldr	r1, [pc, #56]	; (8002790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002758:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800275c:	e002      	b.n	8002764 <LoopCopyDataInit>

0800275e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002762:	3304      	adds	r3, #4

08002764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002768:	d3f9      	bcc.n	800275e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800276c:	4c0b      	ldr	r4, [pc, #44]	; (800279c <LoopFillZerobss+0x26>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002770:	e001      	b.n	8002776 <LoopFillZerobss>

08002772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002774:	3204      	adds	r2, #4

08002776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002778:	d3fb      	bcc.n	8002772 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800277a:	f7ff fd47 	bl	800220c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277e:	f007 f9f9 	bl	8009b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002782:	f7fe fc81 	bl	8001088 <main>
  bx  lr    
 8002786:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002788:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800278c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002790:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002794:	0800af8c 	.word	0x0800af8c
  ldr r2, =_sbss
 8002798:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800279c:	20000d2c 	.word	0x20000d2c

080027a0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a0:	e7fe      	b.n	80027a0 <CAN1_RX0_IRQHandler>
	...

080027a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <HAL_Init+0x40>)
 80027ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_Init+0x40>)
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_Init+0x40>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_Init+0x40>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 fe95 	bl	80034fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 f808 	bl	80027e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d8:	f7ff fbf2 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_InitTick+0x54>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_InitTick+0x58>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fead 	bl	8003566 <HAL_SYSTICK_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00e      	b.n	8002834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d80a      	bhi.n	8002832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281c:	2200      	movs	r2, #0
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f000 fe75 	bl	8003512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002828:	4a06      	ldr	r2, [pc, #24]	; (8002844 <HAL_InitTick+0x5c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000010 	.word	0x20000010
 8002840:	20000018 	.word	0x20000018
 8002844:	20000014 	.word	0x20000014

08002848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_IncTick+0x20>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_IncTick+0x24>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_IncTick+0x24>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000018 	.word	0x20000018
 800286c:	20000bbc 	.word	0x20000bbc

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_GetTick+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000bbc 	.word	0x20000bbc

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff ffee 	bl	8002870 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffde 	bl	8002870 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000018 	.word	0x20000018

080028d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e033      	b.n	800294e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd feb4 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002916:	f023 0302 	bic.w	r3, r3, #2
 800291a:	f043 0202 	orr.w	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fb92 	bl	800304c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f023 0303 	bic.w	r3, r3, #3
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
 800293e:	e001      	b.n	8002944 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d049      	beq.n	8002a20 <HAL_ADC_IRQHandler+0xca>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d046      	beq.n	8002a20 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d105      	bne.n	80029aa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d12b      	bne.n	8002a10 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d127      	bne.n	8002a10 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d119      	bne.n	8002a10 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0220 	bic.w	r2, r2, #32
 80029ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f9c1 	bl	8002d98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f06f 0212 	mvn.w	r2, #18
 8002a1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d057      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x190>
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d054      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d139      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d006      	beq.n	8002a7e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d12b      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d124      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11d      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d119      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fc36 	bl	8003348 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 020c 	mvn.w	r2, #12
 8002ae4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d017      	beq.n	8002b2c <HAL_ADC_IRQHandler+0x1d6>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d014      	beq.n	8002b2c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10d      	bne.n	8002b2c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f94f 	bl	8002dc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0201 	mvn.w	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b3a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d015      	beq.n	8002b6e <HAL_ADC_IRQHandler+0x218>
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f043 0202 	orr.w	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0220 	mvn.w	r2, #32
 8002b5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f938 	bl	8002dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0220 	mvn.w	r2, #32
 8002b6c:	601a      	str	r2, [r3, #0]
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_Start_DMA+0x1e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0e9      	b.n	8002d6a <HAL_ADC_Start_DMA+0x1f2>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d018      	beq.n	8002bde <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bbc:	4b6d      	ldr	r3, [pc, #436]	; (8002d74 <HAL_ADC_Start_DMA+0x1fc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a6d      	ldr	r2, [pc, #436]	; (8002d78 <HAL_ADC_Start_DMA+0x200>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0c9a      	lsrs	r2, r3, #18
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bec:	d107      	bne.n	8002bfe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f040 80a1 	bne.w	8002d50 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	d106      	bne.n	8002c5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f023 0206 	bic.w	r2, r3, #6
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
 8002c5a:	e002      	b.n	8002c62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c6a:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <HAL_ADC_Start_DMA+0x204>)
 8002c6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	4a43      	ldr	r2, [pc, #268]	; (8002d80 <HAL_ADC_Start_DMA+0x208>)
 8002c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	4a42      	ldr	r2, [pc, #264]	; (8002d84 <HAL_ADC_Start_DMA+0x20c>)
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	4a41      	ldr	r2, [pc, #260]	; (8002d88 <HAL_ADC_Start_DMA+0x210>)
 8002c84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	334c      	adds	r3, #76	; 0x4c
 8002cba:	4619      	mov	r1, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f000 fd0c 	bl	80036dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d12a      	bne.n	8002d26 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_ADC_Start_DMA+0x214>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d015      	beq.n	8002d06 <HAL_ADC_Start_DMA+0x18e>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <HAL_ADC_Start_DMA+0x218>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d105      	bne.n	8002cf0 <HAL_ADC_Start_DMA+0x178>
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_ADC_Start_DMA+0x204>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <HAL_ADC_Start_DMA+0x21c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d136      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x1f0>
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_ADC_Start_DMA+0x204>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d130      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d129      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	e020      	b.n	8002d68 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <HAL_ADC_Start_DMA+0x214>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d11b      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x1f0>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d114      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	e00b      	b.n	8002d68 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0210 	orr.w	r2, r3, #16
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000010 	.word	0x20000010
 8002d78:	431bde83 	.word	0x431bde83
 8002d7c:	40012300 	.word	0x40012300
 8002d80:	08003245 	.word	0x08003245
 8002d84:	080032ff 	.word	0x080032ff
 8002d88:	0800331b 	.word	0x0800331b
 8002d8c:	40012000 	.word	0x40012000
 8002d90:	40012100 	.word	0x40012100
 8002d94:	40012200 	.word	0x40012200

08002d98 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1c>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e113      	b.n	800302c <HAL_ADC_ConfigChannel+0x244>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	d925      	bls.n	8002e60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	3b1e      	subs	r3, #30
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43da      	mvns	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	400a      	ands	r2, r1
 8002e38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68d9      	ldr	r1, [r3, #12]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4403      	add	r3, r0
 8002e52:	3b1e      	subs	r3, #30
 8002e54:	409a      	lsls	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	e022      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6919      	ldr	r1, [r3, #16]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	2207      	movs	r2, #7
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	400a      	ands	r2, r1
 8002e82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6919      	ldr	r1, [r3, #16]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4403      	add	r3, r0
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d824      	bhi.n	8002ef8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b05      	subs	r3, #5
 8002ec0:	221f      	movs	r2, #31
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b05      	subs	r3, #5
 8002eea:	fa00 f203 	lsl.w	r2, r0, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef6:	e04c      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d824      	bhi.n	8002f4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b23      	subs	r3, #35	; 0x23
 8002f12:	221f      	movs	r2, #31
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	400a      	ands	r2, r1
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b23      	subs	r3, #35	; 0x23
 8002f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
 8002f48:	e023      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b41      	subs	r3, #65	; 0x41
 8002f5c:	221f      	movs	r2, #31
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	400a      	ands	r2, r1
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	3b41      	subs	r3, #65	; 0x41
 8002f86:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f92:	4b29      	ldr	r3, [pc, #164]	; (8003038 <HAL_ADC_ConfigChannel+0x250>)
 8002f94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a28      	ldr	r2, [pc, #160]	; (800303c <HAL_ADC_ConfigChannel+0x254>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10f      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x1d8>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b12      	cmp	r3, #18
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_ADC_ConfigChannel+0x254>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d12b      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x23a>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_ADC_ConfigChannel+0x258>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x1f4>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b11      	cmp	r3, #17
 8002fda:	d122      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_ADC_ConfigChannel+0x258>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_ADC_ConfigChannel+0x25c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a11      	ldr	r2, [pc, #68]	; (8003048 <HAL_ADC_ConfigChannel+0x260>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	0c9a      	lsrs	r2, r3, #18
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003014:	e002      	b.n	800301c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3b01      	subs	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40012300 	.word	0x40012300
 800303c:	40012000 	.word	0x40012000
 8003040:	10000012 	.word	0x10000012
 8003044:	20000010 	.word	0x20000010
 8003048:	431bde83 	.word	0x431bde83

0800304c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003054:	4b79      	ldr	r3, [pc, #484]	; (800323c <ADC_Init+0x1f0>)
 8003056:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	021a      	lsls	r2, r3, #8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6899      	ldr	r1, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	4a58      	ldr	r2, [pc, #352]	; (8003240 <ADC_Init+0x1f4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	e00f      	b.n	800314a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003148:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0202 	bic.w	r2, r2, #2
 8003158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7e1b      	ldrb	r3, [r3, #24]
 8003164:	005a      	lsls	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003186:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003196:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	3b01      	subs	r3, #1
 80031a4:	035a      	lsls	r2, r3, #13
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	e007      	b.n	80031c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	3b01      	subs	r3, #1
 80031dc:	051a      	lsls	r2, r3, #20
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003202:	025a      	lsls	r2, r3, #9
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	029a      	lsls	r2, r3, #10
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40012300 	.word	0x40012300
 8003240:	0f000001 	.word	0x0f000001

08003244 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800325a:	2b00      	cmp	r3, #0
 800325c:	d13c      	bne.n	80032d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d12b      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800327c:	2b00      	cmp	r3, #0
 800327e:	d127      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003298:	2b00      	cmp	r3, #0
 800329a:	d119      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0220 	bic.w	r2, r2, #32
 80032aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff fd61 	bl	8002d98 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032d6:	e00e      	b.n	80032f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff fd75 	bl	8002dd4 <HAL_ADC_ErrorCallback>
}
 80032ea:	e004      	b.n	80032f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fd4d 	bl	8002dac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fd4a 	bl	8002dd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <__NVIC_SetPriorityGrouping+0x44>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003378:	4013      	ands	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800338e:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	60d3      	str	r3, [r2, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <__NVIC_GetPriorityGrouping+0x18>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	f003 0307 	and.w	r3, r3, #7
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	db0b      	blt.n	80033ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	f003 021f 	and.w	r2, r3, #31
 80033d8:	4907      	ldr	r1, [pc, #28]	; (80033f8 <__NVIC_EnableIRQ+0x38>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2001      	movs	r0, #1
 80033e2:	fa00 f202 	lsl.w	r2, r0, r2
 80033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000e100 	.word	0xe000e100

080033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db0a      	blt.n	8003426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2da      	uxtb	r2, r3
 8003414:	490c      	ldr	r1, [pc, #48]	; (8003448 <__NVIC_SetPriority+0x4c>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	0112      	lsls	r2, r2, #4
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	440b      	add	r3, r1
 8003420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003424:	e00a      	b.n	800343c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4908      	ldr	r1, [pc, #32]	; (800344c <__NVIC_SetPriority+0x50>)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	3b04      	subs	r3, #4
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	440b      	add	r3, r1
 800343a:	761a      	strb	r2, [r3, #24]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000e100 	.word	0xe000e100
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f1c3 0307 	rsb	r3, r3, #7
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf28      	it	cs
 800346e:	2304      	movcs	r3, #4
 8003470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3304      	adds	r3, #4
 8003476:	2b06      	cmp	r3, #6
 8003478:	d902      	bls.n	8003480 <NVIC_EncodePriority+0x30>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3b03      	subs	r3, #3
 800347e:	e000      	b.n	8003482 <NVIC_EncodePriority+0x32>
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003498:	f04f 31ff 	mov.w	r1, #4294967295
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43d9      	mvns	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	4313      	orrs	r3, r2
         );
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c8:	d301      	bcc.n	80034ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ca:	2301      	movs	r3, #1
 80034cc:	e00f      	b.n	80034ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <SysTick_Config+0x40>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d6:	210f      	movs	r1, #15
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	f7ff ff8e 	bl	80033fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <SysTick_Config+0x40>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <SysTick_Config+0x40>)
 80034e8:	2207      	movs	r2, #7
 80034ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	e000e010 	.word	0xe000e010

080034fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ff29 	bl	800335c <__NVIC_SetPriorityGrouping>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003524:	f7ff ff3e 	bl	80033a4 <__NVIC_GetPriorityGrouping>
 8003528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	6978      	ldr	r0, [r7, #20]
 8003530:	f7ff ff8e 	bl	8003450 <NVIC_EncodePriority>
 8003534:	4602      	mov	r2, r0
 8003536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff5d 	bl	80033fc <__NVIC_SetPriority>
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff31 	bl	80033c0 <__NVIC_EnableIRQ>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ffa2 	bl	80034b8 <SysTick_Config>
 8003574:	4603      	mov	r3, r0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff f970 	bl	8002870 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e099      	b.n	80036d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035bc:	e00f      	b.n	80035de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035be:	f7ff f957 	bl	8002870 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d908      	bls.n	80035de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e078      	b.n	80036d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e8      	bne.n	80035be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <HAL_DMA_Init+0x158>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800360a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	2b04      	cmp	r3, #4
 8003636:	d107      	bne.n	8003648 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4313      	orrs	r3, r2
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b04      	cmp	r3, #4
 8003670:	d117      	bne.n	80036a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fb01 	bl	8003c8c <DMA_CheckFifoParam>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800369e:	2301      	movs	r3, #1
 80036a0:	e016      	b.n	80036d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fab8 	bl	8003c20 <DMA_CalcBaseAndBitshift>
 80036b0:	4603      	mov	r3, r0
 80036b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	223f      	movs	r2, #63	; 0x3f
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	f010803f 	.word	0xf010803f

080036dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_DMA_Start_IT+0x26>
 80036fe:	2302      	movs	r3, #2
 8003700:	e040      	b.n	8003784 <HAL_DMA_Start_IT+0xa8>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d12f      	bne.n	8003776 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fa4a 	bl	8003bc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	223f      	movs	r2, #63	; 0x3f
 8003736:	409a      	lsls	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0216 	orr.w	r2, r2, #22
 800374a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0208 	orr.w	r2, r2, #8
 8003762:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e005      	b.n	8003782 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800377e:	2302      	movs	r3, #2
 8003780:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003782:	7dfb      	ldrb	r3, [r7, #23]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800379a:	f7ff f869 	bl	8002870 <HAL_GetTick>
 800379e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d008      	beq.n	80037be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e052      	b.n	8003864 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0216 	bic.w	r2, r2, #22
 80037cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_DMA_Abort+0x62>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0208 	bic.w	r2, r2, #8
 80037fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800380e:	e013      	b.n	8003838 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003810:	f7ff f82e 	bl	8002870 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b05      	cmp	r3, #5
 800381c:	d90c      	bls.n	8003838 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2203      	movs	r2, #3
 8003828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e015      	b.n	8003864 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e4      	bne.n	8003810 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	223f      	movs	r2, #63	; 0x3f
 800384c:	409a      	lsls	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d004      	beq.n	800388a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e00c      	b.n	80038a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2205      	movs	r2, #5
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038bc:	4b8e      	ldr	r3, [pc, #568]	; (8003af8 <HAL_DMA_IRQHandler+0x248>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a8e      	ldr	r2, [pc, #568]	; (8003afc <HAL_DMA_IRQHandler+0x24c>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	0a9b      	lsrs	r3, r3, #10
 80038c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	2208      	movs	r2, #8
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01a      	beq.n	800391c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	2208      	movs	r2, #8
 800390a:	409a      	lsls	r2, r3
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f043 0201 	orr.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	2201      	movs	r2, #1
 8003922:	409a      	lsls	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d012      	beq.n	8003952 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	2201      	movs	r2, #1
 8003940:	409a      	lsls	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	f043 0202 	orr.w	r2, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	2204      	movs	r2, #4
 8003958:	409a      	lsls	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d012      	beq.n	8003988 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	2204      	movs	r2, #4
 8003976:	409a      	lsls	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f043 0204 	orr.w	r2, r3, #4
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	2210      	movs	r2, #16
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d043      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d03c      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	2210      	movs	r2, #16
 80039ac:	409a      	lsls	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d018      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d108      	bne.n	80039e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d024      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
 80039de:	e01f      	b.n	8003a20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01b      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
 80039f0:	e016      	b.n	8003a20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0208 	bic.w	r2, r2, #8
 8003a0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	2220      	movs	r2, #32
 8003a26:	409a      	lsls	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 808f 	beq.w	8003b50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8087 	beq.w	8003b50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	2220      	movs	r2, #32
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d136      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0216 	bic.w	r2, r2, #22
 8003a68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <HAL_DMA_IRQHandler+0x1da>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0208 	bic.w	r2, r2, #8
 8003a98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	223f      	movs	r2, #63	; 0x3f
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d07e      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
        }
        return;
 8003ac6:	e079      	b.n	8003bbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01d      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10d      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d031      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
 8003af4:	e02c      	b.n	8003b50 <HAL_DMA_IRQHandler+0x2a0>
 8003af6:	bf00      	nop
 8003af8:	20000010 	.word	0x20000010
 8003afc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d023      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
 8003b10:	e01e      	b.n	8003b50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10f      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0210 	bic.w	r2, r2, #16
 8003b2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d032      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d022      	beq.n	8003baa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2205      	movs	r2, #5
 8003b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d307      	bcc.n	8003b98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f2      	bne.n	8003b7c <HAL_DMA_IRQHandler+0x2cc>
 8003b96:	e000      	b.n	8003b9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
 8003bba:	e000      	b.n	8003bbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bbc:	bf00      	nop
    }
  }
}
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003be0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d108      	bne.n	8003c04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c02:	e007      	b.n	8003c14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	60da      	str	r2, [r3, #12]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	3b10      	subs	r3, #16
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <DMA_CalcBaseAndBitshift+0x64>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <DMA_CalcBaseAndBitshift+0x68>)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d909      	bls.n	8003c62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c60:	e007      	b.n	8003c72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	aaaaaaab 	.word	0xaaaaaaab
 8003c88:	0800af40 	.word	0x0800af40

08003c8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11f      	bne.n	8003ce6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d856      	bhi.n	8003d5a <DMA_CheckFifoParam+0xce>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <DMA_CheckFifoParam+0x28>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003cd7 	.word	0x08003cd7
 8003cbc:	08003cc5 	.word	0x08003cc5
 8003cc0:	08003d5b 	.word	0x08003d5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d046      	beq.n	8003d5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd4:	e043      	b.n	8003d5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cde:	d140      	bne.n	8003d62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce4:	e03d      	b.n	8003d62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d121      	bne.n	8003d34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d837      	bhi.n	8003d66 <DMA_CheckFifoParam+0xda>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <DMA_CheckFifoParam+0x70>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d13 	.word	0x08003d13
 8003d04:	08003d0d 	.word	0x08003d0d
 8003d08:	08003d25 	.word	0x08003d25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d10:	e030      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d025      	beq.n	8003d6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d22:	e022      	b.n	8003d6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d2c:	d11f      	bne.n	8003d6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d32:	e01c      	b.n	8003d6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d903      	bls.n	8003d42 <DMA_CheckFifoParam+0xb6>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d003      	beq.n	8003d48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d40:	e018      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      break;
 8003d46:	e015      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      break;
 8003d58:	e00b      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e00a      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e008      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d62:	bf00      	nop
 8003d64:	e006      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d66:	bf00      	nop
 8003d68:	e004      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d72:	bf00      	nop
    }
  } 
  
  return status; 
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop

08003d84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e06c      	b.n	8003e70 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2223      	movs	r2, #35	; 0x23
 8003da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fc fd59 	bl	8000860 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <HAL_ETH_Init+0xf4>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	4a30      	ldr	r2, [pc, #192]	; (8003e78 <HAL_ETH_Init+0xf4>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_ETH_Init+0xf4>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003dca:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <HAL_ETH_Init+0xf8>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a2b      	ldr	r2, [pc, #172]	; (8003e7c <HAL_ETH_Init+0xf8>)
 8003dd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_ETH_Init+0xf8>)
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	4927      	ldr	r1, [pc, #156]	; (8003e7c <HAL_ETH_Init+0xf8>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_ETH_Init+0xf8>)
 8003de6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e00:	f7fe fd36 	bl	8002870 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e06:	e011      	b.n	8003e2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e08:	f7fe fd32 	bl	8002870 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e16:	d909      	bls.n	8003e2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	22e0      	movs	r2, #224	; 0xe0
 8003e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e021      	b.n	8003e70 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e4      	bne.n	8003e08 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f958 	bl	80040f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f9ff 	bl	8004248 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa55 	bl	80042fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	461a      	mov	r2, r3
 8003e56:	2100      	movs	r1, #0
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f9bd 	bl	80041d8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40013800 	.word	0x40013800

08003e80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <ETH_SetMACConfig+0x15c>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	7c1b      	ldrb	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <ETH_SetMACConfig+0x28>
 8003ea2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ea6:	e000      	b.n	8003eaa <ETH_SetMACConfig+0x2a>
 8003ea8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	7c5b      	ldrb	r3, [r3, #17]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <ETH_SetMACConfig+0x38>
 8003eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eb6:	e000      	b.n	8003eba <ETH_SetMACConfig+0x3a>
 8003eb8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003eba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ec0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	7fdb      	ldrb	r3, [r3, #31]
 8003ec6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003ec8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ece:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	7f92      	ldrb	r2, [r2, #30]
 8003ed4:	2a00      	cmp	r2, #0
 8003ed6:	d102      	bne.n	8003ede <ETH_SetMACConfig+0x5e>
 8003ed8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003edc:	e000      	b.n	8003ee0 <ETH_SetMACConfig+0x60>
 8003ede:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	7f1b      	ldrb	r3, [r3, #28]
 8003ee6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ee8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003eee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003ef6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	d102      	bne.n	8003f08 <ETH_SetMACConfig+0x88>
 8003f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f06:	e000      	b.n	8003f0a <ETH_SetMACConfig+0x8a>
 8003f08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	7bdb      	ldrb	r3, [r3, #15]
 8003f10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f22:	4313      	orrs	r3, r2
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f7fe fca4 	bl	8002888 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003f56:	4013      	ands	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003f66:	2a00      	cmp	r2, #0
 8003f68:	d101      	bne.n	8003f6e <ETH_SetMACConfig+0xee>
 8003f6a:	2280      	movs	r2, #128	; 0x80
 8003f6c:	e000      	b.n	8003f70 <ETH_SetMACConfig+0xf0>
 8003f6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003f76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003f7e:	2a01      	cmp	r2, #1
 8003f80:	d101      	bne.n	8003f86 <ETH_SetMACConfig+0x106>
 8003f82:	2208      	movs	r2, #8
 8003f84:	e000      	b.n	8003f88 <ETH_SetMACConfig+0x108>
 8003f86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003f88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003f90:	2a01      	cmp	r2, #1
 8003f92:	d101      	bne.n	8003f98 <ETH_SetMACConfig+0x118>
 8003f94:	2204      	movs	r2, #4
 8003f96:	e000      	b.n	8003f9a <ETH_SetMACConfig+0x11a>
 8003f98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003f9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003fa2:	2a01      	cmp	r2, #1
 8003fa4:	d101      	bne.n	8003faa <ETH_SetMACConfig+0x12a>
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	e000      	b.n	8003fac <ETH_SetMACConfig+0x12c>
 8003faa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fac:	4313      	orrs	r3, r2
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	f7fe fc5f 	bl	8002888 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	619a      	str	r2, [r3, #24]
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	ff20810f 	.word	0xff20810f

08003fe0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <ETH_SetDMAConfig+0x110>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	7b1b      	ldrb	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <ETH_SetDMAConfig+0x2c>
 8004006:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800400a:	e000      	b.n	800400e <ETH_SetDMAConfig+0x2e>
 800400c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	7b5b      	ldrb	r3, [r3, #13]
 8004012:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004014:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	7f52      	ldrb	r2, [r2, #29]
 800401a:	2a00      	cmp	r2, #0
 800401c:	d102      	bne.n	8004024 <ETH_SetDMAConfig+0x44>
 800401e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004022:	e000      	b.n	8004026 <ETH_SetDMAConfig+0x46>
 8004024:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004026:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	7b9b      	ldrb	r3, [r3, #14]
 800402c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800402e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004034:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	7f1b      	ldrb	r3, [r3, #28]
 800403a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800403c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	7f9b      	ldrb	r3, [r3, #30]
 8004042:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004044:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800404a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004052:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004054:	4313      	orrs	r3, r2
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004064:	461a      	mov	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004076:	2001      	movs	r0, #1
 8004078:	f7fe fc06 	bl	8002888 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004084:	461a      	mov	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	791b      	ldrb	r3, [r3, #4]
 800408e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004094:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800409a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80040a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80040aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f7fe fbd7 	bl	8002888 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	f8de3f23 	.word	0xf8de3f23

080040f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b0a6      	sub	sp, #152	; 0x98
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004108:	2300      	movs	r3, #0
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004124:	2300      	movs	r3, #0
 8004126:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004130:	2300      	movs	r3, #0
 8004132:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004134:	2300      	movs	r3, #0
 8004136:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800413a:	2300      	movs	r3, #0
 800413c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004156:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800415c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004160:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004168:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff fe86 	bl	8003e80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004174:	2301      	movs	r3, #1
 8004176:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004178:	2301      	movs	r3, #1
 800417a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004182:	2301      	movs	r3, #1
 8004184:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004190:	2300      	movs	r3, #0
 8004192:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004196:	2300      	movs	r3, #0
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80041a0:	2301      	movs	r3, #1
 80041a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80041a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041a8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80041c4:	f107 0308 	add.w	r3, r7, #8
 80041c8:	4619      	mov	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ff08 	bl	8003fe0 <ETH_SetDMAConfig>
}
 80041d0:	bf00      	nop
 80041d2:	3798      	adds	r7, #152	; 0x98
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3305      	adds	r3, #5
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	3204      	adds	r2, #4
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <ETH_MACAddressConfig+0x68>)
 80041fa:	4413      	add	r3, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3303      	adds	r3, #3
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	061a      	lsls	r2, r3, #24
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3302      	adds	r3, #2
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3301      	adds	r3, #1
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	4313      	orrs	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	7812      	ldrb	r2, [r2, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <ETH_MACAddressConfig+0x6c>)
 800422a:	4413      	add	r3, r2
 800422c:	461a      	mov	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	6013      	str	r3, [r2, #0]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40028040 	.word	0x40028040
 8004244:	40028044 	.word	0x40028044

08004248 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e03e      	b.n	80042d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68d9      	ldr	r1, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	440b      	add	r3, r1
 8004266:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2200      	movs	r2, #0
 800427e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	3206      	adds	r2, #6
 8004288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d80c      	bhi.n	80042b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68d9      	ldr	r1, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	440b      	add	r3, r1
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	e004      	b.n	80042c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3301      	adds	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d9bd      	bls.n	8004256 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ec:	611a      	str	r2, [r3, #16]
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e046      	b.n	8004396 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6919      	ldr	r1, [r3, #16]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2200      	movs	r2, #0
 800432a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2200      	movs	r2, #0
 8004330:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004344:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800434c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	3212      	adds	r2, #18
 8004362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d80c      	bhi.n	8004386 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6919      	ldr	r1, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	440b      	add	r3, r1
 800437e:	461a      	mov	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	60da      	str	r2, [r3, #12]
 8004384:	e004      	b.n	8004390 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	461a      	mov	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3301      	adds	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d9b5      	bls.n	8004308 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	60da      	str	r2, [r3, #12]
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <HAL_FLASH_Program+0xa0>)
 80043e8:	7e1b      	ldrb	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_FLASH_Program+0x1e>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e03b      	b.n	800446a <HAL_FLASH_Program+0x96>
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <HAL_FLASH_Program+0xa0>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043fc:	f000 f870 	bl	80044e0 <FLASH_WaitForLastOperation>
 8004400:	4603      	mov	r3, r0
 8004402:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d12b      	bne.n	8004462 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004410:	783b      	ldrb	r3, [r7, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	68b8      	ldr	r0, [r7, #8]
 8004416:	f000 f91b 	bl	8004650 <FLASH_Program_Byte>
 800441a:	e016      	b.n	800444a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d105      	bne.n	800442e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004422:	883b      	ldrh	r3, [r7, #0]
 8004424:	4619      	mov	r1, r3
 8004426:	68b8      	ldr	r0, [r7, #8]
 8004428:	f000 f8ee 	bl	8004608 <FLASH_Program_HalfWord>
 800442c:	e00d      	b.n	800444a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d105      	bne.n	8004440 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	68b8      	ldr	r0, [r7, #8]
 800443a:	f000 f8c3 	bl	80045c4 <FLASH_Program_Word>
 800443e:	e004      	b.n	800444a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004444:	68b8      	ldr	r0, [r7, #8]
 8004446:	f000 f88b 	bl	8004560 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800444a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800444e:	f000 f847 	bl	80044e0 <FLASH_WaitForLastOperation>
 8004452:	4603      	mov	r3, r0
 8004454:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_FLASH_Program+0xa4>)
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <HAL_FLASH_Program+0xa4>)
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_FLASH_Program+0xa0>)
 8004464:	2200      	movs	r2, #0
 8004466:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000bc0 	.word	0x20000bc0
 8004478:	40023c00 	.word	0x40023c00

0800447c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_FLASH_Unlock+0x38>)
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	da0b      	bge.n	80044a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_FLASH_Unlock+0x38>)
 8004490:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <HAL_FLASH_Unlock+0x3c>)
 8004492:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <HAL_FLASH_Unlock+0x38>)
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <HAL_FLASH_Unlock+0x40>)
 8004498:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_FLASH_Unlock+0x38>)
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da01      	bge.n	80044a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80044a6:	79fb      	ldrb	r3, [r7, #7]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	40023c00 	.word	0x40023c00
 80044b8:	45670123 	.word	0x45670123
 80044bc:	cdef89ab 	.word	0xcdef89ab

080044c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_FLASH_Lock+0x1c>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <HAL_FLASH_Lock+0x1c>)
 80044ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40023c00 	.word	0x40023c00

080044e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <FLASH_WaitForLastOperation+0x78>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80044f2:	f7fe f9bd 	bl	8002870 <HAL_GetTick>
 80044f6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80044f8:	e010      	b.n	800451c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d00c      	beq.n	800451c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <FLASH_WaitForLastOperation+0x38>
 8004508:	f7fe f9b2 	bl	8002870 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d201      	bcs.n	800451c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e019      	b.n	8004550 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <FLASH_WaitForLastOperation+0x7c>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e8      	bne.n	80044fa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <FLASH_WaitForLastOperation+0x7c>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <FLASH_WaitForLastOperation+0x7c>)
 8004536:	2201      	movs	r2, #1
 8004538:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <FLASH_WaitForLastOperation+0x7c>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004546:	f000 f8a5 	bl	8004694 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
  
}  
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000bc0 	.word	0x20000bc0
 800455c:	40023c00 	.word	0x40023c00

08004560 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <FLASH_Program_DoubleWord+0x60>)
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <FLASH_Program_DoubleWord+0x60>)
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004578:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <FLASH_Program_DoubleWord+0x60>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	4a10      	ldr	r2, [pc, #64]	; (80045c0 <FLASH_Program_DoubleWord+0x60>)
 800457e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004582:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <FLASH_Program_DoubleWord+0x60>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	4a0d      	ldr	r2, [pc, #52]	; (80045c0 <FLASH_Program_DoubleWord+0x60>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004596:	f3bf 8f6f 	isb	sy
}
 800459a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800459c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	000a      	movs	r2, r1
 80045aa:	2300      	movs	r3, #0
 80045ac:	68f9      	ldr	r1, [r7, #12]
 80045ae:	3104      	adds	r1, #4
 80045b0:	4613      	mov	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40023c00 	.word	0x40023c00

080045c4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <FLASH_Program_Word+0x40>)
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <FLASH_Program_Word+0x40>)
 80045d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <FLASH_Program_Word+0x40>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <FLASH_Program_Word+0x40>)
 80045e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <FLASH_Program_Word+0x40>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	4a06      	ldr	r2, [pc, #24]	; (8004604 <FLASH_Program_Word+0x40>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	601a      	str	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40023c00 	.word	0x40023c00

08004608 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <FLASH_Program_HalfWord+0x44>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4a0c      	ldr	r2, [pc, #48]	; (800464c <FLASH_Program_HalfWord+0x44>)
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <FLASH_Program_HalfWord+0x44>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	4a09      	ldr	r2, [pc, #36]	; (800464c <FLASH_Program_HalfWord+0x44>)
 8004626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800462c:	4b07      	ldr	r3, [pc, #28]	; (800464c <FLASH_Program_HalfWord+0x44>)
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	4a06      	ldr	r2, [pc, #24]	; (800464c <FLASH_Program_HalfWord+0x44>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	801a      	strh	r2, [r3, #0]
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40023c00 	.word	0x40023c00

08004650 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <FLASH_Program_Byte+0x40>)
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	4a0b      	ldr	r2, [pc, #44]	; (8004690 <FLASH_Program_Byte+0x40>)
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <FLASH_Program_Byte+0x40>)
 800466a:	4a09      	ldr	r2, [pc, #36]	; (8004690 <FLASH_Program_Byte+0x40>)
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <FLASH_Program_Byte+0x40>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	4a06      	ldr	r2, [pc, #24]	; (8004690 <FLASH_Program_Byte+0x40>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	701a      	strb	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40023c00 	.word	0x40023c00

08004694 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004698:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80046a4:	4b2d      	ldr	r3, [pc, #180]	; (800475c <FLASH_SetErrorCode+0xc8>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f043 0310 	orr.w	r3, r3, #16
 80046ac:	4a2b      	ldr	r2, [pc, #172]	; (800475c <FLASH_SetErrorCode+0xc8>)
 80046ae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80046b0:	4b29      	ldr	r3, [pc, #164]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 80046b2:	2210      	movs	r2, #16
 80046b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80046b6:	4b28      	ldr	r3, [pc, #160]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <FLASH_SetErrorCode+0xc8>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f043 0308 	orr.w	r3, r3, #8
 80046ca:	4a24      	ldr	r2, [pc, #144]	; (800475c <FLASH_SetErrorCode+0xc8>)
 80046cc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80046ce:	4b22      	ldr	r3, [pc, #136]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 80046d0:	2220      	movs	r2, #32
 80046d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80046d4:	4b20      	ldr	r3, [pc, #128]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <FLASH_SetErrorCode+0xc8>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f043 0304 	orr.w	r3, r3, #4
 80046e8:	4a1c      	ldr	r2, [pc, #112]	; (800475c <FLASH_SetErrorCode+0xc8>)
 80046ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 80046ee:	2240      	movs	r2, #64	; 0x40
 80046f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80046f2:	4b19      	ldr	r3, [pc, #100]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <FLASH_SetErrorCode+0xc8>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <FLASH_SetErrorCode+0xc8>)
 8004708:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <FLASH_SetErrorCode+0xc8>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	4a0d      	ldr	r2, [pc, #52]	; (800475c <FLASH_SetErrorCode+0xc8>)
 8004726:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 800472a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800472e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800473c:	4b07      	ldr	r3, [pc, #28]	; (800475c <FLASH_SetErrorCode+0xc8>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f043 0320 	orr.w	r3, r3, #32
 8004744:	4a05      	ldr	r2, [pc, #20]	; (800475c <FLASH_SetErrorCode+0xc8>)
 8004746:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <FLASH_SetErrorCode+0xc4>)
 800474a:	2202      	movs	r2, #2
 800474c:	60da      	str	r2, [r3, #12]
  }
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40023c00 	.word	0x40023c00
 800475c:	20000bc0 	.word	0x20000bc0

08004760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	; 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e177      	b.n	8004a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800477c:	2201      	movs	r2, #1
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4013      	ands	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	429a      	cmp	r2, r3
 8004796:	f040 8166 	bne.w	8004a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d005      	beq.n	80047b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d130      	bne.n	8004814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	2203      	movs	r2, #3
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047e8:	2201      	movs	r2, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 0201 	and.w	r2, r3, #1
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	2b03      	cmp	r3, #3
 800481e:	d017      	beq.n	8004850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	2203      	movs	r2, #3
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4013      	ands	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d123      	bne.n	80048a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	08da      	lsrs	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3208      	adds	r2, #8
 8004864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	220f      	movs	r2, #15
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	08da      	lsrs	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3208      	adds	r2, #8
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2203      	movs	r2, #3
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0203 	and.w	r2, r3, #3
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80c0 	beq.w	8004a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <HAL_GPIO_Init+0x324>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	4a65      	ldr	r2, [pc, #404]	; (8004a84 <HAL_GPIO_Init+0x324>)
 80048f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f4:	6453      	str	r3, [r2, #68]	; 0x44
 80048f6:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <HAL_GPIO_Init+0x324>)
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004902:	4a61      	ldr	r2, [pc, #388]	; (8004a88 <HAL_GPIO_Init+0x328>)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	089b      	lsrs	r3, r3, #2
 8004908:	3302      	adds	r3, #2
 800490a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	220f      	movs	r2, #15
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a58      	ldr	r2, [pc, #352]	; (8004a8c <HAL_GPIO_Init+0x32c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d037      	beq.n	800499e <HAL_GPIO_Init+0x23e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a57      	ldr	r2, [pc, #348]	; (8004a90 <HAL_GPIO_Init+0x330>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d031      	beq.n	800499a <HAL_GPIO_Init+0x23a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a56      	ldr	r2, [pc, #344]	; (8004a94 <HAL_GPIO_Init+0x334>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02b      	beq.n	8004996 <HAL_GPIO_Init+0x236>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a55      	ldr	r2, [pc, #340]	; (8004a98 <HAL_GPIO_Init+0x338>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d025      	beq.n	8004992 <HAL_GPIO_Init+0x232>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a54      	ldr	r2, [pc, #336]	; (8004a9c <HAL_GPIO_Init+0x33c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01f      	beq.n	800498e <HAL_GPIO_Init+0x22e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a53      	ldr	r2, [pc, #332]	; (8004aa0 <HAL_GPIO_Init+0x340>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d019      	beq.n	800498a <HAL_GPIO_Init+0x22a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a52      	ldr	r2, [pc, #328]	; (8004aa4 <HAL_GPIO_Init+0x344>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_GPIO_Init+0x226>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a51      	ldr	r2, [pc, #324]	; (8004aa8 <HAL_GPIO_Init+0x348>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00d      	beq.n	8004982 <HAL_GPIO_Init+0x222>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a50      	ldr	r2, [pc, #320]	; (8004aac <HAL_GPIO_Init+0x34c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <HAL_GPIO_Init+0x21e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a4f      	ldr	r2, [pc, #316]	; (8004ab0 <HAL_GPIO_Init+0x350>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_GPIO_Init+0x21a>
 8004976:	2309      	movs	r3, #9
 8004978:	e012      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800497a:	230a      	movs	r3, #10
 800497c:	e010      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800497e:	2308      	movs	r3, #8
 8004980:	e00e      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 8004982:	2307      	movs	r3, #7
 8004984:	e00c      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 8004986:	2306      	movs	r3, #6
 8004988:	e00a      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800498a:	2305      	movs	r3, #5
 800498c:	e008      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800498e:	2304      	movs	r3, #4
 8004990:	e006      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 8004992:	2303      	movs	r3, #3
 8004994:	e004      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 8004996:	2302      	movs	r3, #2
 8004998:	e002      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <HAL_GPIO_Init+0x240>
 800499e:	2300      	movs	r3, #0
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	f002 0203 	and.w	r2, r2, #3
 80049a6:	0092      	lsls	r2, r2, #2
 80049a8:	4093      	lsls	r3, r2
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b0:	4935      	ldr	r1, [pc, #212]	; (8004a88 <HAL_GPIO_Init+0x328>)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	3302      	adds	r3, #2
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049e2:	4a34      	ldr	r2, [pc, #208]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049e8:	4b32      	ldr	r3, [pc, #200]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a0c:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a12:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a36:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a60:	4a14      	ldr	r2, [pc, #80]	; (8004ab4 <HAL_GPIO_Init+0x354>)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	f67f ae84 	bls.w	800477c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3724      	adds	r7, #36	; 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40013800 	.word	0x40013800
 8004a8c:	40020000 	.word	0x40020000
 8004a90:	40020400 	.word	0x40020400
 8004a94:	40020800 	.word	0x40020800
 8004a98:	40020c00 	.word	0x40020c00
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40021400 	.word	0x40021400
 8004aa4:	40021800 	.word	0x40021800
 8004aa8:	40021c00 	.word	0x40021c00
 8004aac:	40022000 	.word	0x40022000
 8004ab0:	40022400 	.word	0x40022400
 8004ab4:	40013c00 	.word	0x40013c00

08004ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	887b      	ldrh	r3, [r7, #2]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	e001      	b.n	8004ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
 8004af4:	4613      	mov	r3, r2
 8004af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004af8:	787b      	ldrb	r3, [r7, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b04:	e003      	b.n	8004b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b06:	887b      	ldrh	r3, [r7, #2]
 8004b08:	041a      	lsls	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	619a      	str	r2, [r3, #24]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b2c:	887a      	ldrh	r2, [r7, #2]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4013      	ands	r3, r2
 8004b32:	041a      	lsls	r2, r3, #16
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	43d9      	mvns	r1, r3
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	400b      	ands	r3, r1
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	619a      	str	r2, [r3, #24]
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc ff64 	bl	8001a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40013c00 	.word	0x40013c00

08004b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e12b      	b.n	8004dea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fc f8a4 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004be4:	f001 fb4e 	bl	8006284 <HAL_RCC_GetPCLK1Freq>
 8004be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4a81      	ldr	r2, [pc, #516]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d807      	bhi.n	8004c04 <HAL_I2C_Init+0x84>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a80      	ldr	r2, [pc, #512]	; (8004df8 <HAL_I2C_Init+0x278>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bf94      	ite	ls
 8004bfc:	2301      	movls	r3, #1
 8004bfe:	2300      	movhi	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e006      	b.n	8004c12 <HAL_I2C_Init+0x92>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a7d      	ldr	r2, [pc, #500]	; (8004dfc <HAL_I2C_Init+0x27c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bf94      	ite	ls
 8004c0c:	2301      	movls	r3, #1
 8004c0e:	2300      	movhi	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0e7      	b.n	8004dea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a78      	ldr	r2, [pc, #480]	; (8004e00 <HAL_I2C_Init+0x280>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0c9b      	lsrs	r3, r3, #18
 8004c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a6a      	ldr	r2, [pc, #424]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d802      	bhi.n	8004c54 <HAL_I2C_Init+0xd4>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3301      	adds	r3, #1
 8004c52:	e009      	b.n	8004c68 <HAL_I2C_Init+0xe8>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	4a69      	ldr	r2, [pc, #420]	; (8004e04 <HAL_I2C_Init+0x284>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	3301      	adds	r3, #1
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	495c      	ldr	r1, [pc, #368]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004c84:	428b      	cmp	r3, r1
 8004c86:	d819      	bhi.n	8004cbc <HAL_I2C_Init+0x13c>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1e59      	subs	r1, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c9c:	400b      	ands	r3, r1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_I2C_Init+0x138>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1e59      	subs	r1, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb6:	e051      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e04f      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d111      	bne.n	8004ce8 <HAL_I2C_Init+0x168>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1e58      	subs	r0, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	440b      	add	r3, r1
 8004cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e012      	b.n	8004d0e <HAL_I2C_Init+0x18e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1e58      	subs	r0, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	0099      	lsls	r1, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Init+0x196>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e022      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10e      	bne.n	8004d3c <HAL_I2C_Init+0x1bc>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1e58      	subs	r0, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	440b      	add	r3, r1
 8004d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	e00f      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1e58      	subs	r0, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	0099      	lsls	r1, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	6809      	ldr	r1, [r1, #0]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6911      	ldr	r1, [r2, #16]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68d2      	ldr	r2, [r2, #12]
 8004d96:	4311      	orrs	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	000186a0 	.word	0x000186a0
 8004df8:	001e847f 	.word	0x001e847f
 8004dfc:	003d08ff 	.word	0x003d08ff
 8004e00:	431bde83 	.word	0x431bde83
 8004e04:	10624dd3 	.word	0x10624dd3

08004e08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	461a      	mov	r2, r3
 8004e14:	460b      	mov	r3, r1
 8004e16:	817b      	strh	r3, [r7, #10]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e1c:	f7fd fd28 	bl	8002870 <HAL_GetTick>
 8004e20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	f040 80e0 	bne.w	8004ff0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	2319      	movs	r3, #25
 8004e36:	2201      	movs	r2, #1
 8004e38:	4970      	ldr	r1, [pc, #448]	; (8004ffc <HAL_I2C_Master_Transmit+0x1f4>)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa92 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
 8004e48:	e0d3      	b.n	8004ff2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_I2C_Master_Transmit+0x50>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e0cc      	b.n	8004ff2 <HAL_I2C_Master_Transmit+0x1ea>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d007      	beq.n	8004e7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2221      	movs	r2, #33	; 0x21
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2210      	movs	r2, #16
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	893a      	ldrh	r2, [r7, #8]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a50      	ldr	r2, [pc, #320]	; (8005000 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ec0:	8979      	ldrh	r1, [r7, #10]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f9ca 	bl	8005260 <I2C_MasterRequestWrite>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e08d      	b.n	8004ff2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004eec:	e066      	b.n	8004fbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	6a39      	ldr	r1, [r7, #32]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fb0c 	bl	8005510 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d107      	bne.n	8004f16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e06b      	b.n	8004ff2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	781a      	ldrb	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d11b      	bne.n	8004f90 <HAL_I2C_Master_Transmit+0x188>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d017      	beq.n	8004f90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	6a39      	ldr	r1, [r7, #32]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fafc 	bl	8005592 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00d      	beq.n	8004fbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d107      	bne.n	8004fb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e01a      	b.n	8004ff2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d194      	bne.n	8004eee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	00100002 	.word	0x00100002
 8005000:	ffff0000 	.word	0xffff0000

08005004 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	460b      	mov	r3, r1
 8005012:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005014:	f7fd fc2c 	bl	8002870 <HAL_GetTick>
 8005018:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b20      	cmp	r3, #32
 8005028:	f040 8111 	bne.w	800524e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2319      	movs	r3, #25
 8005032:	2201      	movs	r2, #1
 8005034:	4988      	ldr	r1, [pc, #544]	; (8005258 <HAL_I2C_IsDeviceReady+0x254>)
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f994 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005042:	2302      	movs	r3, #2
 8005044:	e104      	b.n	8005250 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_I2C_IsDeviceReady+0x50>
 8005050:	2302      	movs	r3, #2
 8005052:	e0fd      	b.n	8005250 <HAL_I2C_IsDeviceReady+0x24c>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d007      	beq.n	800507a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2224      	movs	r2, #36	; 0x24
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a70      	ldr	r2, [pc, #448]	; (800525c <HAL_I2C_IsDeviceReady+0x258>)
 800509c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f952 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00d      	beq.n	80050e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d4:	d103      	bne.n	80050de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0b6      	b.n	8005250 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050e2:	897b      	ldrh	r3, [r7, #10]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80050f2:	f7fd fbbd 	bl	8002870 <HAL_GetTick>
 80050f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b02      	cmp	r3, #2
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005126:	e025      	b.n	8005174 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005128:	f7fd fba2 	bl	8002870 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d302      	bcc.n	800513e <HAL_I2C_IsDeviceReady+0x13a>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	22a0      	movs	r2, #160	; 0xa0
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2ba0      	cmp	r3, #160	; 0xa0
 800517e:	d005      	beq.n	800518c <HAL_I2C_IsDeviceReady+0x188>
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <HAL_I2C_IsDeviceReady+0x188>
 8005186:	7dbb      	ldrb	r3, [r7, #22]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0cd      	beq.n	8005128 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d129      	bne.n	80051f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	2319      	movs	r3, #25
 80051ce:	2201      	movs	r2, #1
 80051d0:	4921      	ldr	r1, [pc, #132]	; (8005258 <HAL_I2C_IsDeviceReady+0x254>)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f8c6 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e036      	b.n	8005250 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e02c      	b.n	8005250 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005204:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800520e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	2319      	movs	r3, #25
 8005216:	2201      	movs	r2, #1
 8005218:	490f      	ldr	r1, [pc, #60]	; (8005258 <HAL_I2C_IsDeviceReady+0x254>)
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f8a2 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e012      	b.n	8005250 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3301      	adds	r3, #1
 800522e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	f4ff af32 	bcc.w	800509e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3720      	adds	r7, #32
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	00100002 	.word	0x00100002
 800525c:	ffff0000 	.word	0xffff0000

08005260 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	460b      	mov	r3, r1
 800526e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d006      	beq.n	800528a <I2C_MasterRequestWrite+0x2a>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d003      	beq.n	800528a <I2C_MasterRequestWrite+0x2a>
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005288:	d108      	bne.n	800529c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e00b      	b.n	80052b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	2b12      	cmp	r3, #18
 80052a2:	d107      	bne.n	80052b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f84f 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052da:	d103      	bne.n	80052e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e035      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052f0:	d108      	bne.n	8005304 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005300:	611a      	str	r2, [r3, #16]
 8005302:	e01b      	b.n	800533c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005304:	897b      	ldrh	r3, [r7, #10]
 8005306:	11db      	asrs	r3, r3, #7
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f003 0306 	and.w	r3, r3, #6
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f063 030f 	orn	r3, r3, #15
 8005314:	b2da      	uxtb	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	490e      	ldr	r1, [pc, #56]	; (800535c <I2C_MasterRequestWrite+0xfc>)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f875 	bl	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e010      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4907      	ldr	r1, [pc, #28]	; (8005360 <I2C_MasterRequestWrite+0x100>)
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f865 	bl	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	00010008 	.word	0x00010008
 8005360:	00010002 	.word	0x00010002

08005364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005374:	e025      	b.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d021      	beq.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fd fa77 	bl	8002870 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e023      	b.n	800540a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10d      	bne.n	80053e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	e00c      	b.n	8005402 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	429a      	cmp	r2, r3
 8005406:	d0b6      	beq.n	8005376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005420:	e051      	b.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005430:	d123      	bne.n	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005440:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800544a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f043 0204 	orr.w	r2, r3, #4
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e046      	b.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d021      	beq.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fd f9f5 	bl	8002870 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d116      	bne.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e020      	b.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10c      	bne.n	80054ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	43da      	mvns	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	e00b      	b.n	8005502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	43da      	mvns	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d18d      	bne.n	8005422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800551c:	e02d      	b.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f878 	bl	8005614 <I2C_IsAcknowledgeFailed>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e02d      	b.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d021      	beq.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005536:	f7fd f99b 	bl	8002870 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	429a      	cmp	r2, r3
 8005544:	d302      	bcc.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d116      	bne.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e007      	b.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d1ca      	bne.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800559e:	e02d      	b.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f837 	bl	8005614 <I2C_IsAcknowledgeFailed>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e02d      	b.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d021      	beq.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b8:	f7fd f95a 	bl	8002870 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d302      	bcc.n	80055ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d116      	bne.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e007      	b.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b04      	cmp	r3, #4
 8005608:	d1ca      	bne.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562a:	d11b      	bne.n	8005664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f043 0204 	orr.w	r2, r3, #4
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b20      	cmp	r3, #32
 8005686:	d129      	bne.n	80056dc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	; 0x24
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0210 	bic.w	r2, r2, #16
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b20      	cmp	r3, #32
 8005702:	d12a      	bne.n	800575a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005724:	89fb      	ldrh	r3, [r7, #14]
 8005726:	f023 030f 	bic.w	r3, r3, #15
 800572a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	b29a      	uxth	r2, r3
 8005730:	89fb      	ldrh	r3, [r7, #14]
 8005732:	4313      	orrs	r3, r2
 8005734:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	89fa      	ldrh	r2, [r7, #14]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800576a:	b08f      	sub	sp, #60	; 0x3c
 800576c:	af0a      	add	r7, sp, #40	; 0x28
 800576e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e10f      	b.n	800599a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fc ff81 	bl	800269c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2203      	movs	r2, #3
 800579e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f003 fc8a 	bl	80090d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	687e      	ldr	r6, [r7, #4]
 80057c6:	466d      	mov	r5, sp
 80057c8:	f106 0410 	add.w	r4, r6, #16
 80057cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80057dc:	1d33      	adds	r3, r6, #4
 80057de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057e0:	6838      	ldr	r0, [r7, #0]
 80057e2:	f003 fc15 	bl	8009010 <USB_CoreInit>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0d0      	b.n	800599a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f003 fc78 	bl	80090f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	e04a      	b.n	80058a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	333d      	adds	r3, #61	; 0x3d
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800581e:	7bfa      	ldrb	r2, [r7, #15]
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	333c      	adds	r3, #60	; 0x3c
 800582e:	7bfa      	ldrb	r2, [r7, #15]
 8005830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005832:	7bfa      	ldrb	r2, [r7, #15]
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	b298      	uxth	r0, r3
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	3344      	adds	r3, #68	; 0x44
 8005846:	4602      	mov	r2, r0
 8005848:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800584a:	7bfa      	ldrb	r2, [r7, #15]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	3340      	adds	r3, #64	; 0x40
 800585a:	2200      	movs	r2, #0
 800585c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800585e:	7bfa      	ldrb	r2, [r7, #15]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	3348      	adds	r3, #72	; 0x48
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005872:	7bfa      	ldrb	r2, [r7, #15]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	334c      	adds	r3, #76	; 0x4c
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005886:	7bfa      	ldrb	r2, [r7, #15]
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	3354      	adds	r3, #84	; 0x54
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	3301      	adds	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	7bfa      	ldrb	r2, [r7, #15]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d3af      	bcc.n	800580a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
 80058ae:	e044      	b.n	800593a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058c6:	7bfa      	ldrb	r2, [r7, #15]
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80058d8:	7bfa      	ldrb	r2, [r7, #15]
 80058da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058dc:	7bfa      	ldrb	r2, [r7, #15]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058f2:	7bfa      	ldrb	r2, [r7, #15]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005908:	7bfa      	ldrb	r2, [r7, #15]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800591e:	7bfa      	ldrb	r2, [r7, #15]
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	3301      	adds	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d3b5      	bcc.n	80058b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	687e      	ldr	r6, [r7, #4]
 800594c:	466d      	mov	r5, sp
 800594e:	f106 0410 	add.w	r4, r6, #16
 8005952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800595a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800595e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005962:	1d33      	adds	r3, r6, #4
 8005964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005966:	6838      	ldr	r0, [r7, #0]
 8005968:	f003 fc10 	bl	800918c <USB_DevInit>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e00d      	b.n	800599a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f003 fddb 	bl	800954e <USB_DevDisconnect>

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080059a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e267      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d075      	beq.n	8005aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059c2:	4b88      	ldr	r3, [pc, #544]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d00c      	beq.n	80059e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ce:	4b85      	ldr	r3, [pc, #532]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d112      	bne.n	8005a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059da:	4b82      	ldr	r3, [pc, #520]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e6:	d10b      	bne.n	8005a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e8:	4b7e      	ldr	r3, [pc, #504]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d05b      	beq.n	8005aac <HAL_RCC_OscConfig+0x108>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d157      	bne.n	8005aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e242      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a08:	d106      	bne.n	8005a18 <HAL_RCC_OscConfig+0x74>
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a75      	ldr	r2, [pc, #468]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e01d      	b.n	8005a54 <HAL_RCC_OscConfig+0xb0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a20:	d10c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x98>
 8005a22:	4b70      	ldr	r3, [pc, #448]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a6f      	ldr	r2, [pc, #444]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	4b6d      	ldr	r3, [pc, #436]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a6c      	ldr	r2, [pc, #432]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e00b      	b.n	8005a54 <HAL_RCC_OscConfig+0xb0>
 8005a3c:	4b69      	ldr	r3, [pc, #420]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a68      	ldr	r2, [pc, #416]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4b66      	ldr	r3, [pc, #408]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a65      	ldr	r2, [pc, #404]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d013      	beq.n	8005a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fc ff08 	bl	8002870 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a64:	f7fc ff04 	bl	8002870 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b64      	cmp	r3, #100	; 0x64
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e207      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a76:	4b5b      	ldr	r3, [pc, #364]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f0      	beq.n	8005a64 <HAL_RCC_OscConfig+0xc0>
 8005a82:	e014      	b.n	8005aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a84:	f7fc fef4 	bl	8002870 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a8c:	f7fc fef0 	bl	8002870 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	; 0x64
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e1f3      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a9e:	4b51      	ldr	r3, [pc, #324]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0xe8>
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d063      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aba:	4b4a      	ldr	r3, [pc, #296]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ac6:	4b47      	ldr	r3, [pc, #284]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d11c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ad2:	4b44      	ldr	r3, [pc, #272]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d116      	bne.n	8005b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ade:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_RCC_OscConfig+0x152>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d001      	beq.n	8005af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e1c7      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4937      	ldr	r1, [pc, #220]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0a:	e03a      	b.n	8005b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d020      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <HAL_RCC_OscConfig+0x244>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fc fea9 	bl	8002870 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b22:	f7fc fea5 	bl	8002870 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e1a8      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b34:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b40:	4b28      	ldr	r3, [pc, #160]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4925      	ldr	r1, [pc, #148]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	600b      	str	r3, [r1, #0]
 8005b54:	e015      	b.n	8005b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <HAL_RCC_OscConfig+0x244>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fc fe88 	bl	8002870 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b64:	f7fc fe84 	bl	8002870 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e187      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b76:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d036      	beq.n	8005bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <HAL_RCC_OscConfig+0x248>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fc fe68 	bl	8002870 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba4:	f7fc fe64 	bl	8002870 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e167      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x200>
 8005bc2:	e01b      	b.n	8005bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <HAL_RCC_OscConfig+0x248>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bca:	f7fc fe51 	bl	8002870 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd0:	e00e      	b.n	8005bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd2:	f7fc fe4d 	bl	8002870 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d907      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e150      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
 8005be4:	40023800 	.word	0x40023800
 8005be8:	42470000 	.word	0x42470000
 8005bec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf0:	4b88      	ldr	r3, [pc, #544]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1ea      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8097 	beq.w	8005d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c0e:	4b81      	ldr	r3, [pc, #516]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	4b7d      	ldr	r3, [pc, #500]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	4a7c      	ldr	r2, [pc, #496]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c28:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2a:	4b7a      	ldr	r3, [pc, #488]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3a:	4b77      	ldr	r3, [pc, #476]	; (8005e18 <HAL_RCC_OscConfig+0x474>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d118      	bne.n	8005c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c46:	4b74      	ldr	r3, [pc, #464]	; (8005e18 <HAL_RCC_OscConfig+0x474>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a73      	ldr	r2, [pc, #460]	; (8005e18 <HAL_RCC_OscConfig+0x474>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c52:	f7fc fe0d 	bl	8002870 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5a:	f7fc fe09 	bl	8002870 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e10c      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6c:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <HAL_RCC_OscConfig+0x474>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0f0      	beq.n	8005c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCC_OscConfig+0x2ea>
 8005c80:	4b64      	ldr	r3, [pc, #400]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c84:	4a63      	ldr	r2, [pc, #396]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8c:	e01c      	b.n	8005cc8 <HAL_RCC_OscConfig+0x324>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d10c      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x30c>
 8005c96:	4b5f      	ldr	r3, [pc, #380]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	4a5e      	ldr	r2, [pc, #376]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	f043 0304 	orr.w	r3, r3, #4
 8005ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca2:	4b5c      	ldr	r3, [pc, #368]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	4a5b      	ldr	r2, [pc, #364]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6713      	str	r3, [r2, #112]	; 0x70
 8005cae:	e00b      	b.n	8005cc8 <HAL_RCC_OscConfig+0x324>
 8005cb0:	4b58      	ldr	r3, [pc, #352]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	4a57      	ldr	r2, [pc, #348]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbc:	4b55      	ldr	r3, [pc, #340]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	4a54      	ldr	r2, [pc, #336]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cc2:	f023 0304 	bic.w	r3, r3, #4
 8005cc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d015      	beq.n	8005cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd0:	f7fc fdce 	bl	8002870 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd8:	f7fc fdca 	bl	8002870 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e0cb      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cee:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0ee      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x334>
 8005cfa:	e014      	b.n	8005d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfc:	f7fc fdb8 	bl	8002870 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fc fdb4 	bl	8002870 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e0b5      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d1a:	4b3e      	ldr	r3, [pc, #248]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1ee      	bne.n	8005d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d105      	bne.n	8005d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2c:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	4a38      	ldr	r2, [pc, #224]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80a1 	beq.w	8005e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d42:	4b34      	ldr	r3, [pc, #208]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d05c      	beq.n	8005e08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d141      	bne.n	8005dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d56:	4b31      	ldr	r3, [pc, #196]	; (8005e1c <HAL_RCC_OscConfig+0x478>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5c:	f7fc fd88 	bl	8002870 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fc fd84 	bl	8002870 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e087      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69da      	ldr	r2, [r3, #28]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	019b      	lsls	r3, r3, #6
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	041b      	lsls	r3, r3, #16
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	061b      	lsls	r3, r3, #24
 8005da6:	491b      	ldr	r1, [pc, #108]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_RCC_OscConfig+0x478>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db2:	f7fc fd5d 	bl	8002870 <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dba:	f7fc fd59 	bl	8002870 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e05c      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dcc:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCC_OscConfig+0x416>
 8005dd8:	e054      	b.n	8005e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dda:	4b10      	ldr	r3, [pc, #64]	; (8005e1c <HAL_RCC_OscConfig+0x478>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fc fd46 	bl	8002870 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de8:	f7fc fd42 	bl	8002870 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e045      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfa:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0x444>
 8005e06:	e03d      	b.n	8005e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d107      	bne.n	8005e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e038      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
 8005e14:	40023800 	.word	0x40023800
 8005e18:	40007000 	.word	0x40007000
 8005e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <HAL_RCC_OscConfig+0x4ec>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d028      	beq.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d121      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d11a      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e50:	4013      	ands	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d111      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800

08005e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0cc      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b68      	ldr	r3, [pc, #416]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d90c      	bls.n	8005ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b65      	ldr	r3, [pc, #404]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ebe:	4b63      	ldr	r3, [pc, #396]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0b8      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d020      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee8:	4b59      	ldr	r3, [pc, #356]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4a58      	ldr	r2, [pc, #352]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f00:	4b53      	ldr	r3, [pc, #332]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	4a52      	ldr	r2, [pc, #328]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f0c:	4b50      	ldr	r3, [pc, #320]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	494d      	ldr	r1, [pc, #308]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d044      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d107      	bne.n	8005f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f32:	4b47      	ldr	r3, [pc, #284]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d119      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e07f      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d003      	beq.n	8005f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d107      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f52:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e06f      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f62:	4b3b      	ldr	r3, [pc, #236]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e067      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f72:	4b37      	ldr	r3, [pc, #220]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f023 0203 	bic.w	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4934      	ldr	r1, [pc, #208]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f84:	f7fc fc74 	bl	8002870 <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8a:	e00a      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f8c:	f7fc fc70 	bl	8002870 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e04f      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa2:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 020c 	and.w	r2, r3, #12
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d1eb      	bne.n	8005f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb4:	4b25      	ldr	r3, [pc, #148]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d20c      	bcs.n	8005fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc2:	4b22      	ldr	r3, [pc, #136]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fca:	4b20      	ldr	r3, [pc, #128]	; (800604c <HAL_RCC_ClockConfig+0x1b8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d001      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e032      	b.n	8006042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fe8:	4b19      	ldr	r3, [pc, #100]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4916      	ldr	r1, [pc, #88]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	490e      	ldr	r1, [pc, #56]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800601a:	f000 f821 	bl	8006060 <HAL_RCC_GetSysClockFreq>
 800601e:	4602      	mov	r2, r0
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	091b      	lsrs	r3, r3, #4
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	490a      	ldr	r1, [pc, #40]	; (8006054 <HAL_RCC_ClockConfig+0x1c0>)
 800602c:	5ccb      	ldrb	r3, [r1, r3]
 800602e:	fa22 f303 	lsr.w	r3, r2, r3
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <HAL_RCC_ClockConfig+0x1c4>)
 8006034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_RCC_ClockConfig+0x1c8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f7fc fbd4 	bl	80027e8 <HAL_InitTick>

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40023c00 	.word	0x40023c00
 8006050:	40023800 	.word	0x40023800
 8006054:	0800af28 	.word	0x0800af28
 8006058:	20000010 	.word	0x20000010
 800605c:	20000014 	.word	0x20000014

08006060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006064:	b094      	sub	sp, #80	; 0x50
 8006066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	647b      	str	r3, [r7, #68]	; 0x44
 800606c:	2300      	movs	r3, #0
 800606e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006070:	2300      	movs	r3, #0
 8006072:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006078:	4b79      	ldr	r3, [pc, #484]	; (8006260 <HAL_RCC_GetSysClockFreq+0x200>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 030c 	and.w	r3, r3, #12
 8006080:	2b08      	cmp	r3, #8
 8006082:	d00d      	beq.n	80060a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006084:	2b08      	cmp	r3, #8
 8006086:	f200 80e1 	bhi.w	800624c <HAL_RCC_GetSysClockFreq+0x1ec>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0x34>
 800608e:	2b04      	cmp	r3, #4
 8006090:	d003      	beq.n	800609a <HAL_RCC_GetSysClockFreq+0x3a>
 8006092:	e0db      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006094:	4b73      	ldr	r3, [pc, #460]	; (8006264 <HAL_RCC_GetSysClockFreq+0x204>)
 8006096:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006098:	e0db      	b.n	8006252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800609a:	4b73      	ldr	r3, [pc, #460]	; (8006268 <HAL_RCC_GetSysClockFreq+0x208>)
 800609c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800609e:	e0d8      	b.n	8006252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060a0:	4b6f      	ldr	r3, [pc, #444]	; (8006260 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060aa:	4b6d      	ldr	r3, [pc, #436]	; (8006260 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d063      	beq.n	800617e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b6:	4b6a      	ldr	r3, [pc, #424]	; (8006260 <HAL_RCC_GetSysClockFreq+0x200>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	099b      	lsrs	r3, r3, #6
 80060bc:	2200      	movs	r2, #0
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
 80060c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ca:	2300      	movs	r3, #0
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
 80060ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80060d2:	4622      	mov	r2, r4
 80060d4:	462b      	mov	r3, r5
 80060d6:	f04f 0000 	mov.w	r0, #0
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	0159      	lsls	r1, r3, #5
 80060e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e4:	0150      	lsls	r0, r2, #5
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4621      	mov	r1, r4
 80060ec:	1a51      	subs	r1, r2, r1
 80060ee:	6139      	str	r1, [r7, #16]
 80060f0:	4629      	mov	r1, r5
 80060f2:	eb63 0301 	sbc.w	r3, r3, r1
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006104:	4659      	mov	r1, fp
 8006106:	018b      	lsls	r3, r1, #6
 8006108:	4651      	mov	r1, sl
 800610a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800610e:	4651      	mov	r1, sl
 8006110:	018a      	lsls	r2, r1, #6
 8006112:	4651      	mov	r1, sl
 8006114:	ebb2 0801 	subs.w	r8, r2, r1
 8006118:	4659      	mov	r1, fp
 800611a:	eb63 0901 	sbc.w	r9, r3, r1
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800612a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800612e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006132:	4690      	mov	r8, r2
 8006134:	4699      	mov	r9, r3
 8006136:	4623      	mov	r3, r4
 8006138:	eb18 0303 	adds.w	r3, r8, r3
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	462b      	mov	r3, r5
 8006140:	eb49 0303 	adc.w	r3, r9, r3
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006152:	4629      	mov	r1, r5
 8006154:	024b      	lsls	r3, r1, #9
 8006156:	4621      	mov	r1, r4
 8006158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800615c:	4621      	mov	r1, r4
 800615e:	024a      	lsls	r2, r1, #9
 8006160:	4610      	mov	r0, r2
 8006162:	4619      	mov	r1, r3
 8006164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006166:	2200      	movs	r2, #0
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28
 800616a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800616c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006170:	f7fa f896 	bl	80002a0 <__aeabi_uldivmod>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4613      	mov	r3, r2
 800617a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800617c:	e058      	b.n	8006230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800617e:	4b38      	ldr	r3, [pc, #224]	; (8006260 <HAL_RCC_GetSysClockFreq+0x200>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	099b      	lsrs	r3, r3, #6
 8006184:	2200      	movs	r2, #0
 8006186:	4618      	mov	r0, r3
 8006188:	4611      	mov	r1, r2
 800618a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800618e:	623b      	str	r3, [r7, #32]
 8006190:	2300      	movs	r3, #0
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
 8006194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	f04f 0000 	mov.w	r0, #0
 80061a0:	f04f 0100 	mov.w	r1, #0
 80061a4:	0159      	lsls	r1, r3, #5
 80061a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061aa:	0150      	lsls	r0, r2, #5
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4641      	mov	r1, r8
 80061b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80061b6:	4649      	mov	r1, r9
 80061b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061d0:	ebb2 040a 	subs.w	r4, r2, sl
 80061d4:	eb63 050b 	sbc.w	r5, r3, fp
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	00eb      	lsls	r3, r5, #3
 80061e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061e6:	00e2      	lsls	r2, r4, #3
 80061e8:	4614      	mov	r4, r2
 80061ea:	461d      	mov	r5, r3
 80061ec:	4643      	mov	r3, r8
 80061ee:	18e3      	adds	r3, r4, r3
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	464b      	mov	r3, r9
 80061f4:	eb45 0303 	adc.w	r3, r5, r3
 80061f8:	607b      	str	r3, [r7, #4]
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006206:	4629      	mov	r1, r5
 8006208:	028b      	lsls	r3, r1, #10
 800620a:	4621      	mov	r1, r4
 800620c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006210:	4621      	mov	r1, r4
 8006212:	028a      	lsls	r2, r1, #10
 8006214:	4610      	mov	r0, r2
 8006216:	4619      	mov	r1, r3
 8006218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800621a:	2200      	movs	r2, #0
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	61fa      	str	r2, [r7, #28]
 8006220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006224:	f7fa f83c 	bl	80002a0 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4613      	mov	r3, r2
 800622e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <HAL_RCC_GetSysClockFreq+0x200>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	0c1b      	lsrs	r3, r3, #16
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	3301      	adds	r3, #1
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800624a:	e002      	b.n	8006252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <HAL_RCC_GetSysClockFreq+0x204>)
 800624e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006254:	4618      	mov	r0, r3
 8006256:	3750      	adds	r7, #80	; 0x50
 8006258:	46bd      	mov	sp, r7
 800625a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	00f42400 	.word	0x00f42400
 8006268:	007a1200 	.word	0x007a1200

0800626c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006270:	4b03      	ldr	r3, [pc, #12]	; (8006280 <HAL_RCC_GetHCLKFreq+0x14>)
 8006272:	681b      	ldr	r3, [r3, #0]
}
 8006274:	4618      	mov	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000010 	.word	0x20000010

08006284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006288:	f7ff fff0 	bl	800626c <HAL_RCC_GetHCLKFreq>
 800628c:	4602      	mov	r2, r0
 800628e:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	0a9b      	lsrs	r3, r3, #10
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	4903      	ldr	r1, [pc, #12]	; (80062a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800629a:	5ccb      	ldrb	r3, [r1, r3]
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40023800 	.word	0x40023800
 80062a8:	0800af38 	.word	0x0800af38

080062ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062b0:	f7ff ffdc 	bl	800626c <HAL_RCC_GetHCLKFreq>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	0b5b      	lsrs	r3, r3, #13
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	4903      	ldr	r1, [pc, #12]	; (80062d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062c2:	5ccb      	ldrb	r3, [r1, r3]
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40023800 	.word	0x40023800
 80062d0:	0800af38 	.word	0x0800af38

080062d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006304:	2b00      	cmp	r3, #0
 8006306:	d075      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006308:	4b91      	ldr	r3, [pc, #580]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800630e:	f7fc faaf 	bl	8002870 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006316:	f7fc faab 	bl	8002870 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e189      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006328:	4b8a      	ldr	r3, [pc, #552]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1f0      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	019a      	lsls	r2, r3, #6
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	071b      	lsls	r3, r3, #28
 800634c:	4981      	ldr	r1, [pc, #516]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01f      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006360:	4b7c      	ldr	r3, [pc, #496]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006366:	0f1b      	lsrs	r3, r3, #28
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	019a      	lsls	r2, r3, #6
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	061b      	lsls	r3, r3, #24
 800637a:	431a      	orrs	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	071b      	lsls	r3, r3, #28
 8006380:	4974      	ldr	r1, [pc, #464]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006388:	4b72      	ldr	r3, [pc, #456]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800638a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638e:	f023 021f 	bic.w	r2, r3, #31
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	3b01      	subs	r3, #1
 8006398:	496e      	ldr	r1, [pc, #440]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	019a      	lsls	r2, r3, #6
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	061b      	lsls	r3, r3, #24
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	071b      	lsls	r3, r3, #28
 80063c0:	4964      	ldr	r1, [pc, #400]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80063c8:	4b61      	ldr	r3, [pc, #388]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063ce:	f7fc fa4f 	bl	8002870 <HAL_GetTick>
 80063d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063d4:	e008      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063d6:	f7fc fa4b 	bl	8002870 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e129      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063e8:	4b5a      	ldr	r3, [pc, #360]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0f0      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006408:	2b00      	cmp	r3, #0
 800640a:	d079      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800640c:	4b52      	ldr	r3, [pc, #328]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006412:	f7fc fa2d 	bl	8002870 <HAL_GetTick>
 8006416:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006418:	e008      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800641a:	f7fc fa29 	bl	8002870 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e107      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800642c:	4b49      	ldr	r3, [pc, #292]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006438:	d0ef      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d020      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006446:	4b43      	ldr	r3, [pc, #268]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	0f1b      	lsrs	r3, r3, #28
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	019a      	lsls	r2, r3, #6
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	061b      	lsls	r3, r3, #24
 8006460:	431a      	orrs	r2, r3
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	071b      	lsls	r3, r3, #28
 8006466:	493b      	ldr	r1, [pc, #236]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800646e:	4b39      	ldr	r3, [pc, #228]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006474:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	3b01      	subs	r3, #1
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	4934      	ldr	r1, [pc, #208]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01e      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006494:	4b2f      	ldr	r3, [pc, #188]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	0e1b      	lsrs	r3, r3, #24
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	019a      	lsls	r2, r3, #6
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	061b      	lsls	r3, r3, #24
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	071b      	lsls	r3, r3, #28
 80064b4:	4927      	ldr	r1, [pc, #156]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80064bc:	4b25      	ldr	r3, [pc, #148]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	4922      	ldr	r1, [pc, #136]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80064d2:	4b21      	ldr	r3, [pc, #132]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064d8:	f7fc f9ca 	bl	8002870 <HAL_GetTick>
 80064dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80064e0:	f7fc f9c6 	bl	8002870 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e0a4      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064f2:	4b18      	ldr	r3, [pc, #96]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064fe:	d1ef      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 808b 	beq.w	8006624 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	4a0f      	ldr	r2, [pc, #60]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651c:	6413      	str	r3, [r2, #64]	; 0x40
 800651e:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a0b      	ldr	r2, [pc, #44]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006534:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006536:	f7fc f99b 	bl	8002870 <HAL_GetTick>
 800653a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800653c:	e010      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800653e:	f7fc f997 	bl	8002870 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d909      	bls.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e075      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006550:	42470068 	.word	0x42470068
 8006554:	40023800 	.word	0x40023800
 8006558:	42470070 	.word	0x42470070
 800655c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006560:	4b38      	ldr	r3, [pc, #224]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0e8      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800656c:	4b36      	ldr	r3, [pc, #216]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006574:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d02f      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d028      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800658a:	4b2f      	ldr	r3, [pc, #188]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006592:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006594:	4b2d      	ldr	r3, [pc, #180]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800659a:	4b2c      	ldr	r3, [pc, #176]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80065a0:	4a29      	ldr	r2, [pc, #164]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065a6:	4b28      	ldr	r3, [pc, #160]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d114      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80065b2:	f7fc f95d 	bl	8002870 <HAL_GetTick>
 80065b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b8:	e00a      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ba:	f7fc f959 	bl	8002870 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e035      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d0:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0ee      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e8:	d10d      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80065ea:	4b17      	ldr	r3, [pc, #92]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80065fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fe:	4912      	ldr	r1, [pc, #72]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006600:	4313      	orrs	r3, r2
 8006602:	608b      	str	r3, [r1, #8]
 8006604:	e005      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006606:	4b10      	ldr	r3, [pc, #64]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4a0f      	ldr	r2, [pc, #60]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800660c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006610:	6093      	str	r3, [r2, #8]
 8006612:	4b0d      	ldr	r3, [pc, #52]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006614:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661e:	490a      	ldr	r1, [pc, #40]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006620:	4313      	orrs	r3, r2
 8006622:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006638:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40007000 	.word	0x40007000
 8006648:	40023800 	.word	0x40023800
 800664c:	42470e40 	.word	0x42470e40
 8006650:	424711e0 	.word	0x424711e0

08006654 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e066      	b.n	8006738 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	7f5b      	ldrb	r3, [r3, #29]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fb fbf2 	bl	8001e64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	22ca      	movs	r2, #202	; 0xca
 800668c:	625a      	str	r2, [r3, #36]	; 0x24
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2253      	movs	r2, #83	; 0x53
 8006694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fbce 	bl	8006e38 <RTC_EnterInitMode>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d12c      	bne.n	8006700 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	68d2      	ldr	r2, [r2, #12]
 80066e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6919      	ldr	r1, [r3, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	041a      	lsls	r2, r3, #16
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fbd5 	bl	8006ea6 <RTC_ExitInitMode>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d113      	bne.n	800672e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006714:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	22ff      	movs	r2, #255	; 0xff
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	7f1b      	ldrb	r3, [r3, #28]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_RTC_SetTime+0x1c>
 8006758:	2302      	movs	r3, #2
 800675a:	e087      	b.n	800686c <HAL_RTC_SetTime+0x12c>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2202      	movs	r2, #2
 8006766:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d126      	bne.n	80067bc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d102      	bne.n	8006782 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2200      	movs	r2, #0
 8006780:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fbb2 	bl	8006ef0 <RTC_ByteToBcd2>
 800678c:	4603      	mov	r3, r0
 800678e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fbab 	bl	8006ef0 <RTC_ByteToBcd2>
 800679a:	4603      	mov	r3, r0
 800679c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800679e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	789b      	ldrb	r3, [r3, #2]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fba3 	bl	8006ef0 <RTC_ByteToBcd2>
 80067aa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80067ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	78db      	ldrb	r3, [r3, #3]
 80067b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	e018      	b.n	80067ee <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80067dc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80067e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	78db      	ldrb	r3, [r3, #3]
 80067e8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	22ca      	movs	r2, #202	; 0xca
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2253      	movs	r2, #83	; 0x53
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fb1a 	bl	8006e38 <RTC_EnterInitMode>
 8006804:	4603      	mov	r3, r0
 8006806:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006808:	7cfb      	ldrb	r3, [r7, #19]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d120      	bne.n	8006850 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006818:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800681c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800682c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	431a      	orrs	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 fb2d 	bl	8006ea6 <RTC_ExitInitMode>
 800684c:	4603      	mov	r3, r0
 800684e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006850:	7cfb      	ldrb	r3, [r7, #19]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	22ff      	movs	r2, #255	; 0xff
 8006862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	771a      	strb	r2, [r3, #28]

  return status;
 800686a:	7cfb      	ldrb	r3, [r7, #19]
}
 800686c:	4618      	mov	r0, r3
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	bd90      	pop	{r4, r7, pc}

08006874 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80068a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80068aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	0c1b      	lsrs	r3, r3, #16
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	0a1b      	lsrs	r3, r3, #8
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	0d9b      	lsrs	r3, r3, #22
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11a      	bne.n	8006926 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fb18 	bl	8006f2a <RTC_Bcd2ToByte>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461a      	mov	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fb0f 	bl	8006f2a <RTC_Bcd2ToByte>
 800690c:	4603      	mov	r3, r0
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	789b      	ldrb	r3, [r3, #2]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fb06 	bl	8006f2a <RTC_Bcd2ToByte>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	7f1b      	ldrb	r3, [r3, #28]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d101      	bne.n	800694c <HAL_RTC_SetDate+0x1c>
 8006948:	2302      	movs	r3, #2
 800694a:	e071      	b.n	8006a30 <HAL_RTC_SetDate+0x100>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2202      	movs	r2, #2
 8006956:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10e      	bne.n	800697c <HAL_RTC_SetDate+0x4c>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	785b      	ldrb	r3, [r3, #1]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b00      	cmp	r3, #0
 8006968:	d008      	beq.n	800697c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	f023 0310 	bic.w	r3, r3, #16
 8006972:	b2db      	uxtb	r3, r3
 8006974:	330a      	adds	r3, #10
 8006976:	b2da      	uxtb	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d11c      	bne.n	80069bc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	78db      	ldrb	r3, [r3, #3]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fab2 	bl	8006ef0 <RTC_ByteToBcd2>
 800698c:	4603      	mov	r3, r0
 800698e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	4618      	mov	r0, r3
 8006996:	f000 faab 	bl	8006ef0 <RTC_ByteToBcd2>
 800699a:	4603      	mov	r3, r0
 800699c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800699e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	789b      	ldrb	r3, [r3, #2]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 faa3 	bl	8006ef0 <RTC_ByteToBcd2>
 80069aa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069ac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	e00e      	b.n	80069da <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	78db      	ldrb	r3, [r3, #3]
 80069c0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069c8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80069ce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	22ca      	movs	r2, #202	; 0xca
 80069e0:	625a      	str	r2, [r3, #36]	; 0x24
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2253      	movs	r2, #83	; 0x53
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa24 	bl	8006e38 <RTC_EnterInitMode>
 80069f0:	4603      	mov	r3, r0
 80069f2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10c      	bne.n	8006a14 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fa4b 	bl	8006ea6 <RTC_ExitInitMode>
 8006a10:	4603      	mov	r3, r0
 8006a12:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a14:	7cfb      	ldrb	r3, [r7, #19]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	22ff      	movs	r2, #255	; 0xff
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	771a      	strb	r2, [r3, #28]

  return status;
 8006a2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd90      	pop	{r4, r7, pc}

08006a38 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	0b5b      	lsrs	r3, r3, #13
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d11a      	bne.n	8006acc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	78db      	ldrb	r3, [r3, #3]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fa45 	bl	8006f2a <RTC_Bcd2ToByte>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fa3c 	bl	8006f2a <RTC_Bcd2ToByte>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	789b      	ldrb	r3, [r3, #2]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fa33 	bl	8006f2a <RTC_Bcd2ToByte>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b089      	sub	sp, #36	; 0x24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006ae4:	4b9a      	ldr	r3, [pc, #616]	; (8006d50 <HAL_RTC_SetAlarm_IT+0x278>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a9a      	ldr	r2, [pc, #616]	; (8006d54 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	0adb      	lsrs	r3, r3, #11
 8006af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	7f1b      	ldrb	r3, [r3, #28]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_RTC_SetAlarm_IT+0x36>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e11c      	b.n	8006d48 <HAL_RTC_SetAlarm_IT+0x270>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2202      	movs	r2, #2
 8006b18:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d137      	bne.n	8006b90 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d102      	bne.n	8006b34 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f9d9 	bl	8006ef0 <RTC_ByteToBcd2>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f9d2 	bl	8006ef0 <RTC_ByteToBcd2>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006b50:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	789b      	ldrb	r3, [r3, #2]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 f9ca 	bl	8006ef0 <RTC_ByteToBcd2>
 8006b5c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	78db      	ldrb	r3, [r3, #3]
 8006b66:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006b68:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 f9bc 	bl	8006ef0 <RTC_ByteToBcd2>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006b7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006b84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	e023      	b.n	8006bd8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	785b      	ldrb	r3, [r3, #1]
 8006bae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006bb0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006bb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	78db      	ldrb	r3, [r3, #3]
 8006bbc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006bbe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bc6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006bc8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006bce:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	22ca      	movs	r2, #202	; 0xca
 8006bea:	625a      	str	r2, [r3, #36]	; 0x24
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2253      	movs	r2, #83	; 0x53
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfc:	d141      	bne.n	8006c82 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c0c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006c1e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	1e5a      	subs	r2, r3, #1
 8006c24:	617a      	str	r2, [r7, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	22ff      	movs	r2, #255	; 0xff
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2203      	movs	r2, #3
 8006c36:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e082      	b.n	8006d48 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0e7      	beq.n	8006c20 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c6e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c7e:	609a      	str	r2, [r3, #8]
 8006c80:	e04b      	b.n	8006d1a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c90:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006ca2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006ca4:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <HAL_RTC_SetAlarm_IT+0x278>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a2a      	ldr	r2, [pc, #168]	; (8006d54 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006caa:	fba2 2303 	umull	r2, r3, r2, r3
 8006cae:	0adb      	lsrs	r3, r3, #11
 8006cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cb4:	fb02 f303 	mul.w	r3, r2, r3
 8006cb8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	1e5a      	subs	r2, r3, #1
 8006cbe:	617a      	str	r2, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	22ff      	movs	r2, #255	; 0xff
 8006cca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2203      	movs	r2, #3
 8006cd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e035      	b.n	8006d48 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0e7      	beq.n	8006cba <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d08:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d18:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <HAL_RTC_SetAlarm_IT+0x280>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	; (8006d58 <HAL_RTC_SetAlarm_IT+0x280>)
 8006d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d24:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006d26:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <HAL_RTC_SetAlarm_IT+0x280>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	4a0b      	ldr	r2, [pc, #44]	; (8006d58 <HAL_RTC_SetAlarm_IT+0x280>)
 8006d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d30:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	22ff      	movs	r2, #255	; 0xff
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3724      	adds	r7, #36	; 0x24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd90      	pop	{r4, r7, pc}
 8006d50:	20000010 	.word	0x20000010
 8006d54:	10624dd3 	.word	0x10624dd3
 8006d58:	40013c00 	.word	0x40013c00

08006d5c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d012      	beq.n	8006d98 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fa fe47 	bl	8001a14 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006d96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d012      	beq.n	8006dcc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00b      	beq.n	8006dcc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f8d4 	bl	8006f62 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006dca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006dd2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	775a      	strb	r2, [r3, #29]
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40013c00 	.word	0x40013c00

08006de8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e02:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e04:	f7fb fd34 	bl	8002870 <HAL_GetTick>
 8006e08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e0a:	e009      	b.n	8006e20 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e0c:	f7fb fd30 	bl	8002870 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e1a:	d901      	bls.n	8006e20 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e007      	b.n	8006e30 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0ee      	beq.n	8006e0c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d122      	bne.n	8006e9c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e66:	f7fb fd03 	bl	8002870 <HAL_GetTick>
 8006e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006e6c:	e00c      	b.n	8006e88 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e6e:	f7fb fcff 	bl	8002870 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e7c:	d904      	bls.n	8006e88 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2204      	movs	r2, #4
 8006e82:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <RTC_EnterInitMode+0x64>
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d1e8      	bne.n	8006e6e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ec0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff ff89 	bl	8006de8 <HAL_RTC_WaitForSynchro>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006efe:	e005      	b.n	8006f0c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	3301      	adds	r3, #1
 8006f04:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	3b0a      	subs	r3, #10
 8006f0a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	2b09      	cmp	r3, #9
 8006f10:	d8f6      	bhi.n	8006f00 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	b2db      	uxtb	r3, r3
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	4603      	mov	r3, r0
 8006f32:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	091b      	lsrs	r3, r3, #4
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	0092      	lsls	r2, r2, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	4413      	add	r3, r2
 8006f54:	b2db      	uxtb	r3, r3
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e041      	b.n	800700c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d106      	bne.n	8006fa2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fb fa0b 	bl	80023b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f000 fc13 	bl	80077e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e041      	b.n	80070aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f839 	bl	80070b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	4619      	mov	r1, r3
 8007052:	4610      	mov	r0, r2
 8007054:	f000 fbc4 	bl	80077e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <HAL_TIM_PWM_Start+0x24>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	bf14      	ite	ne
 80070e4:	2301      	movne	r3, #1
 80070e6:	2300      	moveq	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	e022      	b.n	8007132 <HAL_TIM_PWM_Start+0x6a>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d109      	bne.n	8007106 <HAL_TIM_PWM_Start+0x3e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	e015      	b.n	8007132 <HAL_TIM_PWM_Start+0x6a>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d109      	bne.n	8007120 <HAL_TIM_PWM_Start+0x58>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	bf14      	ite	ne
 8007118:	2301      	movne	r3, #1
 800711a:	2300      	moveq	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	e008      	b.n	8007132 <HAL_TIM_PWM_Start+0x6a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	bf14      	ite	ne
 800712c:	2301      	movne	r3, #1
 800712e:	2300      	moveq	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e07c      	b.n	8007234 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <HAL_TIM_PWM_Start+0x82>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007148:	e013      	b.n	8007172 <HAL_TIM_PWM_Start+0xaa>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b04      	cmp	r3, #4
 800714e:	d104      	bne.n	800715a <HAL_TIM_PWM_Start+0x92>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007158:	e00b      	b.n	8007172 <HAL_TIM_PWM_Start+0xaa>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b08      	cmp	r3, #8
 800715e:	d104      	bne.n	800716a <HAL_TIM_PWM_Start+0xa2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007168:	e003      	b.n	8007172 <HAL_TIM_PWM_Start+0xaa>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2201      	movs	r2, #1
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fe1a 	bl	8007db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a2d      	ldr	r2, [pc, #180]	; (800723c <HAL_TIM_PWM_Start+0x174>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <HAL_TIM_PWM_Start+0xcc>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a2c      	ldr	r2, [pc, #176]	; (8007240 <HAL_TIM_PWM_Start+0x178>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d101      	bne.n	8007198 <HAL_TIM_PWM_Start+0xd0>
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <HAL_TIM_PWM_Start+0xd2>
 8007198:	2300      	movs	r3, #0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a22      	ldr	r2, [pc, #136]	; (800723c <HAL_TIM_PWM_Start+0x174>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d022      	beq.n	80071fe <HAL_TIM_PWM_Start+0x136>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c0:	d01d      	beq.n	80071fe <HAL_TIM_PWM_Start+0x136>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1f      	ldr	r2, [pc, #124]	; (8007244 <HAL_TIM_PWM_Start+0x17c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d018      	beq.n	80071fe <HAL_TIM_PWM_Start+0x136>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1d      	ldr	r2, [pc, #116]	; (8007248 <HAL_TIM_PWM_Start+0x180>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <HAL_TIM_PWM_Start+0x136>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1c      	ldr	r2, [pc, #112]	; (800724c <HAL_TIM_PWM_Start+0x184>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <HAL_TIM_PWM_Start+0x136>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a16      	ldr	r2, [pc, #88]	; (8007240 <HAL_TIM_PWM_Start+0x178>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <HAL_TIM_PWM_Start+0x136>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a18      	ldr	r2, [pc, #96]	; (8007250 <HAL_TIM_PWM_Start+0x188>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <HAL_TIM_PWM_Start+0x136>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a16      	ldr	r2, [pc, #88]	; (8007254 <HAL_TIM_PWM_Start+0x18c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d111      	bne.n	8007222 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b06      	cmp	r3, #6
 800720e:	d010      	beq.n	8007232 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007220:	e007      	b.n	8007232 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f042 0201 	orr.w	r2, r2, #1
 8007230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40010000 	.word	0x40010000
 8007240:	40010400 	.word	0x40010400
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40014000 	.word	0x40014000
 8007254:	40001800 	.word	0x40001800

08007258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b02      	cmp	r3, #2
 800726c:	d122      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b02      	cmp	r3, #2
 800727a:	d11b      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0202 	mvn.w	r2, #2
 8007284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa81 	bl	80077a2 <HAL_TIM_IC_CaptureCallback>
 80072a0:	e005      	b.n	80072ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa73 	bl	800778e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa84 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d122      	bne.n	8007308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d11b      	bne.n	8007308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0204 	mvn.w	r2, #4
 80072d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa57 	bl	80077a2 <HAL_TIM_IC_CaptureCallback>
 80072f4:	e005      	b.n	8007302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa49 	bl	800778e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa5a 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b08      	cmp	r3, #8
 8007314:	d122      	bne.n	800735c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b08      	cmp	r3, #8
 8007322:	d11b      	bne.n	800735c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f06f 0208 	mvn.w	r2, #8
 800732c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2204      	movs	r2, #4
 8007332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa2d 	bl	80077a2 <HAL_TIM_IC_CaptureCallback>
 8007348:	e005      	b.n	8007356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fa1f 	bl	800778e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa30 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b10      	cmp	r3, #16
 8007368:	d122      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b10      	cmp	r3, #16
 8007376:	d11b      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0210 	mvn.w	r2, #16
 8007380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2208      	movs	r2, #8
 8007386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa03 	bl	80077a2 <HAL_TIM_IC_CaptureCallback>
 800739c:	e005      	b.n	80073aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f9f5 	bl	800778e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fa06 	bl	80077b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d10e      	bne.n	80073dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d107      	bne.n	80073dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0201 	mvn.w	r2, #1
 80073d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f9cf 	bl	800777a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d10e      	bne.n	8007408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d107      	bne.n	8007408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fd82 	bl	8007f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9cb 	bl	80077ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b20      	cmp	r3, #32
 8007440:	d10e      	bne.n	8007460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b20      	cmp	r3, #32
 800744e:	d107      	bne.n	8007460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0220 	mvn.w	r2, #32
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fd4c 	bl	8007ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007482:	2302      	movs	r3, #2
 8007484:	e0ae      	b.n	80075e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b0c      	cmp	r3, #12
 8007492:	f200 809f 	bhi.w	80075d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007496:	a201      	add	r2, pc, #4	; (adr r2, 800749c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074d1 	.word	0x080074d1
 80074a0:	080075d5 	.word	0x080075d5
 80074a4:	080075d5 	.word	0x080075d5
 80074a8:	080075d5 	.word	0x080075d5
 80074ac:	08007511 	.word	0x08007511
 80074b0:	080075d5 	.word	0x080075d5
 80074b4:	080075d5 	.word	0x080075d5
 80074b8:	080075d5 	.word	0x080075d5
 80074bc:	08007553 	.word	0x08007553
 80074c0:	080075d5 	.word	0x080075d5
 80074c4:	080075d5 	.word	0x080075d5
 80074c8:	080075d5 	.word	0x080075d5
 80074cc:	08007593 	.word	0x08007593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68b9      	ldr	r1, [r7, #8]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fa22 	bl	8007920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0208 	orr.w	r2, r2, #8
 80074ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0204 	bic.w	r2, r2, #4
 80074fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6999      	ldr	r1, [r3, #24]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	619a      	str	r2, [r3, #24]
      break;
 800750e:	e064      	b.n	80075da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fa72 	bl	8007a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800752a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6999      	ldr	r1, [r3, #24]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	021a      	lsls	r2, r3, #8
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	619a      	str	r2, [r3, #24]
      break;
 8007550:	e043      	b.n	80075da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fac7 	bl	8007aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69da      	ldr	r2, [r3, #28]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0208 	orr.w	r2, r2, #8
 800756c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69da      	ldr	r2, [r3, #28]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0204 	bic.w	r2, r2, #4
 800757c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69d9      	ldr	r1, [r3, #28]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	61da      	str	r2, [r3, #28]
      break;
 8007590:	e023      	b.n	80075da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fb1b 	bl	8007bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69d9      	ldr	r1, [r3, #28]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	021a      	lsls	r2, r3, #8
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	61da      	str	r2, [r3, #28]
      break;
 80075d2:	e002      	b.n	80075da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
      break;
 80075d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIM_ConfigClockSource+0x1c>
 8007604:	2302      	movs	r3, #2
 8007606:	e0b4      	b.n	8007772 <HAL_TIM_ConfigClockSource+0x186>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d03e      	beq.n	80076c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007646:	f200 8087 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	f000 8086 	beq.w	800775e <HAL_TIM_ConfigClockSource+0x172>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	d87f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007658:	2b70      	cmp	r3, #112	; 0x70
 800765a:	d01a      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0xa6>
 800765c:	2b70      	cmp	r3, #112	; 0x70
 800765e:	d87b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007660:	2b60      	cmp	r3, #96	; 0x60
 8007662:	d050      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x11a>
 8007664:	2b60      	cmp	r3, #96	; 0x60
 8007666:	d877      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007668:	2b50      	cmp	r3, #80	; 0x50
 800766a:	d03c      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0xfa>
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d873      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d058      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x13a>
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d86f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b30      	cmp	r3, #48	; 0x30
 800767a:	d064      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d86b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d060      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d867      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05c      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d05a      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x15a>
 8007690:	e062      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6899      	ldr	r1, [r3, #8]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f000 fb67 	bl	8007d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	609a      	str	r2, [r3, #8]
      break;
 80076be:	e04f      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f000 fb50 	bl	8007d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e2:	609a      	str	r2, [r3, #8]
      break;
 80076e4:	e03c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 fac4 	bl	8007c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2150      	movs	r1, #80	; 0x50
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fb1d 	bl	8007d3e <TIM_ITRx_SetConfig>
      break;
 8007704:	e02c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 fae3 	bl	8007cde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2160      	movs	r1, #96	; 0x60
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fb0d 	bl	8007d3e <TIM_ITRx_SetConfig>
      break;
 8007724:	e01c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	f000 faa4 	bl	8007c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2140      	movs	r1, #64	; 0x40
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fafd 	bl	8007d3e <TIM_ITRx_SetConfig>
      break;
 8007744:	e00c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 faf4 	bl	8007d3e <TIM_ITRx_SetConfig>
      break;
 8007756:	e003      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e000      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800775e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a40      	ldr	r2, [pc, #256]	; (80078f4 <TIM_Base_SetConfig+0x114>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d013      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fe:	d00f      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a3d      	ldr	r2, [pc, #244]	; (80078f8 <TIM_Base_SetConfig+0x118>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00b      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a3c      	ldr	r2, [pc, #240]	; (80078fc <TIM_Base_SetConfig+0x11c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d007      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a3b      	ldr	r2, [pc, #236]	; (8007900 <TIM_Base_SetConfig+0x120>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_Base_SetConfig+0x40>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a3a      	ldr	r2, [pc, #232]	; (8007904 <TIM_Base_SetConfig+0x124>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d108      	bne.n	8007832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a2f      	ldr	r2, [pc, #188]	; (80078f4 <TIM_Base_SetConfig+0x114>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d02b      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007840:	d027      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2c      	ldr	r2, [pc, #176]	; (80078f8 <TIM_Base_SetConfig+0x118>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d023      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a2b      	ldr	r2, [pc, #172]	; (80078fc <TIM_Base_SetConfig+0x11c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d01f      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <TIM_Base_SetConfig+0x120>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01b      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a29      	ldr	r2, [pc, #164]	; (8007904 <TIM_Base_SetConfig+0x124>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d017      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a28      	ldr	r2, [pc, #160]	; (8007908 <TIM_Base_SetConfig+0x128>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a27      	ldr	r2, [pc, #156]	; (800790c <TIM_Base_SetConfig+0x12c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00f      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a26      	ldr	r2, [pc, #152]	; (8007910 <TIM_Base_SetConfig+0x130>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00b      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a25      	ldr	r2, [pc, #148]	; (8007914 <TIM_Base_SetConfig+0x134>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d007      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a24      	ldr	r2, [pc, #144]	; (8007918 <TIM_Base_SetConfig+0x138>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d003      	beq.n	8007892 <TIM_Base_SetConfig+0xb2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a23      	ldr	r2, [pc, #140]	; (800791c <TIM_Base_SetConfig+0x13c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d108      	bne.n	80078a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a0a      	ldr	r2, [pc, #40]	; (80078f4 <TIM_Base_SetConfig+0x114>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d003      	beq.n	80078d8 <TIM_Base_SetConfig+0xf8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a0c      	ldr	r2, [pc, #48]	; (8007904 <TIM_Base_SetConfig+0x124>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d103      	bne.n	80078e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	615a      	str	r2, [r3, #20]
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40000400 	.word	0x40000400
 80078fc:	40000800 	.word	0x40000800
 8007900:	40000c00 	.word	0x40000c00
 8007904:	40010400 	.word	0x40010400
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800
 8007914:	40001800 	.word	0x40001800
 8007918:	40001c00 	.word	0x40001c00
 800791c:	40002000 	.word	0x40002000

08007920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0201 	bic.w	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f023 0302 	bic.w	r3, r3, #2
 8007968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a20      	ldr	r2, [pc, #128]	; (80079f8 <TIM_OC1_SetConfig+0xd8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <TIM_OC1_SetConfig+0x64>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a1f      	ldr	r2, [pc, #124]	; (80079fc <TIM_OC1_SetConfig+0xdc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d10c      	bne.n	800799e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0308 	bic.w	r3, r3, #8
 800798a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f023 0304 	bic.w	r3, r3, #4
 800799c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <TIM_OC1_SetConfig+0xd8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_OC1_SetConfig+0x8e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a14      	ldr	r2, [pc, #80]	; (80079fc <TIM_OC1_SetConfig+0xdc>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d111      	bne.n	80079d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	621a      	str	r2, [r3, #32]
}
 80079ec:	bf00      	nop
 80079ee:	371c      	adds	r7, #28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40010400 	.word	0x40010400

08007a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	f023 0210 	bic.w	r2, r3, #16
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	021b      	lsls	r3, r3, #8
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0320 	bic.w	r3, r3, #32
 8007a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a22      	ldr	r2, [pc, #136]	; (8007ae4 <TIM_OC2_SetConfig+0xe4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d003      	beq.n	8007a68 <TIM_OC2_SetConfig+0x68>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a21      	ldr	r2, [pc, #132]	; (8007ae8 <TIM_OC2_SetConfig+0xe8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d10d      	bne.n	8007a84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <TIM_OC2_SetConfig+0xe4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_OC2_SetConfig+0x94>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <TIM_OC2_SetConfig+0xe8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d113      	bne.n	8007abc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	621a      	str	r2, [r3, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40010400 	.word	0x40010400

08007aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0303 	bic.w	r3, r3, #3
 8007b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a21      	ldr	r2, [pc, #132]	; (8007bcc <TIM_OC3_SetConfig+0xe0>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d003      	beq.n	8007b52 <TIM_OC3_SetConfig+0x66>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a20      	ldr	r2, [pc, #128]	; (8007bd0 <TIM_OC3_SetConfig+0xe4>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d10d      	bne.n	8007b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a16      	ldr	r2, [pc, #88]	; (8007bcc <TIM_OC3_SetConfig+0xe0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d003      	beq.n	8007b7e <TIM_OC3_SetConfig+0x92>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a15      	ldr	r2, [pc, #84]	; (8007bd0 <TIM_OC3_SetConfig+0xe4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d113      	bne.n	8007ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	621a      	str	r2, [r3, #32]
}
 8007bc0:	bf00      	nop
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	40010000 	.word	0x40010000
 8007bd0:	40010400 	.word	0x40010400

08007bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	031b      	lsls	r3, r3, #12
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a12      	ldr	r2, [pc, #72]	; (8007c78 <TIM_OC4_SetConfig+0xa4>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC4_SetConfig+0x68>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a11      	ldr	r2, [pc, #68]	; (8007c7c <TIM_OC4_SetConfig+0xa8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d109      	bne.n	8007c50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	019b      	lsls	r3, r3, #6
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	621a      	str	r2, [r3, #32]
}
 8007c6a:	bf00      	nop
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40010000 	.word	0x40010000
 8007c7c:	40010400 	.word	0x40010400

08007c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	f023 0201 	bic.w	r2, r3, #1
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f023 030a 	bic.w	r3, r3, #10
 8007cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f023 0210 	bic.w	r2, r3, #16
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	031b      	lsls	r3, r3, #12
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	621a      	str	r2, [r3, #32]
}
 8007d32:	bf00      	nop
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b085      	sub	sp, #20
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f043 0307 	orr.w	r3, r3, #7
 8007d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	609a      	str	r2, [r3, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	021a      	lsls	r2, r3, #8
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	609a      	str	r2, [r3, #8]
}
 8007da8:	bf00      	nop
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	401a      	ands	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a1a      	ldr	r2, [r3, #32]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f003 031f 	and.w	r3, r3, #31
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dec:	431a      	orrs	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
	...

08007e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e05a      	b.n	8007ece <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a21      	ldr	r2, [pc, #132]	; (8007edc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d022      	beq.n	8007ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e64:	d01d      	beq.n	8007ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d018      	beq.n	8007ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1b      	ldr	r2, [pc, #108]	; (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00e      	beq.n	8007ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a18      	ldr	r2, [pc, #96]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d009      	beq.n	8007ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a17      	ldr	r2, [pc, #92]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d004      	beq.n	8007ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d10c      	bne.n	8007ebc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40010000 	.word	0x40010000
 8007ee0:	40000400 	.word	0x40000400
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	40000c00 	.word	0x40000c00
 8007eec:	40010400 	.word	0x40010400
 8007ef0:	40014000 	.word	0x40014000
 8007ef4:	40001800 	.word	0x40001800

08007ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e03f      	b.n	8007fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fa fafa 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2224      	movs	r2, #36	; 0x24
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fddf 	bl	8008b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	691a      	ldr	r2, [r3, #16]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b08a      	sub	sp, #40	; 0x28
 8007fbe:	af02      	add	r7, sp, #8
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	603b      	str	r3, [r7, #0]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d17c      	bne.n	80080d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <HAL_UART_Transmit+0x2c>
 8007fe0:	88fb      	ldrh	r3, [r7, #6]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e075      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_UART_Transmit+0x3e>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e06e      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2221      	movs	r2, #33	; 0x21
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800800e:	f7fa fc2f 	bl	8002870 <HAL_GetTick>
 8008012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008028:	d108      	bne.n	800803c <HAL_UART_Transmit+0x82>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d104      	bne.n	800803c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	e003      	b.n	8008044 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800804c:	e02a      	b.n	80080a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2200      	movs	r2, #0
 8008056:	2180      	movs	r1, #128	; 0x80
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 fb1f 	bl	800869c <UART_WaitOnFlagUntilTimeout>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e036      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10b      	bne.n	8008086 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800807c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	3302      	adds	r3, #2
 8008082:	61bb      	str	r3, [r7, #24]
 8008084:	e007      	b.n	8008096 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1cf      	bne.n	800804e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2200      	movs	r2, #0
 80080b6:	2140      	movs	r1, #64	; 0x40
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 faef 	bl	800869c <UART_WaitOnFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e006      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e000      	b.n	80080d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080d4:	2302      	movs	r3, #2
  }
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3720      	adds	r7, #32
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	d11d      	bne.n	8008134 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <HAL_UART_Receive_IT+0x26>
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e016      	b.n	8008136 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_UART_Receive_IT+0x38>
 8008112:	2302      	movs	r3, #2
 8008114:	e00f      	b.n	8008136 <HAL_UART_Receive_IT+0x58>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008124:	88fb      	ldrh	r3, [r7, #6]
 8008126:	461a      	mov	r2, r3
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fb24 	bl	8008778 <UART_Start_Receive_IT>
 8008130:	4603      	mov	r3, r0
 8008132:	e000      	b.n	8008136 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008134:	2302      	movs	r3, #2
  }
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b0ba      	sub	sp, #232	; 0xe8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008166:	2300      	movs	r3, #0
 8008168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800816c:	2300      	movs	r3, #0
 800816e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800817e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10f      	bne.n	80081a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <HAL_UART_IRQHandler+0x66>
 8008192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fc07 	bl	80089b2 <UART_Receive_IT>
      return;
 80081a4:	e256      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 80de 	beq.w	800836c <HAL_UART_IRQHandler+0x22c>
 80081b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80d1 	beq.w	800836c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <HAL_UART_IRQHandler+0xae>
 80081d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	f043 0201 	orr.w	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00b      	beq.n	8008212 <HAL_UART_IRQHandler+0xd2>
 80081fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	f043 0202 	orr.w	r2, r3, #2
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <HAL_UART_IRQHandler+0xf6>
 800821e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	f043 0204 	orr.w	r2, r3, #4
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b00      	cmp	r3, #0
 8008240:	d011      	beq.n	8008266 <HAL_UART_IRQHandler+0x126>
 8008242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d105      	bne.n	800825a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800824e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f043 0208 	orr.w	r2, r3, #8
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 81ed 	beq.w	800864a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d008      	beq.n	800828e <HAL_UART_IRQHandler+0x14e>
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fb92 	bl	80089b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	bf0c      	ite	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	2300      	movne	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <HAL_UART_IRQHandler+0x17a>
 80082b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d04f      	beq.n	800835a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa9a 	bl	80087f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d141      	bne.n	8008352 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3314      	adds	r3, #20
 80082f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1d9      	bne.n	80082ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	2b00      	cmp	r3, #0
 8008320:	d013      	beq.n	800834a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	4a7d      	ldr	r2, [pc, #500]	; (800851c <HAL_UART_IRQHandler+0x3dc>)
 8008328:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	4618      	mov	r0, r3
 8008330:	f7fb fa9c 	bl	800386c <HAL_DMA_Abort_IT>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d016      	beq.n	8008368 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	e00e      	b.n	8008368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f990 	bl	8008670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008350:	e00a      	b.n	8008368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f98c 	bl	8008670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008358:	e006      	b.n	8008368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f988 	bl	8008670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008366:	e170      	b.n	800864a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008368:	bf00      	nop
    return;
 800836a:	e16e      	b.n	800864a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	2b01      	cmp	r3, #1
 8008372:	f040 814a 	bne.w	800860a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837a:	f003 0310 	and.w	r3, r3, #16
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 8143 	beq.w	800860a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008388:	f003 0310 	and.w	r3, r3, #16
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 813c 	beq.w	800860a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008392:	2300      	movs	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	f040 80b4 	bne.w	8008520 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8140 	beq.w	800864e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f080 8139 	bcs.w	800864e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ee:	f000 8088 	beq.w	8008502 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	330c      	adds	r3, #12
 80083f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800840c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	330c      	adds	r3, #12
 800841a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800841e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800842a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1d9      	bne.n	80083f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3314      	adds	r3, #20
 8008444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800844e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008450:	f023 0301 	bic.w	r3, r3, #1
 8008454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3314      	adds	r3, #20
 800845e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008462:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008466:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800846a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e1      	bne.n	800843e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3314      	adds	r3, #20
 8008480:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800848a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3314      	adds	r3, #20
 800849a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800849e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e3      	bne.n	800847a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d2:	f023 0310 	bic.w	r3, r3, #16
 80084d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	330c      	adds	r3, #12
 80084e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80084e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e3      	bne.n	80084c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fb f945 	bl	800378c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800850a:	b29b      	uxth	r3, r3
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	b29b      	uxth	r3, r3
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f8b6 	bl	8008684 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008518:	e099      	b.n	800864e <HAL_UART_IRQHandler+0x50e>
 800851a:	bf00      	nop
 800851c:	080088bb 	.word	0x080088bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008528:	b29b      	uxth	r3, r3
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 808b 	beq.w	8008652 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800853c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8086 	beq.w	8008652 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	330c      	adds	r3, #12
 800854c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800855c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	330c      	adds	r3, #12
 8008566:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800856a:	647a      	str	r2, [r7, #68]	; 0x44
 800856c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e3      	bne.n	8008546 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3314      	adds	r3, #20
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	623b      	str	r3, [r7, #32]
   return(result);
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	f023 0301 	bic.w	r3, r3, #1
 8008594:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3314      	adds	r3, #20
 800859e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085a2:	633a      	str	r2, [r7, #48]	; 0x30
 80085a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e3      	bne.n	800857e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	330c      	adds	r3, #12
 80085ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0310 	bic.w	r3, r3, #16
 80085da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	330c      	adds	r3, #12
 80085e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085e8:	61fa      	str	r2, [r7, #28]
 80085ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	69b9      	ldr	r1, [r7, #24]
 80085ee:	69fa      	ldr	r2, [r7, #28]
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	617b      	str	r3, [r7, #20]
   return(result);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e3      	bne.n	80085c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f83e 	bl	8008684 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008608:	e023      	b.n	8008652 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <HAL_UART_IRQHandler+0x4ea>
 8008616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f95d 	bl	80088e2 <UART_Transmit_IT>
    return;
 8008628:	e014      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800862a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <HAL_UART_IRQHandler+0x514>
 8008636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800863a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d008      	beq.n	8008654 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f99d 	bl	8008982 <UART_EndTransmit_IT>
    return;
 8008648:	e004      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
    return;
 800864a:	bf00      	nop
 800864c:	e002      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
      return;
 800864e:	bf00      	nop
 8008650:	e000      	b.n	8008654 <HAL_UART_IRQHandler+0x514>
      return;
 8008652:	bf00      	nop
  }
}
 8008654:	37e8      	adds	r7, #232	; 0xe8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop

0800865c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b090      	sub	sp, #64	; 0x40
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	4613      	mov	r3, r2
 80086aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ac:	e050      	b.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b4:	d04c      	beq.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d007      	beq.n	80086cc <UART_WaitOnFlagUntilTimeout+0x30>
 80086bc:	f7fa f8d8 	bl	8002870 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d241      	bcs.n	8008750 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	330c      	adds	r3, #12
 80086d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	330c      	adds	r3, #12
 80086ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086ec:	637a      	str	r2, [r7, #52]	; 0x34
 80086ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e5      	bne.n	80086cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3314      	adds	r3, #20
 8008706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	613b      	str	r3, [r7, #16]
   return(result);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f023 0301 	bic.w	r3, r3, #1
 8008716:	63bb      	str	r3, [r7, #56]	; 0x38
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3314      	adds	r3, #20
 800871e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008720:	623a      	str	r2, [r7, #32]
 8008722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	69f9      	ldr	r1, [r7, #28]
 8008726:	6a3a      	ldr	r2, [r7, #32]
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	61bb      	str	r3, [r7, #24]
   return(result);
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e5      	bne.n	8008700 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e00f      	b.n	8008770 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	4013      	ands	r3, r2
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	429a      	cmp	r2, r3
 800875e:	bf0c      	ite	eq
 8008760:	2301      	moveq	r3, #1
 8008762:	2300      	movne	r3, #0
 8008764:	b2db      	uxtb	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	429a      	cmp	r2, r3
 800876c:	d09f      	beq.n	80086ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3740      	adds	r7, #64	; 0x40
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	88fa      	ldrh	r2, [r7, #6]
 8008796:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2222      	movs	r2, #34	; 0x22
 80087a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695a      	ldr	r2, [r3, #20]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f042 0201 	orr.w	r2, r2, #1
 80087d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f042 0220 	orr.w	r2, r2, #32
 80087e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b095      	sub	sp, #84	; 0x54
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	330c      	adds	r3, #12
 800881a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800881c:	643a      	str	r2, [r7, #64]	; 0x40
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e5      	bne.n	80087fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3314      	adds	r3, #20
 8008836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f023 0301 	bic.w	r3, r3, #1
 8008846:	64bb      	str	r3, [r7, #72]	; 0x48
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3314      	adds	r3, #20
 800884e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e5      	bne.n	8008830 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	2b01      	cmp	r3, #1
 800886a:	d119      	bne.n	80088a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	60bb      	str	r3, [r7, #8]
   return(result);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f023 0310 	bic.w	r3, r3, #16
 8008882:	647b      	str	r3, [r7, #68]	; 0x44
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888c:	61ba      	str	r2, [r7, #24]
 800888e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008890:	6979      	ldr	r1, [r7, #20]
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	e841 2300 	strex	r3, r2, [r1]
 8008898:	613b      	str	r3, [r7, #16]
   return(result);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e5      	bne.n	800886c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088ae:	bf00      	nop
 80088b0:	3754      	adds	r7, #84	; 0x54
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7ff fecb 	bl	8008670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b21      	cmp	r3, #33	; 0x21
 80088f4:	d13e      	bne.n	8008974 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fe:	d114      	bne.n	800892a <UART_Transmit_IT+0x48>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d110      	bne.n	800892a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800891c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	1c9a      	adds	r2, r3, #2
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	621a      	str	r2, [r3, #32]
 8008928:	e008      	b.n	800893c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	1c59      	adds	r1, r3, #1
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6211      	str	r1, [r2, #32]
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29b      	uxth	r3, r3
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	4619      	mov	r1, r3
 800894a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10f      	bne.n	8008970 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	e000      	b.n	8008976 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008974:	2302      	movs	r3, #2
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008998:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff fe5a 	bl	800865c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b08c      	sub	sp, #48	; 0x30
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b22      	cmp	r3, #34	; 0x22
 80089c4:	f040 80ab 	bne.w	8008b1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d0:	d117      	bne.n	8008a02 <UART_Receive_IT+0x50>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d113      	bne.n	8008a02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	1c9a      	adds	r2, r3, #2
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008a00:	e026      	b.n	8008a50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a14:	d007      	beq.n	8008a26 <UART_Receive_IT+0x74>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <UART_Receive_IT+0x82>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	e008      	b.n	8008a46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d15a      	bne.n	8008b1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0220 	bic.w	r2, r2, #32
 8008a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0201 	bic.w	r2, r2, #1
 8008a92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d135      	bne.n	8008b10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	330c      	adds	r3, #12
 8008ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f023 0310 	bic.w	r3, r3, #16
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	623a      	str	r2, [r7, #32]
 8008acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	69f9      	ldr	r1, [r7, #28]
 8008ad0:	6a3a      	ldr	r2, [r7, #32]
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e5      	bne.n	8008aaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	d10a      	bne.n	8008b02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aec:	2300      	movs	r3, #0
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff fdbb 	bl	8008684 <HAL_UARTEx_RxEventCallback>
 8008b0e:	e002      	b.n	8008b16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7f9 f899 	bl	8001c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e002      	b.n	8008b20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e000      	b.n	8008b20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b1e:	2302      	movs	r3, #2
  }
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3730      	adds	r7, #48	; 0x30
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b2c:	b0c0      	sub	sp, #256	; 0x100
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b44:	68d9      	ldr	r1, [r3, #12]
 8008b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	ea40 0301 	orr.w	r3, r0, r1
 8008b50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b80:	f021 010c 	bic.w	r1, r1, #12
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba2:	6999      	ldr	r1, [r3, #24]
 8008ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	ea40 0301 	orr.w	r3, r0, r1
 8008bae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b8f      	ldr	r3, [pc, #572]	; (8008df4 <UART_SetConfig+0x2cc>)
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d005      	beq.n	8008bc8 <UART_SetConfig+0xa0>
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b8d      	ldr	r3, [pc, #564]	; (8008df8 <UART_SetConfig+0x2d0>)
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d104      	bne.n	8008bd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bc8:	f7fd fb70 	bl	80062ac <HAL_RCC_GetPCLK2Freq>
 8008bcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bd0:	e003      	b.n	8008bda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bd2:	f7fd fb57 	bl	8006284 <HAL_RCC_GetPCLK1Freq>
 8008bd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be4:	f040 810c 	bne.w	8008e00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bec:	2200      	movs	r2, #0
 8008bee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	1891      	adds	r1, r2, r2
 8008c00:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c02:	415b      	adcs	r3, r3
 8008c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	eb12 0801 	adds.w	r8, r2, r1
 8008c10:	4629      	mov	r1, r5
 8008c12:	eb43 0901 	adc.w	r9, r3, r1
 8008c16:	f04f 0200 	mov.w	r2, #0
 8008c1a:	f04f 0300 	mov.w	r3, #0
 8008c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c2a:	4690      	mov	r8, r2
 8008c2c:	4699      	mov	r9, r3
 8008c2e:	4623      	mov	r3, r4
 8008c30:	eb18 0303 	adds.w	r3, r8, r3
 8008c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c38:	462b      	mov	r3, r5
 8008c3a:	eb49 0303 	adc.w	r3, r9, r3
 8008c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c56:	460b      	mov	r3, r1
 8008c58:	18db      	adds	r3, r3, r3
 8008c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	eb42 0303 	adc.w	r3, r2, r3
 8008c62:	657b      	str	r3, [r7, #84]	; 0x54
 8008c64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c6c:	f7f7 fb18 	bl	80002a0 <__aeabi_uldivmod>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4b61      	ldr	r3, [pc, #388]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008c76:	fba3 2302 	umull	r2, r3, r3, r2
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	011c      	lsls	r4, r3, #4
 8008c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c90:	4642      	mov	r2, r8
 8008c92:	464b      	mov	r3, r9
 8008c94:	1891      	adds	r1, r2, r2
 8008c96:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c98:	415b      	adcs	r3, r3
 8008c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	eb12 0a01 	adds.w	sl, r2, r1
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	eb43 0b01 	adc.w	fp, r3, r1
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cc0:	4692      	mov	sl, r2
 8008cc2:	469b      	mov	fp, r3
 8008cc4:	4643      	mov	r3, r8
 8008cc6:	eb1a 0303 	adds.w	r3, sl, r3
 8008cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cce:	464b      	mov	r3, r9
 8008cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8008cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ce4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ce8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cec:	460b      	mov	r3, r1
 8008cee:	18db      	adds	r3, r3, r3
 8008cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	eb42 0303 	adc.w	r3, r2, r3
 8008cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8008cfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d02:	f7f7 facd 	bl	80002a0 <__aeabi_uldivmod>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4b3b      	ldr	r3, [pc, #236]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	2264      	movs	r2, #100	; 0x64
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	1acb      	subs	r3, r1, r3
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d22:	4b36      	ldr	r3, [pc, #216]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008d24:	fba3 2302 	umull	r2, r3, r3, r2
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d30:	441c      	add	r4, r3
 8008d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	1891      	adds	r1, r2, r2
 8008d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d4c:	415b      	adcs	r3, r3
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d54:	4641      	mov	r1, r8
 8008d56:	1851      	adds	r1, r2, r1
 8008d58:	6339      	str	r1, [r7, #48]	; 0x30
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	414b      	adcs	r3, r1
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	00cb      	lsls	r3, r1, #3
 8008d70:	4651      	mov	r1, sl
 8008d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d76:	4651      	mov	r1, sl
 8008d78:	00ca      	lsls	r2, r1, #3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4642      	mov	r2, r8
 8008d82:	189b      	adds	r3, r3, r2
 8008d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d88:	464b      	mov	r3, r9
 8008d8a:	460a      	mov	r2, r1
 8008d8c:	eb42 0303 	adc.w	r3, r2, r3
 8008d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008da0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008da8:	460b      	mov	r3, r1
 8008daa:	18db      	adds	r3, r3, r3
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dae:	4613      	mov	r3, r2
 8008db0:	eb42 0303 	adc.w	r3, r2, r3
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dbe:	f7f7 fa6f 	bl	80002a0 <__aeabi_uldivmod>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dcc:	095b      	lsrs	r3, r3, #5
 8008dce:	2164      	movs	r1, #100	; 0x64
 8008dd0:	fb01 f303 	mul.w	r3, r1, r3
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	3332      	adds	r3, #50	; 0x32
 8008dda:	4a08      	ldr	r2, [pc, #32]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	f003 0207 	and.w	r2, r3, #7
 8008de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4422      	add	r2, r4
 8008dee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008df0:	e106      	b.n	8009000 <UART_SetConfig+0x4d8>
 8008df2:	bf00      	nop
 8008df4:	40011000 	.word	0x40011000
 8008df8:	40011400 	.word	0x40011400
 8008dfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e12:	4642      	mov	r2, r8
 8008e14:	464b      	mov	r3, r9
 8008e16:	1891      	adds	r1, r2, r2
 8008e18:	6239      	str	r1, [r7, #32]
 8008e1a:	415b      	adcs	r3, r3
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e22:	4641      	mov	r1, r8
 8008e24:	1854      	adds	r4, r2, r1
 8008e26:	4649      	mov	r1, r9
 8008e28:	eb43 0501 	adc.w	r5, r3, r1
 8008e2c:	f04f 0200 	mov.w	r2, #0
 8008e30:	f04f 0300 	mov.w	r3, #0
 8008e34:	00eb      	lsls	r3, r5, #3
 8008e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e3a:	00e2      	lsls	r2, r4, #3
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	461d      	mov	r5, r3
 8008e40:	4643      	mov	r3, r8
 8008e42:	18e3      	adds	r3, r4, r3
 8008e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e48:	464b      	mov	r3, r9
 8008e4a:	eb45 0303 	adc.w	r3, r5, r3
 8008e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e62:	f04f 0200 	mov.w	r2, #0
 8008e66:	f04f 0300 	mov.w	r3, #0
 8008e6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e6e:	4629      	mov	r1, r5
 8008e70:	008b      	lsls	r3, r1, #2
 8008e72:	4621      	mov	r1, r4
 8008e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e78:	4621      	mov	r1, r4
 8008e7a:	008a      	lsls	r2, r1, #2
 8008e7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e80:	f7f7 fa0e 	bl	80002a0 <__aeabi_uldivmod>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4b60      	ldr	r3, [pc, #384]	; (800900c <UART_SetConfig+0x4e4>)
 8008e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	011c      	lsls	r4, r3, #4
 8008e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ea0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	1891      	adds	r1, r2, r2
 8008eaa:	61b9      	str	r1, [r7, #24]
 8008eac:	415b      	adcs	r3, r3
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	1851      	adds	r1, r2, r1
 8008eb8:	6139      	str	r1, [r7, #16]
 8008eba:	4649      	mov	r1, r9
 8008ebc:	414b      	adcs	r3, r1
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ecc:	4659      	mov	r1, fp
 8008ece:	00cb      	lsls	r3, r1, #3
 8008ed0:	4651      	mov	r1, sl
 8008ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ed6:	4651      	mov	r1, sl
 8008ed8:	00ca      	lsls	r2, r1, #3
 8008eda:	4610      	mov	r0, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	189b      	adds	r3, r3, r2
 8008ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ee8:	464b      	mov	r3, r9
 8008eea:	460a      	mov	r2, r1
 8008eec:	eb42 0303 	adc.w	r3, r2, r3
 8008ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008efe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	008b      	lsls	r3, r1, #2
 8008f10:	4641      	mov	r1, r8
 8008f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f16:	4641      	mov	r1, r8
 8008f18:	008a      	lsls	r2, r1, #2
 8008f1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f1e:	f7f7 f9bf 	bl	80002a0 <__aeabi_uldivmod>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4611      	mov	r1, r2
 8008f28:	4b38      	ldr	r3, [pc, #224]	; (800900c <UART_SetConfig+0x4e4>)
 8008f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f2e:	095b      	lsrs	r3, r3, #5
 8008f30:	2264      	movs	r2, #100	; 0x64
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	1acb      	subs	r3, r1, r3
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	3332      	adds	r3, #50	; 0x32
 8008f3c:	4a33      	ldr	r2, [pc, #204]	; (800900c <UART_SetConfig+0x4e4>)
 8008f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f48:	441c      	add	r4, r3
 8008f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4e:	2200      	movs	r2, #0
 8008f50:	673b      	str	r3, [r7, #112]	; 0x70
 8008f52:	677a      	str	r2, [r7, #116]	; 0x74
 8008f54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f58:	4642      	mov	r2, r8
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	1891      	adds	r1, r2, r2
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	415b      	adcs	r3, r3
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f68:	4641      	mov	r1, r8
 8008f6a:	1851      	adds	r1, r2, r1
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	4649      	mov	r1, r9
 8008f70:	414b      	adcs	r3, r1
 8008f72:	607b      	str	r3, [r7, #4]
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f80:	4659      	mov	r1, fp
 8008f82:	00cb      	lsls	r3, r1, #3
 8008f84:	4651      	mov	r1, sl
 8008f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	00ca      	lsls	r2, r1, #3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	4619      	mov	r1, r3
 8008f92:	4603      	mov	r3, r0
 8008f94:	4642      	mov	r2, r8
 8008f96:	189b      	adds	r3, r3, r2
 8008f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	460a      	mov	r2, r1
 8008f9e:	eb42 0303 	adc.w	r3, r2, r3
 8008fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	663b      	str	r3, [r7, #96]	; 0x60
 8008fae:	667a      	str	r2, [r7, #100]	; 0x64
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	f04f 0300 	mov.w	r3, #0
 8008fb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fbc:	4649      	mov	r1, r9
 8008fbe:	008b      	lsls	r3, r1, #2
 8008fc0:	4641      	mov	r1, r8
 8008fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fc6:	4641      	mov	r1, r8
 8008fc8:	008a      	lsls	r2, r1, #2
 8008fca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fce:	f7f7 f967 	bl	80002a0 <__aeabi_uldivmod>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	; (800900c <UART_SetConfig+0x4e4>)
 8008fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fdc:	095b      	lsrs	r3, r3, #5
 8008fde:	2164      	movs	r1, #100	; 0x64
 8008fe0:	fb01 f303 	mul.w	r3, r1, r3
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	3332      	adds	r3, #50	; 0x32
 8008fea:	4a08      	ldr	r2, [pc, #32]	; (800900c <UART_SetConfig+0x4e4>)
 8008fec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff0:	095b      	lsrs	r3, r3, #5
 8008ff2:	f003 020f 	and.w	r2, r3, #15
 8008ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4422      	add	r2, r4
 8008ffe:	609a      	str	r2, [r3, #8]
}
 8009000:	bf00      	nop
 8009002:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009006:	46bd      	mov	sp, r7
 8009008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800900c:	51eb851f 	.word	0x51eb851f

08009010 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009010:	b084      	sub	sp, #16
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	f107 001c 	add.w	r0, r7, #28
 800901e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	2b01      	cmp	r3, #1
 8009026:	d122      	bne.n	800906e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800903c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009052:	2b01      	cmp	r3, #1
 8009054:	d105      	bne.n	8009062 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 faa2 	bl	80095ac <USB_CoreReset>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
 800906c:	e01a      	b.n	80090a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa96 	bl	80095ac <USB_CoreReset>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
 8009096:	e005      	b.n	80090a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d10b      	bne.n	80090c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f043 0206 	orr.w	r2, r3, #6
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f043 0220 	orr.w	r2, r3, #32
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090ce:	b004      	add	sp, #16
 80090d0:	4770      	bx	lr

080090d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f023 0201 	bic.w	r2, r3, #1
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d115      	bne.n	8009142 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009122:	2001      	movs	r0, #1
 8009124:	f7f9 fbb0 	bl	8002888 <HAL_Delay>
      ms++;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3301      	adds	r3, #1
 800912c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa2e 	bl	8009590 <USB_GetMode>
 8009134:	4603      	mov	r3, r0
 8009136:	2b01      	cmp	r3, #1
 8009138:	d01e      	beq.n	8009178 <USB_SetCurrentMode+0x84>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b31      	cmp	r3, #49	; 0x31
 800913e:	d9f0      	bls.n	8009122 <USB_SetCurrentMode+0x2e>
 8009140:	e01a      	b.n	8009178 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d115      	bne.n	8009174 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009154:	2001      	movs	r0, #1
 8009156:	f7f9 fb97 	bl	8002888 <HAL_Delay>
      ms++;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3301      	adds	r3, #1
 800915e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fa15 	bl	8009590 <USB_GetMode>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <USB_SetCurrentMode+0x84>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b31      	cmp	r3, #49	; 0x31
 8009170:	d9f0      	bls.n	8009154 <USB_SetCurrentMode+0x60>
 8009172:	e001      	b.n	8009178 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e005      	b.n	8009184 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b32      	cmp	r3, #50	; 0x32
 800917c:	d101      	bne.n	8009182 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800918c:	b084      	sub	sp, #16
 800918e:	b580      	push	{r7, lr}
 8009190:	b086      	sub	sp, #24
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800919a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091a6:	2300      	movs	r3, #0
 80091a8:	613b      	str	r3, [r7, #16]
 80091aa:	e009      	b.n	80091c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	3340      	adds	r3, #64	; 0x40
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	2200      	movs	r2, #0
 80091b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b0e      	cmp	r3, #14
 80091c4:	d9f2      	bls.n	80091ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d11c      	bne.n	8009206 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091da:	f043 0302 	orr.w	r3, r3, #2
 80091de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	639a      	str	r2, [r3, #56]	; 0x38
 8009204:	e00b      	b.n	800921e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009224:	461a      	mov	r2, r3
 8009226:	2300      	movs	r3, #0
 8009228:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009230:	4619      	mov	r1, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009238:	461a      	mov	r2, r3
 800923a:	680b      	ldr	r3, [r1, #0]
 800923c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	2b01      	cmp	r3, #1
 8009242:	d10c      	bne.n	800925e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800924a:	2100      	movs	r1, #0
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f965 	bl	800951c <USB_SetDevSpeed>
 8009252:	e008      	b.n	8009266 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009254:	2101      	movs	r1, #1
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f960 	bl	800951c <USB_SetDevSpeed>
 800925c:	e003      	b.n	8009266 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800925e:	2103      	movs	r1, #3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f95b 	bl	800951c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009266:	2110      	movs	r1, #16
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8f3 	bl	8009454 <USB_FlushTxFifo>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f91f 	bl	80094bc <USB_FlushRxFifo>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928e:	461a      	mov	r2, r3
 8009290:	2300      	movs	r3, #0
 8009292:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929a:	461a      	mov	r2, r3
 800929c:	2300      	movs	r3, #0
 800929e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a6:	461a      	mov	r2, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ac:	2300      	movs	r3, #0
 80092ae:	613b      	str	r3, [r7, #16]
 80092b0:	e043      	b.n	800933a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092c8:	d118      	bne.n	80092fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092dc:	461a      	mov	r2, r3
 80092de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	e013      	b.n	800930e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f2:	461a      	mov	r2, r3
 80092f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	e008      	b.n	800930e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	461a      	mov	r2, r3
 800930a:	2300      	movs	r3, #0
 800930c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931a:	461a      	mov	r2, r3
 800931c:	2300      	movs	r3, #0
 800931e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932c:	461a      	mov	r2, r3
 800932e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3301      	adds	r3, #1
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	429a      	cmp	r2, r3
 8009340:	d3b7      	bcc.n	80092b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009342:	2300      	movs	r3, #0
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	e043      	b.n	80093d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800935a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800935e:	d118      	bne.n	8009392 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	461a      	mov	r2, r3
 8009374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	e013      	b.n	80093a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009388:	461a      	mov	r2, r3
 800938a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	e008      	b.n	80093a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939e:	461a      	mov	r2, r3
 80093a0:	2300      	movs	r3, #0
 80093a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b0:	461a      	mov	r2, r3
 80093b2:	2300      	movs	r3, #0
 80093b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c2:	461a      	mov	r2, r3
 80093c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3301      	adds	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d3b7      	bcc.n	8009348 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80093f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	f043 0210 	orr.w	r2, r3, #16
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699a      	ldr	r2, [r3, #24]
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <USB_DevInit+0x2c4>)
 8009412:	4313      	orrs	r3, r2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	f043 0208 	orr.w	r2, r3, #8
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800942a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942c:	2b01      	cmp	r3, #1
 800942e:	d107      	bne.n	8009440 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009438:	f043 0304 	orr.w	r3, r3, #4
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800944c:	b004      	add	sp, #16
 800944e:	4770      	bx	lr
 8009450:	803c3800 	.word	0x803c3800

08009454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3301      	adds	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <USB_FlushTxFifo+0x64>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d901      	bls.n	8009474 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e01b      	b.n	80094ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	daf2      	bge.n	8009462 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	019b      	lsls	r3, r3, #6
 8009484:	f043 0220 	orr.w	r2, r3, #32
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4a08      	ldr	r2, [pc, #32]	; (80094b8 <USB_FlushTxFifo+0x64>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d901      	bls.n	800949e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e006      	b.n	80094ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d0f0      	beq.n	800948c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	00030d40 	.word	0x00030d40

080094bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3301      	adds	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4a11      	ldr	r2, [pc, #68]	; (8009518 <USB_FlushRxFifo+0x5c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d901      	bls.n	80094da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e018      	b.n	800950c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	daf2      	bge.n	80094c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2210      	movs	r2, #16
 80094ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4a08      	ldr	r2, [pc, #32]	; (8009518 <USB_FlushRxFifo+0x5c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d901      	bls.n	80094fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e006      	b.n	800950c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b10      	cmp	r3, #16
 8009508:	d0f0      	beq.n	80094ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	00030d40 	.word	0x00030d40

0800951c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	78fb      	ldrb	r3, [r7, #3]
 8009536:	68f9      	ldr	r1, [r7, #12]
 8009538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800953c:	4313      	orrs	r3, r2
 800953e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009568:	f023 0303 	bic.w	r3, r3, #3
 800956c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800957c:	f043 0302 	orr.w	r3, r3, #2
 8009580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	f003 0301 	and.w	r3, r3, #1
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3301      	adds	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4a13      	ldr	r2, [pc, #76]	; (8009610 <USB_CoreReset+0x64>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d901      	bls.n	80095ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e01b      	b.n	8009602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	daf2      	bge.n	80095b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f043 0201 	orr.w	r2, r3, #1
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3301      	adds	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4a09      	ldr	r2, [pc, #36]	; (8009610 <USB_CoreReset+0x64>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d901      	bls.n	80095f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e006      	b.n	8009602 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d0f0      	beq.n	80095e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	00030d40 	.word	0x00030d40

08009614 <std>:
 8009614:	2300      	movs	r3, #0
 8009616:	b510      	push	{r4, lr}
 8009618:	4604      	mov	r4, r0
 800961a:	e9c0 3300 	strd	r3, r3, [r0]
 800961e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009622:	6083      	str	r3, [r0, #8]
 8009624:	8181      	strh	r1, [r0, #12]
 8009626:	6643      	str	r3, [r0, #100]	; 0x64
 8009628:	81c2      	strh	r2, [r0, #14]
 800962a:	6183      	str	r3, [r0, #24]
 800962c:	4619      	mov	r1, r3
 800962e:	2208      	movs	r2, #8
 8009630:	305c      	adds	r0, #92	; 0x5c
 8009632:	f000 fa4b 	bl	8009acc <memset>
 8009636:	4b0d      	ldr	r3, [pc, #52]	; (800966c <std+0x58>)
 8009638:	6263      	str	r3, [r4, #36]	; 0x24
 800963a:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <std+0x5c>)
 800963c:	62a3      	str	r3, [r4, #40]	; 0x28
 800963e:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <std+0x60>)
 8009640:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009642:	4b0d      	ldr	r3, [pc, #52]	; (8009678 <std+0x64>)
 8009644:	6323      	str	r3, [r4, #48]	; 0x30
 8009646:	4b0d      	ldr	r3, [pc, #52]	; (800967c <std+0x68>)
 8009648:	6224      	str	r4, [r4, #32]
 800964a:	429c      	cmp	r4, r3
 800964c:	d006      	beq.n	800965c <std+0x48>
 800964e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009652:	4294      	cmp	r4, r2
 8009654:	d002      	beq.n	800965c <std+0x48>
 8009656:	33d0      	adds	r3, #208	; 0xd0
 8009658:	429c      	cmp	r4, r3
 800965a:	d105      	bne.n	8009668 <std+0x54>
 800965c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009664:	f000 baaa 	b.w	8009bbc <__retarget_lock_init_recursive>
 8009668:	bd10      	pop	{r4, pc}
 800966a:	bf00      	nop
 800966c:	0800991d 	.word	0x0800991d
 8009670:	0800993f 	.word	0x0800993f
 8009674:	08009977 	.word	0x08009977
 8009678:	0800999b 	.word	0x0800999b
 800967c:	20000be0 	.word	0x20000be0

08009680 <stdio_exit_handler>:
 8009680:	4a02      	ldr	r2, [pc, #8]	; (800968c <stdio_exit_handler+0xc>)
 8009682:	4903      	ldr	r1, [pc, #12]	; (8009690 <stdio_exit_handler+0x10>)
 8009684:	4803      	ldr	r0, [pc, #12]	; (8009694 <stdio_exit_handler+0x14>)
 8009686:	f000 b869 	b.w	800975c <_fwalk_sglue>
 800968a:	bf00      	nop
 800968c:	2000001c 	.word	0x2000001c
 8009690:	0800a735 	.word	0x0800a735
 8009694:	20000028 	.word	0x20000028

08009698 <cleanup_stdio>:
 8009698:	6841      	ldr	r1, [r0, #4]
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <cleanup_stdio+0x34>)
 800969c:	4299      	cmp	r1, r3
 800969e:	b510      	push	{r4, lr}
 80096a0:	4604      	mov	r4, r0
 80096a2:	d001      	beq.n	80096a8 <cleanup_stdio+0x10>
 80096a4:	f001 f846 	bl	800a734 <_fflush_r>
 80096a8:	68a1      	ldr	r1, [r4, #8]
 80096aa:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <cleanup_stdio+0x38>)
 80096ac:	4299      	cmp	r1, r3
 80096ae:	d002      	beq.n	80096b6 <cleanup_stdio+0x1e>
 80096b0:	4620      	mov	r0, r4
 80096b2:	f001 f83f 	bl	800a734 <_fflush_r>
 80096b6:	68e1      	ldr	r1, [r4, #12]
 80096b8:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <cleanup_stdio+0x3c>)
 80096ba:	4299      	cmp	r1, r3
 80096bc:	d004      	beq.n	80096c8 <cleanup_stdio+0x30>
 80096be:	4620      	mov	r0, r4
 80096c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c4:	f001 b836 	b.w	800a734 <_fflush_r>
 80096c8:	bd10      	pop	{r4, pc}
 80096ca:	bf00      	nop
 80096cc:	20000be0 	.word	0x20000be0
 80096d0:	20000c48 	.word	0x20000c48
 80096d4:	20000cb0 	.word	0x20000cb0

080096d8 <global_stdio_init.part.0>:
 80096d8:	b510      	push	{r4, lr}
 80096da:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <global_stdio_init.part.0+0x30>)
 80096dc:	4c0b      	ldr	r4, [pc, #44]	; (800970c <global_stdio_init.part.0+0x34>)
 80096de:	4a0c      	ldr	r2, [pc, #48]	; (8009710 <global_stdio_init.part.0+0x38>)
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	4620      	mov	r0, r4
 80096e4:	2200      	movs	r2, #0
 80096e6:	2104      	movs	r1, #4
 80096e8:	f7ff ff94 	bl	8009614 <std>
 80096ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80096f0:	2201      	movs	r2, #1
 80096f2:	2109      	movs	r1, #9
 80096f4:	f7ff ff8e 	bl	8009614 <std>
 80096f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80096fc:	2202      	movs	r2, #2
 80096fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009702:	2112      	movs	r1, #18
 8009704:	f7ff bf86 	b.w	8009614 <std>
 8009708:	20000d18 	.word	0x20000d18
 800970c:	20000be0 	.word	0x20000be0
 8009710:	08009681 	.word	0x08009681

08009714 <__sfp_lock_acquire>:
 8009714:	4801      	ldr	r0, [pc, #4]	; (800971c <__sfp_lock_acquire+0x8>)
 8009716:	f000 ba52 	b.w	8009bbe <__retarget_lock_acquire_recursive>
 800971a:	bf00      	nop
 800971c:	20000d21 	.word	0x20000d21

08009720 <__sfp_lock_release>:
 8009720:	4801      	ldr	r0, [pc, #4]	; (8009728 <__sfp_lock_release+0x8>)
 8009722:	f000 ba4d 	b.w	8009bc0 <__retarget_lock_release_recursive>
 8009726:	bf00      	nop
 8009728:	20000d21 	.word	0x20000d21

0800972c <__sinit>:
 800972c:	b510      	push	{r4, lr}
 800972e:	4604      	mov	r4, r0
 8009730:	f7ff fff0 	bl	8009714 <__sfp_lock_acquire>
 8009734:	6a23      	ldr	r3, [r4, #32]
 8009736:	b11b      	cbz	r3, 8009740 <__sinit+0x14>
 8009738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800973c:	f7ff bff0 	b.w	8009720 <__sfp_lock_release>
 8009740:	4b04      	ldr	r3, [pc, #16]	; (8009754 <__sinit+0x28>)
 8009742:	6223      	str	r3, [r4, #32]
 8009744:	4b04      	ldr	r3, [pc, #16]	; (8009758 <__sinit+0x2c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1f5      	bne.n	8009738 <__sinit+0xc>
 800974c:	f7ff ffc4 	bl	80096d8 <global_stdio_init.part.0>
 8009750:	e7f2      	b.n	8009738 <__sinit+0xc>
 8009752:	bf00      	nop
 8009754:	08009699 	.word	0x08009699
 8009758:	20000d18 	.word	0x20000d18

0800975c <_fwalk_sglue>:
 800975c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009760:	4607      	mov	r7, r0
 8009762:	4688      	mov	r8, r1
 8009764:	4614      	mov	r4, r2
 8009766:	2600      	movs	r6, #0
 8009768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800976c:	f1b9 0901 	subs.w	r9, r9, #1
 8009770:	d505      	bpl.n	800977e <_fwalk_sglue+0x22>
 8009772:	6824      	ldr	r4, [r4, #0]
 8009774:	2c00      	cmp	r4, #0
 8009776:	d1f7      	bne.n	8009768 <_fwalk_sglue+0xc>
 8009778:	4630      	mov	r0, r6
 800977a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977e:	89ab      	ldrh	r3, [r5, #12]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d907      	bls.n	8009794 <_fwalk_sglue+0x38>
 8009784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009788:	3301      	adds	r3, #1
 800978a:	d003      	beq.n	8009794 <_fwalk_sglue+0x38>
 800978c:	4629      	mov	r1, r5
 800978e:	4638      	mov	r0, r7
 8009790:	47c0      	blx	r8
 8009792:	4306      	orrs	r6, r0
 8009794:	3568      	adds	r5, #104	; 0x68
 8009796:	e7e9      	b.n	800976c <_fwalk_sglue+0x10>

08009798 <iprintf>:
 8009798:	b40f      	push	{r0, r1, r2, r3}
 800979a:	b507      	push	{r0, r1, r2, lr}
 800979c:	4906      	ldr	r1, [pc, #24]	; (80097b8 <iprintf+0x20>)
 800979e:	ab04      	add	r3, sp, #16
 80097a0:	6808      	ldr	r0, [r1, #0]
 80097a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a6:	6881      	ldr	r1, [r0, #8]
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	f000 fc93 	bl	800a0d4 <_vfiprintf_r>
 80097ae:	b003      	add	sp, #12
 80097b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097b4:	b004      	add	sp, #16
 80097b6:	4770      	bx	lr
 80097b8:	20000074 	.word	0x20000074

080097bc <_puts_r>:
 80097bc:	6a03      	ldr	r3, [r0, #32]
 80097be:	b570      	push	{r4, r5, r6, lr}
 80097c0:	6884      	ldr	r4, [r0, #8]
 80097c2:	4605      	mov	r5, r0
 80097c4:	460e      	mov	r6, r1
 80097c6:	b90b      	cbnz	r3, 80097cc <_puts_r+0x10>
 80097c8:	f7ff ffb0 	bl	800972c <__sinit>
 80097cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ce:	07db      	lsls	r3, r3, #31
 80097d0:	d405      	bmi.n	80097de <_puts_r+0x22>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	0598      	lsls	r0, r3, #22
 80097d6:	d402      	bmi.n	80097de <_puts_r+0x22>
 80097d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097da:	f000 f9f0 	bl	8009bbe <__retarget_lock_acquire_recursive>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	0719      	lsls	r1, r3, #28
 80097e2:	d513      	bpl.n	800980c <_puts_r+0x50>
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	b18b      	cbz	r3, 800980c <_puts_r+0x50>
 80097e8:	3e01      	subs	r6, #1
 80097ea:	68a3      	ldr	r3, [r4, #8]
 80097ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097f0:	3b01      	subs	r3, #1
 80097f2:	60a3      	str	r3, [r4, #8]
 80097f4:	b9e9      	cbnz	r1, 8009832 <_puts_r+0x76>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	da2e      	bge.n	8009858 <_puts_r+0x9c>
 80097fa:	4622      	mov	r2, r4
 80097fc:	210a      	movs	r1, #10
 80097fe:	4628      	mov	r0, r5
 8009800:	f000 f8cf 	bl	80099a2 <__swbuf_r>
 8009804:	3001      	adds	r0, #1
 8009806:	d007      	beq.n	8009818 <_puts_r+0x5c>
 8009808:	250a      	movs	r5, #10
 800980a:	e007      	b.n	800981c <_puts_r+0x60>
 800980c:	4621      	mov	r1, r4
 800980e:	4628      	mov	r0, r5
 8009810:	f000 f904 	bl	8009a1c <__swsetup_r>
 8009814:	2800      	cmp	r0, #0
 8009816:	d0e7      	beq.n	80097e8 <_puts_r+0x2c>
 8009818:	f04f 35ff 	mov.w	r5, #4294967295
 800981c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800981e:	07da      	lsls	r2, r3, #31
 8009820:	d405      	bmi.n	800982e <_puts_r+0x72>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	059b      	lsls	r3, r3, #22
 8009826:	d402      	bmi.n	800982e <_puts_r+0x72>
 8009828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800982a:	f000 f9c9 	bl	8009bc0 <__retarget_lock_release_recursive>
 800982e:	4628      	mov	r0, r5
 8009830:	bd70      	pop	{r4, r5, r6, pc}
 8009832:	2b00      	cmp	r3, #0
 8009834:	da04      	bge.n	8009840 <_puts_r+0x84>
 8009836:	69a2      	ldr	r2, [r4, #24]
 8009838:	429a      	cmp	r2, r3
 800983a:	dc06      	bgt.n	800984a <_puts_r+0x8e>
 800983c:	290a      	cmp	r1, #10
 800983e:	d004      	beq.n	800984a <_puts_r+0x8e>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	6022      	str	r2, [r4, #0]
 8009846:	7019      	strb	r1, [r3, #0]
 8009848:	e7cf      	b.n	80097ea <_puts_r+0x2e>
 800984a:	4622      	mov	r2, r4
 800984c:	4628      	mov	r0, r5
 800984e:	f000 f8a8 	bl	80099a2 <__swbuf_r>
 8009852:	3001      	adds	r0, #1
 8009854:	d1c9      	bne.n	80097ea <_puts_r+0x2e>
 8009856:	e7df      	b.n	8009818 <_puts_r+0x5c>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	250a      	movs	r5, #10
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	6022      	str	r2, [r4, #0]
 8009860:	701d      	strb	r5, [r3, #0]
 8009862:	e7db      	b.n	800981c <_puts_r+0x60>

08009864 <puts>:
 8009864:	4b02      	ldr	r3, [pc, #8]	; (8009870 <puts+0xc>)
 8009866:	4601      	mov	r1, r0
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	f7ff bfa7 	b.w	80097bc <_puts_r>
 800986e:	bf00      	nop
 8009870:	20000074 	.word	0x20000074

08009874 <sniprintf>:
 8009874:	b40c      	push	{r2, r3}
 8009876:	b530      	push	{r4, r5, lr}
 8009878:	4b17      	ldr	r3, [pc, #92]	; (80098d8 <sniprintf+0x64>)
 800987a:	1e0c      	subs	r4, r1, #0
 800987c:	681d      	ldr	r5, [r3, #0]
 800987e:	b09d      	sub	sp, #116	; 0x74
 8009880:	da08      	bge.n	8009894 <sniprintf+0x20>
 8009882:	238b      	movs	r3, #139	; 0x8b
 8009884:	602b      	str	r3, [r5, #0]
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	b01d      	add	sp, #116	; 0x74
 800988c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009890:	b002      	add	sp, #8
 8009892:	4770      	bx	lr
 8009894:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009898:	f8ad 3014 	strh.w	r3, [sp, #20]
 800989c:	bf14      	ite	ne
 800989e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80098a2:	4623      	moveq	r3, r4
 80098a4:	9304      	str	r3, [sp, #16]
 80098a6:	9307      	str	r3, [sp, #28]
 80098a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098ac:	9002      	str	r0, [sp, #8]
 80098ae:	9006      	str	r0, [sp, #24]
 80098b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80098b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80098b6:	ab21      	add	r3, sp, #132	; 0x84
 80098b8:	a902      	add	r1, sp, #8
 80098ba:	4628      	mov	r0, r5
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	f000 fae1 	bl	8009e84 <_svfiprintf_r>
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	bfbc      	itt	lt
 80098c6:	238b      	movlt	r3, #139	; 0x8b
 80098c8:	602b      	strlt	r3, [r5, #0]
 80098ca:	2c00      	cmp	r4, #0
 80098cc:	d0dd      	beq.n	800988a <sniprintf+0x16>
 80098ce:	9b02      	ldr	r3, [sp, #8]
 80098d0:	2200      	movs	r2, #0
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	e7d9      	b.n	800988a <sniprintf+0x16>
 80098d6:	bf00      	nop
 80098d8:	20000074 	.word	0x20000074

080098dc <siprintf>:
 80098dc:	b40e      	push	{r1, r2, r3}
 80098de:	b500      	push	{lr}
 80098e0:	b09c      	sub	sp, #112	; 0x70
 80098e2:	ab1d      	add	r3, sp, #116	; 0x74
 80098e4:	9002      	str	r0, [sp, #8]
 80098e6:	9006      	str	r0, [sp, #24]
 80098e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098ec:	4809      	ldr	r0, [pc, #36]	; (8009914 <siprintf+0x38>)
 80098ee:	9107      	str	r1, [sp, #28]
 80098f0:	9104      	str	r1, [sp, #16]
 80098f2:	4909      	ldr	r1, [pc, #36]	; (8009918 <siprintf+0x3c>)
 80098f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f8:	9105      	str	r1, [sp, #20]
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	a902      	add	r1, sp, #8
 8009900:	f000 fac0 	bl	8009e84 <_svfiprintf_r>
 8009904:	9b02      	ldr	r3, [sp, #8]
 8009906:	2200      	movs	r2, #0
 8009908:	701a      	strb	r2, [r3, #0]
 800990a:	b01c      	add	sp, #112	; 0x70
 800990c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009910:	b003      	add	sp, #12
 8009912:	4770      	bx	lr
 8009914:	20000074 	.word	0x20000074
 8009918:	ffff0208 	.word	0xffff0208

0800991c <__sread>:
 800991c:	b510      	push	{r4, lr}
 800991e:	460c      	mov	r4, r1
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	f000 f8fc 	bl	8009b20 <_read_r>
 8009928:	2800      	cmp	r0, #0
 800992a:	bfab      	itete	ge
 800992c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800992e:	89a3      	ldrhlt	r3, [r4, #12]
 8009930:	181b      	addge	r3, r3, r0
 8009932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009936:	bfac      	ite	ge
 8009938:	6563      	strge	r3, [r4, #84]	; 0x54
 800993a:	81a3      	strhlt	r3, [r4, #12]
 800993c:	bd10      	pop	{r4, pc}

0800993e <__swrite>:
 800993e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009942:	461f      	mov	r7, r3
 8009944:	898b      	ldrh	r3, [r1, #12]
 8009946:	05db      	lsls	r3, r3, #23
 8009948:	4605      	mov	r5, r0
 800994a:	460c      	mov	r4, r1
 800994c:	4616      	mov	r6, r2
 800994e:	d505      	bpl.n	800995c <__swrite+0x1e>
 8009950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009954:	2302      	movs	r3, #2
 8009956:	2200      	movs	r2, #0
 8009958:	f000 f8d0 	bl	8009afc <_lseek_r>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	4632      	mov	r2, r6
 800996a:	463b      	mov	r3, r7
 800996c:	4628      	mov	r0, r5
 800996e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009972:	f000 b8e7 	b.w	8009b44 <_write_r>

08009976 <__sseek>:
 8009976:	b510      	push	{r4, lr}
 8009978:	460c      	mov	r4, r1
 800997a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800997e:	f000 f8bd 	bl	8009afc <_lseek_r>
 8009982:	1c43      	adds	r3, r0, #1
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	bf15      	itete	ne
 8009988:	6560      	strne	r0, [r4, #84]	; 0x54
 800998a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800998e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009992:	81a3      	strheq	r3, [r4, #12]
 8009994:	bf18      	it	ne
 8009996:	81a3      	strhne	r3, [r4, #12]
 8009998:	bd10      	pop	{r4, pc}

0800999a <__sclose>:
 800999a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999e:	f000 b89d 	b.w	8009adc <_close_r>

080099a2 <__swbuf_r>:
 80099a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a4:	460e      	mov	r6, r1
 80099a6:	4614      	mov	r4, r2
 80099a8:	4605      	mov	r5, r0
 80099aa:	b118      	cbz	r0, 80099b4 <__swbuf_r+0x12>
 80099ac:	6a03      	ldr	r3, [r0, #32]
 80099ae:	b90b      	cbnz	r3, 80099b4 <__swbuf_r+0x12>
 80099b0:	f7ff febc 	bl	800972c <__sinit>
 80099b4:	69a3      	ldr	r3, [r4, #24]
 80099b6:	60a3      	str	r3, [r4, #8]
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	071a      	lsls	r2, r3, #28
 80099bc:	d525      	bpl.n	8009a0a <__swbuf_r+0x68>
 80099be:	6923      	ldr	r3, [r4, #16]
 80099c0:	b31b      	cbz	r3, 8009a0a <__swbuf_r+0x68>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	6922      	ldr	r2, [r4, #16]
 80099c6:	1a98      	subs	r0, r3, r2
 80099c8:	6963      	ldr	r3, [r4, #20]
 80099ca:	b2f6      	uxtb	r6, r6
 80099cc:	4283      	cmp	r3, r0
 80099ce:	4637      	mov	r7, r6
 80099d0:	dc04      	bgt.n	80099dc <__swbuf_r+0x3a>
 80099d2:	4621      	mov	r1, r4
 80099d4:	4628      	mov	r0, r5
 80099d6:	f000 fead 	bl	800a734 <_fflush_r>
 80099da:	b9e0      	cbnz	r0, 8009a16 <__swbuf_r+0x74>
 80099dc:	68a3      	ldr	r3, [r4, #8]
 80099de:	3b01      	subs	r3, #1
 80099e0:	60a3      	str	r3, [r4, #8]
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	701e      	strb	r6, [r3, #0]
 80099ea:	6962      	ldr	r2, [r4, #20]
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d004      	beq.n	80099fc <__swbuf_r+0x5a>
 80099f2:	89a3      	ldrh	r3, [r4, #12]
 80099f4:	07db      	lsls	r3, r3, #31
 80099f6:	d506      	bpl.n	8009a06 <__swbuf_r+0x64>
 80099f8:	2e0a      	cmp	r6, #10
 80099fa:	d104      	bne.n	8009a06 <__swbuf_r+0x64>
 80099fc:	4621      	mov	r1, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 fe98 	bl	800a734 <_fflush_r>
 8009a04:	b938      	cbnz	r0, 8009a16 <__swbuf_r+0x74>
 8009a06:	4638      	mov	r0, r7
 8009a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f000 f805 	bl	8009a1c <__swsetup_r>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d0d5      	beq.n	80099c2 <__swbuf_r+0x20>
 8009a16:	f04f 37ff 	mov.w	r7, #4294967295
 8009a1a:	e7f4      	b.n	8009a06 <__swbuf_r+0x64>

08009a1c <__swsetup_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ac8 <__swsetup_r+0xac>)
 8009a20:	4605      	mov	r5, r0
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	460c      	mov	r4, r1
 8009a26:	b118      	cbz	r0, 8009a30 <__swsetup_r+0x14>
 8009a28:	6a03      	ldr	r3, [r0, #32]
 8009a2a:	b90b      	cbnz	r3, 8009a30 <__swsetup_r+0x14>
 8009a2c:	f7ff fe7e 	bl	800972c <__sinit>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a36:	0718      	lsls	r0, r3, #28
 8009a38:	d422      	bmi.n	8009a80 <__swsetup_r+0x64>
 8009a3a:	06d9      	lsls	r1, r3, #27
 8009a3c:	d407      	bmi.n	8009a4e <__swsetup_r+0x32>
 8009a3e:	2309      	movs	r3, #9
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e034      	b.n	8009ab8 <__swsetup_r+0x9c>
 8009a4e:	0758      	lsls	r0, r3, #29
 8009a50:	d512      	bpl.n	8009a78 <__swsetup_r+0x5c>
 8009a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a54:	b141      	cbz	r1, 8009a68 <__swsetup_r+0x4c>
 8009a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a5a:	4299      	cmp	r1, r3
 8009a5c:	d002      	beq.n	8009a64 <__swsetup_r+0x48>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 f8be 	bl	8009be0 <_free_r>
 8009a64:	2300      	movs	r3, #0
 8009a66:	6363      	str	r3, [r4, #52]	; 0x34
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	2300      	movs	r3, #0
 8009a72:	6063      	str	r3, [r4, #4]
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f043 0308 	orr.w	r3, r3, #8
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	b94b      	cbnz	r3, 8009a98 <__swsetup_r+0x7c>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a8e:	d003      	beq.n	8009a98 <__swsetup_r+0x7c>
 8009a90:	4621      	mov	r1, r4
 8009a92:	4628      	mov	r0, r5
 8009a94:	f000 fe9c 	bl	800a7d0 <__smakebuf_r>
 8009a98:	89a0      	ldrh	r0, [r4, #12]
 8009a9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a9e:	f010 0301 	ands.w	r3, r0, #1
 8009aa2:	d00a      	beq.n	8009aba <__swsetup_r+0x9e>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	6963      	ldr	r3, [r4, #20]
 8009aaa:	425b      	negs	r3, r3
 8009aac:	61a3      	str	r3, [r4, #24]
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	b943      	cbnz	r3, 8009ac4 <__swsetup_r+0xa8>
 8009ab2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ab6:	d1c4      	bne.n	8009a42 <__swsetup_r+0x26>
 8009ab8:	bd38      	pop	{r3, r4, r5, pc}
 8009aba:	0781      	lsls	r1, r0, #30
 8009abc:	bf58      	it	pl
 8009abe:	6963      	ldrpl	r3, [r4, #20]
 8009ac0:	60a3      	str	r3, [r4, #8]
 8009ac2:	e7f4      	b.n	8009aae <__swsetup_r+0x92>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e7f7      	b.n	8009ab8 <__swsetup_r+0x9c>
 8009ac8:	20000074 	.word	0x20000074

08009acc <memset>:
 8009acc:	4402      	add	r2, r0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d100      	bne.n	8009ad6 <memset+0xa>
 8009ad4:	4770      	bx	lr
 8009ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8009ada:	e7f9      	b.n	8009ad0 <memset+0x4>

08009adc <_close_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d06      	ldr	r5, [pc, #24]	; (8009af8 <_close_r+0x1c>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	602b      	str	r3, [r5, #0]
 8009ae8:	f7f8 fb25 	bl	8002136 <_close>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_close_r+0x1a>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_close_r+0x1a>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	20000d1c 	.word	0x20000d1c

08009afc <_lseek_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d07      	ldr	r5, [pc, #28]	; (8009b1c <_lseek_r+0x20>)
 8009b00:	4604      	mov	r4, r0
 8009b02:	4608      	mov	r0, r1
 8009b04:	4611      	mov	r1, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	602a      	str	r2, [r5, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f7f8 fb3a 	bl	8002184 <_lseek>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_lseek_r+0x1e>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_lseek_r+0x1e>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20000d1c 	.word	0x20000d1c

08009b20 <_read_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d07      	ldr	r5, [pc, #28]	; (8009b40 <_read_r+0x20>)
 8009b24:	4604      	mov	r4, r0
 8009b26:	4608      	mov	r0, r1
 8009b28:	4611      	mov	r1, r2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	602a      	str	r2, [r5, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f7f8 fae4 	bl	80020fc <_read>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_read_r+0x1e>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_read_r+0x1e>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	20000d1c 	.word	0x20000d1c

08009b44 <_write_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d07      	ldr	r5, [pc, #28]	; (8009b64 <_write_r+0x20>)
 8009b48:	4604      	mov	r4, r0
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	602a      	str	r2, [r5, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f7f7 fa82 	bl	800105c <_write>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_write_r+0x1e>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_write_r+0x1e>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	20000d1c 	.word	0x20000d1c

08009b68 <__errno>:
 8009b68:	4b01      	ldr	r3, [pc, #4]	; (8009b70 <__errno+0x8>)
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	20000074 	.word	0x20000074

08009b74 <__libc_init_array>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4d0d      	ldr	r5, [pc, #52]	; (8009bac <__libc_init_array+0x38>)
 8009b78:	4c0d      	ldr	r4, [pc, #52]	; (8009bb0 <__libc_init_array+0x3c>)
 8009b7a:	1b64      	subs	r4, r4, r5
 8009b7c:	10a4      	asrs	r4, r4, #2
 8009b7e:	2600      	movs	r6, #0
 8009b80:	42a6      	cmp	r6, r4
 8009b82:	d109      	bne.n	8009b98 <__libc_init_array+0x24>
 8009b84:	4d0b      	ldr	r5, [pc, #44]	; (8009bb4 <__libc_init_array+0x40>)
 8009b86:	4c0c      	ldr	r4, [pc, #48]	; (8009bb8 <__libc_init_array+0x44>)
 8009b88:	f000 fee2 	bl	800a950 <_init>
 8009b8c:	1b64      	subs	r4, r4, r5
 8009b8e:	10a4      	asrs	r4, r4, #2
 8009b90:	2600      	movs	r6, #0
 8009b92:	42a6      	cmp	r6, r4
 8009b94:	d105      	bne.n	8009ba2 <__libc_init_array+0x2e>
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9c:	4798      	blx	r3
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7ee      	b.n	8009b80 <__libc_init_array+0xc>
 8009ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba6:	4798      	blx	r3
 8009ba8:	3601      	adds	r6, #1
 8009baa:	e7f2      	b.n	8009b92 <__libc_init_array+0x1e>
 8009bac:	0800af84 	.word	0x0800af84
 8009bb0:	0800af84 	.word	0x0800af84
 8009bb4:	0800af84 	.word	0x0800af84
 8009bb8:	0800af88 	.word	0x0800af88

08009bbc <__retarget_lock_init_recursive>:
 8009bbc:	4770      	bx	lr

08009bbe <__retarget_lock_acquire_recursive>:
 8009bbe:	4770      	bx	lr

08009bc0 <__retarget_lock_release_recursive>:
 8009bc0:	4770      	bx	lr

08009bc2 <memcpy>:
 8009bc2:	440a      	add	r2, r1
 8009bc4:	4291      	cmp	r1, r2
 8009bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bca:	d100      	bne.n	8009bce <memcpy+0xc>
 8009bcc:	4770      	bx	lr
 8009bce:	b510      	push	{r4, lr}
 8009bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bd8:	4291      	cmp	r1, r2
 8009bda:	d1f9      	bne.n	8009bd0 <memcpy+0xe>
 8009bdc:	bd10      	pop	{r4, pc}
	...

08009be0 <_free_r>:
 8009be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009be2:	2900      	cmp	r1, #0
 8009be4:	d044      	beq.n	8009c70 <_free_r+0x90>
 8009be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bea:	9001      	str	r0, [sp, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f1a1 0404 	sub.w	r4, r1, #4
 8009bf2:	bfb8      	it	lt
 8009bf4:	18e4      	addlt	r4, r4, r3
 8009bf6:	f000 f8df 	bl	8009db8 <__malloc_lock>
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	; (8009c74 <_free_r+0x94>)
 8009bfc:	9801      	ldr	r0, [sp, #4]
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	b933      	cbnz	r3, 8009c10 <_free_r+0x30>
 8009c02:	6063      	str	r3, [r4, #4]
 8009c04:	6014      	str	r4, [r2, #0]
 8009c06:	b003      	add	sp, #12
 8009c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c0c:	f000 b8da 	b.w	8009dc4 <__malloc_unlock>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d908      	bls.n	8009c26 <_free_r+0x46>
 8009c14:	6825      	ldr	r5, [r4, #0]
 8009c16:	1961      	adds	r1, r4, r5
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	bf01      	itttt	eq
 8009c1c:	6819      	ldreq	r1, [r3, #0]
 8009c1e:	685b      	ldreq	r3, [r3, #4]
 8009c20:	1949      	addeq	r1, r1, r5
 8009c22:	6021      	streq	r1, [r4, #0]
 8009c24:	e7ed      	b.n	8009c02 <_free_r+0x22>
 8009c26:	461a      	mov	r2, r3
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	b10b      	cbz	r3, 8009c30 <_free_r+0x50>
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	d9fa      	bls.n	8009c26 <_free_r+0x46>
 8009c30:	6811      	ldr	r1, [r2, #0]
 8009c32:	1855      	adds	r5, r2, r1
 8009c34:	42a5      	cmp	r5, r4
 8009c36:	d10b      	bne.n	8009c50 <_free_r+0x70>
 8009c38:	6824      	ldr	r4, [r4, #0]
 8009c3a:	4421      	add	r1, r4
 8009c3c:	1854      	adds	r4, r2, r1
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	6011      	str	r1, [r2, #0]
 8009c42:	d1e0      	bne.n	8009c06 <_free_r+0x26>
 8009c44:	681c      	ldr	r4, [r3, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	6053      	str	r3, [r2, #4]
 8009c4a:	440c      	add	r4, r1
 8009c4c:	6014      	str	r4, [r2, #0]
 8009c4e:	e7da      	b.n	8009c06 <_free_r+0x26>
 8009c50:	d902      	bls.n	8009c58 <_free_r+0x78>
 8009c52:	230c      	movs	r3, #12
 8009c54:	6003      	str	r3, [r0, #0]
 8009c56:	e7d6      	b.n	8009c06 <_free_r+0x26>
 8009c58:	6825      	ldr	r5, [r4, #0]
 8009c5a:	1961      	adds	r1, r4, r5
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf04      	itt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	bf04      	itt	eq
 8009c68:	1949      	addeq	r1, r1, r5
 8009c6a:	6021      	streq	r1, [r4, #0]
 8009c6c:	6054      	str	r4, [r2, #4]
 8009c6e:	e7ca      	b.n	8009c06 <_free_r+0x26>
 8009c70:	b003      	add	sp, #12
 8009c72:	bd30      	pop	{r4, r5, pc}
 8009c74:	20000d24 	.word	0x20000d24

08009c78 <sbrk_aligned>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4e0e      	ldr	r6, [pc, #56]	; (8009cb4 <sbrk_aligned+0x3c>)
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	6831      	ldr	r1, [r6, #0]
 8009c80:	4605      	mov	r5, r0
 8009c82:	b911      	cbnz	r1, 8009c8a <sbrk_aligned+0x12>
 8009c84:	f000 fe1c 	bl	800a8c0 <_sbrk_r>
 8009c88:	6030      	str	r0, [r6, #0]
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 fe17 	bl	800a8c0 <_sbrk_r>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d00a      	beq.n	8009cac <sbrk_aligned+0x34>
 8009c96:	1cc4      	adds	r4, r0, #3
 8009c98:	f024 0403 	bic.w	r4, r4, #3
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d007      	beq.n	8009cb0 <sbrk_aligned+0x38>
 8009ca0:	1a21      	subs	r1, r4, r0
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 fe0c 	bl	800a8c0 <_sbrk_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d101      	bne.n	8009cb0 <sbrk_aligned+0x38>
 8009cac:	f04f 34ff 	mov.w	r4, #4294967295
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}
 8009cb4:	20000d28 	.word	0x20000d28

08009cb8 <_malloc_r>:
 8009cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cbc:	1ccd      	adds	r5, r1, #3
 8009cbe:	f025 0503 	bic.w	r5, r5, #3
 8009cc2:	3508      	adds	r5, #8
 8009cc4:	2d0c      	cmp	r5, #12
 8009cc6:	bf38      	it	cc
 8009cc8:	250c      	movcc	r5, #12
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	4607      	mov	r7, r0
 8009cce:	db01      	blt.n	8009cd4 <_malloc_r+0x1c>
 8009cd0:	42a9      	cmp	r1, r5
 8009cd2:	d905      	bls.n	8009ce0 <_malloc_r+0x28>
 8009cd4:	230c      	movs	r3, #12
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	2600      	movs	r6, #0
 8009cda:	4630      	mov	r0, r6
 8009cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ce0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009db4 <_malloc_r+0xfc>
 8009ce4:	f000 f868 	bl	8009db8 <__malloc_lock>
 8009ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cec:	461c      	mov	r4, r3
 8009cee:	bb5c      	cbnz	r4, 8009d48 <_malloc_r+0x90>
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	f7ff ffc0 	bl	8009c78 <sbrk_aligned>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	d155      	bne.n	8009daa <_malloc_r+0xf2>
 8009cfe:	f8d8 4000 	ldr.w	r4, [r8]
 8009d02:	4626      	mov	r6, r4
 8009d04:	2e00      	cmp	r6, #0
 8009d06:	d145      	bne.n	8009d94 <_malloc_r+0xdc>
 8009d08:	2c00      	cmp	r4, #0
 8009d0a:	d048      	beq.n	8009d9e <_malloc_r+0xe6>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4638      	mov	r0, r7
 8009d12:	eb04 0903 	add.w	r9, r4, r3
 8009d16:	f000 fdd3 	bl	800a8c0 <_sbrk_r>
 8009d1a:	4581      	cmp	r9, r0
 8009d1c:	d13f      	bne.n	8009d9e <_malloc_r+0xe6>
 8009d1e:	6821      	ldr	r1, [r4, #0]
 8009d20:	1a6d      	subs	r5, r5, r1
 8009d22:	4629      	mov	r1, r5
 8009d24:	4638      	mov	r0, r7
 8009d26:	f7ff ffa7 	bl	8009c78 <sbrk_aligned>
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	d037      	beq.n	8009d9e <_malloc_r+0xe6>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	442b      	add	r3, r5
 8009d32:	6023      	str	r3, [r4, #0]
 8009d34:	f8d8 3000 	ldr.w	r3, [r8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d038      	beq.n	8009dae <_malloc_r+0xf6>
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	42a2      	cmp	r2, r4
 8009d40:	d12b      	bne.n	8009d9a <_malloc_r+0xe2>
 8009d42:	2200      	movs	r2, #0
 8009d44:	605a      	str	r2, [r3, #4]
 8009d46:	e00f      	b.n	8009d68 <_malloc_r+0xb0>
 8009d48:	6822      	ldr	r2, [r4, #0]
 8009d4a:	1b52      	subs	r2, r2, r5
 8009d4c:	d41f      	bmi.n	8009d8e <_malloc_r+0xd6>
 8009d4e:	2a0b      	cmp	r2, #11
 8009d50:	d917      	bls.n	8009d82 <_malloc_r+0xca>
 8009d52:	1961      	adds	r1, r4, r5
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	6025      	str	r5, [r4, #0]
 8009d58:	bf18      	it	ne
 8009d5a:	6059      	strne	r1, [r3, #4]
 8009d5c:	6863      	ldr	r3, [r4, #4]
 8009d5e:	bf08      	it	eq
 8009d60:	f8c8 1000 	streq.w	r1, [r8]
 8009d64:	5162      	str	r2, [r4, r5]
 8009d66:	604b      	str	r3, [r1, #4]
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f104 060b 	add.w	r6, r4, #11
 8009d6e:	f000 f829 	bl	8009dc4 <__malloc_unlock>
 8009d72:	f026 0607 	bic.w	r6, r6, #7
 8009d76:	1d23      	adds	r3, r4, #4
 8009d78:	1af2      	subs	r2, r6, r3
 8009d7a:	d0ae      	beq.n	8009cda <_malloc_r+0x22>
 8009d7c:	1b9b      	subs	r3, r3, r6
 8009d7e:	50a3      	str	r3, [r4, r2]
 8009d80:	e7ab      	b.n	8009cda <_malloc_r+0x22>
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	6862      	ldr	r2, [r4, #4]
 8009d86:	d1dd      	bne.n	8009d44 <_malloc_r+0x8c>
 8009d88:	f8c8 2000 	str.w	r2, [r8]
 8009d8c:	e7ec      	b.n	8009d68 <_malloc_r+0xb0>
 8009d8e:	4623      	mov	r3, r4
 8009d90:	6864      	ldr	r4, [r4, #4]
 8009d92:	e7ac      	b.n	8009cee <_malloc_r+0x36>
 8009d94:	4634      	mov	r4, r6
 8009d96:	6876      	ldr	r6, [r6, #4]
 8009d98:	e7b4      	b.n	8009d04 <_malloc_r+0x4c>
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	e7cc      	b.n	8009d38 <_malloc_r+0x80>
 8009d9e:	230c      	movs	r3, #12
 8009da0:	603b      	str	r3, [r7, #0]
 8009da2:	4638      	mov	r0, r7
 8009da4:	f000 f80e 	bl	8009dc4 <__malloc_unlock>
 8009da8:	e797      	b.n	8009cda <_malloc_r+0x22>
 8009daa:	6025      	str	r5, [r4, #0]
 8009dac:	e7dc      	b.n	8009d68 <_malloc_r+0xb0>
 8009dae:	605b      	str	r3, [r3, #4]
 8009db0:	deff      	udf	#255	; 0xff
 8009db2:	bf00      	nop
 8009db4:	20000d24 	.word	0x20000d24

08009db8 <__malloc_lock>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__malloc_lock+0x8>)
 8009dba:	f7ff bf00 	b.w	8009bbe <__retarget_lock_acquire_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	20000d20 	.word	0x20000d20

08009dc4 <__malloc_unlock>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__malloc_unlock+0x8>)
 8009dc6:	f7ff befb 	b.w	8009bc0 <__retarget_lock_release_recursive>
 8009dca:	bf00      	nop
 8009dcc:	20000d20 	.word	0x20000d20

08009dd0 <__ssputs_r>:
 8009dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd4:	688e      	ldr	r6, [r1, #8]
 8009dd6:	461f      	mov	r7, r3
 8009dd8:	42be      	cmp	r6, r7
 8009dda:	680b      	ldr	r3, [r1, #0]
 8009ddc:	4682      	mov	sl, r0
 8009dde:	460c      	mov	r4, r1
 8009de0:	4690      	mov	r8, r2
 8009de2:	d82c      	bhi.n	8009e3e <__ssputs_r+0x6e>
 8009de4:	898a      	ldrh	r2, [r1, #12]
 8009de6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009dea:	d026      	beq.n	8009e3a <__ssputs_r+0x6a>
 8009dec:	6965      	ldr	r5, [r4, #20]
 8009dee:	6909      	ldr	r1, [r1, #16]
 8009df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009df4:	eba3 0901 	sub.w	r9, r3, r1
 8009df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dfc:	1c7b      	adds	r3, r7, #1
 8009dfe:	444b      	add	r3, r9
 8009e00:	106d      	asrs	r5, r5, #1
 8009e02:	429d      	cmp	r5, r3
 8009e04:	bf38      	it	cc
 8009e06:	461d      	movcc	r5, r3
 8009e08:	0553      	lsls	r3, r2, #21
 8009e0a:	d527      	bpl.n	8009e5c <__ssputs_r+0x8c>
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7ff ff53 	bl	8009cb8 <_malloc_r>
 8009e12:	4606      	mov	r6, r0
 8009e14:	b360      	cbz	r0, 8009e70 <__ssputs_r+0xa0>
 8009e16:	6921      	ldr	r1, [r4, #16]
 8009e18:	464a      	mov	r2, r9
 8009e1a:	f7ff fed2 	bl	8009bc2 <memcpy>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	6126      	str	r6, [r4, #16]
 8009e2c:	6165      	str	r5, [r4, #20]
 8009e2e:	444e      	add	r6, r9
 8009e30:	eba5 0509 	sub.w	r5, r5, r9
 8009e34:	6026      	str	r6, [r4, #0]
 8009e36:	60a5      	str	r5, [r4, #8]
 8009e38:	463e      	mov	r6, r7
 8009e3a:	42be      	cmp	r6, r7
 8009e3c:	d900      	bls.n	8009e40 <__ssputs_r+0x70>
 8009e3e:	463e      	mov	r6, r7
 8009e40:	6820      	ldr	r0, [r4, #0]
 8009e42:	4632      	mov	r2, r6
 8009e44:	4641      	mov	r1, r8
 8009e46:	f000 fcff 	bl	800a848 <memmove>
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	1b9b      	subs	r3, r3, r6
 8009e4e:	60a3      	str	r3, [r4, #8]
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	4433      	add	r3, r6
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	2000      	movs	r0, #0
 8009e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	f000 fd3f 	bl	800a8e0 <_realloc_r>
 8009e62:	4606      	mov	r6, r0
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d1e0      	bne.n	8009e2a <__ssputs_r+0x5a>
 8009e68:	6921      	ldr	r1, [r4, #16]
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	f7ff feb8 	bl	8009be0 <_free_r>
 8009e70:	230c      	movs	r3, #12
 8009e72:	f8ca 3000 	str.w	r3, [sl]
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e82:	e7e9      	b.n	8009e58 <__ssputs_r+0x88>

08009e84 <_svfiprintf_r>:
 8009e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	4698      	mov	r8, r3
 8009e8a:	898b      	ldrh	r3, [r1, #12]
 8009e8c:	061b      	lsls	r3, r3, #24
 8009e8e:	b09d      	sub	sp, #116	; 0x74
 8009e90:	4607      	mov	r7, r0
 8009e92:	460d      	mov	r5, r1
 8009e94:	4614      	mov	r4, r2
 8009e96:	d50e      	bpl.n	8009eb6 <_svfiprintf_r+0x32>
 8009e98:	690b      	ldr	r3, [r1, #16]
 8009e9a:	b963      	cbnz	r3, 8009eb6 <_svfiprintf_r+0x32>
 8009e9c:	2140      	movs	r1, #64	; 0x40
 8009e9e:	f7ff ff0b 	bl	8009cb8 <_malloc_r>
 8009ea2:	6028      	str	r0, [r5, #0]
 8009ea4:	6128      	str	r0, [r5, #16]
 8009ea6:	b920      	cbnz	r0, 8009eb2 <_svfiprintf_r+0x2e>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb0:	e0d0      	b.n	800a054 <_svfiprintf_r+0x1d0>
 8009eb2:	2340      	movs	r3, #64	; 0x40
 8009eb4:	616b      	str	r3, [r5, #20]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eba:	2320      	movs	r3, #32
 8009ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ec4:	2330      	movs	r3, #48	; 0x30
 8009ec6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a06c <_svfiprintf_r+0x1e8>
 8009eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ece:	f04f 0901 	mov.w	r9, #1
 8009ed2:	4623      	mov	r3, r4
 8009ed4:	469a      	mov	sl, r3
 8009ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eda:	b10a      	cbz	r2, 8009ee0 <_svfiprintf_r+0x5c>
 8009edc:	2a25      	cmp	r2, #37	; 0x25
 8009ede:	d1f9      	bne.n	8009ed4 <_svfiprintf_r+0x50>
 8009ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ee4:	d00b      	beq.n	8009efe <_svfiprintf_r+0x7a>
 8009ee6:	465b      	mov	r3, fp
 8009ee8:	4622      	mov	r2, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	4638      	mov	r0, r7
 8009eee:	f7ff ff6f 	bl	8009dd0 <__ssputs_r>
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	f000 80a9 	beq.w	800a04a <_svfiprintf_r+0x1c6>
 8009ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009efa:	445a      	add	r2, fp
 8009efc:	9209      	str	r2, [sp, #36]	; 0x24
 8009efe:	f89a 3000 	ldrb.w	r3, [sl]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 80a1 	beq.w	800a04a <_svfiprintf_r+0x1c6>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f12:	f10a 0a01 	add.w	sl, sl, #1
 8009f16:	9304      	str	r3, [sp, #16]
 8009f18:	9307      	str	r3, [sp, #28]
 8009f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f20:	4654      	mov	r4, sl
 8009f22:	2205      	movs	r2, #5
 8009f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f28:	4850      	ldr	r0, [pc, #320]	; (800a06c <_svfiprintf_r+0x1e8>)
 8009f2a:	f7f6 f969 	bl	8000200 <memchr>
 8009f2e:	9a04      	ldr	r2, [sp, #16]
 8009f30:	b9d8      	cbnz	r0, 8009f6a <_svfiprintf_r+0xe6>
 8009f32:	06d0      	lsls	r0, r2, #27
 8009f34:	bf44      	itt	mi
 8009f36:	2320      	movmi	r3, #32
 8009f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3c:	0711      	lsls	r1, r2, #28
 8009f3e:	bf44      	itt	mi
 8009f40:	232b      	movmi	r3, #43	; 0x2b
 8009f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f46:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f4c:	d015      	beq.n	8009f7a <_svfiprintf_r+0xf6>
 8009f4e:	9a07      	ldr	r2, [sp, #28]
 8009f50:	4654      	mov	r4, sl
 8009f52:	2000      	movs	r0, #0
 8009f54:	f04f 0c0a 	mov.w	ip, #10
 8009f58:	4621      	mov	r1, r4
 8009f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f5e:	3b30      	subs	r3, #48	; 0x30
 8009f60:	2b09      	cmp	r3, #9
 8009f62:	d94d      	bls.n	800a000 <_svfiprintf_r+0x17c>
 8009f64:	b1b0      	cbz	r0, 8009f94 <_svfiprintf_r+0x110>
 8009f66:	9207      	str	r2, [sp, #28]
 8009f68:	e014      	b.n	8009f94 <_svfiprintf_r+0x110>
 8009f6a:	eba0 0308 	sub.w	r3, r0, r8
 8009f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009f72:	4313      	orrs	r3, r2
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	46a2      	mov	sl, r4
 8009f78:	e7d2      	b.n	8009f20 <_svfiprintf_r+0x9c>
 8009f7a:	9b03      	ldr	r3, [sp, #12]
 8009f7c:	1d19      	adds	r1, r3, #4
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	9103      	str	r1, [sp, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	bfbb      	ittet	lt
 8009f86:	425b      	neglt	r3, r3
 8009f88:	f042 0202 	orrlt.w	r2, r2, #2
 8009f8c:	9307      	strge	r3, [sp, #28]
 8009f8e:	9307      	strlt	r3, [sp, #28]
 8009f90:	bfb8      	it	lt
 8009f92:	9204      	strlt	r2, [sp, #16]
 8009f94:	7823      	ldrb	r3, [r4, #0]
 8009f96:	2b2e      	cmp	r3, #46	; 0x2e
 8009f98:	d10c      	bne.n	8009fb4 <_svfiprintf_r+0x130>
 8009f9a:	7863      	ldrb	r3, [r4, #1]
 8009f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f9e:	d134      	bne.n	800a00a <_svfiprintf_r+0x186>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	1d1a      	adds	r2, r3, #4
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	9203      	str	r2, [sp, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bfb8      	it	lt
 8009fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fb0:	3402      	adds	r4, #2
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a07c <_svfiprintf_r+0x1f8>
 8009fb8:	7821      	ldrb	r1, [r4, #0]
 8009fba:	2203      	movs	r2, #3
 8009fbc:	4650      	mov	r0, sl
 8009fbe:	f7f6 f91f 	bl	8000200 <memchr>
 8009fc2:	b138      	cbz	r0, 8009fd4 <_svfiprintf_r+0x150>
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	eba0 000a 	sub.w	r0, r0, sl
 8009fca:	2240      	movs	r2, #64	; 0x40
 8009fcc:	4082      	lsls	r2, r0
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	3401      	adds	r4, #1
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd8:	4825      	ldr	r0, [pc, #148]	; (800a070 <_svfiprintf_r+0x1ec>)
 8009fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fde:	2206      	movs	r2, #6
 8009fe0:	f7f6 f90e 	bl	8000200 <memchr>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d038      	beq.n	800a05a <_svfiprintf_r+0x1d6>
 8009fe8:	4b22      	ldr	r3, [pc, #136]	; (800a074 <_svfiprintf_r+0x1f0>)
 8009fea:	bb1b      	cbnz	r3, 800a034 <_svfiprintf_r+0x1b0>
 8009fec:	9b03      	ldr	r3, [sp, #12]
 8009fee:	3307      	adds	r3, #7
 8009ff0:	f023 0307 	bic.w	r3, r3, #7
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffa:	4433      	add	r3, r6
 8009ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffe:	e768      	b.n	8009ed2 <_svfiprintf_r+0x4e>
 800a000:	fb0c 3202 	mla	r2, ip, r2, r3
 800a004:	460c      	mov	r4, r1
 800a006:	2001      	movs	r0, #1
 800a008:	e7a6      	b.n	8009f58 <_svfiprintf_r+0xd4>
 800a00a:	2300      	movs	r3, #0
 800a00c:	3401      	adds	r4, #1
 800a00e:	9305      	str	r3, [sp, #20]
 800a010:	4619      	mov	r1, r3
 800a012:	f04f 0c0a 	mov.w	ip, #10
 800a016:	4620      	mov	r0, r4
 800a018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a01c:	3a30      	subs	r2, #48	; 0x30
 800a01e:	2a09      	cmp	r2, #9
 800a020:	d903      	bls.n	800a02a <_svfiprintf_r+0x1a6>
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0c6      	beq.n	8009fb4 <_svfiprintf_r+0x130>
 800a026:	9105      	str	r1, [sp, #20]
 800a028:	e7c4      	b.n	8009fb4 <_svfiprintf_r+0x130>
 800a02a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a02e:	4604      	mov	r4, r0
 800a030:	2301      	movs	r3, #1
 800a032:	e7f0      	b.n	800a016 <_svfiprintf_r+0x192>
 800a034:	ab03      	add	r3, sp, #12
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	462a      	mov	r2, r5
 800a03a:	4b0f      	ldr	r3, [pc, #60]	; (800a078 <_svfiprintf_r+0x1f4>)
 800a03c:	a904      	add	r1, sp, #16
 800a03e:	4638      	mov	r0, r7
 800a040:	f3af 8000 	nop.w
 800a044:	1c42      	adds	r2, r0, #1
 800a046:	4606      	mov	r6, r0
 800a048:	d1d6      	bne.n	8009ff8 <_svfiprintf_r+0x174>
 800a04a:	89ab      	ldrh	r3, [r5, #12]
 800a04c:	065b      	lsls	r3, r3, #25
 800a04e:	f53f af2d 	bmi.w	8009eac <_svfiprintf_r+0x28>
 800a052:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a054:	b01d      	add	sp, #116	; 0x74
 800a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05a:	ab03      	add	r3, sp, #12
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	462a      	mov	r2, r5
 800a060:	4b05      	ldr	r3, [pc, #20]	; (800a078 <_svfiprintf_r+0x1f4>)
 800a062:	a904      	add	r1, sp, #16
 800a064:	4638      	mov	r0, r7
 800a066:	f000 f9bd 	bl	800a3e4 <_printf_i>
 800a06a:	e7eb      	b.n	800a044 <_svfiprintf_r+0x1c0>
 800a06c:	0800af48 	.word	0x0800af48
 800a070:	0800af52 	.word	0x0800af52
 800a074:	00000000 	.word	0x00000000
 800a078:	08009dd1 	.word	0x08009dd1
 800a07c:	0800af4e 	.word	0x0800af4e

0800a080 <__sfputc_r>:
 800a080:	6893      	ldr	r3, [r2, #8]
 800a082:	3b01      	subs	r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	b410      	push	{r4}
 800a088:	6093      	str	r3, [r2, #8]
 800a08a:	da08      	bge.n	800a09e <__sfputc_r+0x1e>
 800a08c:	6994      	ldr	r4, [r2, #24]
 800a08e:	42a3      	cmp	r3, r4
 800a090:	db01      	blt.n	800a096 <__sfputc_r+0x16>
 800a092:	290a      	cmp	r1, #10
 800a094:	d103      	bne.n	800a09e <__sfputc_r+0x1e>
 800a096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a09a:	f7ff bc82 	b.w	80099a2 <__swbuf_r>
 800a09e:	6813      	ldr	r3, [r2, #0]
 800a0a0:	1c58      	adds	r0, r3, #1
 800a0a2:	6010      	str	r0, [r2, #0]
 800a0a4:	7019      	strb	r1, [r3, #0]
 800a0a6:	4608      	mov	r0, r1
 800a0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <__sfputs_r>:
 800a0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	18d5      	adds	r5, r2, r3
 800a0b8:	42ac      	cmp	r4, r5
 800a0ba:	d101      	bne.n	800a0c0 <__sfputs_r+0x12>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	e007      	b.n	800a0d0 <__sfputs_r+0x22>
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	463a      	mov	r2, r7
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7ff ffda 	bl	800a080 <__sfputc_r>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d1f3      	bne.n	800a0b8 <__sfputs_r+0xa>
 800a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0d4 <_vfiprintf_r>:
 800a0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d8:	460d      	mov	r5, r1
 800a0da:	b09d      	sub	sp, #116	; 0x74
 800a0dc:	4614      	mov	r4, r2
 800a0de:	4698      	mov	r8, r3
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	b118      	cbz	r0, 800a0ec <_vfiprintf_r+0x18>
 800a0e4:	6a03      	ldr	r3, [r0, #32]
 800a0e6:	b90b      	cbnz	r3, 800a0ec <_vfiprintf_r+0x18>
 800a0e8:	f7ff fb20 	bl	800972c <__sinit>
 800a0ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ee:	07d9      	lsls	r1, r3, #31
 800a0f0:	d405      	bmi.n	800a0fe <_vfiprintf_r+0x2a>
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	059a      	lsls	r2, r3, #22
 800a0f6:	d402      	bmi.n	800a0fe <_vfiprintf_r+0x2a>
 800a0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0fa:	f7ff fd60 	bl	8009bbe <__retarget_lock_acquire_recursive>
 800a0fe:	89ab      	ldrh	r3, [r5, #12]
 800a100:	071b      	lsls	r3, r3, #28
 800a102:	d501      	bpl.n	800a108 <_vfiprintf_r+0x34>
 800a104:	692b      	ldr	r3, [r5, #16]
 800a106:	b99b      	cbnz	r3, 800a130 <_vfiprintf_r+0x5c>
 800a108:	4629      	mov	r1, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7ff fc86 	bl	8009a1c <__swsetup_r>
 800a110:	b170      	cbz	r0, 800a130 <_vfiprintf_r+0x5c>
 800a112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a114:	07dc      	lsls	r4, r3, #31
 800a116:	d504      	bpl.n	800a122 <_vfiprintf_r+0x4e>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	b01d      	add	sp, #116	; 0x74
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	0598      	lsls	r0, r3, #22
 800a126:	d4f7      	bmi.n	800a118 <_vfiprintf_r+0x44>
 800a128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12a:	f7ff fd49 	bl	8009bc0 <__retarget_lock_release_recursive>
 800a12e:	e7f3      	b.n	800a118 <_vfiprintf_r+0x44>
 800a130:	2300      	movs	r3, #0
 800a132:	9309      	str	r3, [sp, #36]	; 0x24
 800a134:	2320      	movs	r3, #32
 800a136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a13a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a13e:	2330      	movs	r3, #48	; 0x30
 800a140:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a2f4 <_vfiprintf_r+0x220>
 800a144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a148:	f04f 0901 	mov.w	r9, #1
 800a14c:	4623      	mov	r3, r4
 800a14e:	469a      	mov	sl, r3
 800a150:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a154:	b10a      	cbz	r2, 800a15a <_vfiprintf_r+0x86>
 800a156:	2a25      	cmp	r2, #37	; 0x25
 800a158:	d1f9      	bne.n	800a14e <_vfiprintf_r+0x7a>
 800a15a:	ebba 0b04 	subs.w	fp, sl, r4
 800a15e:	d00b      	beq.n	800a178 <_vfiprintf_r+0xa4>
 800a160:	465b      	mov	r3, fp
 800a162:	4622      	mov	r2, r4
 800a164:	4629      	mov	r1, r5
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ffa1 	bl	800a0ae <__sfputs_r>
 800a16c:	3001      	adds	r0, #1
 800a16e:	f000 80a9 	beq.w	800a2c4 <_vfiprintf_r+0x1f0>
 800a172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a174:	445a      	add	r2, fp
 800a176:	9209      	str	r2, [sp, #36]	; 0x24
 800a178:	f89a 3000 	ldrb.w	r3, [sl]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 80a1 	beq.w	800a2c4 <_vfiprintf_r+0x1f0>
 800a182:	2300      	movs	r3, #0
 800a184:	f04f 32ff 	mov.w	r2, #4294967295
 800a188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a18c:	f10a 0a01 	add.w	sl, sl, #1
 800a190:	9304      	str	r3, [sp, #16]
 800a192:	9307      	str	r3, [sp, #28]
 800a194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a198:	931a      	str	r3, [sp, #104]	; 0x68
 800a19a:	4654      	mov	r4, sl
 800a19c:	2205      	movs	r2, #5
 800a19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a2:	4854      	ldr	r0, [pc, #336]	; (800a2f4 <_vfiprintf_r+0x220>)
 800a1a4:	f7f6 f82c 	bl	8000200 <memchr>
 800a1a8:	9a04      	ldr	r2, [sp, #16]
 800a1aa:	b9d8      	cbnz	r0, 800a1e4 <_vfiprintf_r+0x110>
 800a1ac:	06d1      	lsls	r1, r2, #27
 800a1ae:	bf44      	itt	mi
 800a1b0:	2320      	movmi	r3, #32
 800a1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b6:	0713      	lsls	r3, r2, #28
 800a1b8:	bf44      	itt	mi
 800a1ba:	232b      	movmi	r3, #43	; 0x2b
 800a1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c6:	d015      	beq.n	800a1f4 <_vfiprintf_r+0x120>
 800a1c8:	9a07      	ldr	r2, [sp, #28]
 800a1ca:	4654      	mov	r4, sl
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	f04f 0c0a 	mov.w	ip, #10
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d8:	3b30      	subs	r3, #48	; 0x30
 800a1da:	2b09      	cmp	r3, #9
 800a1dc:	d94d      	bls.n	800a27a <_vfiprintf_r+0x1a6>
 800a1de:	b1b0      	cbz	r0, 800a20e <_vfiprintf_r+0x13a>
 800a1e0:	9207      	str	r2, [sp, #28]
 800a1e2:	e014      	b.n	800a20e <_vfiprintf_r+0x13a>
 800a1e4:	eba0 0308 	sub.w	r3, r0, r8
 800a1e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	9304      	str	r3, [sp, #16]
 800a1f0:	46a2      	mov	sl, r4
 800a1f2:	e7d2      	b.n	800a19a <_vfiprintf_r+0xc6>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	1d19      	adds	r1, r3, #4
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	9103      	str	r1, [sp, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bfbb      	ittet	lt
 800a200:	425b      	neglt	r3, r3
 800a202:	f042 0202 	orrlt.w	r2, r2, #2
 800a206:	9307      	strge	r3, [sp, #28]
 800a208:	9307      	strlt	r3, [sp, #28]
 800a20a:	bfb8      	it	lt
 800a20c:	9204      	strlt	r2, [sp, #16]
 800a20e:	7823      	ldrb	r3, [r4, #0]
 800a210:	2b2e      	cmp	r3, #46	; 0x2e
 800a212:	d10c      	bne.n	800a22e <_vfiprintf_r+0x15a>
 800a214:	7863      	ldrb	r3, [r4, #1]
 800a216:	2b2a      	cmp	r3, #42	; 0x2a
 800a218:	d134      	bne.n	800a284 <_vfiprintf_r+0x1b0>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	1d1a      	adds	r2, r3, #4
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	9203      	str	r2, [sp, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	bfb8      	it	lt
 800a226:	f04f 33ff 	movlt.w	r3, #4294967295
 800a22a:	3402      	adds	r4, #2
 800a22c:	9305      	str	r3, [sp, #20]
 800a22e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a304 <_vfiprintf_r+0x230>
 800a232:	7821      	ldrb	r1, [r4, #0]
 800a234:	2203      	movs	r2, #3
 800a236:	4650      	mov	r0, sl
 800a238:	f7f5 ffe2 	bl	8000200 <memchr>
 800a23c:	b138      	cbz	r0, 800a24e <_vfiprintf_r+0x17a>
 800a23e:	9b04      	ldr	r3, [sp, #16]
 800a240:	eba0 000a 	sub.w	r0, r0, sl
 800a244:	2240      	movs	r2, #64	; 0x40
 800a246:	4082      	lsls	r2, r0
 800a248:	4313      	orrs	r3, r2
 800a24a:	3401      	adds	r4, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a252:	4829      	ldr	r0, [pc, #164]	; (800a2f8 <_vfiprintf_r+0x224>)
 800a254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a258:	2206      	movs	r2, #6
 800a25a:	f7f5 ffd1 	bl	8000200 <memchr>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d03f      	beq.n	800a2e2 <_vfiprintf_r+0x20e>
 800a262:	4b26      	ldr	r3, [pc, #152]	; (800a2fc <_vfiprintf_r+0x228>)
 800a264:	bb1b      	cbnz	r3, 800a2ae <_vfiprintf_r+0x1da>
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	3307      	adds	r3, #7
 800a26a:	f023 0307 	bic.w	r3, r3, #7
 800a26e:	3308      	adds	r3, #8
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a274:	443b      	add	r3, r7
 800a276:	9309      	str	r3, [sp, #36]	; 0x24
 800a278:	e768      	b.n	800a14c <_vfiprintf_r+0x78>
 800a27a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a27e:	460c      	mov	r4, r1
 800a280:	2001      	movs	r0, #1
 800a282:	e7a6      	b.n	800a1d2 <_vfiprintf_r+0xfe>
 800a284:	2300      	movs	r3, #0
 800a286:	3401      	adds	r4, #1
 800a288:	9305      	str	r3, [sp, #20]
 800a28a:	4619      	mov	r1, r3
 800a28c:	f04f 0c0a 	mov.w	ip, #10
 800a290:	4620      	mov	r0, r4
 800a292:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a296:	3a30      	subs	r2, #48	; 0x30
 800a298:	2a09      	cmp	r2, #9
 800a29a:	d903      	bls.n	800a2a4 <_vfiprintf_r+0x1d0>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0c6      	beq.n	800a22e <_vfiprintf_r+0x15a>
 800a2a0:	9105      	str	r1, [sp, #20]
 800a2a2:	e7c4      	b.n	800a22e <_vfiprintf_r+0x15a>
 800a2a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e7f0      	b.n	800a290 <_vfiprintf_r+0x1bc>
 800a2ae:	ab03      	add	r3, sp, #12
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4b12      	ldr	r3, [pc, #72]	; (800a300 <_vfiprintf_r+0x22c>)
 800a2b6:	a904      	add	r1, sp, #16
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f3af 8000 	nop.w
 800a2be:	4607      	mov	r7, r0
 800a2c0:	1c78      	adds	r0, r7, #1
 800a2c2:	d1d6      	bne.n	800a272 <_vfiprintf_r+0x19e>
 800a2c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2c6:	07d9      	lsls	r1, r3, #31
 800a2c8:	d405      	bmi.n	800a2d6 <_vfiprintf_r+0x202>
 800a2ca:	89ab      	ldrh	r3, [r5, #12]
 800a2cc:	059a      	lsls	r2, r3, #22
 800a2ce:	d402      	bmi.n	800a2d6 <_vfiprintf_r+0x202>
 800a2d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2d2:	f7ff fc75 	bl	8009bc0 <__retarget_lock_release_recursive>
 800a2d6:	89ab      	ldrh	r3, [r5, #12]
 800a2d8:	065b      	lsls	r3, r3, #25
 800a2da:	f53f af1d 	bmi.w	800a118 <_vfiprintf_r+0x44>
 800a2de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e0:	e71c      	b.n	800a11c <_vfiprintf_r+0x48>
 800a2e2:	ab03      	add	r3, sp, #12
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	462a      	mov	r2, r5
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <_vfiprintf_r+0x22c>)
 800a2ea:	a904      	add	r1, sp, #16
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f000 f879 	bl	800a3e4 <_printf_i>
 800a2f2:	e7e4      	b.n	800a2be <_vfiprintf_r+0x1ea>
 800a2f4:	0800af48 	.word	0x0800af48
 800a2f8:	0800af52 	.word	0x0800af52
 800a2fc:	00000000 	.word	0x00000000
 800a300:	0800a0af 	.word	0x0800a0af
 800a304:	0800af4e 	.word	0x0800af4e

0800a308 <_printf_common>:
 800a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	4616      	mov	r6, r2
 800a30e:	4699      	mov	r9, r3
 800a310:	688a      	ldr	r2, [r1, #8]
 800a312:	690b      	ldr	r3, [r1, #16]
 800a314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a318:	4293      	cmp	r3, r2
 800a31a:	bfb8      	it	lt
 800a31c:	4613      	movlt	r3, r2
 800a31e:	6033      	str	r3, [r6, #0]
 800a320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a324:	4607      	mov	r7, r0
 800a326:	460c      	mov	r4, r1
 800a328:	b10a      	cbz	r2, 800a32e <_printf_common+0x26>
 800a32a:	3301      	adds	r3, #1
 800a32c:	6033      	str	r3, [r6, #0]
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	0699      	lsls	r1, r3, #26
 800a332:	bf42      	ittt	mi
 800a334:	6833      	ldrmi	r3, [r6, #0]
 800a336:	3302      	addmi	r3, #2
 800a338:	6033      	strmi	r3, [r6, #0]
 800a33a:	6825      	ldr	r5, [r4, #0]
 800a33c:	f015 0506 	ands.w	r5, r5, #6
 800a340:	d106      	bne.n	800a350 <_printf_common+0x48>
 800a342:	f104 0a19 	add.w	sl, r4, #25
 800a346:	68e3      	ldr	r3, [r4, #12]
 800a348:	6832      	ldr	r2, [r6, #0]
 800a34a:	1a9b      	subs	r3, r3, r2
 800a34c:	42ab      	cmp	r3, r5
 800a34e:	dc26      	bgt.n	800a39e <_printf_common+0x96>
 800a350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a354:	1e13      	subs	r3, r2, #0
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	bf18      	it	ne
 800a35a:	2301      	movne	r3, #1
 800a35c:	0692      	lsls	r2, r2, #26
 800a35e:	d42b      	bmi.n	800a3b8 <_printf_common+0xb0>
 800a360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a364:	4649      	mov	r1, r9
 800a366:	4638      	mov	r0, r7
 800a368:	47c0      	blx	r8
 800a36a:	3001      	adds	r0, #1
 800a36c:	d01e      	beq.n	800a3ac <_printf_common+0xa4>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	6922      	ldr	r2, [r4, #16]
 800a372:	f003 0306 	and.w	r3, r3, #6
 800a376:	2b04      	cmp	r3, #4
 800a378:	bf02      	ittt	eq
 800a37a:	68e5      	ldreq	r5, [r4, #12]
 800a37c:	6833      	ldreq	r3, [r6, #0]
 800a37e:	1aed      	subeq	r5, r5, r3
 800a380:	68a3      	ldr	r3, [r4, #8]
 800a382:	bf0c      	ite	eq
 800a384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a388:	2500      	movne	r5, #0
 800a38a:	4293      	cmp	r3, r2
 800a38c:	bfc4      	itt	gt
 800a38e:	1a9b      	subgt	r3, r3, r2
 800a390:	18ed      	addgt	r5, r5, r3
 800a392:	2600      	movs	r6, #0
 800a394:	341a      	adds	r4, #26
 800a396:	42b5      	cmp	r5, r6
 800a398:	d11a      	bne.n	800a3d0 <_printf_common+0xc8>
 800a39a:	2000      	movs	r0, #0
 800a39c:	e008      	b.n	800a3b0 <_printf_common+0xa8>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4652      	mov	r2, sl
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	47c0      	blx	r8
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	d103      	bne.n	800a3b4 <_printf_common+0xac>
 800a3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	e7c6      	b.n	800a346 <_printf_common+0x3e>
 800a3b8:	18e1      	adds	r1, r4, r3
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	2030      	movs	r0, #48	; 0x30
 800a3be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3c2:	4422      	add	r2, r4
 800a3c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3cc:	3302      	adds	r3, #2
 800a3ce:	e7c7      	b.n	800a360 <_printf_common+0x58>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	47c0      	blx	r8
 800a3da:	3001      	adds	r0, #1
 800a3dc:	d0e6      	beq.n	800a3ac <_printf_common+0xa4>
 800a3de:	3601      	adds	r6, #1
 800a3e0:	e7d9      	b.n	800a396 <_printf_common+0x8e>
	...

0800a3e4 <_printf_i>:
 800a3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e8:	7e0f      	ldrb	r7, [r1, #24]
 800a3ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3ec:	2f78      	cmp	r7, #120	; 0x78
 800a3ee:	4691      	mov	r9, r2
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	469a      	mov	sl, r3
 800a3f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3fa:	d807      	bhi.n	800a40c <_printf_i+0x28>
 800a3fc:	2f62      	cmp	r7, #98	; 0x62
 800a3fe:	d80a      	bhi.n	800a416 <_printf_i+0x32>
 800a400:	2f00      	cmp	r7, #0
 800a402:	f000 80d4 	beq.w	800a5ae <_printf_i+0x1ca>
 800a406:	2f58      	cmp	r7, #88	; 0x58
 800a408:	f000 80c0 	beq.w	800a58c <_printf_i+0x1a8>
 800a40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a414:	e03a      	b.n	800a48c <_printf_i+0xa8>
 800a416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a41a:	2b15      	cmp	r3, #21
 800a41c:	d8f6      	bhi.n	800a40c <_printf_i+0x28>
 800a41e:	a101      	add	r1, pc, #4	; (adr r1, 800a424 <_printf_i+0x40>)
 800a420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a424:	0800a47d 	.word	0x0800a47d
 800a428:	0800a491 	.word	0x0800a491
 800a42c:	0800a40d 	.word	0x0800a40d
 800a430:	0800a40d 	.word	0x0800a40d
 800a434:	0800a40d 	.word	0x0800a40d
 800a438:	0800a40d 	.word	0x0800a40d
 800a43c:	0800a491 	.word	0x0800a491
 800a440:	0800a40d 	.word	0x0800a40d
 800a444:	0800a40d 	.word	0x0800a40d
 800a448:	0800a40d 	.word	0x0800a40d
 800a44c:	0800a40d 	.word	0x0800a40d
 800a450:	0800a595 	.word	0x0800a595
 800a454:	0800a4bd 	.word	0x0800a4bd
 800a458:	0800a54f 	.word	0x0800a54f
 800a45c:	0800a40d 	.word	0x0800a40d
 800a460:	0800a40d 	.word	0x0800a40d
 800a464:	0800a5b7 	.word	0x0800a5b7
 800a468:	0800a40d 	.word	0x0800a40d
 800a46c:	0800a4bd 	.word	0x0800a4bd
 800a470:	0800a40d 	.word	0x0800a40d
 800a474:	0800a40d 	.word	0x0800a40d
 800a478:	0800a557 	.word	0x0800a557
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	1d1a      	adds	r2, r3, #4
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	602a      	str	r2, [r5, #0]
 800a484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a48c:	2301      	movs	r3, #1
 800a48e:	e09f      	b.n	800a5d0 <_printf_i+0x1ec>
 800a490:	6820      	ldr	r0, [r4, #0]
 800a492:	682b      	ldr	r3, [r5, #0]
 800a494:	0607      	lsls	r7, r0, #24
 800a496:	f103 0104 	add.w	r1, r3, #4
 800a49a:	6029      	str	r1, [r5, #0]
 800a49c:	d501      	bpl.n	800a4a2 <_printf_i+0xbe>
 800a49e:	681e      	ldr	r6, [r3, #0]
 800a4a0:	e003      	b.n	800a4aa <_printf_i+0xc6>
 800a4a2:	0646      	lsls	r6, r0, #25
 800a4a4:	d5fb      	bpl.n	800a49e <_printf_i+0xba>
 800a4a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a4aa:	2e00      	cmp	r6, #0
 800a4ac:	da03      	bge.n	800a4b6 <_printf_i+0xd2>
 800a4ae:	232d      	movs	r3, #45	; 0x2d
 800a4b0:	4276      	negs	r6, r6
 800a4b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b6:	485a      	ldr	r0, [pc, #360]	; (800a620 <_printf_i+0x23c>)
 800a4b8:	230a      	movs	r3, #10
 800a4ba:	e012      	b.n	800a4e2 <_printf_i+0xfe>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	6820      	ldr	r0, [r4, #0]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	6029      	str	r1, [r5, #0]
 800a4c4:	0605      	lsls	r5, r0, #24
 800a4c6:	d501      	bpl.n	800a4cc <_printf_i+0xe8>
 800a4c8:	681e      	ldr	r6, [r3, #0]
 800a4ca:	e002      	b.n	800a4d2 <_printf_i+0xee>
 800a4cc:	0641      	lsls	r1, r0, #25
 800a4ce:	d5fb      	bpl.n	800a4c8 <_printf_i+0xe4>
 800a4d0:	881e      	ldrh	r6, [r3, #0]
 800a4d2:	4853      	ldr	r0, [pc, #332]	; (800a620 <_printf_i+0x23c>)
 800a4d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a4d6:	bf0c      	ite	eq
 800a4d8:	2308      	moveq	r3, #8
 800a4da:	230a      	movne	r3, #10
 800a4dc:	2100      	movs	r1, #0
 800a4de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4e2:	6865      	ldr	r5, [r4, #4]
 800a4e4:	60a5      	str	r5, [r4, #8]
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	bfa2      	ittt	ge
 800a4ea:	6821      	ldrge	r1, [r4, #0]
 800a4ec:	f021 0104 	bicge.w	r1, r1, #4
 800a4f0:	6021      	strge	r1, [r4, #0]
 800a4f2:	b90e      	cbnz	r6, 800a4f8 <_printf_i+0x114>
 800a4f4:	2d00      	cmp	r5, #0
 800a4f6:	d04b      	beq.n	800a590 <_printf_i+0x1ac>
 800a4f8:	4615      	mov	r5, r2
 800a4fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4fe:	fb03 6711 	mls	r7, r3, r1, r6
 800a502:	5dc7      	ldrb	r7, [r0, r7]
 800a504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a508:	4637      	mov	r7, r6
 800a50a:	42bb      	cmp	r3, r7
 800a50c:	460e      	mov	r6, r1
 800a50e:	d9f4      	bls.n	800a4fa <_printf_i+0x116>
 800a510:	2b08      	cmp	r3, #8
 800a512:	d10b      	bne.n	800a52c <_printf_i+0x148>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	07de      	lsls	r6, r3, #31
 800a518:	d508      	bpl.n	800a52c <_printf_i+0x148>
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	6861      	ldr	r1, [r4, #4]
 800a51e:	4299      	cmp	r1, r3
 800a520:	bfde      	ittt	le
 800a522:	2330      	movle	r3, #48	; 0x30
 800a524:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a528:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a52c:	1b52      	subs	r2, r2, r5
 800a52e:	6122      	str	r2, [r4, #16]
 800a530:	f8cd a000 	str.w	sl, [sp]
 800a534:	464b      	mov	r3, r9
 800a536:	aa03      	add	r2, sp, #12
 800a538:	4621      	mov	r1, r4
 800a53a:	4640      	mov	r0, r8
 800a53c:	f7ff fee4 	bl	800a308 <_printf_common>
 800a540:	3001      	adds	r0, #1
 800a542:	d14a      	bne.n	800a5da <_printf_i+0x1f6>
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	b004      	add	sp, #16
 800a54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	f043 0320 	orr.w	r3, r3, #32
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	4833      	ldr	r0, [pc, #204]	; (800a624 <_printf_i+0x240>)
 800a558:	2778      	movs	r7, #120	; 0x78
 800a55a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	6829      	ldr	r1, [r5, #0]
 800a562:	061f      	lsls	r7, r3, #24
 800a564:	f851 6b04 	ldr.w	r6, [r1], #4
 800a568:	d402      	bmi.n	800a570 <_printf_i+0x18c>
 800a56a:	065f      	lsls	r7, r3, #25
 800a56c:	bf48      	it	mi
 800a56e:	b2b6      	uxthmi	r6, r6
 800a570:	07df      	lsls	r7, r3, #31
 800a572:	bf48      	it	mi
 800a574:	f043 0320 	orrmi.w	r3, r3, #32
 800a578:	6029      	str	r1, [r5, #0]
 800a57a:	bf48      	it	mi
 800a57c:	6023      	strmi	r3, [r4, #0]
 800a57e:	b91e      	cbnz	r6, 800a588 <_printf_i+0x1a4>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	f023 0320 	bic.w	r3, r3, #32
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	2310      	movs	r3, #16
 800a58a:	e7a7      	b.n	800a4dc <_printf_i+0xf8>
 800a58c:	4824      	ldr	r0, [pc, #144]	; (800a620 <_printf_i+0x23c>)
 800a58e:	e7e4      	b.n	800a55a <_printf_i+0x176>
 800a590:	4615      	mov	r5, r2
 800a592:	e7bd      	b.n	800a510 <_printf_i+0x12c>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	6826      	ldr	r6, [r4, #0]
 800a598:	6961      	ldr	r1, [r4, #20]
 800a59a:	1d18      	adds	r0, r3, #4
 800a59c:	6028      	str	r0, [r5, #0]
 800a59e:	0635      	lsls	r5, r6, #24
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	d501      	bpl.n	800a5a8 <_printf_i+0x1c4>
 800a5a4:	6019      	str	r1, [r3, #0]
 800a5a6:	e002      	b.n	800a5ae <_printf_i+0x1ca>
 800a5a8:	0670      	lsls	r0, r6, #25
 800a5aa:	d5fb      	bpl.n	800a5a4 <_printf_i+0x1c0>
 800a5ac:	8019      	strh	r1, [r3, #0]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	6123      	str	r3, [r4, #16]
 800a5b2:	4615      	mov	r5, r2
 800a5b4:	e7bc      	b.n	800a530 <_printf_i+0x14c>
 800a5b6:	682b      	ldr	r3, [r5, #0]
 800a5b8:	1d1a      	adds	r2, r3, #4
 800a5ba:	602a      	str	r2, [r5, #0]
 800a5bc:	681d      	ldr	r5, [r3, #0]
 800a5be:	6862      	ldr	r2, [r4, #4]
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f7f5 fe1c 	bl	8000200 <memchr>
 800a5c8:	b108      	cbz	r0, 800a5ce <_printf_i+0x1ea>
 800a5ca:	1b40      	subs	r0, r0, r5
 800a5cc:	6060      	str	r0, [r4, #4]
 800a5ce:	6863      	ldr	r3, [r4, #4]
 800a5d0:	6123      	str	r3, [r4, #16]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d8:	e7aa      	b.n	800a530 <_printf_i+0x14c>
 800a5da:	6923      	ldr	r3, [r4, #16]
 800a5dc:	462a      	mov	r2, r5
 800a5de:	4649      	mov	r1, r9
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	47d0      	blx	sl
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d0ad      	beq.n	800a544 <_printf_i+0x160>
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	079b      	lsls	r3, r3, #30
 800a5ec:	d413      	bmi.n	800a616 <_printf_i+0x232>
 800a5ee:	68e0      	ldr	r0, [r4, #12]
 800a5f0:	9b03      	ldr	r3, [sp, #12]
 800a5f2:	4298      	cmp	r0, r3
 800a5f4:	bfb8      	it	lt
 800a5f6:	4618      	movlt	r0, r3
 800a5f8:	e7a6      	b.n	800a548 <_printf_i+0x164>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	4632      	mov	r2, r6
 800a5fe:	4649      	mov	r1, r9
 800a600:	4640      	mov	r0, r8
 800a602:	47d0      	blx	sl
 800a604:	3001      	adds	r0, #1
 800a606:	d09d      	beq.n	800a544 <_printf_i+0x160>
 800a608:	3501      	adds	r5, #1
 800a60a:	68e3      	ldr	r3, [r4, #12]
 800a60c:	9903      	ldr	r1, [sp, #12]
 800a60e:	1a5b      	subs	r3, r3, r1
 800a610:	42ab      	cmp	r3, r5
 800a612:	dcf2      	bgt.n	800a5fa <_printf_i+0x216>
 800a614:	e7eb      	b.n	800a5ee <_printf_i+0x20a>
 800a616:	2500      	movs	r5, #0
 800a618:	f104 0619 	add.w	r6, r4, #25
 800a61c:	e7f5      	b.n	800a60a <_printf_i+0x226>
 800a61e:	bf00      	nop
 800a620:	0800af59 	.word	0x0800af59
 800a624:	0800af6a 	.word	0x0800af6a

0800a628 <__sflush_r>:
 800a628:	898a      	ldrh	r2, [r1, #12]
 800a62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a62e:	4605      	mov	r5, r0
 800a630:	0710      	lsls	r0, r2, #28
 800a632:	460c      	mov	r4, r1
 800a634:	d458      	bmi.n	800a6e8 <__sflush_r+0xc0>
 800a636:	684b      	ldr	r3, [r1, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dc05      	bgt.n	800a648 <__sflush_r+0x20>
 800a63c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	dc02      	bgt.n	800a648 <__sflush_r+0x20>
 800a642:	2000      	movs	r0, #0
 800a644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	d0f9      	beq.n	800a642 <__sflush_r+0x1a>
 800a64e:	2300      	movs	r3, #0
 800a650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a654:	682f      	ldr	r7, [r5, #0]
 800a656:	6a21      	ldr	r1, [r4, #32]
 800a658:	602b      	str	r3, [r5, #0]
 800a65a:	d032      	beq.n	800a6c2 <__sflush_r+0x9a>
 800a65c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	075a      	lsls	r2, r3, #29
 800a662:	d505      	bpl.n	800a670 <__sflush_r+0x48>
 800a664:	6863      	ldr	r3, [r4, #4]
 800a666:	1ac0      	subs	r0, r0, r3
 800a668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a66a:	b10b      	cbz	r3, 800a670 <__sflush_r+0x48>
 800a66c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a66e:	1ac0      	subs	r0, r0, r3
 800a670:	2300      	movs	r3, #0
 800a672:	4602      	mov	r2, r0
 800a674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a676:	6a21      	ldr	r1, [r4, #32]
 800a678:	4628      	mov	r0, r5
 800a67a:	47b0      	blx	r6
 800a67c:	1c43      	adds	r3, r0, #1
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	d106      	bne.n	800a690 <__sflush_r+0x68>
 800a682:	6829      	ldr	r1, [r5, #0]
 800a684:	291d      	cmp	r1, #29
 800a686:	d82b      	bhi.n	800a6e0 <__sflush_r+0xb8>
 800a688:	4a29      	ldr	r2, [pc, #164]	; (800a730 <__sflush_r+0x108>)
 800a68a:	410a      	asrs	r2, r1
 800a68c:	07d6      	lsls	r6, r2, #31
 800a68e:	d427      	bmi.n	800a6e0 <__sflush_r+0xb8>
 800a690:	2200      	movs	r2, #0
 800a692:	6062      	str	r2, [r4, #4]
 800a694:	04d9      	lsls	r1, r3, #19
 800a696:	6922      	ldr	r2, [r4, #16]
 800a698:	6022      	str	r2, [r4, #0]
 800a69a:	d504      	bpl.n	800a6a6 <__sflush_r+0x7e>
 800a69c:	1c42      	adds	r2, r0, #1
 800a69e:	d101      	bne.n	800a6a4 <__sflush_r+0x7c>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b903      	cbnz	r3, 800a6a6 <__sflush_r+0x7e>
 800a6a4:	6560      	str	r0, [r4, #84]	; 0x54
 800a6a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6a8:	602f      	str	r7, [r5, #0]
 800a6aa:	2900      	cmp	r1, #0
 800a6ac:	d0c9      	beq.n	800a642 <__sflush_r+0x1a>
 800a6ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	d002      	beq.n	800a6bc <__sflush_r+0x94>
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f7ff fa92 	bl	8009be0 <_free_r>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	6360      	str	r0, [r4, #52]	; 0x34
 800a6c0:	e7c0      	b.n	800a644 <__sflush_r+0x1c>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b0      	blx	r6
 800a6c8:	1c41      	adds	r1, r0, #1
 800a6ca:	d1c8      	bne.n	800a65e <__sflush_r+0x36>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0c5      	beq.n	800a65e <__sflush_r+0x36>
 800a6d2:	2b1d      	cmp	r3, #29
 800a6d4:	d001      	beq.n	800a6da <__sflush_r+0xb2>
 800a6d6:	2b16      	cmp	r3, #22
 800a6d8:	d101      	bne.n	800a6de <__sflush_r+0xb6>
 800a6da:	602f      	str	r7, [r5, #0]
 800a6dc:	e7b1      	b.n	800a642 <__sflush_r+0x1a>
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	e7ad      	b.n	800a644 <__sflush_r+0x1c>
 800a6e8:	690f      	ldr	r7, [r1, #16]
 800a6ea:	2f00      	cmp	r7, #0
 800a6ec:	d0a9      	beq.n	800a642 <__sflush_r+0x1a>
 800a6ee:	0793      	lsls	r3, r2, #30
 800a6f0:	680e      	ldr	r6, [r1, #0]
 800a6f2:	bf08      	it	eq
 800a6f4:	694b      	ldreq	r3, [r1, #20]
 800a6f6:	600f      	str	r7, [r1, #0]
 800a6f8:	bf18      	it	ne
 800a6fa:	2300      	movne	r3, #0
 800a6fc:	eba6 0807 	sub.w	r8, r6, r7
 800a700:	608b      	str	r3, [r1, #8]
 800a702:	f1b8 0f00 	cmp.w	r8, #0
 800a706:	dd9c      	ble.n	800a642 <__sflush_r+0x1a>
 800a708:	6a21      	ldr	r1, [r4, #32]
 800a70a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a70c:	4643      	mov	r3, r8
 800a70e:	463a      	mov	r2, r7
 800a710:	4628      	mov	r0, r5
 800a712:	47b0      	blx	r6
 800a714:	2800      	cmp	r0, #0
 800a716:	dc06      	bgt.n	800a726 <__sflush_r+0xfe>
 800a718:	89a3      	ldrh	r3, [r4, #12]
 800a71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a71e:	81a3      	strh	r3, [r4, #12]
 800a720:	f04f 30ff 	mov.w	r0, #4294967295
 800a724:	e78e      	b.n	800a644 <__sflush_r+0x1c>
 800a726:	4407      	add	r7, r0
 800a728:	eba8 0800 	sub.w	r8, r8, r0
 800a72c:	e7e9      	b.n	800a702 <__sflush_r+0xda>
 800a72e:	bf00      	nop
 800a730:	dfbffffe 	.word	0xdfbffffe

0800a734 <_fflush_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	690b      	ldr	r3, [r1, #16]
 800a738:	4605      	mov	r5, r0
 800a73a:	460c      	mov	r4, r1
 800a73c:	b913      	cbnz	r3, 800a744 <_fflush_r+0x10>
 800a73e:	2500      	movs	r5, #0
 800a740:	4628      	mov	r0, r5
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	b118      	cbz	r0, 800a74e <_fflush_r+0x1a>
 800a746:	6a03      	ldr	r3, [r0, #32]
 800a748:	b90b      	cbnz	r3, 800a74e <_fflush_r+0x1a>
 800a74a:	f7fe ffef 	bl	800972c <__sinit>
 800a74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0f3      	beq.n	800a73e <_fflush_r+0xa>
 800a756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a758:	07d0      	lsls	r0, r2, #31
 800a75a:	d404      	bmi.n	800a766 <_fflush_r+0x32>
 800a75c:	0599      	lsls	r1, r3, #22
 800a75e:	d402      	bmi.n	800a766 <_fflush_r+0x32>
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f7ff fa2c 	bl	8009bbe <__retarget_lock_acquire_recursive>
 800a766:	4628      	mov	r0, r5
 800a768:	4621      	mov	r1, r4
 800a76a:	f7ff ff5d 	bl	800a628 <__sflush_r>
 800a76e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a770:	07da      	lsls	r2, r3, #31
 800a772:	4605      	mov	r5, r0
 800a774:	d4e4      	bmi.n	800a740 <_fflush_r+0xc>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	059b      	lsls	r3, r3, #22
 800a77a:	d4e1      	bmi.n	800a740 <_fflush_r+0xc>
 800a77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a77e:	f7ff fa1f 	bl	8009bc0 <__retarget_lock_release_recursive>
 800a782:	e7dd      	b.n	800a740 <_fflush_r+0xc>

0800a784 <__swhatbuf_r>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	460c      	mov	r4, r1
 800a788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a78c:	2900      	cmp	r1, #0
 800a78e:	b096      	sub	sp, #88	; 0x58
 800a790:	4615      	mov	r5, r2
 800a792:	461e      	mov	r6, r3
 800a794:	da0d      	bge.n	800a7b2 <__swhatbuf_r+0x2e>
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a79c:	f04f 0100 	mov.w	r1, #0
 800a7a0:	bf0c      	ite	eq
 800a7a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7a6:	2340      	movne	r3, #64	; 0x40
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	6031      	str	r1, [r6, #0]
 800a7ac:	602b      	str	r3, [r5, #0]
 800a7ae:	b016      	add	sp, #88	; 0x58
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	466a      	mov	r2, sp
 800a7b4:	f000 f862 	bl	800a87c <_fstat_r>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	dbec      	blt.n	800a796 <__swhatbuf_r+0x12>
 800a7bc:	9901      	ldr	r1, [sp, #4]
 800a7be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7c6:	4259      	negs	r1, r3
 800a7c8:	4159      	adcs	r1, r3
 800a7ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ce:	e7eb      	b.n	800a7a8 <__swhatbuf_r+0x24>

0800a7d0 <__smakebuf_r>:
 800a7d0:	898b      	ldrh	r3, [r1, #12]
 800a7d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7d4:	079d      	lsls	r5, r3, #30
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	460c      	mov	r4, r1
 800a7da:	d507      	bpl.n	800a7ec <__smakebuf_r+0x1c>
 800a7dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	6123      	str	r3, [r4, #16]
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	6163      	str	r3, [r4, #20]
 800a7e8:	b002      	add	sp, #8
 800a7ea:	bd70      	pop	{r4, r5, r6, pc}
 800a7ec:	ab01      	add	r3, sp, #4
 800a7ee:	466a      	mov	r2, sp
 800a7f0:	f7ff ffc8 	bl	800a784 <__swhatbuf_r>
 800a7f4:	9900      	ldr	r1, [sp, #0]
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff fa5d 	bl	8009cb8 <_malloc_r>
 800a7fe:	b948      	cbnz	r0, 800a814 <__smakebuf_r+0x44>
 800a800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a804:	059a      	lsls	r2, r3, #22
 800a806:	d4ef      	bmi.n	800a7e8 <__smakebuf_r+0x18>
 800a808:	f023 0303 	bic.w	r3, r3, #3
 800a80c:	f043 0302 	orr.w	r3, r3, #2
 800a810:	81a3      	strh	r3, [r4, #12]
 800a812:	e7e3      	b.n	800a7dc <__smakebuf_r+0xc>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	6020      	str	r0, [r4, #0]
 800a818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	9b00      	ldr	r3, [sp, #0]
 800a820:	6163      	str	r3, [r4, #20]
 800a822:	9b01      	ldr	r3, [sp, #4]
 800a824:	6120      	str	r0, [r4, #16]
 800a826:	b15b      	cbz	r3, 800a840 <__smakebuf_r+0x70>
 800a828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a82c:	4630      	mov	r0, r6
 800a82e:	f000 f837 	bl	800a8a0 <_isatty_r>
 800a832:	b128      	cbz	r0, 800a840 <__smakebuf_r+0x70>
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	f023 0303 	bic.w	r3, r3, #3
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	431d      	orrs	r5, r3
 800a844:	81a5      	strh	r5, [r4, #12]
 800a846:	e7cf      	b.n	800a7e8 <__smakebuf_r+0x18>

0800a848 <memmove>:
 800a848:	4288      	cmp	r0, r1
 800a84a:	b510      	push	{r4, lr}
 800a84c:	eb01 0402 	add.w	r4, r1, r2
 800a850:	d902      	bls.n	800a858 <memmove+0x10>
 800a852:	4284      	cmp	r4, r0
 800a854:	4623      	mov	r3, r4
 800a856:	d807      	bhi.n	800a868 <memmove+0x20>
 800a858:	1e43      	subs	r3, r0, #1
 800a85a:	42a1      	cmp	r1, r4
 800a85c:	d008      	beq.n	800a870 <memmove+0x28>
 800a85e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a862:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a866:	e7f8      	b.n	800a85a <memmove+0x12>
 800a868:	4402      	add	r2, r0
 800a86a:	4601      	mov	r1, r0
 800a86c:	428a      	cmp	r2, r1
 800a86e:	d100      	bne.n	800a872 <memmove+0x2a>
 800a870:	bd10      	pop	{r4, pc}
 800a872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a876:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a87a:	e7f7      	b.n	800a86c <memmove+0x24>

0800a87c <_fstat_r>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4d07      	ldr	r5, [pc, #28]	; (800a89c <_fstat_r+0x20>)
 800a880:	2300      	movs	r3, #0
 800a882:	4604      	mov	r4, r0
 800a884:	4608      	mov	r0, r1
 800a886:	4611      	mov	r1, r2
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	f7f7 fc60 	bl	800214e <_fstat>
 800a88e:	1c43      	adds	r3, r0, #1
 800a890:	d102      	bne.n	800a898 <_fstat_r+0x1c>
 800a892:	682b      	ldr	r3, [r5, #0]
 800a894:	b103      	cbz	r3, 800a898 <_fstat_r+0x1c>
 800a896:	6023      	str	r3, [r4, #0]
 800a898:	bd38      	pop	{r3, r4, r5, pc}
 800a89a:	bf00      	nop
 800a89c:	20000d1c 	.word	0x20000d1c

0800a8a0 <_isatty_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d06      	ldr	r5, [pc, #24]	; (800a8bc <_isatty_r+0x1c>)
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	4608      	mov	r0, r1
 800a8aa:	602b      	str	r3, [r5, #0]
 800a8ac:	f7f7 fc5f 	bl	800216e <_isatty>
 800a8b0:	1c43      	adds	r3, r0, #1
 800a8b2:	d102      	bne.n	800a8ba <_isatty_r+0x1a>
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	b103      	cbz	r3, 800a8ba <_isatty_r+0x1a>
 800a8b8:	6023      	str	r3, [r4, #0]
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
 800a8bc:	20000d1c 	.word	0x20000d1c

0800a8c0 <_sbrk_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4d06      	ldr	r5, [pc, #24]	; (800a8dc <_sbrk_r+0x1c>)
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	602b      	str	r3, [r5, #0]
 800a8cc:	f7f7 fc68 	bl	80021a0 <_sbrk>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d102      	bne.n	800a8da <_sbrk_r+0x1a>
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	b103      	cbz	r3, 800a8da <_sbrk_r+0x1a>
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	bd38      	pop	{r3, r4, r5, pc}
 800a8dc:	20000d1c 	.word	0x20000d1c

0800a8e0 <_realloc_r>:
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	460e      	mov	r6, r1
 800a8ea:	b921      	cbnz	r1, 800a8f6 <_realloc_r+0x16>
 800a8ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	f7ff b9e1 	b.w	8009cb8 <_malloc_r>
 800a8f6:	b92a      	cbnz	r2, 800a904 <_realloc_r+0x24>
 800a8f8:	f7ff f972 	bl	8009be0 <_free_r>
 800a8fc:	4625      	mov	r5, r4
 800a8fe:	4628      	mov	r0, r5
 800a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a904:	f000 f81b 	bl	800a93e <_malloc_usable_size_r>
 800a908:	4284      	cmp	r4, r0
 800a90a:	4607      	mov	r7, r0
 800a90c:	d802      	bhi.n	800a914 <_realloc_r+0x34>
 800a90e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a912:	d812      	bhi.n	800a93a <_realloc_r+0x5a>
 800a914:	4621      	mov	r1, r4
 800a916:	4640      	mov	r0, r8
 800a918:	f7ff f9ce 	bl	8009cb8 <_malloc_r>
 800a91c:	4605      	mov	r5, r0
 800a91e:	2800      	cmp	r0, #0
 800a920:	d0ed      	beq.n	800a8fe <_realloc_r+0x1e>
 800a922:	42bc      	cmp	r4, r7
 800a924:	4622      	mov	r2, r4
 800a926:	4631      	mov	r1, r6
 800a928:	bf28      	it	cs
 800a92a:	463a      	movcs	r2, r7
 800a92c:	f7ff f949 	bl	8009bc2 <memcpy>
 800a930:	4631      	mov	r1, r6
 800a932:	4640      	mov	r0, r8
 800a934:	f7ff f954 	bl	8009be0 <_free_r>
 800a938:	e7e1      	b.n	800a8fe <_realloc_r+0x1e>
 800a93a:	4635      	mov	r5, r6
 800a93c:	e7df      	b.n	800a8fe <_realloc_r+0x1e>

0800a93e <_malloc_usable_size_r>:
 800a93e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a942:	1f18      	subs	r0, r3, #4
 800a944:	2b00      	cmp	r3, #0
 800a946:	bfbc      	itt	lt
 800a948:	580b      	ldrlt	r3, [r1, r0]
 800a94a:	18c0      	addlt	r0, r0, r3
 800a94c:	4770      	bx	lr
	...

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
