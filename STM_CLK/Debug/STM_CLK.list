
STM_CLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008704  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080088b4  080088b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a74  08008a74  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a7c  08008a7c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000b70  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bd8  20000bd8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d629  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039ae  00000000  00000000  0003d704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019b8  00000000  00000000  000410b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001439  00000000  00000000  00042a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000542b  00000000  00000000  00043ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f3bc  00000000  00000000  000492d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa809  00000000  00000000  00068690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007904  00000000  00000000  00162e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0016a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800889c 	.word	0x0800889c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800889c 	.word	0x0800889c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
#include "lcd.h"

void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
  char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f005 fc55 	bl	8005e7e <HAL_UART_Transmit>

  HAL_StatusTypeDef res;
  for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
      res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f003 f8f1 	bl	80037d0 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
	  char msg[64];
	  snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f007 f8db 	bl	80077c0 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f005 fc2e 	bl	8005e7e <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
      } else {
	  HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f005 fc26 	bl	8005e7e <HAL_UART_Transmit>
  for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
      }
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f005 fc16 	bl	8005e7e <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	080088c4 	.word	0x080088c4
 8000660:	200003f8 	.word	0x200003f8
 8000664:	200002f8 	.word	0x200002f8
 8000668:	080088b4 	.word	0x080088b4
 800066c:	080088bc 	.word	0x080088bc
 8000670:	080088c0 	.word	0x080088c0

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef res;
  for(;;) {
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f003 f89d 	bl	80037d0 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
      if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
	break;
 80006a2:	bf00      	nop
  }

  uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
  uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

  uint8_t data_arr[4];
  data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
  data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
  data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
  data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

  res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f002 ff66 	bl	80035d4 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fa91 	bl	8001c34 <HAL_Delay>
  return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200002f8 	.word	0x200002f8

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  // 4-bit mode, 2 lines, 5x7 format
  LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
  // display & cursor home (keep this!)
  LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
  // display on, right shift, underline off, blink off
  LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
  // clear display (optional here)
  LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
  while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
      LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
      str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
  while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
  }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <init>:

void init() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  I2C_Scan();
 80007dc:	f7ff fede 	bl	800059c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 80007e0:	204e      	movs	r0, #78	; 0x4e
 80007e2:	f7ff ffc1 	bl	8000768 <LCD_Init>

  // set address to 0x00
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f7ff ff99 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <init+0x34>)
 80007f0:	204e      	movs	r0, #78	; 0x4e
 80007f2:	f7ff ffd6 	bl	80007a2 <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80007f6:	21c0      	movs	r1, #192	; 0xc0
 80007f8:	204e      	movs	r0, #78	; 0x4e
 80007fa:	f7ff ff91 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "  over I2C bus");
 80007fe:	4904      	ldr	r1, [pc, #16]	; (8000810 <init+0x38>)
 8000800:	204e      	movs	r0, #78	; 0x4e
 8000802:	f7ff ffce 	bl	80007a2 <LCD_SendString>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	080088dc 	.word	0x080088dc
 8000810:	080088ec 	.word	0x080088ec

08000814 <LCD_Clear>:
      LCD_SendCommand(LCD_ADDR, 0b11000000);
      LCD_SendString(LCD_ADDR, str);
    }
}
void LCD_Clear()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	204e      	movs	r0, #78	; 0x4e
 800081c:	f7ff ff80 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <LCD_Clear+0x28>)
 8000822:	204e      	movs	r0, #78	; 0x4e
 8000824:	f7ff ffbd 	bl	80007a2 <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000828:	21c0      	movs	r1, #192	; 0xc0
 800082a:	204e      	movs	r0, #78	; 0x4e
 800082c:	f7ff ff78 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 8000830:	4902      	ldr	r1, [pc, #8]	; (800083c <LCD_Clear+0x28>)
 8000832:	204e      	movs	r0, #78	; 0x4e
 8000834:	f7ff ffb5 	bl	80007a2 <LCD_SendString>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	080088fc 	.word	0x080088fc

08000840 <_write>:
/* USER CODE BEGIN Includes */
#include "lcd.h"
#include "flash.h"

int _write(int file, char *ptr, int len)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	b29a      	uxth	r2, r3
 8000850:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <_write+0x28>)
 8000858:	f005 fb11 	bl	8005e7e <HAL_UART_Transmit>
	return len;
 800085c:	687b      	ldr	r3, [r7, #4]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200003f8 	.word	0x200003f8

0800086c <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime;

	sTime.Hours = hh + 1;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	3301      	adds	r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = mm;
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ss;
 800088a:	797b      	ldrb	r3, [r7, #5]
 800088c:	73bb      	strb	r3, [r7, #14]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <set_time+0x38>)
 8000898:	f004 fb38 	bl	8004f0c <HAL_RTC_SetTime>
}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000034c 	.word	0x2000034c

080008a8 <set_alarm>:
void set_alarm(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	460b      	mov	r3, r1
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	4613      	mov	r3, r2
 80008b8:	717b      	strb	r3, [r7, #5]

	sAlarm.AlarmTime.Hours = hh;
 80008ba:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <set_alarm+0x88>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = mm;
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <set_alarm+0x88>)
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = ss;
 80008c6:	4a1a      	ldr	r2, [pc, #104]	; (8000930 <set_alarm+0x88>)
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <set_alarm+0x88>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <set_alarm+0x88>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	70da      	strb	r2, [r3, #3]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <set_alarm+0x88>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <set_alarm+0x88>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <set_alarm+0x88>)
 80008e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80008ea:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <set_alarm+0x88>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <set_alarm+0x88>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <set_alarm+0x88>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <set_alarm+0x88>)
 8000902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000908:	2201      	movs	r2, #1
 800090a:	4909      	ldr	r1, [pc, #36]	; (8000930 <set_alarm+0x88>)
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <set_alarm+0x8c>)
 800090e:	f004 fc1b 	bl	8005148 <HAL_RTC_SetAlarm_IT>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <set_alarm+0x74>
	{
		Error_Handler();
 8000918:	f000 fd2a 	bl	8001370 <Error_Handler>
	}
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 800091c:	2200      	movs	r2, #0
 800091e:	4904      	ldr	r1, [pc, #16]	; (8000930 <set_alarm+0x88>)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <set_alarm+0x8c>)
 8000922:	f004 fc11 	bl	8005148 <HAL_RTC_SetAlarm_IT>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000948 	.word	0x20000948
 8000934:	2000034c 	.word	0x2000034c

08000938 <set_date>:
void set_date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	4604      	mov	r4, r0
 8000940:	4608      	mov	r0, r1
 8000942:	4611      	mov	r1, r2
 8000944:	461a      	mov	r2, r3
 8000946:	4623      	mov	r3, r4
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	4603      	mov	r3, r0
 800094c:	71bb      	strb	r3, [r7, #6]
 800094e:	460b      	mov	r3, r1
 8000950:	717b      	strb	r3, [r7, #5]
 8000952:	4613      	mov	r3, r2
 8000954:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate;

	sDate.WeekDay = ww;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	733b      	strb	r3, [r7, #12]
	sDate.Month = mm;
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	737b      	strb	r3, [r7, #13]
	sDate.Date = dd;
 800095e:	797b      	ldrb	r3, [r7, #5]
 8000960:	73bb      	strb	r3, [r7, #14]
	sDate.Year = yy;
 8000962:	793b      	ldrb	r3, [r7, #4]
 8000964:	73fb      	strb	r3, [r7, #15]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2200      	movs	r2, #0
 800096c:	4619      	mov	r1, r3
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <set_date+0x44>)
 8000970:	f004 fb66 	bl	8005040 <HAL_RTC_SetDate>
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	2000034c 	.word	0x2000034c

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f001 f8e3 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f84f 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f000 fb39 	bl	8001004 <MX_GPIO_Init>
  MX_ETH_Init();
 8000992:	f000 f945 	bl	8000c20 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000996:	f000 fadd 	bl	8000f54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800099a:	f000 fb05 	bl	8000fa8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800099e:	f000 f98d 	bl	8000cbc <MX_I2C1_Init>
  MX_RTC_Init();
 80009a2:	f000 f9cb 	bl	8000d3c <MX_RTC_Init>
  MX_TIM2_Init();
 80009a6:	f000 fa5d 	bl	8000e64 <MX_TIM2_Init>
  MX_UART4_Init();
 80009aa:	f000 faa9 	bl	8000f00 <MX_UART4_Init>
  MX_ADC1_Init();
 80009ae:	f000 f8e5 	bl	8000b7c <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009b2:	f000 f8a7 	bl	8000b04 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <main+0x8c>)
 80009b8:	f001 f9a4 	bl	8001d04 <HAL_ADC_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
 80009bc:	2201      	movs	r2, #1
 80009be:	4914      	ldr	r1, [pc, #80]	; (8000a10 <main+0x90>)
 80009c0:	4814      	ldr	r0, [pc, #80]	; (8000a14 <main+0x94>)
 80009c2:	f005 fb33 	bl	800602c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
 80009c6:	2201      	movs	r2, #1
 80009c8:	4913      	ldr	r1, [pc, #76]	; (8000a18 <main+0x98>)
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <main+0x9c>)
 80009cc:	f005 fb2e 	bl	800602c <HAL_UART_Receive_IT>

  unsigned int value, addr = FLASH_USER_START_ADDR, cnt = 0;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <main+0xa0>)
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  unsigned char buf[30];
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80009d8:	2200      	movs	r2, #0
 80009da:	4912      	ldr	r1, [pc, #72]	; (8000a24 <main+0xa4>)
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <main+0xa8>)
 80009de:	f004 fbb3 	bl	8005148 <HAL_RTC_SetAlarm_IT>
	init();
 80009e2:	f7ff fef9 	bl	80007d8 <init>
	LCD_Clear();
 80009e6:	f7ff ff15 	bl	8000814 <LCD_Clear>
	set_date(RTC_WEEKDAY_MONDAY, 11, 8, 23);
 80009ea:	2317      	movs	r3, #23
 80009ec:	2208      	movs	r2, #8
 80009ee:	210b      	movs	r1, #11
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff ffa1 	bl	8000938 <set_date>
	set_time(14,10,0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210a      	movs	r1, #10
 80009fa:	200e      	movs	r0, #14
 80009fc:	f7ff ff36 	bl	800086c <set_time>
	set_alarm(0, 0, 5);
 8000a00:	2205      	movs	r2, #5
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff ff4f 	bl	80008a8 <set_alarm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a0a:	e7fe      	b.n	8000a0a <main+0x8a>
 8000a0c:	20000200 	.word	0x20000200
 8000a10:	20000084 	.word	0x20000084
 8000a14:	200003f8 	.word	0x200003f8
 8000a18:	20000085 	.word	0x20000085
 8000a1c:	200003b4 	.word	0x200003b4
 8000a20:	080c0000 	.word	0x080c0000
 8000a24:	20000948 	.word	0x20000948
 8000a28:	2000034c 	.word	0x2000034c

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f006 ffec 	bl	8007a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <SystemClock_Config+0xd0>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <SystemClock_Config+0xd0>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <SystemClock_Config+0xd0>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa4:	23a8      	movs	r3, #168	; 0xa8
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aac:	2307      	movs	r3, #7
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fb5b 	bl	8004170 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac0:	f000 fc56 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fdbc 	bl	8004660 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aee:	f000 fc3f 	bl	8001370 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3750      	adds	r7, #80	; 0x50
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	201c      	movs	r0, #28
 8000b0e:	f001 fe1c 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b12:	201c      	movs	r0, #28
 8000b14:	f001 fe35 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2029      	movs	r0, #41	; 0x29
 8000b1e:	f001 fe14 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b22:	2029      	movs	r0, #41	; 0x29
 8000b24:	f001 fe2d 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2017      	movs	r0, #23
 8000b2e:	f001 fe0c 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b32:	2017      	movs	r0, #23
 8000b34:	f001 fe25 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2012      	movs	r0, #18
 8000b3e:	f001 fe04 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b42:	2012      	movs	r0, #18
 8000b44:	f001 fe1d 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2027      	movs	r0, #39	; 0x27
 8000b4e:	f001 fdfc 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b52:	2027      	movs	r0, #39	; 0x27
 8000b54:	f001 fe15 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2034      	movs	r0, #52	; 0x34
 8000b5e:	f001 fdf4 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b62:	2034      	movs	r0, #52	; 0x34
 8000b64:	f001 fe0d 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2028      	movs	r0, #40	; 0x28
 8000b6e:	f001 fdec 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b72:	2028      	movs	r0, #40	; 0x28
 8000b74:	f001 fe05 	bl	8002782 <HAL_NVIC_EnableIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000b90:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <MX_ADC1_Init+0x9c>)
 8000b92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <MX_ADC1_Init+0xa0>)
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bde:	f001 f84d 	bl	8001c7c <HAL_ADC_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000be8:	f000 fbc2 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bec:	2303      	movs	r3, #3
 8000bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bfe:	f001 fa91 	bl	8002124 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c08:	f000 fbb2 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000200 	.word	0x20000200
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	0f000001 	.word	0x0f000001

08000c20 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_ETH_Init+0x84>)
 8000c26:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <MX_ETH_Init+0x88>)
 8000c28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_ETH_Init+0x8c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_ETH_Init+0x8c>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_ETH_Init+0x8c>)
 8000c38:	22e1      	movs	r2, #225	; 0xe1
 8000c3a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_ETH_Init+0x8c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_ETH_Init+0x8c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_ETH_Init+0x8c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_ETH_Init+0x84>)
 8000c50:	4a16      	ldr	r2, [pc, #88]	; (8000cac <MX_ETH_Init+0x8c>)
 8000c52:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_ETH_Init+0x84>)
 8000c56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c5a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_ETH_Init+0x84>)
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <MX_ETH_Init+0x90>)
 8000c60:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_ETH_Init+0x84>)
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_ETH_Init+0x94>)
 8000c66:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_ETH_Init+0x84>)
 8000c6a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c6e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_ETH_Init+0x84>)
 8000c72:	f001 fe33 	bl	80028dc <HAL_ETH_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c7c:	f000 fb78 	bl	8001370 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c80:	2238      	movs	r2, #56	; 0x38
 8000c82:	2100      	movs	r1, #0
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_ETH_Init+0x98>)
 8000c86:	f006 fec7 	bl	8007a18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_ETH_Init+0x98>)
 8000c8c:	2221      	movs	r2, #33	; 0x21
 8000c8e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_ETH_Init+0x98>)
 8000c92:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c96:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_ETH_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000248 	.word	0x20000248
 8000ca8:	40028000 	.word	0x40028000
 8000cac:	20000a7c 	.word	0x20000a7c
 8000cb0:	20000160 	.word	0x20000160
 8000cb4:	200000c0 	.word	0x200000c0
 8000cb8:	20000088 	.word	0x20000088

08000cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <MX_I2C1_Init+0x78>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <MX_I2C1_Init+0x7c>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000cfa:	f002 fb27 	bl	800334c <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d04:	f000 fb34 	bl	8001370 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4809      	ldr	r0, [pc, #36]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000d0c:	f003 f897 	bl	8003e3e <HAL_I2CEx_ConfigAnalogFilter>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000d16:	f000 fb2b 	bl	8001370 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_I2C1_Init+0x74>)
 8000d1e:	f003 f8ca 	bl	8003eb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d28:	f000 fb22 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200002f8 	.word	0x200002f8
 8000d34:	40005400 	.word	0x40005400
 8000d38:	000186a0 	.word	0x000186a0

08000d3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b090      	sub	sp, #64	; 0x40
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2228      	movs	r2, #40	; 0x28
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f006 fe5b 	bl	8007a18 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000d64:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <MX_RTC_Init+0x120>)
 8000d66:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000d6a:	2240      	movs	r2, #64	; 0x40
 8000d6c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000d70:	227f      	movs	r2, #127	; 0x7f
 8000d72:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d74:	4b38      	ldr	r3, [pc, #224]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d80:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d86:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d8c:	4832      	ldr	r0, [pc, #200]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000d8e:	f004 f847 	bl	8004e20 <HAL_RTC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d98:	f000 faea 	bl	8001370 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4824      	ldr	r0, [pc, #144]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000dc6:	f004 f8a1 	bl	8004f0c <HAL_RTC_SetTime>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000dd0:	f000 face 	bl	8001370 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	4818      	ldr	r0, [pc, #96]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000df6:	f004 f923 	bl	8005040 <HAL_RTC_SetDate>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000e00:	f000 fab6 	bl	8001370 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000e14:	2300      	movs	r3, #0
 8000e16:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_RTC_Init+0x124>)
 8000e22:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_RTC_Init+0x11c>)
 8000e40:	f004 f982 	bl	8005148 <HAL_RTC_SetAlarm_IT>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8000e4a:	f000 fa91 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3740      	adds	r7, #64	; 0x40
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000034c 	.word	0x2000034c
 8000e5c:	40002800 	.word	0x40002800
 8000e60:	80808000 	.word	0x80808000

08000e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_TIM2_Init+0x98>)
 8000e82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_TIM2_Init+0x98>)
 8000e8a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_TIM2_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_TIM2_Init+0x98>)
 8000e98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_TIM2_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_TIM2_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eaa:	4814      	ldr	r0, [pc, #80]	; (8000efc <MX_TIM2_Init+0x98>)
 8000eac:	f004 fb7f 	bl	80055ae <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000eb6:	f000 fa5b 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_TIM2_Init+0x98>)
 8000ec8:	f004 fcc8 	bl	800585c <HAL_TIM_ConfigClockSource>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ed2:	f000 fa4d 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_TIM2_Init+0x98>)
 8000ee4:	f004 feee 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eee:	f000 fa3f 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000036c 	.word	0x2000036c

08000f00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <MX_UART4_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f38:	f004 ff54 	bl	8005de4 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f42:	f000 fa15 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200003b4 	.word	0x200003b4
 8000f50:	40004c00 	.word	0x40004c00

08000f54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_USART3_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_USART3_UART_Init+0x4c>)
 8000f8c:	f004 ff2a 	bl	8005de4 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f000 f9eb 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200003f8 	.word	0x200003f8
 8000fa4:	40004800 	.word	0x40004800

08000fa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fec:	f002 ffa2 	bl	8003f34 <HAL_PCD_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ff6:	f000 f9bb 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000043c 	.word	0x2000043c

08001004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
 800101e:	4b52      	ldr	r3, [pc, #328]	; (8001168 <MX_GPIO_Init+0x164>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a51      	ldr	r2, [pc, #324]	; (8001168 <MX_GPIO_Init+0x164>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <MX_GPIO_Init+0x164>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_GPIO_Init+0x164>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <MX_GPIO_Init+0x164>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <MX_GPIO_Init+0x164>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b44      	ldr	r3, [pc, #272]	; (8001168 <MX_GPIO_Init+0x164>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a43      	ldr	r2, [pc, #268]	; (8001168 <MX_GPIO_Init+0x164>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b41      	ldr	r3, [pc, #260]	; (8001168 <MX_GPIO_Init+0x164>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <MX_GPIO_Init+0x164>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a3c      	ldr	r2, [pc, #240]	; (8001168 <MX_GPIO_Init+0x164>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <MX_GPIO_Init+0x164>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <MX_GPIO_Init+0x164>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a35      	ldr	r2, [pc, #212]	; (8001168 <MX_GPIO_Init+0x164>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <MX_GPIO_Init+0x164>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <MX_GPIO_Init+0x164>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a2e      	ldr	r2, [pc, #184]	; (8001168 <MX_GPIO_Init+0x164>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_GPIO_Init+0x164>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80010c8:	4828      	ldr	r0, [pc, #160]	; (800116c <MX_GPIO_Init+0x168>)
 80010ca:	f002 f8f3 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	4827      	ldr	r0, [pc, #156]	; (8001170 <MX_GPIO_Init+0x16c>)
 80010d4:	f002 f8ee 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010de:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4821      	ldr	r0, [pc, #132]	; (8001174 <MX_GPIO_Init+0x170>)
 80010f0:	f001 ff1c 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4817      	ldr	r0, [pc, #92]	; (800116c <MX_GPIO_Init+0x168>)
 800110e:	f001 ff0d 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001112:	2340      	movs	r3, #64	; 0x40
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4811      	ldr	r0, [pc, #68]	; (8001170 <MX_GPIO_Init+0x16c>)
 800112a:	f001 feff 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <MX_GPIO_Init+0x16c>)
 8001142:	f001 fef3 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <MX_GPIO_Init+0x174>)
 800115c:	f001 fee6 	bl	8002f2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020400 	.word	0x40020400
 8001170:	40021800 	.word	0x40021800
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00

0800117c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin);
 8001184:	f244 0181 	movw	r1, #16513	; 0x4081
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <HAL_RTC_AlarmAEventCallback+0x20>)
 800118a:	f002 f8ac 	bl	80032e6 <HAL_GPIO_TogglePin>
	printf("RINGRINGRINGRING!!!!!!!!!!!!!!!!!!!!\r\n");
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <HAL_RTC_AlarmAEventCallback+0x24>)
 8001190:	f006 fb0e 	bl	80077b0 <puts>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020400 	.word	0x40020400
 80011a0:	08008974 	.word	0x08008974

080011a4 <HAL_GPIO_EXTI_Callback>:
unsigned int stime, etime = 0, interval, ctime;
unsigned char buf[120];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
	//stime = HAL_GetTick();
	// joystick switch

	stime = HAL_GetTick();
 80011ae:	f000 fd35 	bl	8001c1c <HAL_GetTick>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_GPIO_EXTI_Callback+0x80>)
 80011b6:	6013      	str	r3, [r2, #0]
			interval = stime - etime;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_GPIO_EXTI_Callback+0x80>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_GPIO_EXTI_Callback+0x84>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_GPIO_EXTI_Callback+0x88>)
 80011c4:	6013      	str	r3, [r2, #0]
			etime = stime;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_GPIO_EXTI_Callback+0x80>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_GPIO_EXTI_Callback+0x84>)
 80011cc:	6013      	str	r3, [r2, #0]
			memset(buf,0, sizeof(buf));
 80011ce:	2278      	movs	r2, #120	; 0x78
 80011d0:	2100      	movs	r1, #0
 80011d2:	4817      	ldr	r0, [pc, #92]	; (8001230 <HAL_GPIO_EXTI_Callback+0x8c>)
 80011d4:	f006 fc20 	bl	8007a18 <memset>
	if(GPIO_Pin == USER_Btn_Pin)
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011de:	d11d      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0x78>
	{

//		interval = stime - etime;
//		etime = HAL_GetTick();
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80011e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e4:	4813      	ldr	r0, [pc, #76]	; (8001234 <HAL_GPIO_EXTI_Callback+0x90>)
 80011e6:	f002 f84d 	bl	8003284 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <HAL_GPIO_EXTI_Callback+0x56>
		{
			sprintf(buf, "rising\r\n");
 80011f0:	4911      	ldr	r1, [pc, #68]	; (8001238 <HAL_GPIO_EXTI_Callback+0x94>)
 80011f2:	480f      	ldr	r0, [pc, #60]	; (8001230 <HAL_GPIO_EXTI_Callback+0x8c>)
 80011f4:	f006 fb18 	bl	8007828 <siprintf>
			sprintf(buf, "fallin\r\nstime = %d\r\ninterval = %d\r\netime = %d\r\n---------\r\n", stime, interval, etime);
					HAL_UART_Transmit_IT(&huart3, buf, sizeof(buf));
		}

	}
}
 80011f8:	e010      	b.n	800121c <HAL_GPIO_EXTI_Callback+0x78>
			sprintf(buf, "fallin\r\nstime = %d\r\ninterval = %d\r\netime = %d\r\n---------\r\n", stime, interval, etime);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_GPIO_EXTI_Callback+0x80>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_GPIO_EXTI_Callback+0x88>)
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_GPIO_EXTI_Callback+0x84>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	460b      	mov	r3, r1
 800120a:	490c      	ldr	r1, [pc, #48]	; (800123c <HAL_GPIO_EXTI_Callback+0x98>)
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <HAL_GPIO_EXTI_Callback+0x8c>)
 800120e:	f006 fb0b 	bl	8007828 <siprintf>
					HAL_UART_Transmit_IT(&huart3, buf, sizeof(buf));
 8001212:	2278      	movs	r2, #120	; 0x78
 8001214:	4906      	ldr	r1, [pc, #24]	; (8001230 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001216:	480a      	ldr	r0, [pc, #40]	; (8001240 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001218:	f004 fec3 	bl	8005fa2 <HAL_UART_Transmit_IT>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200009f8 	.word	0x200009f8
 8001228:	200009fc 	.word	0x200009fc
 800122c:	20000a00 	.word	0x20000a00
 8001230:	20000a04 	.word	0x20000a04
 8001234:	40020800 	.word	0x40020800
 8001238:	0800899c 	.word	0x0800899c
 800123c:	080089a8 	.word	0x080089a8
 8001240:	200003f8 	.word	0x200003f8

08001244 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_ADC_ConvCpltCallback+0x34>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10c      	bne.n	8001270 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		adc1_val = HAL_ADC_GetValue(&hadc1);
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_ADC_ConvCpltCallback+0x38>)
 8001258:	f000 ff42 	bl	80020e0 <HAL_ADC_GetValue>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001262:	601a      	str	r2, [r3, #0]
		printf("ADC1: %d", adc1_val);
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <HAL_ADC_ConvCpltCallback+0x40>)
 800126c:	f006 fa3a 	bl	80076e4 <iprintf>
	}
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40012000 	.word	0x40012000
 800127c:	20000200 	.word	0x20000200
 8001280:	200009f4 	.word	0x200009f4
 8001284:	080089e4 	.word	0x080089e4

08001288 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	// From COM3 ->(UART3)ST(UART4) ->BLE
	if(huart->Instance == USART3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <HAL_UART_RxCpltCallback+0xc0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d141      	bne.n	800131e <HAL_UART_RxCpltCallback+0x96>
	{
		// received enter key
		if(rx3Data == '\r' || ble.cur_BLE_Index > 64)
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <HAL_UART_RxCpltCallback+0xc4>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b0d      	cmp	r3, #13
 80012a0:	d004      	beq.n	80012ac <HAL_UART_RxCpltCallback+0x24>
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 80012a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	d91c      	bls.n	80012e6 <HAL_UART_RxCpltCallback+0x5e>
		{
			printf("\r\n send following data to BLE \r\n");
 80012ac:	4829      	ldr	r0, [pc, #164]	; (8001354 <HAL_UART_RxCpltCallback+0xcc>)
 80012ae:	f006 fa7f 	bl	80077b0 <puts>
			printf(ble.bleBuffer);
 80012b2:	4827      	ldr	r0, [pc, #156]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 80012b4:	f006 fa16 	bl	80076e4 <iprintf>
			printf("\r\n");
 80012b8:	4827      	ldr	r0, [pc, #156]	; (8001358 <HAL_UART_RxCpltCallback+0xd0>)
 80012ba:	f006 fa79 	bl	80077b0 <puts>
			HAL_UART_Transmit(&huart4, (uint8_t*)&ble.bleBuffer, ble.cur_BLE_Index, 500);
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 80012c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ca:	4921      	ldr	r1, [pc, #132]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 80012cc:	4823      	ldr	r0, [pc, #140]	; (800135c <HAL_UART_RxCpltCallback+0xd4>)
 80012ce:	f004 fdd6 	bl	8005e7e <HAL_UART_Transmit>
			memset(ble.bleBuffer, 0, sizeof(ble.bleBuffer)/sizeof(ble.bleBuffer[0]));
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	2100      	movs	r1, #0
 80012d6:	481e      	ldr	r0, [pc, #120]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 80012d8:	f006 fb9e 	bl	8007a18 <memset>
			ble.cur_BLE_Index = 0;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		{
 80012e4:	e015      	b.n	8001312 <HAL_UART_RxCpltCallback+0x8a>
		}
		else
		{

			ble.bleBuffer[ble.cur_BLE_Index] = rx3Data;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 80012e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_UART_RxCpltCallback+0xc4>)
 80012f0:	7819      	ldrb	r1, [r3, #0]
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 80012f4:	5499      	strb	r1, [r3, r2]
			printf("collecting: %c\r\n", (char)rx3Data);
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_UART_RxCpltCallback+0xc4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <HAL_UART_RxCpltCallback+0xd8>)
 80012fe:	f006 f9f1 	bl	80076e4 <iprintf>
			ble.cur_BLE_Index++;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 8001304:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001308:	3301      	adds	r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_UART_RxCpltCallback+0xc8>)
 800130e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
 8001312:	2201      	movs	r2, #1
 8001314:	490d      	ldr	r1, [pc, #52]	; (800134c <HAL_UART_RxCpltCallback+0xc4>)
 8001316:	4813      	ldr	r0, [pc, #76]	; (8001364 <HAL_UART_RxCpltCallback+0xdc>)
 8001318:	f004 fe88 	bl	800602c <HAL_UART_Receive_IT>
		}
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
#endif
	}

}
 800131c:	e00f      	b.n	800133e <HAL_UART_RxCpltCallback+0xb6>
	else if(huart->Instance == UART4)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_UART_RxCpltCallback+0xe0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d10a      	bne.n	800133e <HAL_UART_RxCpltCallback+0xb6>
		HAL_UART_Transmit(&huart3, (uint8_t*)&rx4Data, sizeof(rx4Data), 100);
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	2201      	movs	r2, #1
 800132c:	490f      	ldr	r1, [pc, #60]	; (800136c <HAL_UART_RxCpltCallback+0xe4>)
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <HAL_UART_RxCpltCallback+0xdc>)
 8001330:	f004 fda5 	bl	8005e7e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
 8001334:	2201      	movs	r2, #1
 8001336:	490d      	ldr	r1, [pc, #52]	; (800136c <HAL_UART_RxCpltCallback+0xe4>)
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <HAL_UART_RxCpltCallback+0xd4>)
 800133a:	f004 fe77 	bl	800602c <HAL_UART_Receive_IT>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004800 	.word	0x40004800
 800134c:	20000084 	.word	0x20000084
 8001350:	20000970 	.word	0x20000970
 8001354:	080089f0 	.word	0x080089f0
 8001358:	08008a10 	.word	0x08008a10
 800135c:	200003b4 	.word	0x200003b4
 8001360:	08008a14 	.word	0x08008a14
 8001364:	200003f8 	.word	0x200003f8
 8001368:	40004c00 	.word	0x40004c00
 800136c:	20000085 	.word	0x20000085

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a24      	ldr	r2, [pc, #144]	; (800147c <HAL_ADC_MspInit+0xb0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d141      	bne.n	8001472 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_ADC_MspInit+0xb4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001446:	2303      	movs	r3, #3
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <HAL_ADC_MspInit+0xb8>)
 8001456:	f001 fd69 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800145a:	2308      	movs	r3, #8
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_ADC_MspInit+0xbc>)
 800146e:	f001 fd5d 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012000 	.word	0x40012000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020800 	.word	0x40020800
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	; 0x38
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a55      	ldr	r2, [pc, #340]	; (8001600 <HAL_ETH_MspInit+0x174>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	f040 80a4 	bne.w	80015f8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b50      	ldr	r3, [pc, #320]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	623b      	str	r3, [r7, #32]
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a4b      	ldr	r2, [pc, #300]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	4b45      	ldr	r3, [pc, #276]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a44      	ldr	r2, [pc, #272]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b42      	ldr	r3, [pc, #264]	; (8001604 <HAL_ETH_MspInit+0x178>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <HAL_ETH_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a3d      	ldr	r2, [pc, #244]	; (8001604 <HAL_ETH_MspInit+0x178>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_ETH_MspInit+0x178>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <HAL_ETH_MspInit+0x178>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a36      	ldr	r2, [pc, #216]	; (8001604 <HAL_ETH_MspInit+0x178>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <HAL_ETH_MspInit+0x178>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_ETH_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <HAL_ETH_MspInit+0x178>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HAL_ETH_MspInit+0x178>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_ETH_MspInit+0x178>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_ETH_MspInit+0x178>)
 8001562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_ETH_MspInit+0x178>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001574:	2332      	movs	r3, #50	; 0x32
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001584:	230b      	movs	r3, #11
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	481e      	ldr	r0, [pc, #120]	; (8001608 <HAL_ETH_MspInit+0x17c>)
 8001590:	f001 fccc 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001594:	2386      	movs	r3, #134	; 0x86
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015a4:	230b      	movs	r3, #11
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4817      	ldr	r0, [pc, #92]	; (800160c <HAL_ETH_MspInit+0x180>)
 80015b0:	f001 fcbc 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015c6:	230b      	movs	r3, #11
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <HAL_ETH_MspInit+0x184>)
 80015d2:	f001 fcab 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e8:	230b      	movs	r3, #11
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4808      	ldr	r0, [pc, #32]	; (8001614 <HAL_ETH_MspInit+0x188>)
 80015f4:	f001 fc9a 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40028000 	.word	0x40028000
 8001604:	40023800 	.word	0x40023800
 8001608:	40020800 	.word	0x40020800
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400
 8001614:	40021800 	.word	0x40021800

08001618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_I2C_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12c      	bne.n	8001694 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001656:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	480c      	ldr	r0, [pc, #48]	; (80016a4 <HAL_I2C_MspInit+0x8c>)
 8001674:	f001 fc5a 	bl	8002f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40005400 	.word	0x40005400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	2230      	movs	r2, #48	; 0x30
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f006 f9ad 	bl	8007a18 <memset>
  if(hrtc->Instance==RTC)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_RTC_MspInit+0x4c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d111      	bne.n	80016ec <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016c8:	2320      	movs	r3, #32
 80016ca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 f9e2 	bl	8004aa0 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80016e2:	f7ff fe45 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HAL_RTC_MspInit+0x50>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3738      	adds	r7, #56	; 0x38
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40002800 	.word	0x40002800
 80016f8:	42470e3c 	.word	0x42470e3c

080016fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170c:	d10d      	bne.n	800172a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a33      	ldr	r2, [pc, #204]	; (8001828 <HAL_UART_MspInit+0xec>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12d      	bne.n	80017ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_UART_MspInit+0xf0>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a31      	ldr	r2, [pc, #196]	; (800182c <HAL_UART_MspInit+0xf0>)
 8001768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_UART_MspInit+0xf0>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_UART_MspInit+0xf0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a2a      	ldr	r2, [pc, #168]	; (800182c <HAL_UART_MspInit+0xf0>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <HAL_UART_MspInit+0xf0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001796:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017a8:	2308      	movs	r3, #8
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4619      	mov	r1, r3
 80017b2:	481f      	ldr	r0, [pc, #124]	; (8001830 <HAL_UART_MspInit+0xf4>)
 80017b4:	f001 fbba 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017b8:	e031      	b.n	800181e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_UART_MspInit+0xf8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d12c      	bne.n	800181e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_UART_MspInit+0xf0>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_UART_MspInit+0xf0>)
 80017ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_UART_MspInit+0xf0>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_UART_MspInit+0xf0>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_UART_MspInit+0xf0>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6313      	str	r3, [r2, #48]	; 0x30
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_UART_MspInit+0xf0>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800180e:	2307      	movs	r3, #7
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <HAL_UART_MspInit+0xfc>)
 800181a:	f001 fb87 	bl	8002f2c <HAL_GPIO_Init>
}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40004c00 	.word	0x40004c00
 800182c:	40023800 	.word	0x40023800
 8001830:	40020800 	.word	0x40020800
 8001834:	40004800 	.word	0x40004800
 8001838:	40020c00 	.word	0x40020c00

0800183c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185c:	d13f      	bne.n	80018de <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_PCD_MspInit+0xac>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a20      	ldr	r2, [pc, #128]	; (80018e8 <HAL_PCD_MspInit+0xac>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_PCD_MspInit+0xac>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800187a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800188c:	230a      	movs	r3, #10
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4815      	ldr	r0, [pc, #84]	; (80018ec <HAL_PCD_MspInit+0xb0>)
 8001898:	f001 fb48 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800189c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	480e      	ldr	r0, [pc, #56]	; (80018ec <HAL_PCD_MspInit+0xb0>)
 80018b2:	f001 fb3b 	bl	8002f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_PCD_MspInit+0xac>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_PCD_MspInit+0xac>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6353      	str	r3, [r2, #52]	; 0x34
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_PCD_MspInit+0xac>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_PCD_MspInit+0xac>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_PCD_MspInit+0xac>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	; 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x4>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler+0x4>

0800190e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 f95a 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <ADC_IRQHandler+0x10>)
 800194a:	f000 fab9 	bl	8001ec0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000200 	.word	0x20000200

08001958 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800195c:	2080      	movs	r0, #128	; 0x80
 800195e:	f001 fcdd 	bl	800331c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <TIM2_IRQHandler+0x10>)
 800196e:	f003 fe6d 	bl	800564c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000036c 	.word	0x2000036c

0800197c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <USART3_IRQHandler+0x10>)
 8001982:	f004 fb83 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200003f8 	.word	0x200003f8

08001990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001994:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001998:	f001 fcc0 	bl	800331c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <RTC_Alarm_IRQHandler+0x10>)
 80019a6:	f003 fd11 	bl	80053cc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000034c 	.word	0x2000034c

080019b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <UART4_IRQHandler+0x10>)
 80019ba:	f004 fb67 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200003b4 	.word	0x200003b4

080019c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019da:	f3af 8000 	nop.w
 80019de:	4601      	mov	r1, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf0      	blt.n	80019da <_read+0x12>
  }

  return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_isatty>:

int _isatty(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f006 f80a 	bl	8007ab4 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20030000 	.word	0x20030000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20000a84 	.word	0x20000a84
 8001ad4:	20000bd8 	.word	0x20000bd8

08001ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b02:	490e      	ldr	r1, [pc, #56]	; (8001b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b18:	4c0b      	ldr	r4, [pc, #44]	; (8001b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b26:	f7ff ffd7 	bl	8001ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f005 ffc9 	bl	8007ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7fe ff27 	bl	8000980 <main>
  bx  lr    
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b40:	08008a84 	.word	0x08008a84
  ldr r2, =_sbss
 8001b44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b48:	20000bd8 	.word	0x20000bd8

08001b4c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <CAN1_RX0_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_Init+0x40>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_Init+0x40>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x40>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 fddb 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fbfa 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fdf3 	bl	800279e <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 fdbb 	bl	800274a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000a88 	.word	0x20000a88

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000a88 	.word	0x20000a88

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008

08001c7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e033      	b.n	8001cfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fb96 	bl	80013cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d118      	bne.n	8001cec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cc2:	f023 0302 	bic.w	r3, r3, #2
 8001cc6:	f043 0202 	orr.w	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fb5a 	bl	8002388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cea:	e001      	b.n	8001cf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Start_IT+0x1a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e0bd      	b.n	8001e9a <HAL_ADC_Start_IT+0x196>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d018      	beq.n	8001d66 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d44:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <HAL_ADC_Start_IT+0x1a4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_ADC_Start_IT+0x1a8>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	0c9a      	lsrs	r2, r3, #18
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d58:	e002      	b.n	8001d60 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	f040 8085 	bne.w	8001e80 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db4:	d106      	bne.n	8001dc4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f023 0206 	bic.w	r2, r3, #6
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
 8001dc2:	e002      	b.n	8001dca <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd2:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <HAL_ADC_Start_IT+0x1ac>)
 8001dd4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dde:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dee:	f043 0320 	orr.w	r3, r3, #32
 8001df2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d12a      	bne.n	8001e56 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2b      	ldr	r2, [pc, #172]	; (8001eb4 <HAL_ADC_Start_IT+0x1b0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d015      	beq.n	8001e36 <HAL_ADC_Start_IT+0x132>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <HAL_ADC_Start_IT+0x1b4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_Start_IT+0x11c>
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_ADC_Start_IT+0x1ac>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00a      	beq.n	8001e36 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <HAL_ADC_Start_IT+0x1b8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d136      	bne.n	8001e98 <HAL_ADC_Start_IT+0x194>
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_ADC_Start_IT+0x1ac>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d130      	bne.n	8001e98 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d129      	bne.n	8001e98 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e020      	b.n	8001e98 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_ADC_Start_IT+0x1b0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d11b      	bne.n	8001e98 <HAL_ADC_Start_IT+0x194>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d114      	bne.n	8001e98 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	e00b      	b.n	8001e98 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f043 0210 	orr.w	r2, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	40012300 	.word	0x40012300
 8001eb4:	40012000 	.word	0x40012000
 8001eb8:	40012100 	.word	0x40012100
 8001ebc:	40012200 	.word	0x40012200

08001ec0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d049      	beq.n	8001f8a <HAL_ADC_IRQHandler+0xca>
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d046      	beq.n	8001f8a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d12b      	bne.n	8001f7a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d127      	bne.n	8001f7a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d119      	bne.n	8001f7a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0220 	bic.w	r2, r2, #32
 8001f54:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff f962 	bl	8001244 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0212 	mvn.w	r2, #18
 8001f88:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d057      	beq.n	8002050 <HAL_ADC_IRQHandler+0x190>
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d054      	beq.n	8002050 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d139      	bne.n	8002040 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d12b      	bne.n	8002040 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d124      	bne.n	8002040 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11d      	bne.n	8002040 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002008:	2b00      	cmp	r3, #0
 800200a:	d119      	bne.n	8002040 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800201a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fa9d 	bl	8002580 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f06f 020c 	mvn.w	r2, #12
 800204e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <HAL_ADC_IRQHandler+0x1d6>
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d014      	beq.n	8002096 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10d      	bne.n	8002096 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f837 	bl	80020fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0201 	mvn.w	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d015      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x218>
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f043 0202 	orr.w	r2, r3, #2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0220 	mvn.w	r2, #32
 80020c6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f820 	bl	800210e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0220 	mvn.w	r2, #32
 80020d6:	601a      	str	r2, [r3, #0]
  }
}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1c>
 800213c:	2302      	movs	r3, #2
 800213e:	e113      	b.n	8002368 <HAL_ADC_ConfigChannel+0x244>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b09      	cmp	r3, #9
 800214e:	d925      	bls.n	800219c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	3b1e      	subs	r3, #30
 8002166:	2207      	movs	r2, #7
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43da      	mvns	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	400a      	ands	r2, r1
 8002174:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68d9      	ldr	r1, [r3, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	4603      	mov	r3, r0
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4403      	add	r3, r0
 800218e:	3b1e      	subs	r3, #30
 8002190:	409a      	lsls	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	e022      	b.n	80021e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6919      	ldr	r1, [r3, #16]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	2207      	movs	r2, #7
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4403      	add	r3, r0
 80021d8:	409a      	lsls	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d824      	bhi.n	8002234 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	3b05      	subs	r3, #5
 80021fc:	221f      	movs	r2, #31
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3b05      	subs	r3, #5
 8002226:	fa00 f203 	lsl.w	r2, r0, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
 8002232:	e04c      	b.n	80022ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d824      	bhi.n	8002286 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b23      	subs	r3, #35	; 0x23
 800224e:	221f      	movs	r2, #31
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	400a      	ands	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4618      	mov	r0, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b23      	subs	r3, #35	; 0x23
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
 8002284:	e023      	b.n	80022ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	3b41      	subs	r3, #65	; 0x41
 8002298:	221f      	movs	r2, #31
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	400a      	ands	r2, r1
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4618      	mov	r0, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	3b41      	subs	r3, #65	; 0x41
 80022c2:	fa00 f203 	lsl.w	r2, r0, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_ADC_ConfigChannel+0x250>)
 80022d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a28      	ldr	r2, [pc, #160]	; (8002378 <HAL_ADC_ConfigChannel+0x254>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d10f      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1d8>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d10b      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <HAL_ADC_ConfigChannel+0x254>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d12b      	bne.n	800235e <HAL_ADC_ConfigChannel+0x23a>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_ADC_ConfigChannel+0x258>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <HAL_ADC_ConfigChannel+0x1f4>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b11      	cmp	r3, #17
 8002316:	d122      	bne.n	800235e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <HAL_ADC_ConfigChannel+0x258>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d111      	bne.n	800235e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_ADC_ConfigChannel+0x25c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_ADC_ConfigChannel+0x260>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	0c9a      	lsrs	r2, r3, #18
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002350:	e002      	b.n	8002358 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40012300 	.word	0x40012300
 8002378:	40012000 	.word	0x40012000
 800237c:	10000012 	.word	0x10000012
 8002380:	20000000 	.word	0x20000000
 8002384:	431bde83 	.word	0x431bde83

08002388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002390:	4b79      	ldr	r3, [pc, #484]	; (8002578 <ADC_Init+0x1f0>)
 8002392:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	021a      	lsls	r2, r3, #8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	4a58      	ldr	r2, [pc, #352]	; (800257c <ADC_Init+0x1f4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d022      	beq.n	8002466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800242e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e00f      	b.n	8002486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002484:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0202 	bic.w	r2, r2, #2
 8002494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6899      	ldr	r1, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7e1b      	ldrb	r3, [r3, #24]
 80024a0:	005a      	lsls	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01b      	beq.n	80024ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	3b01      	subs	r3, #1
 80024e0:	035a      	lsls	r2, r3, #13
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	e007      	b.n	80024fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	3b01      	subs	r3, #1
 8002518:	051a      	lsls	r2, r3, #20
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6899      	ldr	r1, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800253e:	025a      	lsls	r2, r3, #9
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	029a      	lsls	r2, r3, #10
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40012300 	.word	0x40012300
 800257c:	0f000001 	.word	0x0f000001

08002580 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff29 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff3e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff31 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffa2 	bl	80026f0 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fa2a 	bl	8001c1c <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d008      	beq.n	80027e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e052      	b.n	800288e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0216 	bic.w	r2, r2, #22
 80027f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002806:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d103      	bne.n	8002818 <HAL_DMA_Abort+0x62>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0208 	bic.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002838:	e013      	b.n	8002862 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800283a:	f7ff f9ef 	bl	8001c1c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b05      	cmp	r3, #5
 8002846:	d90c      	bls.n	8002862 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e015      	b.n	800288e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e4      	bne.n	800283a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	223f      	movs	r2, #63	; 0x3f
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e00c      	b.n	80028ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2205      	movs	r2, #5
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06c      	b.n	80029c8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2223      	movs	r2, #35	; 0x23
 80028fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fe fdc3 	bl	800148c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_ETH_Init+0xf4>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <HAL_ETH_Init+0xf4>)
 8002910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_ETH_Init+0xf4>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002922:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <HAL_ETH_Init+0xf8>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <HAL_ETH_Init+0xf8>)
 8002928:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800292c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800292e:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_ETH_Init+0xf8>)
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4927      	ldr	r1, [pc, #156]	; (80029d4 <HAL_ETH_Init+0xf8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_ETH_Init+0xf8>)
 800293e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002956:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002958:	f7ff f960 	bl	8001c1c <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800295e:	e011      	b.n	8002984 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002960:	f7ff f95c 	bl	8001c1c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800296e:	d909      	bls.n	8002984 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2204      	movs	r2, #4
 8002974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	22e0      	movs	r2, #224	; 0xe0
 800297c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e021      	b.n	80029c8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e4      	bne.n	8002960 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f958 	bl	8002c4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f9ff 	bl	8002da0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa55 	bl	8002e52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	461a      	mov	r2, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f9bd 	bl	8002d30 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2210      	movs	r2, #16
 80029c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40013800 	.word	0x40013800

080029d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <ETH_SetMACConfig+0x15c>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	7c1b      	ldrb	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <ETH_SetMACConfig+0x28>
 80029fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029fe:	e000      	b.n	8002a02 <ETH_SetMACConfig+0x2a>
 8002a00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	7c5b      	ldrb	r3, [r3, #17]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <ETH_SetMACConfig+0x38>
 8002a0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a0e:	e000      	b.n	8002a12 <ETH_SetMACConfig+0x3a>
 8002a10:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a12:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	7fdb      	ldrb	r3, [r3, #31]
 8002a1e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a20:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	7f92      	ldrb	r2, [r2, #30]
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	d102      	bne.n	8002a36 <ETH_SetMACConfig+0x5e>
 8002a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a34:	e000      	b.n	8002a38 <ETH_SetMACConfig+0x60>
 8002a36:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	7f1b      	ldrb	r3, [r3, #28]
 8002a3e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a40:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	791b      	ldrb	r3, [r3, #4]
 8002a4c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	d102      	bne.n	8002a60 <ETH_SetMACConfig+0x88>
 8002a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a5e:	e000      	b.n	8002a62 <ETH_SetMACConfig+0x8a>
 8002a60:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	7bdb      	ldrb	r3, [r3, #15]
 8002a68:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a6a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a78:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7ff f8ce 	bl	8001c34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002abe:	2a00      	cmp	r2, #0
 8002ac0:	d101      	bne.n	8002ac6 <ETH_SetMACConfig+0xee>
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	e000      	b.n	8002ac8 <ETH_SetMACConfig+0xf0>
 8002ac6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ac8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ace:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002ad6:	2a01      	cmp	r2, #1
 8002ad8:	d101      	bne.n	8002ade <ETH_SetMACConfig+0x106>
 8002ada:	2208      	movs	r2, #8
 8002adc:	e000      	b.n	8002ae0 <ETH_SetMACConfig+0x108>
 8002ade:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ae0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ae8:	2a01      	cmp	r2, #1
 8002aea:	d101      	bne.n	8002af0 <ETH_SetMACConfig+0x118>
 8002aec:	2204      	movs	r2, #4
 8002aee:	e000      	b.n	8002af2 <ETH_SetMACConfig+0x11a>
 8002af0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002af2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	d101      	bne.n	8002b02 <ETH_SetMACConfig+0x12a>
 8002afe:	2202      	movs	r2, #2
 8002b00:	e000      	b.n	8002b04 <ETH_SetMACConfig+0x12c>
 8002b02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7ff f889 	bl	8001c34 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	ff20810f 	.word	0xff20810f

08002b38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <ETH_SetDMAConfig+0x110>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	7b1b      	ldrb	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <ETH_SetDMAConfig+0x2c>
 8002b5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b62:	e000      	b.n	8002b66 <ETH_SetDMAConfig+0x2e>
 8002b64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	7b5b      	ldrb	r3, [r3, #13]
 8002b6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	7f52      	ldrb	r2, [r2, #29]
 8002b72:	2a00      	cmp	r2, #0
 8002b74:	d102      	bne.n	8002b7c <ETH_SetDMAConfig+0x44>
 8002b76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b7a:	e000      	b.n	8002b7e <ETH_SetDMAConfig+0x46>
 8002b7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	7b9b      	ldrb	r3, [r3, #14]
 8002b84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	7f1b      	ldrb	r3, [r3, #28]
 8002b92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	7f9b      	ldrb	r3, [r3, #30]
 8002b9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ba2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002baa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bac:	4313      	orrs	r3, r2
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7ff f830 	bl	8001c34 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	791b      	ldrb	r3, [r3, #4]
 8002be6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002bf2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bf8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7ff f801 	bl	8001c34 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	f8de3f23 	.word	0xf8de3f23

08002c4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b0a6      	sub	sp, #152	; 0x98
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c60:	2300      	movs	r3, #0
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fe86 	bl	80029d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d00:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff08 	bl	8002b38 <ETH_SetDMAConfig>
}
 8002d28:	bf00      	nop
 8002d2a:	3798      	adds	r7, #152	; 0x98
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3305      	adds	r3, #5
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	3204      	adds	r2, #4
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <ETH_MACAddressConfig+0x68>)
 8002d52:	4413      	add	r3, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3303      	adds	r3, #3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	061a      	lsls	r2, r3, #24
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3302      	adds	r3, #2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	4313      	orrs	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <ETH_MACAddressConfig+0x6c>)
 8002d82:	4413      	add	r3, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40028040 	.word	0x40028040
 8002d9c:	40028044 	.word	0x40028044

08002da0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e03e      	b.n	8002e2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68d9      	ldr	r1, [r3, #12]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	3206      	adds	r2, #6
 8002de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d80c      	bhi.n	8002e10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68d9      	ldr	r1, [r3, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	e004      	b.n	8002e1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d9bd      	bls.n	8002dae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e44:	611a      	str	r2, [r3, #16]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e046      	b.n	8002eee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6919      	ldr	r1, [r3, #16]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2200      	movs	r2, #0
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002ea4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	3212      	adds	r2, #18
 8002eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d80c      	bhi.n	8002ede <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6919      	ldr	r1, [r3, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	e004      	b.n	8002ee8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3301      	adds	r3, #1
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d9b5      	bls.n	8002e60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1e:	60da      	str	r2, [r3, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e177      	b.n	8003238 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 8166 	bne.w	8003232 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0201 	and.w	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d017      	beq.n	800301c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d123      	bne.n	8003070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	08da      	lsrs	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3208      	adds	r2, #8
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80c0 	beq.w	8003232 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a65      	ldr	r2, [pc, #404]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b63      	ldr	r3, [pc, #396]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ce:	4a61      	ldr	r2, [pc, #388]	; (8003254 <HAL_GPIO_Init+0x328>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a58      	ldr	r2, [pc, #352]	; (8003258 <HAL_GPIO_Init+0x32c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d037      	beq.n	800316a <HAL_GPIO_Init+0x23e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a57      	ldr	r2, [pc, #348]	; (800325c <HAL_GPIO_Init+0x330>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d031      	beq.n	8003166 <HAL_GPIO_Init+0x23a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a56      	ldr	r2, [pc, #344]	; (8003260 <HAL_GPIO_Init+0x334>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02b      	beq.n	8003162 <HAL_GPIO_Init+0x236>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a55      	ldr	r2, [pc, #340]	; (8003264 <HAL_GPIO_Init+0x338>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d025      	beq.n	800315e <HAL_GPIO_Init+0x232>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_GPIO_Init+0x33c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <HAL_GPIO_Init+0x22e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_GPIO_Init+0x340>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x22a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_GPIO_Init+0x344>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x226>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a51      	ldr	r2, [pc, #324]	; (8003274 <HAL_GPIO_Init+0x348>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x222>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_GPIO_Init+0x34c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x21e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_GPIO_Init+0x350>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x21a>
 8003142:	2309      	movs	r3, #9
 8003144:	e012      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003146:	230a      	movs	r3, #10
 8003148:	e010      	b.n	800316c <HAL_GPIO_Init+0x240>
 800314a:	2308      	movs	r3, #8
 800314c:	e00e      	b.n	800316c <HAL_GPIO_Init+0x240>
 800314e:	2307      	movs	r3, #7
 8003150:	e00c      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003152:	2306      	movs	r3, #6
 8003154:	e00a      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003156:	2305      	movs	r3, #5
 8003158:	e008      	b.n	800316c <HAL_GPIO_Init+0x240>
 800315a:	2304      	movs	r3, #4
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x240>
 800315e:	2303      	movs	r3, #3
 8003160:	e004      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003162:	2302      	movs	r3, #2
 8003164:	e002      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_GPIO_Init+0x240>
 800316a:	2300      	movs	r3, #0
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f002 0203 	and.w	r2, r2, #3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4093      	lsls	r3, r2
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317c:	4935      	ldr	r1, [pc, #212]	; (8003254 <HAL_GPIO_Init+0x328>)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	3302      	adds	r3, #2
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_GPIO_Init+0x354>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d8:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_GPIO_Init+0x354>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_GPIO_Init+0x354>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_GPIO_Init+0x354>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	f67f ae84 	bls.w	8002f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	40013800 	.word	0x40013800
 8003258:	40020000 	.word	0x40020000
 800325c:	40020400 	.word	0x40020400
 8003260:	40020800 	.word	0x40020800
 8003264:	40020c00 	.word	0x40020c00
 8003268:	40021000 	.word	0x40021000
 800326c:	40021400 	.word	0x40021400
 8003270:	40021800 	.word	0x40021800
 8003274:	40021c00 	.word	0x40021c00
 8003278:	40022000 	.word	0x40022000
 800327c:	40022400 	.word	0x40022400
 8003280:	40013c00 	.word	0x40013c00

08003284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e001      	b.n	80032a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032f8:	887a      	ldrh	r2, [r7, #2]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	041a      	lsls	r2, r3, #16
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43d9      	mvns	r1, r3
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	400b      	ands	r3, r1
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	619a      	str	r2, [r3, #24]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd ff32 	bl	80011a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40013c00 	.word	0x40013c00

0800334c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e12b      	b.n	80035b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe f950 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033b0:	f001 fb4e 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a81      	ldr	r2, [pc, #516]	; (80035c0 <HAL_I2C_Init+0x274>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d807      	bhi.n	80033d0 <HAL_I2C_Init+0x84>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a80      	ldr	r2, [pc, #512]	; (80035c4 <HAL_I2C_Init+0x278>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e006      	b.n	80033de <HAL_I2C_Init+0x92>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a7d      	ldr	r2, [pc, #500]	; (80035c8 <HAL_I2C_Init+0x27c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf94      	ite	ls
 80033d8:	2301      	movls	r3, #1
 80033da:	2300      	movhi	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0e7      	b.n	80035b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a78      	ldr	r2, [pc, #480]	; (80035cc <HAL_I2C_Init+0x280>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0c9b      	lsrs	r3, r3, #18
 80033f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a6a      	ldr	r2, [pc, #424]	; (80035c0 <HAL_I2C_Init+0x274>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d802      	bhi.n	8003420 <HAL_I2C_Init+0xd4>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3301      	adds	r3, #1
 800341e:	e009      	b.n	8003434 <HAL_I2C_Init+0xe8>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_I2C_Init+0x284>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	3301      	adds	r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	495c      	ldr	r1, [pc, #368]	; (80035c0 <HAL_I2C_Init+0x274>)
 8003450:	428b      	cmp	r3, r1
 8003452:	d819      	bhi.n	8003488 <HAL_I2C_Init+0x13c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e59      	subs	r1, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003462:	1c59      	adds	r1, r3, #1
 8003464:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003468:	400b      	ands	r3, r1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_I2C_Init+0x138>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e59      	subs	r1, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fbb1 f3f3 	udiv	r3, r1, r3
 800347c:	3301      	adds	r3, #1
 800347e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003482:	e051      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003484:	2304      	movs	r3, #4
 8003486:	e04f      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <HAL_I2C_Init+0x168>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	440b      	add	r3, r1
 800349e:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e012      	b.n	80034da <HAL_I2C_Init+0x18e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Init+0x196>
 80034de:	2301      	movs	r3, #1
 80034e0:	e022      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10e      	bne.n	8003508 <HAL_I2C_Init+0x1bc>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1e58      	subs	r0, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	440b      	add	r3, r1
 80034f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003506:	e00f      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1e58      	subs	r0, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	0099      	lsls	r1, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	fbb0 f3f3 	udiv	r3, r0, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	6809      	ldr	r1, [r1, #0]
 800352c:	4313      	orrs	r3, r2
 800352e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003556:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6911      	ldr	r1, [r2, #16]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	4311      	orrs	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	000186a0 	.word	0x000186a0
 80035c4:	001e847f 	.word	0x001e847f
 80035c8:	003d08ff 	.word	0x003d08ff
 80035cc:	431bde83 	.word	0x431bde83
 80035d0:	10624dd3 	.word	0x10624dd3

080035d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	461a      	mov	r2, r3
 80035e0:	460b      	mov	r3, r1
 80035e2:	817b      	strh	r3, [r7, #10]
 80035e4:	4613      	mov	r3, r2
 80035e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e8:	f7fe fb18 	bl	8001c1c <HAL_GetTick>
 80035ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	f040 80e0 	bne.w	80037bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2319      	movs	r3, #25
 8003602:	2201      	movs	r2, #1
 8003604:	4970      	ldr	r1, [pc, #448]	; (80037c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fa92 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
 8003614:	e0d3      	b.n	80037be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_I2C_Master_Transmit+0x50>
 8003620:	2302      	movs	r3, #2
 8003622:	e0cc      	b.n	80037be <HAL_I2C_Master_Transmit+0x1ea>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d007      	beq.n	800364a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003658:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2221      	movs	r2, #33	; 0x21
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2210      	movs	r2, #16
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	893a      	ldrh	r2, [r7, #8]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_I2C_Master_Transmit+0x1f8>)
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800368c:	8979      	ldrh	r1, [r7, #10]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	6a3a      	ldr	r2, [r7, #32]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f9ca 	bl	8003a2c <I2C_MasterRequestWrite>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e08d      	b.n	80037be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036b8:	e066      	b.n	8003788 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	6a39      	ldr	r1, [r7, #32]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fb0c 	bl	8003cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d107      	bne.n	80036e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06b      	b.n	80037be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b04      	cmp	r3, #4
 8003722:	d11b      	bne.n	800375c <HAL_I2C_Master_Transmit+0x188>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d017      	beq.n	800375c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	6a39      	ldr	r1, [r7, #32]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fafc 	bl	8003d5e <I2C_WaitOnBTFFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	2b04      	cmp	r3, #4
 8003772:	d107      	bne.n	8003784 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003782:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e01a      	b.n	80037be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	d194      	bne.n	80036ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	00100002 	.word	0x00100002
 80037cc:	ffff0000 	.word	0xffff0000

080037d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	460b      	mov	r3, r1
 80037de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80037e0:	f7fe fa1c 	bl	8001c1c <HAL_GetTick>
 80037e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	f040 8111 	bne.w	8003a1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2319      	movs	r3, #25
 80037fe:	2201      	movs	r2, #1
 8003800:	4988      	ldr	r1, [pc, #544]	; (8003a24 <HAL_I2C_IsDeviceReady+0x254>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f994 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	e104      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_I2C_IsDeviceReady+0x50>
 800381c:	2302      	movs	r3, #2
 800381e:	e0fd      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x24c>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d007      	beq.n	8003846 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003854:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2224      	movs	r2, #36	; 0x24
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a70      	ldr	r2, [pc, #448]	; (8003a28 <HAL_I2C_IsDeviceReady+0x258>)
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003878:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2200      	movs	r2, #0
 8003882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f952 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a0:	d103      	bne.n	80038aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0b6      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe f9ad 	bl	8001c1c <HAL_GetTick>
 80038c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038f2:	e025      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038f4:	f7fe f992 	bl	8001c1c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <HAL_I2C_IsDeviceReady+0x13a>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	22a0      	movs	r2, #160	; 0xa0
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2ba0      	cmp	r3, #160	; 0xa0
 800394a:	d005      	beq.n	8003958 <HAL_I2C_IsDeviceReady+0x188>
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_I2C_IsDeviceReady+0x188>
 8003952:	7dbb      	ldrb	r3, [r7, #22]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0cd      	beq.n	80038f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d129      	bne.n	80039c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2319      	movs	r3, #25
 800399a:	2201      	movs	r2, #1
 800399c:	4921      	ldr	r1, [pc, #132]	; (8003a24 <HAL_I2C_IsDeviceReady+0x254>)
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f8c6 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e036      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e02c      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2319      	movs	r3, #25
 80039e2:	2201      	movs	r2, #1
 80039e4:	490f      	ldr	r1, [pc, #60]	; (8003a24 <HAL_I2C_IsDeviceReady+0x254>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f8a2 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e012      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3301      	adds	r3, #1
 80039fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f4ff af32 	bcc.w	800386a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	00100002 	.word	0x00100002
 8003a28:	ffff0000 	.word	0xffff0000

08003a2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d006      	beq.n	8003a56 <I2C_MasterRequestWrite+0x2a>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d003      	beq.n	8003a56 <I2C_MasterRequestWrite+0x2a>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a54:	d108      	bne.n	8003a68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e00b      	b.n	8003a80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	2b12      	cmp	r3, #18
 8003a6e:	d107      	bne.n	8003a80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f84f 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa6:	d103      	bne.n	8003ab0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e035      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003abc:	d108      	bne.n	8003ad0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	e01b      	b.n	8003b08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	11db      	asrs	r3, r3, #7
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f063 030f 	orn	r3, r3, #15
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	490e      	ldr	r1, [pc, #56]	; (8003b28 <I2C_MasterRequestWrite+0xfc>)
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f875 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e010      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4907      	ldr	r1, [pc, #28]	; (8003b2c <I2C_MasterRequestWrite+0x100>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f865 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	00010008 	.word	0x00010008
 8003b2c:	00010002 	.word	0x00010002

08003b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b40:	e025      	b.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d021      	beq.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fe f867 	bl	8001c1c <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d116      	bne.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f043 0220 	orr.w	r2, r3, #32
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e023      	b.n	8003bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10d      	bne.n	8003bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	e00c      	b.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d0b6      	beq.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bec:	e051      	b.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d123      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e046      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d021      	beq.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fd ffe5 	bl	8001c1c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d116      	bne.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e020      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10c      	bne.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	e00b      	b.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d18d      	bne.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce8:	e02d      	b.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f878 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02d      	b.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d021      	beq.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fd ff8b 	bl	8001c1c <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d116      	bne.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e007      	b.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d1ca      	bne.n	8003cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d6a:	e02d      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f837 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e02d      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d021      	beq.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fd ff4a 	bl	8001c1c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d116      	bne.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d1ca      	bne.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	d11b      	bne.n	8003e30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d129      	bne.n	8003ea8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0210 	bic.w	r2, r2, #16
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d12a      	bne.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	; 0x24
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	f023 030f 	bic.w	r3, r3, #15
 8003ef6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	89fa      	ldrh	r2, [r7, #14]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f36:	b08f      	sub	sp, #60	; 0x3c
 8003f38:	af0a      	add	r7, sp, #40	; 0x28
 8003f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e10f      	b.n	8004166 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fd fc6b 	bl	800183c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f003 f84a 	bl	800701e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	687e      	ldr	r6, [r7, #4]
 8003f92:	466d      	mov	r5, sp
 8003f94:	f106 0410 	add.w	r4, r6, #16
 8003f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fa8:	1d33      	adds	r3, r6, #4
 8003faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fac:	6838      	ldr	r0, [r7, #0]
 8003fae:	f002 ffd5 	bl	8006f5c <USB_CoreInit>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0d0      	b.n	8004166 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f003 f838 	bl	8007040 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]
 8003fd4:	e04a      	b.n	800406c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	333d      	adds	r3, #61	; 0x3d
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	333c      	adds	r3, #60	; 0x3c
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	b298      	uxth	r0, r3
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	3344      	adds	r3, #68	; 0x44
 8004012:	4602      	mov	r2, r0
 8004014:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3340      	adds	r3, #64	; 0x40
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	3348      	adds	r3, #72	; 0x48
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800403e:	7bfa      	ldrb	r2, [r7, #15]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	334c      	adds	r3, #76	; 0x4c
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3354      	adds	r3, #84	; 0x54
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3301      	adds	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d3af      	bcc.n	8003fd6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004076:	2300      	movs	r3, #0
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e044      	b.n	8004106 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040d4:	7bfa      	ldrb	r2, [r7, #15]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	3301      	adds	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d3b5      	bcc.n	800407c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	687e      	ldr	r6, [r7, #4]
 8004118:	466d      	mov	r5, sp
 800411a:	f106 0410 	add.w	r4, r6, #16
 800411e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004126:	e894 0003 	ldmia.w	r4, {r0, r1}
 800412a:	e885 0003 	stmia.w	r5, {r0, r1}
 800412e:	1d33      	adds	r3, r6, #4
 8004130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004132:	6838      	ldr	r0, [r7, #0]
 8004134:	f002 ffd0 	bl	80070d8 <USB_DevInit>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e00d      	b.n	8004166 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f003 f99b 	bl	800749a <USB_DevDisconnect>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e267      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d075      	beq.n	800427a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418e:	4b88      	ldr	r3, [pc, #544]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b04      	cmp	r3, #4
 8004198:	d00c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419a:	4b85      	ldr	r3, [pc, #532]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d112      	bne.n	80041cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a6:	4b82      	ldr	r3, [pc, #520]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b2:	d10b      	bne.n	80041cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	4b7e      	ldr	r3, [pc, #504]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d05b      	beq.n	8004278 <HAL_RCC_OscConfig+0x108>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d157      	bne.n	8004278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e242      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d106      	bne.n	80041e4 <HAL_RCC_OscConfig+0x74>
 80041d6:	4b76      	ldr	r3, [pc, #472]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a75      	ldr	r2, [pc, #468]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e01d      	b.n	8004220 <HAL_RCC_OscConfig+0xb0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0x98>
 80041ee:	4b70      	ldr	r3, [pc, #448]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6f      	ldr	r2, [pc, #444]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80041f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b6d      	ldr	r3, [pc, #436]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6c      	ldr	r2, [pc, #432]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e00b      	b.n	8004220 <HAL_RCC_OscConfig+0xb0>
 8004208:	4b69      	ldr	r3, [pc, #420]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a68      	ldr	r2, [pc, #416]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 800420e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b66      	ldr	r3, [pc, #408]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a65      	ldr	r2, [pc, #404]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 800421a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fd fcf8 	bl	8001c1c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd fcf4 	bl	8001c1c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e207      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	4b5b      	ldr	r3, [pc, #364]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0xc0>
 800424e:	e014      	b.n	800427a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fd fce4 	bl	8001c1c <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004258:	f7fd fce0 	bl	8001c1c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	; 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e1f3      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	4b51      	ldr	r3, [pc, #324]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0xe8>
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d063      	beq.n	800434e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004286:	4b4a      	ldr	r3, [pc, #296]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004292:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429a:	2b08      	cmp	r3, #8
 800429c:	d11c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429e:	4b44      	ldr	r3, [pc, #272]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d116      	bne.n	80042d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_RCC_OscConfig+0x152>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d001      	beq.n	80042c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e1c7      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c2:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4937      	ldr	r1, [pc, #220]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	e03a      	b.n	800434e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e0:	4b34      	ldr	r3, [pc, #208]	; (80043b4 <HAL_RCC_OscConfig+0x244>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fd fc99 	bl	8001c1c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ee:	f7fd fc95 	bl	8001c1c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e1a8      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430c:	4b28      	ldr	r3, [pc, #160]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4925      	ldr	r1, [pc, #148]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
 8004320:	e015      	b.n	800434e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004322:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <HAL_RCC_OscConfig+0x244>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fc78 	bl	8001c1c <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004330:	f7fd fc74 	bl	8001c1c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e187      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d036      	beq.n	80043c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d016      	beq.n	8004390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <HAL_RCC_OscConfig+0x248>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fd fc58 	bl	8001c1c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004370:	f7fd fc54 	bl	8001c1c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e167      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_OscConfig+0x240>)
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x200>
 800438e:	e01b      	b.n	80043c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_OscConfig+0x248>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004396:	f7fd fc41 	bl	8001c1c <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439c:	e00e      	b.n	80043bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439e:	f7fd fc3d 	bl	8001c1c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d907      	bls.n	80043bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e150      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
 80043b0:	40023800 	.word	0x40023800
 80043b4:	42470000 	.word	0x42470000
 80043b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043bc:	4b88      	ldr	r3, [pc, #544]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80043be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1ea      	bne.n	800439e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8097 	beq.w	8004504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d6:	2300      	movs	r3, #0
 80043d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043da:	4b81      	ldr	r3, [pc, #516]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10f      	bne.n	8004406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	4b7d      	ldr	r3, [pc, #500]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	4a7c      	ldr	r2, [pc, #496]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80043f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f4:	6413      	str	r3, [r2, #64]	; 0x40
 80043f6:	4b7a      	ldr	r3, [pc, #488]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004402:	2301      	movs	r3, #1
 8004404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	4b77      	ldr	r3, [pc, #476]	; (80045e4 <HAL_RCC_OscConfig+0x474>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d118      	bne.n	8004444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004412:	4b74      	ldr	r3, [pc, #464]	; (80045e4 <HAL_RCC_OscConfig+0x474>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a73      	ldr	r2, [pc, #460]	; (80045e4 <HAL_RCC_OscConfig+0x474>)
 8004418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441e:	f7fd fbfd 	bl	8001c1c <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004426:	f7fd fbf9 	bl	8001c1c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e10c      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	4b6a      	ldr	r3, [pc, #424]	; (80045e4 <HAL_RCC_OscConfig+0x474>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d106      	bne.n	800445a <HAL_RCC_OscConfig+0x2ea>
 800444c:	4b64      	ldr	r3, [pc, #400]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4a63      	ldr	r2, [pc, #396]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6713      	str	r3, [r2, #112]	; 0x70
 8004458:	e01c      	b.n	8004494 <HAL_RCC_OscConfig+0x324>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b05      	cmp	r3, #5
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x30c>
 8004462:	4b5f      	ldr	r3, [pc, #380]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	4a5e      	ldr	r2, [pc, #376]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004468:	f043 0304 	orr.w	r3, r3, #4
 800446c:	6713      	str	r3, [r2, #112]	; 0x70
 800446e:	4b5c      	ldr	r3, [pc, #368]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	4a5b      	ldr	r2, [pc, #364]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	6713      	str	r3, [r2, #112]	; 0x70
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0x324>
 800447c:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a57      	ldr	r2, [pc, #348]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
 8004488:	4b55      	ldr	r3, [pc, #340]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	4a54      	ldr	r2, [pc, #336]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 800448e:	f023 0304 	bic.w	r3, r3, #4
 8004492:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fd fbbe 	bl	8001c1c <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	f7fd fbba 	bl	8001c1c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e0cb      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ba:	4b49      	ldr	r3, [pc, #292]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ee      	beq.n	80044a4 <HAL_RCC_OscConfig+0x334>
 80044c6:	e014      	b.n	80044f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c8:	f7fd fba8 	bl	8001c1c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fd fba4 	bl	8001c1c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0b5      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e6:	4b3e      	ldr	r3, [pc, #248]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ee      	bne.n	80044d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f2:	7dfb      	ldrb	r3, [r7, #23]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f8:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	4a38      	ldr	r2, [pc, #224]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80044fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004502:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80a1 	beq.w	8004650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450e:	4b34      	ldr	r3, [pc, #208]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b08      	cmp	r3, #8
 8004518:	d05c      	beq.n	80045d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d141      	bne.n	80045a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <HAL_RCC_OscConfig+0x478>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd fb78 	bl	8001c1c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fd fb74 	bl	8001c1c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e087      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	085b      	lsrs	r3, r3, #1
 8004566:	3b01      	subs	r3, #1
 8004568:	041b      	lsls	r3, r3, #16
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	491b      	ldr	r1, [pc, #108]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <HAL_RCC_OscConfig+0x478>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457e:	f7fd fb4d 	bl	8001c1c <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004586:	f7fd fb49 	bl	8001c1c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e05c      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x416>
 80045a4:	e054      	b.n	8004650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <HAL_RCC_OscConfig+0x478>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ac:	f7fd fb36 	bl	8001c1c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd fb32 	bl	8001c1c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e045      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_RCC_OscConfig+0x470>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x444>
 80045d2:	e03d      	b.n	8004650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d107      	bne.n	80045ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e038      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40007000 	.word	0x40007000
 80045e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x4ec>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d028      	beq.n	800464c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d121      	bne.n	800464c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d11a      	bne.n	800464c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004624:	4293      	cmp	r3, r2
 8004626:	d111      	bne.n	800464c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	3b01      	subs	r3, #1
 8004636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d107      	bne.n	800464c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800

08004660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0cc      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004674:	4b68      	ldr	r3, [pc, #416]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d90c      	bls.n	800469c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468a:	4b63      	ldr	r3, [pc, #396]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0b8      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d020      	beq.n	80046ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b4:	4b59      	ldr	r3, [pc, #356]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a58      	ldr	r2, [pc, #352]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046cc:	4b53      	ldr	r3, [pc, #332]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4a52      	ldr	r2, [pc, #328]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d8:	4b50      	ldr	r3, [pc, #320]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	494d      	ldr	r1, [pc, #308]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d044      	beq.n	8004780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d107      	bne.n	800470e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b47      	ldr	r3, [pc, #284]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d119      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e07f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d003      	beq.n	800471e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471a:	2b03      	cmp	r3, #3
 800471c:	d107      	bne.n	800472e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471e:	4b3f      	ldr	r3, [pc, #252]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e06f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472e:	4b3b      	ldr	r3, [pc, #236]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e067      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800473e:	4b37      	ldr	r3, [pc, #220]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f023 0203 	bic.w	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4934      	ldr	r1, [pc, #208]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004750:	f7fd fa64 	bl	8001c1c <HAL_GetTick>
 8004754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	e00a      	b.n	800476e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004758:	f7fd fa60 	bl	8001c1c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e04f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476e:	4b2b      	ldr	r3, [pc, #172]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 020c 	and.w	r2, r3, #12
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	429a      	cmp	r2, r3
 800477e:	d1eb      	bne.n	8004758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004780:	4b25      	ldr	r3, [pc, #148]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d20c      	bcs.n	80047a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e032      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4916      	ldr	r1, [pc, #88]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d2:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	490e      	ldr	r1, [pc, #56]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047e6:	f000 f821 	bl	800482c <HAL_RCC_GetSysClockFreq>
 80047ea:	4602      	mov	r2, r0
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	490a      	ldr	r1, [pc, #40]	; (8004820 <HAL_RCC_ClockConfig+0x1c0>)
 80047f8:	5ccb      	ldrb	r3, [r1, r3]
 80047fa:	fa22 f303 	lsr.w	r3, r2, r3
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd f9c4 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023c00 	.word	0x40023c00
 800481c:	40023800 	.word	0x40023800
 8004820:	08008a28 	.word	0x08008a28
 8004824:	20000000 	.word	0x20000000
 8004828:	20000004 	.word	0x20000004

0800482c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800482c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004830:	b094      	sub	sp, #80	; 0x50
 8004832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	647b      	str	r3, [r7, #68]	; 0x44
 8004838:	2300      	movs	r3, #0
 800483a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800483c:	2300      	movs	r3, #0
 800483e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004844:	4b79      	ldr	r3, [pc, #484]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b08      	cmp	r3, #8
 800484e:	d00d      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x40>
 8004850:	2b08      	cmp	r3, #8
 8004852:	f200 80e1 	bhi.w	8004a18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x34>
 800485a:	2b04      	cmp	r3, #4
 800485c:	d003      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0x3a>
 800485e:	e0db      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b73      	ldr	r3, [pc, #460]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004864:	e0db      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004866:	4b73      	ldr	r3, [pc, #460]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004868:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800486a:	e0d8      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800486c:	4b6f      	ldr	r3, [pc, #444]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004874:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004876:	4b6d      	ldr	r3, [pc, #436]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d063      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004882:	4b6a      	ldr	r3, [pc, #424]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	2200      	movs	r2, #0
 800488a:	63bb      	str	r3, [r7, #56]	; 0x38
 800488c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
 8004896:	2300      	movs	r3, #0
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
 800489a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800489e:	4622      	mov	r2, r4
 80048a0:	462b      	mov	r3, r5
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f04f 0100 	mov.w	r1, #0
 80048aa:	0159      	lsls	r1, r3, #5
 80048ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b0:	0150      	lsls	r0, r2, #5
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4621      	mov	r1, r4
 80048b8:	1a51      	subs	r1, r2, r1
 80048ba:	6139      	str	r1, [r7, #16]
 80048bc:	4629      	mov	r1, r5
 80048be:	eb63 0301 	sbc.w	r3, r3, r1
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d0:	4659      	mov	r1, fp
 80048d2:	018b      	lsls	r3, r1, #6
 80048d4:	4651      	mov	r1, sl
 80048d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048da:	4651      	mov	r1, sl
 80048dc:	018a      	lsls	r2, r1, #6
 80048de:	4651      	mov	r1, sl
 80048e0:	ebb2 0801 	subs.w	r8, r2, r1
 80048e4:	4659      	mov	r1, fp
 80048e6:	eb63 0901 	sbc.w	r9, r3, r1
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048fe:	4690      	mov	r8, r2
 8004900:	4699      	mov	r9, r3
 8004902:	4623      	mov	r3, r4
 8004904:	eb18 0303 	adds.w	r3, r8, r3
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	462b      	mov	r3, r5
 800490c:	eb49 0303 	adc.w	r3, r9, r3
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800491e:	4629      	mov	r1, r5
 8004920:	024b      	lsls	r3, r1, #9
 8004922:	4621      	mov	r1, r4
 8004924:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004928:	4621      	mov	r1, r4
 800492a:	024a      	lsls	r2, r1, #9
 800492c:	4610      	mov	r0, r2
 800492e:	4619      	mov	r1, r3
 8004930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004932:	2200      	movs	r2, #0
 8004934:	62bb      	str	r3, [r7, #40]	; 0x28
 8004936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004938:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800493c:	f7fb fcb0 	bl	80002a0 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004948:	e058      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494a:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	2200      	movs	r2, #0
 8004952:	4618      	mov	r0, r3
 8004954:	4611      	mov	r1, r2
 8004956:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800495a:	623b      	str	r3, [r7, #32]
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
 8004960:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	f04f 0000 	mov.w	r0, #0
 800496c:	f04f 0100 	mov.w	r1, #0
 8004970:	0159      	lsls	r1, r3, #5
 8004972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004976:	0150      	lsls	r0, r2, #5
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4641      	mov	r1, r8
 800497e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004982:	4649      	mov	r1, r9
 8004984:	eb63 0b01 	sbc.w	fp, r3, r1
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004994:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004998:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800499c:	ebb2 040a 	subs.w	r4, r2, sl
 80049a0:	eb63 050b 	sbc.w	r5, r3, fp
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	00eb      	lsls	r3, r5, #3
 80049ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b2:	00e2      	lsls	r2, r4, #3
 80049b4:	4614      	mov	r4, r2
 80049b6:	461d      	mov	r5, r3
 80049b8:	4643      	mov	r3, r8
 80049ba:	18e3      	adds	r3, r4, r3
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	464b      	mov	r3, r9
 80049c0:	eb45 0303 	adc.w	r3, r5, r3
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049d2:	4629      	mov	r1, r5
 80049d4:	028b      	lsls	r3, r1, #10
 80049d6:	4621      	mov	r1, r4
 80049d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049dc:	4621      	mov	r1, r4
 80049de:	028a      	lsls	r2, r1, #10
 80049e0:	4610      	mov	r0, r2
 80049e2:	4619      	mov	r1, r3
 80049e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e6:	2200      	movs	r2, #0
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	61fa      	str	r2, [r7, #28]
 80049ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f0:	f7fb fc56 	bl	80002a0 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4613      	mov	r3, r2
 80049fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x200>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	3301      	adds	r3, #1
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3750      	adds	r7, #80	; 0x50
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	00f42400 	.word	0x00f42400
 8004a34:	007a1200 	.word	0x007a1200

08004a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000000 	.word	0x20000000

08004a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a54:	f7ff fff0 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4903      	ldr	r1, [pc, #12]	; (8004a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	08008a38 	.word	0x08008a38

08004a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a7c:	f7ff ffdc 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	0b5b      	lsrs	r3, r3, #13
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4903      	ldr	r1, [pc, #12]	; (8004a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	08008a38 	.word	0x08008a38

08004aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d075      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ad4:	4b91      	ldr	r3, [pc, #580]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ada:	f7fd f89f 	bl	8001c1c <HAL_GetTick>
 8004ade:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ae2:	f7fd f89b 	bl	8001c1c <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e189      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004af4:	4b8a      	ldr	r3, [pc, #552]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d009      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	019a      	lsls	r2, r3, #6
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	071b      	lsls	r3, r3, #28
 8004b18:	4981      	ldr	r1, [pc, #516]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01f      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b2c:	4b7c      	ldr	r3, [pc, #496]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b32:	0f1b      	lsrs	r3, r3, #28
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	019a      	lsls	r2, r3, #6
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	431a      	orrs	r2, r3
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	071b      	lsls	r3, r3, #28
 8004b4c:	4974      	ldr	r1, [pc, #464]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b54:	4b72      	ldr	r3, [pc, #456]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b5a:	f023 021f 	bic.w	r2, r3, #31
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	496e      	ldr	r1, [pc, #440]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00d      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	019a      	lsls	r2, r3, #6
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	071b      	lsls	r3, r3, #28
 8004b8c:	4964      	ldr	r1, [pc, #400]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b94:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9a:	f7fd f83f 	bl	8001c1c <HAL_GetTick>
 8004b9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ba2:	f7fd f83b 	bl	8001c1c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e129      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb4:	4b5a      	ldr	r3, [pc, #360]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d079      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bd8:	4b52      	ldr	r3, [pc, #328]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bde:	f7fd f81d 	bl	8001c1c <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004be6:	f7fd f819 	bl	8001c1c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e107      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf8:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c04:	d0ef      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c12:	4b43      	ldr	r3, [pc, #268]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	0f1b      	lsrs	r3, r3, #28
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	019a      	lsls	r2, r3, #6
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	071b      	lsls	r3, r3, #28
 8004c32:	493b      	ldr	r1, [pc, #236]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c3a:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	4934      	ldr	r1, [pc, #208]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01e      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c60:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	0e1b      	lsrs	r3, r3, #24
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	019a      	lsls	r2, r3, #6
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	071b      	lsls	r3, r3, #28
 8004c80:	4927      	ldr	r1, [pc, #156]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c88:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	4922      	ldr	r1, [pc, #136]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c9e:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca4:	f7fc ffba 	bl	8001c1c <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004cac:	f7fc ffb6 	bl	8001c1c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0a4      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cbe:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cca:	d1ef      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 808b 	beq.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a0b      	ldr	r2, [pc, #44]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d02:	f7fc ff8b 	bl	8001c1c <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d08:	e010      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7fc ff87 	bl	8001c1c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d909      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e075      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004d1c:	42470068 	.word	0x42470068
 8004d20:	40023800 	.word	0x40023800
 8004d24:	42470070 	.word	0x42470070
 8004d28:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d2c:	4b38      	ldr	r3, [pc, #224]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0e8      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d38:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02f      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d028      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d60:	4b2d      	ldr	r3, [pc, #180]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d66:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d6c:	4a29      	ldr	r2, [pc, #164]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d114      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fc ff4d 	bl	8001c1c <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d84:	e00a      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fc ff49 	bl	8001c1c <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e035      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ee      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004db4:	d10d      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	4912      	ldr	r1, [pc, #72]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]
 8004dd0:	e005      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004dd2:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dd8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ddc:	6093      	str	r3, [r2, #8]
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004de0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dea:	490a      	ldr	r1, [pc, #40]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004e04:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40007000 	.word	0x40007000
 8004e14:	40023800 	.word	0x40023800
 8004e18:	42470e40 	.word	0x42470e40
 8004e1c:	424711e0 	.word	0x424711e0

08004e20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e066      	b.n	8004f04 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	7f5b      	ldrb	r3, [r3, #29]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d105      	bne.n	8004e4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc fc2e 	bl	80016a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	22ca      	movs	r2, #202	; 0xca
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2253      	movs	r2, #83	; 0x53
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fb20 	bl	80054a8 <RTC_EnterInitMode>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d12c      	bne.n	8004ecc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e84:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6899      	ldr	r1, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	68d2      	ldr	r2, [r2, #12]
 8004eac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6919      	ldr	r1, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	041a      	lsls	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fb27 	bl	8005516 <RTC_ExitInitMode>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d113      	bne.n	8004efa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	22ff      	movs	r2, #255	; 0xff
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	7f1b      	ldrb	r3, [r3, #28]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_RTC_SetTime+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e087      	b.n	8005038 <HAL_RTC_SetTime+0x12c>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2202      	movs	r2, #2
 8004f32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d126      	bne.n	8004f88 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fb04 	bl	8005560 <RTC_ByteToBcd2>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fafd 	bl	8005560 <RTC_ByteToBcd2>
 8004f66:	4603      	mov	r3, r0
 8004f68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	789b      	ldrb	r3, [r3, #2]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 faf5 	bl	8005560 <RTC_ByteToBcd2>
 8004f76:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f78:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	78db      	ldrb	r3, [r3, #3]
 8004f80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e018      	b.n	8004fba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004fa8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004fae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	78db      	ldrb	r3, [r3, #3]
 8004fb4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	22ca      	movs	r2, #202	; 0xca
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2253      	movs	r2, #83	; 0x53
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fa6c 	bl	80054a8 <RTC_EnterInitMode>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d120      	bne.n	800501c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004fe4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fe8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ff8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6899      	ldr	r1, [r3, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa7f 	bl	8005516 <RTC_ExitInitMode>
 8005018:	4603      	mov	r3, r0
 800501a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	771a      	strb	r2, [r3, #28]

  return status;
 8005036:	7cfb      	ldrb	r3, [r7, #19]
}
 8005038:	4618      	mov	r0, r3
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd90      	pop	{r4, r7, pc}

08005040 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	7f1b      	ldrb	r3, [r3, #28]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_RTC_SetDate+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e071      	b.n	8005140 <HAL_RTC_SetDate+0x100>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2202      	movs	r2, #2
 8005066:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10e      	bne.n	800508c <HAL_RTC_SetDate+0x4c>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2b00      	cmp	r3, #0
 8005078:	d008      	beq.n	800508c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	f023 0310 	bic.w	r3, r3, #16
 8005082:	b2db      	uxtb	r3, r3
 8005084:	330a      	adds	r3, #10
 8005086:	b2da      	uxtb	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d11c      	bne.n	80050cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	78db      	ldrb	r3, [r3, #3]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fa62 	bl	8005560 <RTC_ByteToBcd2>
 800509c:	4603      	mov	r3, r0
 800509e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fa5b 	bl	8005560 <RTC_ByteToBcd2>
 80050aa:	4603      	mov	r3, r0
 80050ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	789b      	ldrb	r3, [r3, #2]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fa53 	bl	8005560 <RTC_ByteToBcd2>
 80050ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80050bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e00e      	b.n	80050ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	78db      	ldrb	r3, [r3, #3]
 80050d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	785b      	ldrb	r3, [r3, #1]
 80050d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80050d8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80050de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	22ca      	movs	r2, #202	; 0xca
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2253      	movs	r2, #83	; 0x53
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f9d4 	bl	80054a8 <RTC_EnterInitMode>
 8005100:	4603      	mov	r3, r0
 8005102:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005114:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005118:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f9fb 	bl	8005516 <RTC_ExitInitMode>
 8005120:	4603      	mov	r3, r0
 8005122:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	22ff      	movs	r2, #255	; 0xff
 8005136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	771a      	strb	r2, [r3, #28]

  return status;
 800513e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005140:	4618      	mov	r0, r3
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd90      	pop	{r4, r7, pc}

08005148 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b089      	sub	sp, #36	; 0x24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005154:	4b9a      	ldr	r3, [pc, #616]	; (80053c0 <HAL_RTC_SetAlarm_IT+0x278>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a9a      	ldr	r2, [pc, #616]	; (80053c4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0adb      	lsrs	r3, r3, #11
 8005160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	7f1b      	ldrb	r3, [r3, #28]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_RTC_SetAlarm_IT+0x36>
 800517a:	2302      	movs	r3, #2
 800517c:	e11c      	b.n	80053b8 <HAL_RTC_SetAlarm_IT+0x270>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2202      	movs	r2, #2
 8005188:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d137      	bne.n	8005200 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2200      	movs	r2, #0
 80051a2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 f9d9 	bl	8005560 <RTC_ByteToBcd2>
 80051ae:	4603      	mov	r3, r0
 80051b0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 f9d2 	bl	8005560 <RTC_ByteToBcd2>
 80051bc:	4603      	mov	r3, r0
 80051be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80051c0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	789b      	ldrb	r3, [r3, #2]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 f9ca 	bl	8005560 <RTC_ByteToBcd2>
 80051cc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051ce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	78db      	ldrb	r3, [r3, #3]
 80051d6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80051d8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f9bc 	bl	8005560 <RTC_ByteToBcd2>
 80051e8:	4603      	mov	r3, r0
 80051ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80051ec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80051f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	e023      	b.n	8005248 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d102      	bne.n	8005214 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2200      	movs	r2, #0
 8005212:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005220:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005226:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	78db      	ldrb	r3, [r3, #3]
 800522c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800522e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005236:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005238:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800523e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005244:	4313      	orrs	r3, r2
 8005246:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	22ca      	movs	r2, #202	; 0xca
 800525a:	625a      	str	r2, [r3, #36]	; 0x24
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2253      	movs	r2, #83	; 0x53
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526c:	d141      	bne.n	80052f2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800527c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800528e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1e5a      	subs	r2, r3, #1
 8005294:	617a      	str	r2, [r7, #20]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	22ff      	movs	r2, #255	; 0xff
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2203      	movs	r2, #3
 80052a6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e082      	b.n	80053b8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0e7      	beq.n	8005290 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052de:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	e04b      	b.n	800538a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005300:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005312:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005314:	4b2a      	ldr	r3, [pc, #168]	; (80053c0 <HAL_RTC_SetAlarm_IT+0x278>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	0adb      	lsrs	r3, r3, #11
 8005320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	617a      	str	r2, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10b      	bne.n	800534c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	22ff      	movs	r2, #255	; 0xff
 800533a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2203      	movs	r2, #3
 8005340:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e035      	b.n	80053b8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0e7      	beq.n	800532a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005378:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005388:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800538a:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <HAL_RTC_SetAlarm_IT+0x280>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <HAL_RTC_SetAlarm_IT+0x280>)
 8005390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005394:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <HAL_RTC_SetAlarm_IT+0x280>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	4a0b      	ldr	r2, [pc, #44]	; (80053c8 <HAL_RTC_SetAlarm_IT+0x280>)
 800539c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	22ff      	movs	r2, #255	; 0xff
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3724      	adds	r7, #36	; 0x24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}
 80053c0:	20000000 	.word	0x20000000
 80053c4:	10624dd3 	.word	0x10624dd3
 80053c8:	40013c00 	.word	0x40013c00

080053cc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d012      	beq.n	8005408 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fb fec3 	bl	800117c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005406:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d012      	beq.n	800543c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8b8 	bl	800559a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f462 7220 	orn	r2, r2, #640	; 0x280
 800543a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_RTC_AlarmIRQHandler+0x88>)
 800543e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005442:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	775a      	strb	r2, [r3, #29]
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40013c00 	.word	0x40013c00

08005458 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005472:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005474:	f7fc fbd2 	bl	8001c1c <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800547a:	e009      	b.n	8005490 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800547c:	f7fc fbce 	bl	8001c1c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800548a:	d901      	bls.n	8005490 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e007      	b.n	80054a0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ee      	beq.n	800547c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d122      	bne.n	800550c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054d6:	f7fc fba1 	bl	8001c1c <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054dc:	e00c      	b.n	80054f8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054de:	f7fc fb9d 	bl	8001c1c <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ec:	d904      	bls.n	80054f8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <RTC_EnterInitMode+0x64>
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d1e8      	bne.n	80054de <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005530:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ff89 	bl	8005458 <HAL_RTC_WaitForSynchro>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2204      	movs	r2, #4
 8005550:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005556:	7bfb      	ldrb	r3, [r7, #15]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800556e:	e005      	b.n	800557c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	3301      	adds	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	3b0a      	subs	r3, #10
 800557a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	2b09      	cmp	r3, #9
 8005580:	d8f6      	bhi.n	8005570 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	b2da      	uxtb	r2, r3
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	4313      	orrs	r3, r2
 800558c:	b2db      	uxtb	r3, r3
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e041      	b.n	8005644 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d106      	bne.n	80055da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7fc f891 	bl	80016fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 fa2f 	bl	8005a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b02      	cmp	r3, #2
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b02      	cmp	r3, #2
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0202 	mvn.w	r2, #2
 8005678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9bf 	bl	8005a12 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f9b1 	bl	80059fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9c2 	bl	8005a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0204 	mvn.w	r2, #4
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f995 	bl	8005a12 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f987 	bl	80059fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f998 	bl	8005a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b08      	cmp	r3, #8
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b08      	cmp	r3, #8
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0208 	mvn.w	r2, #8
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2204      	movs	r2, #4
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f96b 	bl	8005a12 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f95d 	bl	80059fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f96e 	bl	8005a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b10      	cmp	r3, #16
 800575c:	d122      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b10      	cmp	r3, #16
 800576a:	d11b      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0210 	mvn.w	r2, #16
 8005774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2208      	movs	r2, #8
 800577a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f941 	bl	8005a12 <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f933 	bl	80059fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f944 	bl	8005a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d10e      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d107      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0201 	mvn.w	r2, #1
 80057c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f90d 	bl	80059ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d10e      	bne.n	80057fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d107      	bne.n	80057fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 faea 	bl	8005dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d10e      	bne.n	8005828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	d107      	bne.n	8005828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f909 	bl	8005a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b20      	cmp	r3, #32
 8005834:	d10e      	bne.n	8005854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b20      	cmp	r3, #32
 8005842:	d107      	bne.n	8005854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0220 	mvn.w	r2, #32
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fab4 	bl	8005dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x1c>
 8005874:	2302      	movs	r3, #2
 8005876:	e0b4      	b.n	80059e2 <HAL_TIM_ConfigClockSource+0x186>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b0:	d03e      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0xd4>
 80058b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b6:	f200 8087 	bhi.w	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058be:	f000 8086 	beq.w	80059ce <HAL_TIM_ConfigClockSource+0x172>
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	d87f      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b70      	cmp	r3, #112	; 0x70
 80058ca:	d01a      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0xa6>
 80058cc:	2b70      	cmp	r3, #112	; 0x70
 80058ce:	d87b      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b60      	cmp	r3, #96	; 0x60
 80058d2:	d050      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x11a>
 80058d4:	2b60      	cmp	r3, #96	; 0x60
 80058d6:	d877      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b50      	cmp	r3, #80	; 0x50
 80058da:	d03c      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0xfa>
 80058dc:	2b50      	cmp	r3, #80	; 0x50
 80058de:	d873      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d058      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x13a>
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d86f      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e8:	2b30      	cmp	r3, #48	; 0x30
 80058ea:	d064      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x15a>
 80058ec:	2b30      	cmp	r3, #48	; 0x30
 80058ee:	d86b      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d060      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x15a>
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d867      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d05c      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x15a>
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d05a      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x15a>
 8005900:	e062      	b.n	80059c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6899      	ldr	r1, [r3, #8]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f000 f9b7 	bl	8005c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005924:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	609a      	str	r2, [r3, #8]
      break;
 800592e:	e04f      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	6899      	ldr	r1, [r3, #8]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f000 f9a0 	bl	8005c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005952:	609a      	str	r2, [r3, #8]
      break;
 8005954:	e03c      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	461a      	mov	r2, r3
 8005964:	f000 f914 	bl	8005b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2150      	movs	r1, #80	; 0x50
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f96d 	bl	8005c4e <TIM_ITRx_SetConfig>
      break;
 8005974:	e02c      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6859      	ldr	r1, [r3, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	461a      	mov	r2, r3
 8005984:	f000 f933 	bl	8005bee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2160      	movs	r1, #96	; 0x60
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f95d 	bl	8005c4e <TIM_ITRx_SetConfig>
      break;
 8005994:	e01c      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6859      	ldr	r1, [r3, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f000 f8f4 	bl	8005b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2140      	movs	r1, #64	; 0x40
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f94d 	bl	8005c4e <TIM_ITRx_SetConfig>
      break;
 80059b4:	e00c      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f000 f944 	bl	8005c4e <TIM_ITRx_SetConfig>
      break;
 80059c6:	e003      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
      break;
 80059cc:	e000      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a40      	ldr	r2, [pc, #256]	; (8005b64 <TIM_Base_SetConfig+0x114>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6e:	d00f      	beq.n	8005a90 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3d      	ldr	r2, [pc, #244]	; (8005b68 <TIM_Base_SetConfig+0x118>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00b      	beq.n	8005a90 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a3c      	ldr	r2, [pc, #240]	; (8005b6c <TIM_Base_SetConfig+0x11c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d007      	beq.n	8005a90 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a3b      	ldr	r2, [pc, #236]	; (8005b70 <TIM_Base_SetConfig+0x120>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a3a      	ldr	r2, [pc, #232]	; (8005b74 <TIM_Base_SetConfig+0x124>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d108      	bne.n	8005aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2f      	ldr	r2, [pc, #188]	; (8005b64 <TIM_Base_SetConfig+0x114>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d02b      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab0:	d027      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2c      	ldr	r2, [pc, #176]	; (8005b68 <TIM_Base_SetConfig+0x118>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d023      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2b      	ldr	r2, [pc, #172]	; (8005b6c <TIM_Base_SetConfig+0x11c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01f      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2a      	ldr	r2, [pc, #168]	; (8005b70 <TIM_Base_SetConfig+0x120>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01b      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <TIM_Base_SetConfig+0x124>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d017      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a28      	ldr	r2, [pc, #160]	; (8005b78 <TIM_Base_SetConfig+0x128>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a27      	ldr	r2, [pc, #156]	; (8005b7c <TIM_Base_SetConfig+0x12c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00f      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <TIM_Base_SetConfig+0x130>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a25      	ldr	r2, [pc, #148]	; (8005b84 <TIM_Base_SetConfig+0x134>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d007      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a24      	ldr	r2, [pc, #144]	; (8005b88 <TIM_Base_SetConfig+0x138>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a23      	ldr	r2, [pc, #140]	; (8005b8c <TIM_Base_SetConfig+0x13c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d108      	bne.n	8005b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <TIM_Base_SetConfig+0x114>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0xf8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a0c      	ldr	r2, [pc, #48]	; (8005b74 <TIM_Base_SetConfig+0x124>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d103      	bne.n	8005b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	615a      	str	r2, [r3, #20]
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40010400 	.word	0x40010400
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	40014800 	.word	0x40014800
 8005b84:	40001800 	.word	0x40001800
 8005b88:	40001c00 	.word	0x40001c00
 8005b8c:	40002000 	.word	0x40002000

08005b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0201 	bic.w	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 030a 	bic.w	r3, r3, #10
 8005bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b087      	sub	sp, #28
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0210 	bic.w	r2, r3, #16
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	031b      	lsls	r3, r3, #12
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f043 0307 	orr.w	r3, r3, #7
 8005c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	609a      	str	r2, [r3, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	609a      	str	r2, [r3, #8]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e05a      	b.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d022      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d28:	d01d      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1d      	ldr	r2, [pc, #116]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d018      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1b      	ldr	r2, [pc, #108]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1a      	ldr	r2, [pc, #104]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00e      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d009      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10c      	bne.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40001800 	.word	0x40001800

08005dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e03f      	b.n	8005e76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fb fc96 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2224      	movs	r2, #36	; 0x24
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fe23 	bl	8006a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b08a      	sub	sp, #40	; 0x28
 8005e82:	af02      	add	r7, sp, #8
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d17c      	bne.n	8005f98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_UART_Transmit+0x2c>
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e075      	b.n	8005f9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_UART_Transmit+0x3e>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e06e      	b.n	8005f9a <HAL_UART_Transmit+0x11c>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2221      	movs	r2, #33	; 0x21
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed2:	f7fb fea3 	bl	8001c1c <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	88fa      	ldrh	r2, [r7, #6]
 8005edc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	88fa      	ldrh	r2, [r7, #6]
 8005ee2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eec:	d108      	bne.n	8005f00 <HAL_UART_Transmit+0x82>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	e003      	b.n	8005f08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f10:	e02a      	b.n	8005f68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fb63 	bl	80065e8 <UART_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e036      	b.n	8005f9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10b      	bne.n	8005f4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	3302      	adds	r3, #2
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	e007      	b.n	8005f5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1cf      	bne.n	8005f12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2140      	movs	r1, #64	; 0x40
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fb33 	bl	80065e8 <UART_WaitOnFlagUntilTimeout>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e006      	b.n	8005f9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d130      	bne.n	800601e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_UART_Transmit_IT+0x26>
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e029      	b.n	8006020 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Transmit_IT+0x38>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e022      	b.n	8006020 <HAL_UART_Transmit_IT+0x7e>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	88fa      	ldrh	r2, [r7, #6]
 8005ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2221      	movs	r2, #33	; 0x21
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006018:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b20      	cmp	r3, #32
 8006044:	d11d      	bne.n	8006082 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_UART_Receive_IT+0x26>
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e016      	b.n	8006084 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_UART_Receive_IT+0x38>
 8006060:	2302      	movs	r3, #2
 8006062:	e00f      	b.n	8006084 <HAL_UART_Receive_IT+0x58>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	461a      	mov	r2, r3
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fb23 	bl	80066c4 <UART_Start_Receive_IT>
 800607e:	4603      	mov	r3, r0
 8006080:	e000      	b.n	8006084 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006082:	2302      	movs	r3, #2
  }
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b0ba      	sub	sp, #232	; 0xe8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10f      	bne.n	80060f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <HAL_UART_IRQHandler+0x66>
 80060de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fc07 	bl	80068fe <UART_Receive_IT>
      return;
 80060f0:	e256      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80de 	beq.w	80062b8 <HAL_UART_IRQHandler+0x22c>
 80060fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80d1 	beq.w	80062b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_UART_IRQHandler+0xae>
 8006122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f043 0201 	orr.w	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_UART_IRQHandler+0xd2>
 8006146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f043 0202 	orr.w	r2, r3, #2
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <HAL_UART_IRQHandler+0xf6>
 800616a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f043 0204 	orr.w	r2, r3, #4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d011      	beq.n	80061b2 <HAL_UART_IRQHandler+0x126>
 800618e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800619a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f043 0208 	orr.w	r2, r3, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 81ed 	beq.w	8006596 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_UART_IRQHandler+0x14e>
 80061c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fb92 	bl	80068fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	bf0c      	ite	eq
 80061e8:	2301      	moveq	r3, #1
 80061ea:	2300      	movne	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <HAL_UART_IRQHandler+0x17a>
 80061fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d04f      	beq.n	80062a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa9a 	bl	8006740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d141      	bne.n	800629e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3314      	adds	r3, #20
 8006242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006246:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800624a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800625e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1d9      	bne.n	800621a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	2b00      	cmp	r3, #0
 800626c:	d013      	beq.n	8006296 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	4a7d      	ldr	r2, [pc, #500]	; (8006468 <HAL_UART_IRQHandler+0x3dc>)
 8006274:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	4618      	mov	r0, r3
 800627c:	f7fc fb0b 	bl	8002896 <HAL_DMA_Abort_IT>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d016      	beq.n	80062b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006290:	4610      	mov	r0, r2
 8006292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	e00e      	b.n	80062b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f990 	bl	80065bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629c:	e00a      	b.n	80062b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f98c 	bl	80065bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a4:	e006      	b.n	80062b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f988 	bl	80065bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062b2:	e170      	b.n	8006596 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b4:	bf00      	nop
    return;
 80062b6:	e16e      	b.n	8006596 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	2b01      	cmp	r3, #1
 80062be:	f040 814a 	bne.w	8006556 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8143 	beq.w	8006556 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 813c 	beq.w	8006556 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	f040 80b4 	bne.w	800646c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8140 	beq.w	800659a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800631e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006322:	429a      	cmp	r2, r3
 8006324:	f080 8139 	bcs.w	800659a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800632e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633a:	f000 8088 	beq.w	800644e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	330c      	adds	r3, #12
 8006344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800635c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800636a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800636e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006376:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1d9      	bne.n	800633e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800639a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e1      	bne.n	800638a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800641c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006430:	65ba      	str	r2, [r7, #88]	; 0x58
 8006432:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800643e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e3      	bne.n	800640c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	4618      	mov	r0, r3
 800644a:	f7fc f9b4 	bl	80027b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006456:	b29b      	uxth	r3, r3
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	b29b      	uxth	r3, r3
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8b6 	bl	80065d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006464:	e099      	b.n	800659a <HAL_UART_IRQHandler+0x50e>
 8006466:	bf00      	nop
 8006468:	08006807 	.word	0x08006807
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006474:	b29b      	uxth	r3, r3
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 808b 	beq.w	800659e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8086 	beq.w	800659e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064b6:	647a      	str	r2, [r7, #68]	; 0x44
 80064b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e3      	bne.n	8006492 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	623b      	str	r3, [r7, #32]
   return(result);
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3314      	adds	r3, #20
 80064ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064ee:	633a      	str	r2, [r7, #48]	; 0x30
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e3      	bne.n	80064ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0310 	bic.w	r3, r3, #16
 8006526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006534:	61fa      	str	r2, [r7, #28]
 8006536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	69b9      	ldr	r1, [r7, #24]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	617b      	str	r3, [r7, #20]
   return(result);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e3      	bne.n	8006510 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f83e 	bl	80065d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006554:	e023      	b.n	800659e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_UART_IRQHandler+0x4ea>
 8006562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f95d 	bl	800682e <UART_Transmit_IT>
    return;
 8006574:	e014      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00e      	beq.n	80065a0 <HAL_UART_IRQHandler+0x514>
 8006582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f99d 	bl	80068ce <UART_EndTransmit_IT>
    return;
 8006594:	e004      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
    return;
 8006596:	bf00      	nop
 8006598:	e002      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
      return;
 800659a:	bf00      	nop
 800659c:	e000      	b.n	80065a0 <HAL_UART_IRQHandler+0x514>
      return;
 800659e:	bf00      	nop
  }
}
 80065a0:	37e8      	adds	r7, #232	; 0xe8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop

080065a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b090      	sub	sp, #64	; 0x40
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	4613      	mov	r3, r2
 80065f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f8:	e050      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d04c      	beq.n	800669c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <UART_WaitOnFlagUntilTimeout+0x30>
 8006608:	f7fb fb08 	bl	8001c1c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006614:	429a      	cmp	r2, r3
 8006616:	d241      	bcs.n	800669c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006638:	637a      	str	r2, [r7, #52]	; 0x34
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3314      	adds	r3, #20
 8006652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	613b      	str	r3, [r7, #16]
   return(result);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f023 0301 	bic.w	r3, r3, #1
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3314      	adds	r3, #20
 800666a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800666c:	623a      	str	r2, [r7, #32]
 800666e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	69f9      	ldr	r1, [r7, #28]
 8006672:	6a3a      	ldr	r2, [r7, #32]
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	61bb      	str	r3, [r7, #24]
   return(result);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e5      	bne.n	800664c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e00f      	b.n	80066bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d09f      	beq.n	80065fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3740      	adds	r7, #64	; 0x40
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	88fa      	ldrh	r2, [r7, #6]
 80066e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2222      	movs	r2, #34	; 0x22
 80066ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006710:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0201 	orr.w	r2, r2, #1
 8006720:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0220 	orr.w	r2, r2, #32
 8006730:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b095      	sub	sp, #84	; 0x54
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800675e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006768:	643a      	str	r2, [r7, #64]	; 0x40
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800676e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	61fb      	str	r3, [r7, #28]
   return(result);
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	64bb      	str	r3, [r7, #72]	; 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3314      	adds	r3, #20
 800679a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800679c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d119      	bne.n	80067ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	330c      	adds	r3, #12
 80067be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f023 0310 	bic.w	r3, r3, #16
 80067ce:	647b      	str	r3, [r7, #68]	; 0x44
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d8:	61ba      	str	r2, [r7, #24]
 80067da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6979      	ldr	r1, [r7, #20]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	613b      	str	r3, [r7, #16]
   return(result);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e5      	bne.n	80067b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067fa:	bf00      	nop
 80067fc:	3754      	adds	r7, #84	; 0x54
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f7ff fecb 	bl	80065bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b21      	cmp	r3, #33	; 0x21
 8006840:	d13e      	bne.n	80068c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684a:	d114      	bne.n	8006876 <UART_Transmit_IT+0x48>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d110      	bne.n	8006876 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006868:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	1c9a      	adds	r2, r3, #2
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]
 8006874:	e008      	b.n	8006888 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6211      	str	r1, [r2, #32]
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29b      	uxth	r3, r3
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4619      	mov	r1, r3
 8006896:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10f      	bne.n	80068bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fe5a 	bl	80065a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b08c      	sub	sp, #48	; 0x30
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b22      	cmp	r3, #34	; 0x22
 8006910:	f040 80ab 	bne.w	8006a6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691c:	d117      	bne.n	800694e <UART_Receive_IT+0x50>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d113      	bne.n	800694e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693c:	b29a      	uxth	r2, r3
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	629a      	str	r2, [r3, #40]	; 0x28
 800694c:	e026      	b.n	800699c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006960:	d007      	beq.n	8006972 <UART_Receive_IT+0x74>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <UART_Receive_IT+0x82>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	b2da      	uxtb	r2, r3
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e008      	b.n	8006992 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4619      	mov	r1, r3
 80069aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d15a      	bne.n	8006a66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0220 	bic.w	r2, r2, #32
 80069be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d135      	bne.n	8006a5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	330c      	adds	r3, #12
 80069fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	613b      	str	r3, [r7, #16]
   return(result);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f023 0310 	bic.w	r3, r3, #16
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a16:	623a      	str	r2, [r7, #32]
 8006a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	69f9      	ldr	r1, [r7, #28]
 8006a1c:	6a3a      	ldr	r2, [r7, #32]
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b10      	cmp	r3, #16
 8006a36:	d10a      	bne.n	8006a4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff fdbb 	bl	80065d0 <HAL_UARTEx_RxEventCallback>
 8006a5a:	e002      	b.n	8006a62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7fa fc13 	bl	8001288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e002      	b.n	8006a6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e000      	b.n	8006a6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a6a:	2302      	movs	r3, #2
  }
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3730      	adds	r7, #48	; 0x30
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a78:	b0c0      	sub	sp, #256	; 0x100
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a90:	68d9      	ldr	r1, [r3, #12]
 8006a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	ea40 0301 	orr.w	r3, r0, r1
 8006a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006acc:	f021 010c 	bic.w	r1, r1, #12
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ada:	430b      	orrs	r3, r1
 8006adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aee:	6999      	ldr	r1, [r3, #24]
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	ea40 0301 	orr.w	r3, r0, r1
 8006afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4b8f      	ldr	r3, [pc, #572]	; (8006d40 <UART_SetConfig+0x2cc>)
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d005      	beq.n	8006b14 <UART_SetConfig+0xa0>
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b8d      	ldr	r3, [pc, #564]	; (8006d44 <UART_SetConfig+0x2d0>)
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d104      	bne.n	8006b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7fd ffb0 	bl	8004a78 <HAL_RCC_GetPCLK2Freq>
 8006b18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b1c:	e003      	b.n	8006b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b1e:	f7fd ff97 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 8006b22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b30:	f040 810c 	bne.w	8006d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b46:	4622      	mov	r2, r4
 8006b48:	462b      	mov	r3, r5
 8006b4a:	1891      	adds	r1, r2, r2
 8006b4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b4e:	415b      	adcs	r3, r3
 8006b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b56:	4621      	mov	r1, r4
 8006b58:	eb12 0801 	adds.w	r8, r2, r1
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	eb43 0901 	adc.w	r9, r3, r1
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b76:	4690      	mov	r8, r2
 8006b78:	4699      	mov	r9, r3
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	eb18 0303 	adds.w	r3, r8, r3
 8006b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b84:	462b      	mov	r3, r5
 8006b86:	eb49 0303 	adc.w	r3, r9, r3
 8006b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	18db      	adds	r3, r3, r3
 8006ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ba8:	4613      	mov	r3, r2
 8006baa:	eb42 0303 	adc.w	r3, r2, r3
 8006bae:	657b      	str	r3, [r7, #84]	; 0x54
 8006bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bb8:	f7f9 fb72 	bl	80002a0 <__aeabi_uldivmod>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4b61      	ldr	r3, [pc, #388]	; (8006d48 <UART_SetConfig+0x2d4>)
 8006bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	011c      	lsls	r4, r3, #4
 8006bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	1891      	adds	r1, r2, r2
 8006be2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006be4:	415b      	adcs	r3, r3
 8006be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bec:	4641      	mov	r1, r8
 8006bee:	eb12 0a01 	adds.w	sl, r2, r1
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c0c:	4692      	mov	sl, r2
 8006c0e:	469b      	mov	fp, r3
 8006c10:	4643      	mov	r3, r8
 8006c12:	eb1a 0303 	adds.w	r3, sl, r3
 8006c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8006c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	18db      	adds	r3, r3, r3
 8006c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c3e:	4613      	mov	r3, r2
 8006c40:	eb42 0303 	adc.w	r3, r2, r3
 8006c44:	647b      	str	r3, [r7, #68]	; 0x44
 8006c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c4e:	f7f9 fb27 	bl	80002a0 <__aeabi_uldivmod>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	4b3b      	ldr	r3, [pc, #236]	; (8006d48 <UART_SetConfig+0x2d4>)
 8006c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	2264      	movs	r2, #100	; 0x64
 8006c62:	fb02 f303 	mul.w	r3, r2, r3
 8006c66:	1acb      	subs	r3, r1, r3
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c6e:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <UART_SetConfig+0x2d4>)
 8006c70:	fba3 2302 	umull	r2, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c7c:	441c      	add	r4, r3
 8006c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c90:	4642      	mov	r2, r8
 8006c92:	464b      	mov	r3, r9
 8006c94:	1891      	adds	r1, r2, r2
 8006c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c98:	415b      	adcs	r3, r3
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ca0:	4641      	mov	r1, r8
 8006ca2:	1851      	adds	r1, r2, r1
 8006ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	414b      	adcs	r3, r1
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cb8:	4659      	mov	r1, fp
 8006cba:	00cb      	lsls	r3, r1, #3
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	00ca      	lsls	r2, r1, #3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	4642      	mov	r2, r8
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cd4:	464b      	mov	r3, r9
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	eb42 0303 	adc.w	r3, r2, r3
 8006cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	18db      	adds	r3, r3, r3
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	eb42 0303 	adc.w	r3, r2, r3
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d0a:	f7f9 fac9 	bl	80002a0 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <UART_SetConfig+0x2d4>)
 8006d14:	fba3 1302 	umull	r1, r3, r3, r2
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	2164      	movs	r1, #100	; 0x64
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	3332      	adds	r3, #50	; 0x32
 8006d26:	4a08      	ldr	r2, [pc, #32]	; (8006d48 <UART_SetConfig+0x2d4>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f003 0207 	and.w	r2, r3, #7
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4422      	add	r2, r4
 8006d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d3c:	e106      	b.n	8006f4c <UART_SetConfig+0x4d8>
 8006d3e:	bf00      	nop
 8006d40:	40011000 	.word	0x40011000
 8006d44:	40011400 	.word	0x40011400
 8006d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d5e:	4642      	mov	r2, r8
 8006d60:	464b      	mov	r3, r9
 8006d62:	1891      	adds	r1, r2, r2
 8006d64:	6239      	str	r1, [r7, #32]
 8006d66:	415b      	adcs	r3, r3
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d6e:	4641      	mov	r1, r8
 8006d70:	1854      	adds	r4, r2, r1
 8006d72:	4649      	mov	r1, r9
 8006d74:	eb43 0501 	adc.w	r5, r3, r1
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	00eb      	lsls	r3, r5, #3
 8006d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d86:	00e2      	lsls	r2, r4, #3
 8006d88:	4614      	mov	r4, r2
 8006d8a:	461d      	mov	r5, r3
 8006d8c:	4643      	mov	r3, r8
 8006d8e:	18e3      	adds	r3, r4, r3
 8006d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d94:	464b      	mov	r3, r9
 8006d96:	eb45 0303 	adc.w	r3, r5, r3
 8006d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006daa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dba:	4629      	mov	r1, r5
 8006dbc:	008b      	lsls	r3, r1, #2
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	008a      	lsls	r2, r1, #2
 8006dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006dcc:	f7f9 fa68 	bl	80002a0 <__aeabi_uldivmod>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4b60      	ldr	r3, [pc, #384]	; (8006f58 <UART_SetConfig+0x4e4>)
 8006dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	011c      	lsls	r4, r3, #4
 8006dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	1891      	adds	r1, r2, r2
 8006df6:	61b9      	str	r1, [r7, #24]
 8006df8:	415b      	adcs	r3, r3
 8006dfa:	61fb      	str	r3, [r7, #28]
 8006dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e00:	4641      	mov	r1, r8
 8006e02:	1851      	adds	r1, r2, r1
 8006e04:	6139      	str	r1, [r7, #16]
 8006e06:	4649      	mov	r1, r9
 8006e08:	414b      	adcs	r3, r1
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e18:	4659      	mov	r1, fp
 8006e1a:	00cb      	lsls	r3, r1, #3
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e22:	4651      	mov	r1, sl
 8006e24:	00ca      	lsls	r2, r1, #3
 8006e26:	4610      	mov	r0, r2
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e34:	464b      	mov	r3, r9
 8006e36:	460a      	mov	r2, r1
 8006e38:	eb42 0303 	adc.w	r3, r2, r3
 8006e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e58:	4649      	mov	r1, r9
 8006e5a:	008b      	lsls	r3, r1, #2
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e62:	4641      	mov	r1, r8
 8006e64:	008a      	lsls	r2, r1, #2
 8006e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e6a:	f7f9 fa19 	bl	80002a0 <__aeabi_uldivmod>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	4b38      	ldr	r3, [pc, #224]	; (8006f58 <UART_SetConfig+0x4e4>)
 8006e76:	fba3 2301 	umull	r2, r3, r3, r1
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	2264      	movs	r2, #100	; 0x64
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	1acb      	subs	r3, r1, r3
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	3332      	adds	r3, #50	; 0x32
 8006e88:	4a33      	ldr	r2, [pc, #204]	; (8006f58 <UART_SetConfig+0x4e4>)
 8006e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e94:	441c      	add	r4, r3
 8006e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	673b      	str	r3, [r7, #112]	; 0x70
 8006e9e:	677a      	str	r2, [r7, #116]	; 0x74
 8006ea0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	1891      	adds	r1, r2, r2
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	415b      	adcs	r3, r3
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eb4:	4641      	mov	r1, r8
 8006eb6:	1851      	adds	r1, r2, r1
 8006eb8:	6039      	str	r1, [r7, #0]
 8006eba:	4649      	mov	r1, r9
 8006ebc:	414b      	adcs	r3, r1
 8006ebe:	607b      	str	r3, [r7, #4]
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ecc:	4659      	mov	r1, fp
 8006ece:	00cb      	lsls	r3, r1, #3
 8006ed0:	4651      	mov	r1, sl
 8006ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ed6:	4651      	mov	r1, sl
 8006ed8:	00ca      	lsls	r2, r1, #3
 8006eda:	4610      	mov	r0, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	189b      	adds	r3, r3, r2
 8006ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	460a      	mov	r2, r1
 8006eea:	eb42 0303 	adc.w	r3, r2, r3
 8006eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8006efa:	667a      	str	r2, [r7, #100]	; 0x64
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f08:	4649      	mov	r1, r9
 8006f0a:	008b      	lsls	r3, r1, #2
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f12:	4641      	mov	r1, r8
 8006f14:	008a      	lsls	r2, r1, #2
 8006f16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f1a:	f7f9 f9c1 	bl	80002a0 <__aeabi_uldivmod>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <UART_SetConfig+0x4e4>)
 8006f24:	fba3 1302 	umull	r1, r3, r3, r2
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	2164      	movs	r1, #100	; 0x64
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	3332      	adds	r3, #50	; 0x32
 8006f36:	4a08      	ldr	r2, [pc, #32]	; (8006f58 <UART_SetConfig+0x4e4>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	f003 020f 	and.w	r2, r3, #15
 8006f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4422      	add	r2, r4
 8006f4a:	609a      	str	r2, [r3, #8]
}
 8006f4c:	bf00      	nop
 8006f4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f52:	46bd      	mov	sp, r7
 8006f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f58:	51eb851f 	.word	0x51eb851f

08006f5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	f107 001c 	add.w	r0, r7, #28
 8006f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d122      	bne.n	8006fba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d105      	bne.n	8006fae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 faa2 	bl	80074f8 <USB_CoreReset>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
 8006fb8:	e01a      	b.n	8006ff0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa96 	bl	80074f8 <USB_CoreReset>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38
 8006fe2:	e005      	b.n	8006ff0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10b      	bne.n	800700e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f043 0206 	orr.w	r2, r3, #6
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f043 0220 	orr.w	r2, r3, #32
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800701a:	b004      	add	sp, #16
 800701c:	4770      	bx	lr

0800701e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 0201 	bic.w	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d115      	bne.n	800708e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800706e:	2001      	movs	r0, #1
 8007070:	f7fa fde0 	bl	8001c34 <HAL_Delay>
      ms++;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa2e 	bl	80074dc <USB_GetMode>
 8007080:	4603      	mov	r3, r0
 8007082:	2b01      	cmp	r3, #1
 8007084:	d01e      	beq.n	80070c4 <USB_SetCurrentMode+0x84>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b31      	cmp	r3, #49	; 0x31
 800708a:	d9f0      	bls.n	800706e <USB_SetCurrentMode+0x2e>
 800708c:	e01a      	b.n	80070c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d115      	bne.n	80070c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070a0:	2001      	movs	r0, #1
 80070a2:	f7fa fdc7 	bl	8001c34 <HAL_Delay>
      ms++;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa15 	bl	80074dc <USB_GetMode>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <USB_SetCurrentMode+0x84>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b31      	cmp	r3, #49	; 0x31
 80070bc:	d9f0      	bls.n	80070a0 <USB_SetCurrentMode+0x60>
 80070be:	e001      	b.n	80070c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e005      	b.n	80070d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b32      	cmp	r3, #50	; 0x32
 80070c8:	d101      	bne.n	80070ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070d8:	b084      	sub	sp, #16
 80070da:	b580      	push	{r7, lr}
 80070dc:	b086      	sub	sp, #24
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	e009      	b.n	800710c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	3340      	adds	r3, #64	; 0x40
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	2200      	movs	r2, #0
 8007104:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3301      	adds	r3, #1
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b0e      	cmp	r3, #14
 8007110:	d9f2      	bls.n	80070f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d11c      	bne.n	8007152 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007126:	f043 0302 	orr.w	r3, r3, #2
 800712a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	639a      	str	r2, [r3, #56]	; 0x38
 8007150:	e00b      	b.n	800716a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007170:	461a      	mov	r2, r3
 8007172:	2300      	movs	r3, #0
 8007174:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717c:	4619      	mov	r1, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007184:	461a      	mov	r2, r3
 8007186:	680b      	ldr	r3, [r1, #0]
 8007188:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	2b01      	cmp	r3, #1
 800718e:	d10c      	bne.n	80071aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007196:	2100      	movs	r1, #0
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f965 	bl	8007468 <USB_SetDevSpeed>
 800719e:	e008      	b.n	80071b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071a0:	2101      	movs	r1, #1
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f960 	bl	8007468 <USB_SetDevSpeed>
 80071a8:	e003      	b.n	80071b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071aa:	2103      	movs	r1, #3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f95b 	bl	8007468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071b2:	2110      	movs	r1, #16
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f8f3 	bl	80073a0 <USB_FlushTxFifo>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f91f 	bl	8007408 <USB_FlushRxFifo>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	461a      	mov	r2, r3
 80071dc:	2300      	movs	r3, #0
 80071de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	461a      	mov	r2, r3
 80071e8:	2300      	movs	r3, #0
 80071ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f2:	461a      	mov	r2, r3
 80071f4:	2300      	movs	r3, #0
 80071f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
 80071fc:	e043      	b.n	8007286 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007214:	d118      	bne.n	8007248 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007228:	461a      	mov	r2, r3
 800722a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	e013      	b.n	800725a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723e:	461a      	mov	r2, r3
 8007240:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	e008      	b.n	800725a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	461a      	mov	r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007266:	461a      	mov	r2, r3
 8007268:	2300      	movs	r3, #0
 800726a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007278:	461a      	mov	r2, r3
 800727a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800727e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	3301      	adds	r3, #1
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	429a      	cmp	r2, r3
 800728c:	d3b7      	bcc.n	80071fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800728e:	2300      	movs	r3, #0
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	e043      	b.n	800731c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072aa:	d118      	bne.n	80072de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	461a      	mov	r2, r3
 80072c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	e013      	b.n	80072f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	461a      	mov	r2, r3
 80072d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	e008      	b.n	80072f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	461a      	mov	r2, r3
 80072ec:	2300      	movs	r3, #0
 80072ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	461a      	mov	r2, r3
 80072fe:	2300      	movs	r3, #0
 8007300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730e:	461a      	mov	r2, r3
 8007310:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007314:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3301      	adds	r3, #1
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	429a      	cmp	r2, r3
 8007322:	d3b7      	bcc.n	8007294 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007336:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007344:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	2b00      	cmp	r3, #0
 800734a:	d105      	bne.n	8007358 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	f043 0210 	orr.w	r2, r3, #16
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699a      	ldr	r2, [r3, #24]
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <USB_DevInit+0x2c4>)
 800735e:	4313      	orrs	r3, r2
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	f043 0208 	orr.w	r2, r3, #8
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d107      	bne.n	800738c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007384:	f043 0304 	orr.w	r3, r3, #4
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007398:	b004      	add	sp, #16
 800739a:	4770      	bx	lr
 800739c:	803c3800 	.word	0x803c3800

080073a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3301      	adds	r3, #1
 80073b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4a13      	ldr	r2, [pc, #76]	; (8007404 <USB_FlushTxFifo+0x64>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d901      	bls.n	80073c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e01b      	b.n	80073f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	daf2      	bge.n	80073ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	019b      	lsls	r3, r3, #6
 80073d0:	f043 0220 	orr.w	r2, r3, #32
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4a08      	ldr	r2, [pc, #32]	; (8007404 <USB_FlushTxFifo+0x64>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e006      	b.n	80073f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d0f0      	beq.n	80073d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	00030d40 	.word	0x00030d40

08007408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a11      	ldr	r2, [pc, #68]	; (8007464 <USB_FlushRxFifo+0x5c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e018      	b.n	8007458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	daf2      	bge.n	8007414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2210      	movs	r2, #16
 8007436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4a08      	ldr	r2, [pc, #32]	; (8007464 <USB_FlushRxFifo+0x5c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d901      	bls.n	800744a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e006      	b.n	8007458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b10      	cmp	r3, #16
 8007454:	d0f0      	beq.n	8007438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	00030d40 	.word	0x00030d40

08007468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007488:	4313      	orrs	r3, r2
 800748a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c8:	f043 0302 	orr.w	r3, r3, #2
 80074cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	f003 0301 	and.w	r3, r3, #1
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3301      	adds	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4a13      	ldr	r2, [pc, #76]	; (800755c <USB_CoreReset+0x64>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e01b      	b.n	800754e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	daf2      	bge.n	8007504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f043 0201 	orr.w	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a09      	ldr	r2, [pc, #36]	; (800755c <USB_CoreReset+0x64>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d901      	bls.n	8007540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e006      	b.n	800754e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d0f0      	beq.n	800752e <USB_CoreReset+0x36>

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	00030d40 	.word	0x00030d40

08007560 <std>:
 8007560:	2300      	movs	r3, #0
 8007562:	b510      	push	{r4, lr}
 8007564:	4604      	mov	r4, r0
 8007566:	e9c0 3300 	strd	r3, r3, [r0]
 800756a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800756e:	6083      	str	r3, [r0, #8]
 8007570:	8181      	strh	r1, [r0, #12]
 8007572:	6643      	str	r3, [r0, #100]	; 0x64
 8007574:	81c2      	strh	r2, [r0, #14]
 8007576:	6183      	str	r3, [r0, #24]
 8007578:	4619      	mov	r1, r3
 800757a:	2208      	movs	r2, #8
 800757c:	305c      	adds	r0, #92	; 0x5c
 800757e:	f000 fa4b 	bl	8007a18 <memset>
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <std+0x58>)
 8007584:	6263      	str	r3, [r4, #36]	; 0x24
 8007586:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <std+0x5c>)
 8007588:	62a3      	str	r3, [r4, #40]	; 0x28
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <std+0x60>)
 800758c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800758e:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <std+0x64>)
 8007590:	6323      	str	r3, [r4, #48]	; 0x30
 8007592:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <std+0x68>)
 8007594:	6224      	str	r4, [r4, #32]
 8007596:	429c      	cmp	r4, r3
 8007598:	d006      	beq.n	80075a8 <std+0x48>
 800759a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800759e:	4294      	cmp	r4, r2
 80075a0:	d002      	beq.n	80075a8 <std+0x48>
 80075a2:	33d0      	adds	r3, #208	; 0xd0
 80075a4:	429c      	cmp	r4, r3
 80075a6:	d105      	bne.n	80075b4 <std+0x54>
 80075a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b0:	f000 baaa 	b.w	8007b08 <__retarget_lock_init_recursive>
 80075b4:	bd10      	pop	{r4, pc}
 80075b6:	bf00      	nop
 80075b8:	08007869 	.word	0x08007869
 80075bc:	0800788b 	.word	0x0800788b
 80075c0:	080078c3 	.word	0x080078c3
 80075c4:	080078e7 	.word	0x080078e7
 80075c8:	20000a8c 	.word	0x20000a8c

080075cc <stdio_exit_handler>:
 80075cc:	4a02      	ldr	r2, [pc, #8]	; (80075d8 <stdio_exit_handler+0xc>)
 80075ce:	4903      	ldr	r1, [pc, #12]	; (80075dc <stdio_exit_handler+0x10>)
 80075d0:	4803      	ldr	r0, [pc, #12]	; (80075e0 <stdio_exit_handler+0x14>)
 80075d2:	f000 b869 	b.w	80076a8 <_fwalk_sglue>
 80075d6:	bf00      	nop
 80075d8:	2000000c 	.word	0x2000000c
 80075dc:	08008665 	.word	0x08008665
 80075e0:	20000018 	.word	0x20000018

080075e4 <cleanup_stdio>:
 80075e4:	6841      	ldr	r1, [r0, #4]
 80075e6:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <cleanup_stdio+0x34>)
 80075e8:	4299      	cmp	r1, r3
 80075ea:	b510      	push	{r4, lr}
 80075ec:	4604      	mov	r4, r0
 80075ee:	d001      	beq.n	80075f4 <cleanup_stdio+0x10>
 80075f0:	f001 f838 	bl	8008664 <_fflush_r>
 80075f4:	68a1      	ldr	r1, [r4, #8]
 80075f6:	4b09      	ldr	r3, [pc, #36]	; (800761c <cleanup_stdio+0x38>)
 80075f8:	4299      	cmp	r1, r3
 80075fa:	d002      	beq.n	8007602 <cleanup_stdio+0x1e>
 80075fc:	4620      	mov	r0, r4
 80075fe:	f001 f831 	bl	8008664 <_fflush_r>
 8007602:	68e1      	ldr	r1, [r4, #12]
 8007604:	4b06      	ldr	r3, [pc, #24]	; (8007620 <cleanup_stdio+0x3c>)
 8007606:	4299      	cmp	r1, r3
 8007608:	d004      	beq.n	8007614 <cleanup_stdio+0x30>
 800760a:	4620      	mov	r0, r4
 800760c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007610:	f001 b828 	b.w	8008664 <_fflush_r>
 8007614:	bd10      	pop	{r4, pc}
 8007616:	bf00      	nop
 8007618:	20000a8c 	.word	0x20000a8c
 800761c:	20000af4 	.word	0x20000af4
 8007620:	20000b5c 	.word	0x20000b5c

08007624 <global_stdio_init.part.0>:
 8007624:	b510      	push	{r4, lr}
 8007626:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <global_stdio_init.part.0+0x30>)
 8007628:	4c0b      	ldr	r4, [pc, #44]	; (8007658 <global_stdio_init.part.0+0x34>)
 800762a:	4a0c      	ldr	r2, [pc, #48]	; (800765c <global_stdio_init.part.0+0x38>)
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	4620      	mov	r0, r4
 8007630:	2200      	movs	r2, #0
 8007632:	2104      	movs	r1, #4
 8007634:	f7ff ff94 	bl	8007560 <std>
 8007638:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800763c:	2201      	movs	r2, #1
 800763e:	2109      	movs	r1, #9
 8007640:	f7ff ff8e 	bl	8007560 <std>
 8007644:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007648:	2202      	movs	r2, #2
 800764a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764e:	2112      	movs	r1, #18
 8007650:	f7ff bf86 	b.w	8007560 <std>
 8007654:	20000bc4 	.word	0x20000bc4
 8007658:	20000a8c 	.word	0x20000a8c
 800765c:	080075cd 	.word	0x080075cd

08007660 <__sfp_lock_acquire>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__sfp_lock_acquire+0x8>)
 8007662:	f000 ba52 	b.w	8007b0a <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	20000bcd 	.word	0x20000bcd

0800766c <__sfp_lock_release>:
 800766c:	4801      	ldr	r0, [pc, #4]	; (8007674 <__sfp_lock_release+0x8>)
 800766e:	f000 ba4d 	b.w	8007b0c <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	20000bcd 	.word	0x20000bcd

08007678 <__sinit>:
 8007678:	b510      	push	{r4, lr}
 800767a:	4604      	mov	r4, r0
 800767c:	f7ff fff0 	bl	8007660 <__sfp_lock_acquire>
 8007680:	6a23      	ldr	r3, [r4, #32]
 8007682:	b11b      	cbz	r3, 800768c <__sinit+0x14>
 8007684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007688:	f7ff bff0 	b.w	800766c <__sfp_lock_release>
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <__sinit+0x28>)
 800768e:	6223      	str	r3, [r4, #32]
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <__sinit+0x2c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f5      	bne.n	8007684 <__sinit+0xc>
 8007698:	f7ff ffc4 	bl	8007624 <global_stdio_init.part.0>
 800769c:	e7f2      	b.n	8007684 <__sinit+0xc>
 800769e:	bf00      	nop
 80076a0:	080075e5 	.word	0x080075e5
 80076a4:	20000bc4 	.word	0x20000bc4

080076a8 <_fwalk_sglue>:
 80076a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ac:	4607      	mov	r7, r0
 80076ae:	4688      	mov	r8, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	2600      	movs	r6, #0
 80076b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076b8:	f1b9 0901 	subs.w	r9, r9, #1
 80076bc:	d505      	bpl.n	80076ca <_fwalk_sglue+0x22>
 80076be:	6824      	ldr	r4, [r4, #0]
 80076c0:	2c00      	cmp	r4, #0
 80076c2:	d1f7      	bne.n	80076b4 <_fwalk_sglue+0xc>
 80076c4:	4630      	mov	r0, r6
 80076c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d907      	bls.n	80076e0 <_fwalk_sglue+0x38>
 80076d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076d4:	3301      	adds	r3, #1
 80076d6:	d003      	beq.n	80076e0 <_fwalk_sglue+0x38>
 80076d8:	4629      	mov	r1, r5
 80076da:	4638      	mov	r0, r7
 80076dc:	47c0      	blx	r8
 80076de:	4306      	orrs	r6, r0
 80076e0:	3568      	adds	r5, #104	; 0x68
 80076e2:	e7e9      	b.n	80076b8 <_fwalk_sglue+0x10>

080076e4 <iprintf>:
 80076e4:	b40f      	push	{r0, r1, r2, r3}
 80076e6:	b507      	push	{r0, r1, r2, lr}
 80076e8:	4906      	ldr	r1, [pc, #24]	; (8007704 <iprintf+0x20>)
 80076ea:	ab04      	add	r3, sp, #16
 80076ec:	6808      	ldr	r0, [r1, #0]
 80076ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f2:	6881      	ldr	r1, [r0, #8]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f000 fc85 	bl	8008004 <_vfiprintf_r>
 80076fa:	b003      	add	sp, #12
 80076fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007700:	b004      	add	sp, #16
 8007702:	4770      	bx	lr
 8007704:	20000064 	.word	0x20000064

08007708 <_puts_r>:
 8007708:	6a03      	ldr	r3, [r0, #32]
 800770a:	b570      	push	{r4, r5, r6, lr}
 800770c:	6884      	ldr	r4, [r0, #8]
 800770e:	4605      	mov	r5, r0
 8007710:	460e      	mov	r6, r1
 8007712:	b90b      	cbnz	r3, 8007718 <_puts_r+0x10>
 8007714:	f7ff ffb0 	bl	8007678 <__sinit>
 8007718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771a:	07db      	lsls	r3, r3, #31
 800771c:	d405      	bmi.n	800772a <_puts_r+0x22>
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	0598      	lsls	r0, r3, #22
 8007722:	d402      	bmi.n	800772a <_puts_r+0x22>
 8007724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007726:	f000 f9f0 	bl	8007b0a <__retarget_lock_acquire_recursive>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	0719      	lsls	r1, r3, #28
 800772e:	d513      	bpl.n	8007758 <_puts_r+0x50>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	b18b      	cbz	r3, 8007758 <_puts_r+0x50>
 8007734:	3e01      	subs	r6, #1
 8007736:	68a3      	ldr	r3, [r4, #8]
 8007738:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800773c:	3b01      	subs	r3, #1
 800773e:	60a3      	str	r3, [r4, #8]
 8007740:	b9e9      	cbnz	r1, 800777e <_puts_r+0x76>
 8007742:	2b00      	cmp	r3, #0
 8007744:	da2e      	bge.n	80077a4 <_puts_r+0x9c>
 8007746:	4622      	mov	r2, r4
 8007748:	210a      	movs	r1, #10
 800774a:	4628      	mov	r0, r5
 800774c:	f000 f8cf 	bl	80078ee <__swbuf_r>
 8007750:	3001      	adds	r0, #1
 8007752:	d007      	beq.n	8007764 <_puts_r+0x5c>
 8007754:	250a      	movs	r5, #10
 8007756:	e007      	b.n	8007768 <_puts_r+0x60>
 8007758:	4621      	mov	r1, r4
 800775a:	4628      	mov	r0, r5
 800775c:	f000 f904 	bl	8007968 <__swsetup_r>
 8007760:	2800      	cmp	r0, #0
 8007762:	d0e7      	beq.n	8007734 <_puts_r+0x2c>
 8007764:	f04f 35ff 	mov.w	r5, #4294967295
 8007768:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800776a:	07da      	lsls	r2, r3, #31
 800776c:	d405      	bmi.n	800777a <_puts_r+0x72>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	059b      	lsls	r3, r3, #22
 8007772:	d402      	bmi.n	800777a <_puts_r+0x72>
 8007774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007776:	f000 f9c9 	bl	8007b0c <__retarget_lock_release_recursive>
 800777a:	4628      	mov	r0, r5
 800777c:	bd70      	pop	{r4, r5, r6, pc}
 800777e:	2b00      	cmp	r3, #0
 8007780:	da04      	bge.n	800778c <_puts_r+0x84>
 8007782:	69a2      	ldr	r2, [r4, #24]
 8007784:	429a      	cmp	r2, r3
 8007786:	dc06      	bgt.n	8007796 <_puts_r+0x8e>
 8007788:	290a      	cmp	r1, #10
 800778a:	d004      	beq.n	8007796 <_puts_r+0x8e>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	6022      	str	r2, [r4, #0]
 8007792:	7019      	strb	r1, [r3, #0]
 8007794:	e7cf      	b.n	8007736 <_puts_r+0x2e>
 8007796:	4622      	mov	r2, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f000 f8a8 	bl	80078ee <__swbuf_r>
 800779e:	3001      	adds	r0, #1
 80077a0:	d1c9      	bne.n	8007736 <_puts_r+0x2e>
 80077a2:	e7df      	b.n	8007764 <_puts_r+0x5c>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	250a      	movs	r5, #10
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	6022      	str	r2, [r4, #0]
 80077ac:	701d      	strb	r5, [r3, #0]
 80077ae:	e7db      	b.n	8007768 <_puts_r+0x60>

080077b0 <puts>:
 80077b0:	4b02      	ldr	r3, [pc, #8]	; (80077bc <puts+0xc>)
 80077b2:	4601      	mov	r1, r0
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	f7ff bfa7 	b.w	8007708 <_puts_r>
 80077ba:	bf00      	nop
 80077bc:	20000064 	.word	0x20000064

080077c0 <sniprintf>:
 80077c0:	b40c      	push	{r2, r3}
 80077c2:	b530      	push	{r4, r5, lr}
 80077c4:	4b17      	ldr	r3, [pc, #92]	; (8007824 <sniprintf+0x64>)
 80077c6:	1e0c      	subs	r4, r1, #0
 80077c8:	681d      	ldr	r5, [r3, #0]
 80077ca:	b09d      	sub	sp, #116	; 0x74
 80077cc:	da08      	bge.n	80077e0 <sniprintf+0x20>
 80077ce:	238b      	movs	r3, #139	; 0x8b
 80077d0:	602b      	str	r3, [r5, #0]
 80077d2:	f04f 30ff 	mov.w	r0, #4294967295
 80077d6:	b01d      	add	sp, #116	; 0x74
 80077d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077dc:	b002      	add	sp, #8
 80077de:	4770      	bx	lr
 80077e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80077e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077e8:	bf14      	ite	ne
 80077ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077ee:	4623      	moveq	r3, r4
 80077f0:	9304      	str	r3, [sp, #16]
 80077f2:	9307      	str	r3, [sp, #28]
 80077f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077f8:	9002      	str	r0, [sp, #8]
 80077fa:	9006      	str	r0, [sp, #24]
 80077fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007800:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007802:	ab21      	add	r3, sp, #132	; 0x84
 8007804:	a902      	add	r1, sp, #8
 8007806:	4628      	mov	r0, r5
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	f000 fad3 	bl	8007db4 <_svfiprintf_r>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	bfbc      	itt	lt
 8007812:	238b      	movlt	r3, #139	; 0x8b
 8007814:	602b      	strlt	r3, [r5, #0]
 8007816:	2c00      	cmp	r4, #0
 8007818:	d0dd      	beq.n	80077d6 <sniprintf+0x16>
 800781a:	9b02      	ldr	r3, [sp, #8]
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e7d9      	b.n	80077d6 <sniprintf+0x16>
 8007822:	bf00      	nop
 8007824:	20000064 	.word	0x20000064

08007828 <siprintf>:
 8007828:	b40e      	push	{r1, r2, r3}
 800782a:	b500      	push	{lr}
 800782c:	b09c      	sub	sp, #112	; 0x70
 800782e:	ab1d      	add	r3, sp, #116	; 0x74
 8007830:	9002      	str	r0, [sp, #8]
 8007832:	9006      	str	r0, [sp, #24]
 8007834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007838:	4809      	ldr	r0, [pc, #36]	; (8007860 <siprintf+0x38>)
 800783a:	9107      	str	r1, [sp, #28]
 800783c:	9104      	str	r1, [sp, #16]
 800783e:	4909      	ldr	r1, [pc, #36]	; (8007864 <siprintf+0x3c>)
 8007840:	f853 2b04 	ldr.w	r2, [r3], #4
 8007844:	9105      	str	r1, [sp, #20]
 8007846:	6800      	ldr	r0, [r0, #0]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	a902      	add	r1, sp, #8
 800784c:	f000 fab2 	bl	8007db4 <_svfiprintf_r>
 8007850:	9b02      	ldr	r3, [sp, #8]
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	b01c      	add	sp, #112	; 0x70
 8007858:	f85d eb04 	ldr.w	lr, [sp], #4
 800785c:	b003      	add	sp, #12
 800785e:	4770      	bx	lr
 8007860:	20000064 	.word	0x20000064
 8007864:	ffff0208 	.word	0xffff0208

08007868 <__sread>:
 8007868:	b510      	push	{r4, lr}
 800786a:	460c      	mov	r4, r1
 800786c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007870:	f000 f8fc 	bl	8007a6c <_read_r>
 8007874:	2800      	cmp	r0, #0
 8007876:	bfab      	itete	ge
 8007878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800787a:	89a3      	ldrhlt	r3, [r4, #12]
 800787c:	181b      	addge	r3, r3, r0
 800787e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007882:	bfac      	ite	ge
 8007884:	6563      	strge	r3, [r4, #84]	; 0x54
 8007886:	81a3      	strhlt	r3, [r4, #12]
 8007888:	bd10      	pop	{r4, pc}

0800788a <__swrite>:
 800788a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800788e:	461f      	mov	r7, r3
 8007890:	898b      	ldrh	r3, [r1, #12]
 8007892:	05db      	lsls	r3, r3, #23
 8007894:	4605      	mov	r5, r0
 8007896:	460c      	mov	r4, r1
 8007898:	4616      	mov	r6, r2
 800789a:	d505      	bpl.n	80078a8 <__swrite+0x1e>
 800789c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a0:	2302      	movs	r3, #2
 80078a2:	2200      	movs	r2, #0
 80078a4:	f000 f8d0 	bl	8007a48 <_lseek_r>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	4628      	mov	r0, r5
 80078ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	f000 b8e7 	b.w	8007a90 <_write_r>

080078c2 <__sseek>:
 80078c2:	b510      	push	{r4, lr}
 80078c4:	460c      	mov	r4, r1
 80078c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ca:	f000 f8bd 	bl	8007a48 <_lseek_r>
 80078ce:	1c43      	adds	r3, r0, #1
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	bf15      	itete	ne
 80078d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078de:	81a3      	strheq	r3, [r4, #12]
 80078e0:	bf18      	it	ne
 80078e2:	81a3      	strhne	r3, [r4, #12]
 80078e4:	bd10      	pop	{r4, pc}

080078e6 <__sclose>:
 80078e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ea:	f000 b89d 	b.w	8007a28 <_close_r>

080078ee <__swbuf_r>:
 80078ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f0:	460e      	mov	r6, r1
 80078f2:	4614      	mov	r4, r2
 80078f4:	4605      	mov	r5, r0
 80078f6:	b118      	cbz	r0, 8007900 <__swbuf_r+0x12>
 80078f8:	6a03      	ldr	r3, [r0, #32]
 80078fa:	b90b      	cbnz	r3, 8007900 <__swbuf_r+0x12>
 80078fc:	f7ff febc 	bl	8007678 <__sinit>
 8007900:	69a3      	ldr	r3, [r4, #24]
 8007902:	60a3      	str	r3, [r4, #8]
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	071a      	lsls	r2, r3, #28
 8007908:	d525      	bpl.n	8007956 <__swbuf_r+0x68>
 800790a:	6923      	ldr	r3, [r4, #16]
 800790c:	b31b      	cbz	r3, 8007956 <__swbuf_r+0x68>
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	6922      	ldr	r2, [r4, #16]
 8007912:	1a98      	subs	r0, r3, r2
 8007914:	6963      	ldr	r3, [r4, #20]
 8007916:	b2f6      	uxtb	r6, r6
 8007918:	4283      	cmp	r3, r0
 800791a:	4637      	mov	r7, r6
 800791c:	dc04      	bgt.n	8007928 <__swbuf_r+0x3a>
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f000 fe9f 	bl	8008664 <_fflush_r>
 8007926:	b9e0      	cbnz	r0, 8007962 <__swbuf_r+0x74>
 8007928:	68a3      	ldr	r3, [r4, #8]
 800792a:	3b01      	subs	r3, #1
 800792c:	60a3      	str	r3, [r4, #8]
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	6022      	str	r2, [r4, #0]
 8007934:	701e      	strb	r6, [r3, #0]
 8007936:	6962      	ldr	r2, [r4, #20]
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	429a      	cmp	r2, r3
 800793c:	d004      	beq.n	8007948 <__swbuf_r+0x5a>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	07db      	lsls	r3, r3, #31
 8007942:	d506      	bpl.n	8007952 <__swbuf_r+0x64>
 8007944:	2e0a      	cmp	r6, #10
 8007946:	d104      	bne.n	8007952 <__swbuf_r+0x64>
 8007948:	4621      	mov	r1, r4
 800794a:	4628      	mov	r0, r5
 800794c:	f000 fe8a 	bl	8008664 <_fflush_r>
 8007950:	b938      	cbnz	r0, 8007962 <__swbuf_r+0x74>
 8007952:	4638      	mov	r0, r7
 8007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007956:	4621      	mov	r1, r4
 8007958:	4628      	mov	r0, r5
 800795a:	f000 f805 	bl	8007968 <__swsetup_r>
 800795e:	2800      	cmp	r0, #0
 8007960:	d0d5      	beq.n	800790e <__swbuf_r+0x20>
 8007962:	f04f 37ff 	mov.w	r7, #4294967295
 8007966:	e7f4      	b.n	8007952 <__swbuf_r+0x64>

08007968 <__swsetup_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <__swsetup_r+0xac>)
 800796c:	4605      	mov	r5, r0
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	460c      	mov	r4, r1
 8007972:	b118      	cbz	r0, 800797c <__swsetup_r+0x14>
 8007974:	6a03      	ldr	r3, [r0, #32]
 8007976:	b90b      	cbnz	r3, 800797c <__swsetup_r+0x14>
 8007978:	f7ff fe7e 	bl	8007678 <__sinit>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007982:	0718      	lsls	r0, r3, #28
 8007984:	d422      	bmi.n	80079cc <__swsetup_r+0x64>
 8007986:	06d9      	lsls	r1, r3, #27
 8007988:	d407      	bmi.n	800799a <__swsetup_r+0x32>
 800798a:	2309      	movs	r3, #9
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007992:	81a3      	strh	r3, [r4, #12]
 8007994:	f04f 30ff 	mov.w	r0, #4294967295
 8007998:	e034      	b.n	8007a04 <__swsetup_r+0x9c>
 800799a:	0758      	lsls	r0, r3, #29
 800799c:	d512      	bpl.n	80079c4 <__swsetup_r+0x5c>
 800799e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a0:	b141      	cbz	r1, 80079b4 <__swsetup_r+0x4c>
 80079a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a6:	4299      	cmp	r1, r3
 80079a8:	d002      	beq.n	80079b0 <__swsetup_r+0x48>
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 f8b0 	bl	8007b10 <_free_r>
 80079b0:	2300      	movs	r3, #0
 80079b2:	6363      	str	r3, [r4, #52]	; 0x34
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	2300      	movs	r3, #0
 80079be:	6063      	str	r3, [r4, #4]
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	6023      	str	r3, [r4, #0]
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	f043 0308 	orr.w	r3, r3, #8
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	b94b      	cbnz	r3, 80079e4 <__swsetup_r+0x7c>
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079da:	d003      	beq.n	80079e4 <__swsetup_r+0x7c>
 80079dc:	4621      	mov	r1, r4
 80079de:	4628      	mov	r0, r5
 80079e0:	f000 fe8e 	bl	8008700 <__smakebuf_r>
 80079e4:	89a0      	ldrh	r0, [r4, #12]
 80079e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ea:	f010 0301 	ands.w	r3, r0, #1
 80079ee:	d00a      	beq.n	8007a06 <__swsetup_r+0x9e>
 80079f0:	2300      	movs	r3, #0
 80079f2:	60a3      	str	r3, [r4, #8]
 80079f4:	6963      	ldr	r3, [r4, #20]
 80079f6:	425b      	negs	r3, r3
 80079f8:	61a3      	str	r3, [r4, #24]
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	b943      	cbnz	r3, 8007a10 <__swsetup_r+0xa8>
 80079fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a02:	d1c4      	bne.n	800798e <__swsetup_r+0x26>
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	0781      	lsls	r1, r0, #30
 8007a08:	bf58      	it	pl
 8007a0a:	6963      	ldrpl	r3, [r4, #20]
 8007a0c:	60a3      	str	r3, [r4, #8]
 8007a0e:	e7f4      	b.n	80079fa <__swsetup_r+0x92>
 8007a10:	2000      	movs	r0, #0
 8007a12:	e7f7      	b.n	8007a04 <__swsetup_r+0x9c>
 8007a14:	20000064 	.word	0x20000064

08007a18 <memset>:
 8007a18:	4402      	add	r2, r0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d100      	bne.n	8007a22 <memset+0xa>
 8007a20:	4770      	bx	lr
 8007a22:	f803 1b01 	strb.w	r1, [r3], #1
 8007a26:	e7f9      	b.n	8007a1c <memset+0x4>

08007a28 <_close_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d06      	ldr	r5, [pc, #24]	; (8007a44 <_close_r+0x1c>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7f9 ffe5 	bl	8001a02 <_close>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_close_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_close_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	20000bc8 	.word	0x20000bc8

08007a48 <_lseek_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d07      	ldr	r5, [pc, #28]	; (8007a68 <_lseek_r+0x20>)
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	4608      	mov	r0, r1
 8007a50:	4611      	mov	r1, r2
 8007a52:	2200      	movs	r2, #0
 8007a54:	602a      	str	r2, [r5, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f7f9 fffa 	bl	8001a50 <_lseek>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_lseek_r+0x1e>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_lseek_r+0x1e>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20000bc8 	.word	0x20000bc8

08007a6c <_read_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	; (8007a8c <_read_r+0x20>)
 8007a70:	4604      	mov	r4, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7f9 ffa4 	bl	80019c8 <_read>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_read_r+0x1e>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_read_r+0x1e>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	20000bc8 	.word	0x20000bc8

08007a90 <_write_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	; (8007ab0 <_write_r+0x20>)
 8007a94:	4604      	mov	r4, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	602a      	str	r2, [r5, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f7f8 fece 	bl	8000840 <_write>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_write_r+0x1e>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_write_r+0x1e>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	20000bc8 	.word	0x20000bc8

08007ab4 <__errno>:
 8007ab4:	4b01      	ldr	r3, [pc, #4]	; (8007abc <__errno+0x8>)
 8007ab6:	6818      	ldr	r0, [r3, #0]
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	20000064 	.word	0x20000064

08007ac0 <__libc_init_array>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	4d0d      	ldr	r5, [pc, #52]	; (8007af8 <__libc_init_array+0x38>)
 8007ac4:	4c0d      	ldr	r4, [pc, #52]	; (8007afc <__libc_init_array+0x3c>)
 8007ac6:	1b64      	subs	r4, r4, r5
 8007ac8:	10a4      	asrs	r4, r4, #2
 8007aca:	2600      	movs	r6, #0
 8007acc:	42a6      	cmp	r6, r4
 8007ace:	d109      	bne.n	8007ae4 <__libc_init_array+0x24>
 8007ad0:	4d0b      	ldr	r5, [pc, #44]	; (8007b00 <__libc_init_array+0x40>)
 8007ad2:	4c0c      	ldr	r4, [pc, #48]	; (8007b04 <__libc_init_array+0x44>)
 8007ad4:	f000 fee2 	bl	800889c <_init>
 8007ad8:	1b64      	subs	r4, r4, r5
 8007ada:	10a4      	asrs	r4, r4, #2
 8007adc:	2600      	movs	r6, #0
 8007ade:	42a6      	cmp	r6, r4
 8007ae0:	d105      	bne.n	8007aee <__libc_init_array+0x2e>
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae8:	4798      	blx	r3
 8007aea:	3601      	adds	r6, #1
 8007aec:	e7ee      	b.n	8007acc <__libc_init_array+0xc>
 8007aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af2:	4798      	blx	r3
 8007af4:	3601      	adds	r6, #1
 8007af6:	e7f2      	b.n	8007ade <__libc_init_array+0x1e>
 8007af8:	08008a7c 	.word	0x08008a7c
 8007afc:	08008a7c 	.word	0x08008a7c
 8007b00:	08008a7c 	.word	0x08008a7c
 8007b04:	08008a80 	.word	0x08008a80

08007b08 <__retarget_lock_init_recursive>:
 8007b08:	4770      	bx	lr

08007b0a <__retarget_lock_acquire_recursive>:
 8007b0a:	4770      	bx	lr

08007b0c <__retarget_lock_release_recursive>:
 8007b0c:	4770      	bx	lr
	...

08007b10 <_free_r>:
 8007b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b12:	2900      	cmp	r1, #0
 8007b14:	d044      	beq.n	8007ba0 <_free_r+0x90>
 8007b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b1a:	9001      	str	r0, [sp, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b22:	bfb8      	it	lt
 8007b24:	18e4      	addlt	r4, r4, r3
 8007b26:	f000 f8df 	bl	8007ce8 <__malloc_lock>
 8007b2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ba4 <_free_r+0x94>)
 8007b2c:	9801      	ldr	r0, [sp, #4]
 8007b2e:	6813      	ldr	r3, [r2, #0]
 8007b30:	b933      	cbnz	r3, 8007b40 <_free_r+0x30>
 8007b32:	6063      	str	r3, [r4, #4]
 8007b34:	6014      	str	r4, [r2, #0]
 8007b36:	b003      	add	sp, #12
 8007b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b3c:	f000 b8da 	b.w	8007cf4 <__malloc_unlock>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d908      	bls.n	8007b56 <_free_r+0x46>
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf01      	itttt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	1949      	addeq	r1, r1, r5
 8007b52:	6021      	streq	r1, [r4, #0]
 8007b54:	e7ed      	b.n	8007b32 <_free_r+0x22>
 8007b56:	461a      	mov	r2, r3
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	b10b      	cbz	r3, 8007b60 <_free_r+0x50>
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	d9fa      	bls.n	8007b56 <_free_r+0x46>
 8007b60:	6811      	ldr	r1, [r2, #0]
 8007b62:	1855      	adds	r5, r2, r1
 8007b64:	42a5      	cmp	r5, r4
 8007b66:	d10b      	bne.n	8007b80 <_free_r+0x70>
 8007b68:	6824      	ldr	r4, [r4, #0]
 8007b6a:	4421      	add	r1, r4
 8007b6c:	1854      	adds	r4, r2, r1
 8007b6e:	42a3      	cmp	r3, r4
 8007b70:	6011      	str	r1, [r2, #0]
 8007b72:	d1e0      	bne.n	8007b36 <_free_r+0x26>
 8007b74:	681c      	ldr	r4, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	6053      	str	r3, [r2, #4]
 8007b7a:	440c      	add	r4, r1
 8007b7c:	6014      	str	r4, [r2, #0]
 8007b7e:	e7da      	b.n	8007b36 <_free_r+0x26>
 8007b80:	d902      	bls.n	8007b88 <_free_r+0x78>
 8007b82:	230c      	movs	r3, #12
 8007b84:	6003      	str	r3, [r0, #0]
 8007b86:	e7d6      	b.n	8007b36 <_free_r+0x26>
 8007b88:	6825      	ldr	r5, [r4, #0]
 8007b8a:	1961      	adds	r1, r4, r5
 8007b8c:	428b      	cmp	r3, r1
 8007b8e:	bf04      	itt	eq
 8007b90:	6819      	ldreq	r1, [r3, #0]
 8007b92:	685b      	ldreq	r3, [r3, #4]
 8007b94:	6063      	str	r3, [r4, #4]
 8007b96:	bf04      	itt	eq
 8007b98:	1949      	addeq	r1, r1, r5
 8007b9a:	6021      	streq	r1, [r4, #0]
 8007b9c:	6054      	str	r4, [r2, #4]
 8007b9e:	e7ca      	b.n	8007b36 <_free_r+0x26>
 8007ba0:	b003      	add	sp, #12
 8007ba2:	bd30      	pop	{r4, r5, pc}
 8007ba4:	20000bd0 	.word	0x20000bd0

08007ba8 <sbrk_aligned>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4e0e      	ldr	r6, [pc, #56]	; (8007be4 <sbrk_aligned+0x3c>)
 8007bac:	460c      	mov	r4, r1
 8007bae:	6831      	ldr	r1, [r6, #0]
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	b911      	cbnz	r1, 8007bba <sbrk_aligned+0x12>
 8007bb4:	f000 fe1c 	bl	80087f0 <_sbrk_r>
 8007bb8:	6030      	str	r0, [r6, #0]
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 fe17 	bl	80087f0 <_sbrk_r>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d00a      	beq.n	8007bdc <sbrk_aligned+0x34>
 8007bc6:	1cc4      	adds	r4, r0, #3
 8007bc8:	f024 0403 	bic.w	r4, r4, #3
 8007bcc:	42a0      	cmp	r0, r4
 8007bce:	d007      	beq.n	8007be0 <sbrk_aligned+0x38>
 8007bd0:	1a21      	subs	r1, r4, r0
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 fe0c 	bl	80087f0 <_sbrk_r>
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d101      	bne.n	8007be0 <sbrk_aligned+0x38>
 8007bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8007be0:	4620      	mov	r0, r4
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	20000bd4 	.word	0x20000bd4

08007be8 <_malloc_r>:
 8007be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bec:	1ccd      	adds	r5, r1, #3
 8007bee:	f025 0503 	bic.w	r5, r5, #3
 8007bf2:	3508      	adds	r5, #8
 8007bf4:	2d0c      	cmp	r5, #12
 8007bf6:	bf38      	it	cc
 8007bf8:	250c      	movcc	r5, #12
 8007bfa:	2d00      	cmp	r5, #0
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	db01      	blt.n	8007c04 <_malloc_r+0x1c>
 8007c00:	42a9      	cmp	r1, r5
 8007c02:	d905      	bls.n	8007c10 <_malloc_r+0x28>
 8007c04:	230c      	movs	r3, #12
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	2600      	movs	r6, #0
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ce4 <_malloc_r+0xfc>
 8007c14:	f000 f868 	bl	8007ce8 <__malloc_lock>
 8007c18:	f8d8 3000 	ldr.w	r3, [r8]
 8007c1c:	461c      	mov	r4, r3
 8007c1e:	bb5c      	cbnz	r4, 8007c78 <_malloc_r+0x90>
 8007c20:	4629      	mov	r1, r5
 8007c22:	4638      	mov	r0, r7
 8007c24:	f7ff ffc0 	bl	8007ba8 <sbrk_aligned>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	d155      	bne.n	8007cda <_malloc_r+0xf2>
 8007c2e:	f8d8 4000 	ldr.w	r4, [r8]
 8007c32:	4626      	mov	r6, r4
 8007c34:	2e00      	cmp	r6, #0
 8007c36:	d145      	bne.n	8007cc4 <_malloc_r+0xdc>
 8007c38:	2c00      	cmp	r4, #0
 8007c3a:	d048      	beq.n	8007cce <_malloc_r+0xe6>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4638      	mov	r0, r7
 8007c42:	eb04 0903 	add.w	r9, r4, r3
 8007c46:	f000 fdd3 	bl	80087f0 <_sbrk_r>
 8007c4a:	4581      	cmp	r9, r0
 8007c4c:	d13f      	bne.n	8007cce <_malloc_r+0xe6>
 8007c4e:	6821      	ldr	r1, [r4, #0]
 8007c50:	1a6d      	subs	r5, r5, r1
 8007c52:	4629      	mov	r1, r5
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7ff ffa7 	bl	8007ba8 <sbrk_aligned>
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d037      	beq.n	8007cce <_malloc_r+0xe6>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	442b      	add	r3, r5
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	f8d8 3000 	ldr.w	r3, [r8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d038      	beq.n	8007cde <_malloc_r+0xf6>
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	42a2      	cmp	r2, r4
 8007c70:	d12b      	bne.n	8007cca <_malloc_r+0xe2>
 8007c72:	2200      	movs	r2, #0
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	e00f      	b.n	8007c98 <_malloc_r+0xb0>
 8007c78:	6822      	ldr	r2, [r4, #0]
 8007c7a:	1b52      	subs	r2, r2, r5
 8007c7c:	d41f      	bmi.n	8007cbe <_malloc_r+0xd6>
 8007c7e:	2a0b      	cmp	r2, #11
 8007c80:	d917      	bls.n	8007cb2 <_malloc_r+0xca>
 8007c82:	1961      	adds	r1, r4, r5
 8007c84:	42a3      	cmp	r3, r4
 8007c86:	6025      	str	r5, [r4, #0]
 8007c88:	bf18      	it	ne
 8007c8a:	6059      	strne	r1, [r3, #4]
 8007c8c:	6863      	ldr	r3, [r4, #4]
 8007c8e:	bf08      	it	eq
 8007c90:	f8c8 1000 	streq.w	r1, [r8]
 8007c94:	5162      	str	r2, [r4, r5]
 8007c96:	604b      	str	r3, [r1, #4]
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f104 060b 	add.w	r6, r4, #11
 8007c9e:	f000 f829 	bl	8007cf4 <__malloc_unlock>
 8007ca2:	f026 0607 	bic.w	r6, r6, #7
 8007ca6:	1d23      	adds	r3, r4, #4
 8007ca8:	1af2      	subs	r2, r6, r3
 8007caa:	d0ae      	beq.n	8007c0a <_malloc_r+0x22>
 8007cac:	1b9b      	subs	r3, r3, r6
 8007cae:	50a3      	str	r3, [r4, r2]
 8007cb0:	e7ab      	b.n	8007c0a <_malloc_r+0x22>
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	6862      	ldr	r2, [r4, #4]
 8007cb6:	d1dd      	bne.n	8007c74 <_malloc_r+0x8c>
 8007cb8:	f8c8 2000 	str.w	r2, [r8]
 8007cbc:	e7ec      	b.n	8007c98 <_malloc_r+0xb0>
 8007cbe:	4623      	mov	r3, r4
 8007cc0:	6864      	ldr	r4, [r4, #4]
 8007cc2:	e7ac      	b.n	8007c1e <_malloc_r+0x36>
 8007cc4:	4634      	mov	r4, r6
 8007cc6:	6876      	ldr	r6, [r6, #4]
 8007cc8:	e7b4      	b.n	8007c34 <_malloc_r+0x4c>
 8007cca:	4613      	mov	r3, r2
 8007ccc:	e7cc      	b.n	8007c68 <_malloc_r+0x80>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	603b      	str	r3, [r7, #0]
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f000 f80e 	bl	8007cf4 <__malloc_unlock>
 8007cd8:	e797      	b.n	8007c0a <_malloc_r+0x22>
 8007cda:	6025      	str	r5, [r4, #0]
 8007cdc:	e7dc      	b.n	8007c98 <_malloc_r+0xb0>
 8007cde:	605b      	str	r3, [r3, #4]
 8007ce0:	deff      	udf	#255	; 0xff
 8007ce2:	bf00      	nop
 8007ce4:	20000bd0 	.word	0x20000bd0

08007ce8 <__malloc_lock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	; (8007cf0 <__malloc_lock+0x8>)
 8007cea:	f7ff bf0e 	b.w	8007b0a <__retarget_lock_acquire_recursive>
 8007cee:	bf00      	nop
 8007cf0:	20000bcc 	.word	0x20000bcc

08007cf4 <__malloc_unlock>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	; (8007cfc <__malloc_unlock+0x8>)
 8007cf6:	f7ff bf09 	b.w	8007b0c <__retarget_lock_release_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	20000bcc 	.word	0x20000bcc

08007d00 <__ssputs_r>:
 8007d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d04:	688e      	ldr	r6, [r1, #8]
 8007d06:	461f      	mov	r7, r3
 8007d08:	42be      	cmp	r6, r7
 8007d0a:	680b      	ldr	r3, [r1, #0]
 8007d0c:	4682      	mov	sl, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4690      	mov	r8, r2
 8007d12:	d82c      	bhi.n	8007d6e <__ssputs_r+0x6e>
 8007d14:	898a      	ldrh	r2, [r1, #12]
 8007d16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d1a:	d026      	beq.n	8007d6a <__ssputs_r+0x6a>
 8007d1c:	6965      	ldr	r5, [r4, #20]
 8007d1e:	6909      	ldr	r1, [r1, #16]
 8007d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d24:	eba3 0901 	sub.w	r9, r3, r1
 8007d28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d2c:	1c7b      	adds	r3, r7, #1
 8007d2e:	444b      	add	r3, r9
 8007d30:	106d      	asrs	r5, r5, #1
 8007d32:	429d      	cmp	r5, r3
 8007d34:	bf38      	it	cc
 8007d36:	461d      	movcc	r5, r3
 8007d38:	0553      	lsls	r3, r2, #21
 8007d3a:	d527      	bpl.n	8007d8c <__ssputs_r+0x8c>
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	f7ff ff53 	bl	8007be8 <_malloc_r>
 8007d42:	4606      	mov	r6, r0
 8007d44:	b360      	cbz	r0, 8007da0 <__ssputs_r+0xa0>
 8007d46:	6921      	ldr	r1, [r4, #16]
 8007d48:	464a      	mov	r2, r9
 8007d4a:	f000 fd61 	bl	8008810 <memcpy>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	6126      	str	r6, [r4, #16]
 8007d5c:	6165      	str	r5, [r4, #20]
 8007d5e:	444e      	add	r6, r9
 8007d60:	eba5 0509 	sub.w	r5, r5, r9
 8007d64:	6026      	str	r6, [r4, #0]
 8007d66:	60a5      	str	r5, [r4, #8]
 8007d68:	463e      	mov	r6, r7
 8007d6a:	42be      	cmp	r6, r7
 8007d6c:	d900      	bls.n	8007d70 <__ssputs_r+0x70>
 8007d6e:	463e      	mov	r6, r7
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	4632      	mov	r2, r6
 8007d74:	4641      	mov	r1, r8
 8007d76:	f000 fcff 	bl	8008778 <memmove>
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	1b9b      	subs	r3, r3, r6
 8007d7e:	60a3      	str	r3, [r4, #8]
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	4433      	add	r3, r6
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	2000      	movs	r0, #0
 8007d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	f000 fd4d 	bl	800882c <_realloc_r>
 8007d92:	4606      	mov	r6, r0
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d1e0      	bne.n	8007d5a <__ssputs_r+0x5a>
 8007d98:	6921      	ldr	r1, [r4, #16]
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f7ff feb8 	bl	8007b10 <_free_r>
 8007da0:	230c      	movs	r3, #12
 8007da2:	f8ca 3000 	str.w	r3, [sl]
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	f04f 30ff 	mov.w	r0, #4294967295
 8007db2:	e7e9      	b.n	8007d88 <__ssputs_r+0x88>

08007db4 <_svfiprintf_r>:
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	4698      	mov	r8, r3
 8007dba:	898b      	ldrh	r3, [r1, #12]
 8007dbc:	061b      	lsls	r3, r3, #24
 8007dbe:	b09d      	sub	sp, #116	; 0x74
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	460d      	mov	r5, r1
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	d50e      	bpl.n	8007de6 <_svfiprintf_r+0x32>
 8007dc8:	690b      	ldr	r3, [r1, #16]
 8007dca:	b963      	cbnz	r3, 8007de6 <_svfiprintf_r+0x32>
 8007dcc:	2140      	movs	r1, #64	; 0x40
 8007dce:	f7ff ff0b 	bl	8007be8 <_malloc_r>
 8007dd2:	6028      	str	r0, [r5, #0]
 8007dd4:	6128      	str	r0, [r5, #16]
 8007dd6:	b920      	cbnz	r0, 8007de2 <_svfiprintf_r+0x2e>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8007de0:	e0d0      	b.n	8007f84 <_svfiprintf_r+0x1d0>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	616b      	str	r3, [r5, #20]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dea:	2320      	movs	r3, #32
 8007dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df4:	2330      	movs	r3, #48	; 0x30
 8007df6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f9c <_svfiprintf_r+0x1e8>
 8007dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dfe:	f04f 0901 	mov.w	r9, #1
 8007e02:	4623      	mov	r3, r4
 8007e04:	469a      	mov	sl, r3
 8007e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e0a:	b10a      	cbz	r2, 8007e10 <_svfiprintf_r+0x5c>
 8007e0c:	2a25      	cmp	r2, #37	; 0x25
 8007e0e:	d1f9      	bne.n	8007e04 <_svfiprintf_r+0x50>
 8007e10:	ebba 0b04 	subs.w	fp, sl, r4
 8007e14:	d00b      	beq.n	8007e2e <_svfiprintf_r+0x7a>
 8007e16:	465b      	mov	r3, fp
 8007e18:	4622      	mov	r2, r4
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f7ff ff6f 	bl	8007d00 <__ssputs_r>
 8007e22:	3001      	adds	r0, #1
 8007e24:	f000 80a9 	beq.w	8007f7a <_svfiprintf_r+0x1c6>
 8007e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e2a:	445a      	add	r2, fp
 8007e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 80a1 	beq.w	8007f7a <_svfiprintf_r+0x1c6>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e42:	f10a 0a01 	add.w	sl, sl, #1
 8007e46:	9304      	str	r3, [sp, #16]
 8007e48:	9307      	str	r3, [sp, #28]
 8007e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8007e50:	4654      	mov	r4, sl
 8007e52:	2205      	movs	r2, #5
 8007e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e58:	4850      	ldr	r0, [pc, #320]	; (8007f9c <_svfiprintf_r+0x1e8>)
 8007e5a:	f7f8 f9d1 	bl	8000200 <memchr>
 8007e5e:	9a04      	ldr	r2, [sp, #16]
 8007e60:	b9d8      	cbnz	r0, 8007e9a <_svfiprintf_r+0xe6>
 8007e62:	06d0      	lsls	r0, r2, #27
 8007e64:	bf44      	itt	mi
 8007e66:	2320      	movmi	r3, #32
 8007e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6c:	0711      	lsls	r1, r2, #28
 8007e6e:	bf44      	itt	mi
 8007e70:	232b      	movmi	r3, #43	; 0x2b
 8007e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e76:	f89a 3000 	ldrb.w	r3, [sl]
 8007e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7c:	d015      	beq.n	8007eaa <_svfiprintf_r+0xf6>
 8007e7e:	9a07      	ldr	r2, [sp, #28]
 8007e80:	4654      	mov	r4, sl
 8007e82:	2000      	movs	r0, #0
 8007e84:	f04f 0c0a 	mov.w	ip, #10
 8007e88:	4621      	mov	r1, r4
 8007e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8e:	3b30      	subs	r3, #48	; 0x30
 8007e90:	2b09      	cmp	r3, #9
 8007e92:	d94d      	bls.n	8007f30 <_svfiprintf_r+0x17c>
 8007e94:	b1b0      	cbz	r0, 8007ec4 <_svfiprintf_r+0x110>
 8007e96:	9207      	str	r2, [sp, #28]
 8007e98:	e014      	b.n	8007ec4 <_svfiprintf_r+0x110>
 8007e9a:	eba0 0308 	sub.w	r3, r0, r8
 8007e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	46a2      	mov	sl, r4
 8007ea8:	e7d2      	b.n	8007e50 <_svfiprintf_r+0x9c>
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	1d19      	adds	r1, r3, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	9103      	str	r1, [sp, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfbb      	ittet	lt
 8007eb6:	425b      	neglt	r3, r3
 8007eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8007ebc:	9307      	strge	r3, [sp, #28]
 8007ebe:	9307      	strlt	r3, [sp, #28]
 8007ec0:	bfb8      	it	lt
 8007ec2:	9204      	strlt	r2, [sp, #16]
 8007ec4:	7823      	ldrb	r3, [r4, #0]
 8007ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ec8:	d10c      	bne.n	8007ee4 <_svfiprintf_r+0x130>
 8007eca:	7863      	ldrb	r3, [r4, #1]
 8007ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ece:	d134      	bne.n	8007f3a <_svfiprintf_r+0x186>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	1d1a      	adds	r2, r3, #4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	9203      	str	r2, [sp, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bfb8      	it	lt
 8007edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ee0:	3402      	adds	r4, #2
 8007ee2:	9305      	str	r3, [sp, #20]
 8007ee4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007fac <_svfiprintf_r+0x1f8>
 8007ee8:	7821      	ldrb	r1, [r4, #0]
 8007eea:	2203      	movs	r2, #3
 8007eec:	4650      	mov	r0, sl
 8007eee:	f7f8 f987 	bl	8000200 <memchr>
 8007ef2:	b138      	cbz	r0, 8007f04 <_svfiprintf_r+0x150>
 8007ef4:	9b04      	ldr	r3, [sp, #16]
 8007ef6:	eba0 000a 	sub.w	r0, r0, sl
 8007efa:	2240      	movs	r2, #64	; 0x40
 8007efc:	4082      	lsls	r2, r0
 8007efe:	4313      	orrs	r3, r2
 8007f00:	3401      	adds	r4, #1
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f08:	4825      	ldr	r0, [pc, #148]	; (8007fa0 <_svfiprintf_r+0x1ec>)
 8007f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f0e:	2206      	movs	r2, #6
 8007f10:	f7f8 f976 	bl	8000200 <memchr>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d038      	beq.n	8007f8a <_svfiprintf_r+0x1d6>
 8007f18:	4b22      	ldr	r3, [pc, #136]	; (8007fa4 <_svfiprintf_r+0x1f0>)
 8007f1a:	bb1b      	cbnz	r3, 8007f64 <_svfiprintf_r+0x1b0>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	3307      	adds	r3, #7
 8007f20:	f023 0307 	bic.w	r3, r3, #7
 8007f24:	3308      	adds	r3, #8
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2a:	4433      	add	r3, r6
 8007f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f2e:	e768      	b.n	8007e02 <_svfiprintf_r+0x4e>
 8007f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f34:	460c      	mov	r4, r1
 8007f36:	2001      	movs	r0, #1
 8007f38:	e7a6      	b.n	8007e88 <_svfiprintf_r+0xd4>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	3401      	adds	r4, #1
 8007f3e:	9305      	str	r3, [sp, #20]
 8007f40:	4619      	mov	r1, r3
 8007f42:	f04f 0c0a 	mov.w	ip, #10
 8007f46:	4620      	mov	r0, r4
 8007f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f4c:	3a30      	subs	r2, #48	; 0x30
 8007f4e:	2a09      	cmp	r2, #9
 8007f50:	d903      	bls.n	8007f5a <_svfiprintf_r+0x1a6>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0c6      	beq.n	8007ee4 <_svfiprintf_r+0x130>
 8007f56:	9105      	str	r1, [sp, #20]
 8007f58:	e7c4      	b.n	8007ee4 <_svfiprintf_r+0x130>
 8007f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f5e:	4604      	mov	r4, r0
 8007f60:	2301      	movs	r3, #1
 8007f62:	e7f0      	b.n	8007f46 <_svfiprintf_r+0x192>
 8007f64:	ab03      	add	r3, sp, #12
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	462a      	mov	r2, r5
 8007f6a:	4b0f      	ldr	r3, [pc, #60]	; (8007fa8 <_svfiprintf_r+0x1f4>)
 8007f6c:	a904      	add	r1, sp, #16
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f3af 8000 	nop.w
 8007f74:	1c42      	adds	r2, r0, #1
 8007f76:	4606      	mov	r6, r0
 8007f78:	d1d6      	bne.n	8007f28 <_svfiprintf_r+0x174>
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	065b      	lsls	r3, r3, #25
 8007f7e:	f53f af2d 	bmi.w	8007ddc <_svfiprintf_r+0x28>
 8007f82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f84:	b01d      	add	sp, #116	; 0x74
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	ab03      	add	r3, sp, #12
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	462a      	mov	r2, r5
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <_svfiprintf_r+0x1f4>)
 8007f92:	a904      	add	r1, sp, #16
 8007f94:	4638      	mov	r0, r7
 8007f96:	f000 f9bd 	bl	8008314 <_printf_i>
 8007f9a:	e7eb      	b.n	8007f74 <_svfiprintf_r+0x1c0>
 8007f9c:	08008a40 	.word	0x08008a40
 8007fa0:	08008a4a 	.word	0x08008a4a
 8007fa4:	00000000 	.word	0x00000000
 8007fa8:	08007d01 	.word	0x08007d01
 8007fac:	08008a46 	.word	0x08008a46

08007fb0 <__sfputc_r>:
 8007fb0:	6893      	ldr	r3, [r2, #8]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	b410      	push	{r4}
 8007fb8:	6093      	str	r3, [r2, #8]
 8007fba:	da08      	bge.n	8007fce <__sfputc_r+0x1e>
 8007fbc:	6994      	ldr	r4, [r2, #24]
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	db01      	blt.n	8007fc6 <__sfputc_r+0x16>
 8007fc2:	290a      	cmp	r1, #10
 8007fc4:	d103      	bne.n	8007fce <__sfputc_r+0x1e>
 8007fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fca:	f7ff bc90 	b.w	80078ee <__swbuf_r>
 8007fce:	6813      	ldr	r3, [r2, #0]
 8007fd0:	1c58      	adds	r0, r3, #1
 8007fd2:	6010      	str	r0, [r2, #0]
 8007fd4:	7019      	strb	r1, [r3, #0]
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <__sfputs_r>:
 8007fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	460f      	mov	r7, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	18d5      	adds	r5, r2, r3
 8007fe8:	42ac      	cmp	r4, r5
 8007fea:	d101      	bne.n	8007ff0 <__sfputs_r+0x12>
 8007fec:	2000      	movs	r0, #0
 8007fee:	e007      	b.n	8008000 <__sfputs_r+0x22>
 8007ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff4:	463a      	mov	r2, r7
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f7ff ffda 	bl	8007fb0 <__sfputc_r>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d1f3      	bne.n	8007fe8 <__sfputs_r+0xa>
 8008000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008004 <_vfiprintf_r>:
 8008004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	460d      	mov	r5, r1
 800800a:	b09d      	sub	sp, #116	; 0x74
 800800c:	4614      	mov	r4, r2
 800800e:	4698      	mov	r8, r3
 8008010:	4606      	mov	r6, r0
 8008012:	b118      	cbz	r0, 800801c <_vfiprintf_r+0x18>
 8008014:	6a03      	ldr	r3, [r0, #32]
 8008016:	b90b      	cbnz	r3, 800801c <_vfiprintf_r+0x18>
 8008018:	f7ff fb2e 	bl	8007678 <__sinit>
 800801c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800801e:	07d9      	lsls	r1, r3, #31
 8008020:	d405      	bmi.n	800802e <_vfiprintf_r+0x2a>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d402      	bmi.n	800802e <_vfiprintf_r+0x2a>
 8008028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800802a:	f7ff fd6e 	bl	8007b0a <__retarget_lock_acquire_recursive>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	071b      	lsls	r3, r3, #28
 8008032:	d501      	bpl.n	8008038 <_vfiprintf_r+0x34>
 8008034:	692b      	ldr	r3, [r5, #16]
 8008036:	b99b      	cbnz	r3, 8008060 <_vfiprintf_r+0x5c>
 8008038:	4629      	mov	r1, r5
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff fc94 	bl	8007968 <__swsetup_r>
 8008040:	b170      	cbz	r0, 8008060 <_vfiprintf_r+0x5c>
 8008042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008044:	07dc      	lsls	r4, r3, #31
 8008046:	d504      	bpl.n	8008052 <_vfiprintf_r+0x4e>
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	b01d      	add	sp, #116	; 0x74
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	89ab      	ldrh	r3, [r5, #12]
 8008054:	0598      	lsls	r0, r3, #22
 8008056:	d4f7      	bmi.n	8008048 <_vfiprintf_r+0x44>
 8008058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800805a:	f7ff fd57 	bl	8007b0c <__retarget_lock_release_recursive>
 800805e:	e7f3      	b.n	8008048 <_vfiprintf_r+0x44>
 8008060:	2300      	movs	r3, #0
 8008062:	9309      	str	r3, [sp, #36]	; 0x24
 8008064:	2320      	movs	r3, #32
 8008066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800806a:	f8cd 800c 	str.w	r8, [sp, #12]
 800806e:	2330      	movs	r3, #48	; 0x30
 8008070:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008224 <_vfiprintf_r+0x220>
 8008074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008078:	f04f 0901 	mov.w	r9, #1
 800807c:	4623      	mov	r3, r4
 800807e:	469a      	mov	sl, r3
 8008080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008084:	b10a      	cbz	r2, 800808a <_vfiprintf_r+0x86>
 8008086:	2a25      	cmp	r2, #37	; 0x25
 8008088:	d1f9      	bne.n	800807e <_vfiprintf_r+0x7a>
 800808a:	ebba 0b04 	subs.w	fp, sl, r4
 800808e:	d00b      	beq.n	80080a8 <_vfiprintf_r+0xa4>
 8008090:	465b      	mov	r3, fp
 8008092:	4622      	mov	r2, r4
 8008094:	4629      	mov	r1, r5
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ffa1 	bl	8007fde <__sfputs_r>
 800809c:	3001      	adds	r0, #1
 800809e:	f000 80a9 	beq.w	80081f4 <_vfiprintf_r+0x1f0>
 80080a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a4:	445a      	add	r2, fp
 80080a6:	9209      	str	r2, [sp, #36]	; 0x24
 80080a8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 80a1 	beq.w	80081f4 <_vfiprintf_r+0x1f0>
 80080b2:	2300      	movs	r3, #0
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295
 80080b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080bc:	f10a 0a01 	add.w	sl, sl, #1
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	9307      	str	r3, [sp, #28]
 80080c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080c8:	931a      	str	r3, [sp, #104]	; 0x68
 80080ca:	4654      	mov	r4, sl
 80080cc:	2205      	movs	r2, #5
 80080ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d2:	4854      	ldr	r0, [pc, #336]	; (8008224 <_vfiprintf_r+0x220>)
 80080d4:	f7f8 f894 	bl	8000200 <memchr>
 80080d8:	9a04      	ldr	r2, [sp, #16]
 80080da:	b9d8      	cbnz	r0, 8008114 <_vfiprintf_r+0x110>
 80080dc:	06d1      	lsls	r1, r2, #27
 80080de:	bf44      	itt	mi
 80080e0:	2320      	movmi	r3, #32
 80080e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e6:	0713      	lsls	r3, r2, #28
 80080e8:	bf44      	itt	mi
 80080ea:	232b      	movmi	r3, #43	; 0x2b
 80080ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080f0:	f89a 3000 	ldrb.w	r3, [sl]
 80080f4:	2b2a      	cmp	r3, #42	; 0x2a
 80080f6:	d015      	beq.n	8008124 <_vfiprintf_r+0x120>
 80080f8:	9a07      	ldr	r2, [sp, #28]
 80080fa:	4654      	mov	r4, sl
 80080fc:	2000      	movs	r0, #0
 80080fe:	f04f 0c0a 	mov.w	ip, #10
 8008102:	4621      	mov	r1, r4
 8008104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008108:	3b30      	subs	r3, #48	; 0x30
 800810a:	2b09      	cmp	r3, #9
 800810c:	d94d      	bls.n	80081aa <_vfiprintf_r+0x1a6>
 800810e:	b1b0      	cbz	r0, 800813e <_vfiprintf_r+0x13a>
 8008110:	9207      	str	r2, [sp, #28]
 8008112:	e014      	b.n	800813e <_vfiprintf_r+0x13a>
 8008114:	eba0 0308 	sub.w	r3, r0, r8
 8008118:	fa09 f303 	lsl.w	r3, r9, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	46a2      	mov	sl, r4
 8008122:	e7d2      	b.n	80080ca <_vfiprintf_r+0xc6>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	1d19      	adds	r1, r3, #4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	9103      	str	r1, [sp, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	bfbb      	ittet	lt
 8008130:	425b      	neglt	r3, r3
 8008132:	f042 0202 	orrlt.w	r2, r2, #2
 8008136:	9307      	strge	r3, [sp, #28]
 8008138:	9307      	strlt	r3, [sp, #28]
 800813a:	bfb8      	it	lt
 800813c:	9204      	strlt	r2, [sp, #16]
 800813e:	7823      	ldrb	r3, [r4, #0]
 8008140:	2b2e      	cmp	r3, #46	; 0x2e
 8008142:	d10c      	bne.n	800815e <_vfiprintf_r+0x15a>
 8008144:	7863      	ldrb	r3, [r4, #1]
 8008146:	2b2a      	cmp	r3, #42	; 0x2a
 8008148:	d134      	bne.n	80081b4 <_vfiprintf_r+0x1b0>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	1d1a      	adds	r2, r3, #4
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	9203      	str	r2, [sp, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	bfb8      	it	lt
 8008156:	f04f 33ff 	movlt.w	r3, #4294967295
 800815a:	3402      	adds	r4, #2
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008234 <_vfiprintf_r+0x230>
 8008162:	7821      	ldrb	r1, [r4, #0]
 8008164:	2203      	movs	r2, #3
 8008166:	4650      	mov	r0, sl
 8008168:	f7f8 f84a 	bl	8000200 <memchr>
 800816c:	b138      	cbz	r0, 800817e <_vfiprintf_r+0x17a>
 800816e:	9b04      	ldr	r3, [sp, #16]
 8008170:	eba0 000a 	sub.w	r0, r0, sl
 8008174:	2240      	movs	r2, #64	; 0x40
 8008176:	4082      	lsls	r2, r0
 8008178:	4313      	orrs	r3, r2
 800817a:	3401      	adds	r4, #1
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008182:	4829      	ldr	r0, [pc, #164]	; (8008228 <_vfiprintf_r+0x224>)
 8008184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008188:	2206      	movs	r2, #6
 800818a:	f7f8 f839 	bl	8000200 <memchr>
 800818e:	2800      	cmp	r0, #0
 8008190:	d03f      	beq.n	8008212 <_vfiprintf_r+0x20e>
 8008192:	4b26      	ldr	r3, [pc, #152]	; (800822c <_vfiprintf_r+0x228>)
 8008194:	bb1b      	cbnz	r3, 80081de <_vfiprintf_r+0x1da>
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	3307      	adds	r3, #7
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	3308      	adds	r3, #8
 80081a0:	9303      	str	r3, [sp, #12]
 80081a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a4:	443b      	add	r3, r7
 80081a6:	9309      	str	r3, [sp, #36]	; 0x24
 80081a8:	e768      	b.n	800807c <_vfiprintf_r+0x78>
 80081aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ae:	460c      	mov	r4, r1
 80081b0:	2001      	movs	r0, #1
 80081b2:	e7a6      	b.n	8008102 <_vfiprintf_r+0xfe>
 80081b4:	2300      	movs	r3, #0
 80081b6:	3401      	adds	r4, #1
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	4619      	mov	r1, r3
 80081bc:	f04f 0c0a 	mov.w	ip, #10
 80081c0:	4620      	mov	r0, r4
 80081c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c6:	3a30      	subs	r2, #48	; 0x30
 80081c8:	2a09      	cmp	r2, #9
 80081ca:	d903      	bls.n	80081d4 <_vfiprintf_r+0x1d0>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0c6      	beq.n	800815e <_vfiprintf_r+0x15a>
 80081d0:	9105      	str	r1, [sp, #20]
 80081d2:	e7c4      	b.n	800815e <_vfiprintf_r+0x15a>
 80081d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d8:	4604      	mov	r4, r0
 80081da:	2301      	movs	r3, #1
 80081dc:	e7f0      	b.n	80081c0 <_vfiprintf_r+0x1bc>
 80081de:	ab03      	add	r3, sp, #12
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	462a      	mov	r2, r5
 80081e4:	4b12      	ldr	r3, [pc, #72]	; (8008230 <_vfiprintf_r+0x22c>)
 80081e6:	a904      	add	r1, sp, #16
 80081e8:	4630      	mov	r0, r6
 80081ea:	f3af 8000 	nop.w
 80081ee:	4607      	mov	r7, r0
 80081f0:	1c78      	adds	r0, r7, #1
 80081f2:	d1d6      	bne.n	80081a2 <_vfiprintf_r+0x19e>
 80081f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f6:	07d9      	lsls	r1, r3, #31
 80081f8:	d405      	bmi.n	8008206 <_vfiprintf_r+0x202>
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	059a      	lsls	r2, r3, #22
 80081fe:	d402      	bmi.n	8008206 <_vfiprintf_r+0x202>
 8008200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008202:	f7ff fc83 	bl	8007b0c <__retarget_lock_release_recursive>
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	065b      	lsls	r3, r3, #25
 800820a:	f53f af1d 	bmi.w	8008048 <_vfiprintf_r+0x44>
 800820e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008210:	e71c      	b.n	800804c <_vfiprintf_r+0x48>
 8008212:	ab03      	add	r3, sp, #12
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	462a      	mov	r2, r5
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <_vfiprintf_r+0x22c>)
 800821a:	a904      	add	r1, sp, #16
 800821c:	4630      	mov	r0, r6
 800821e:	f000 f879 	bl	8008314 <_printf_i>
 8008222:	e7e4      	b.n	80081ee <_vfiprintf_r+0x1ea>
 8008224:	08008a40 	.word	0x08008a40
 8008228:	08008a4a 	.word	0x08008a4a
 800822c:	00000000 	.word	0x00000000
 8008230:	08007fdf 	.word	0x08007fdf
 8008234:	08008a46 	.word	0x08008a46

08008238 <_printf_common>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	4616      	mov	r6, r2
 800823e:	4699      	mov	r9, r3
 8008240:	688a      	ldr	r2, [r1, #8]
 8008242:	690b      	ldr	r3, [r1, #16]
 8008244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008248:	4293      	cmp	r3, r2
 800824a:	bfb8      	it	lt
 800824c:	4613      	movlt	r3, r2
 800824e:	6033      	str	r3, [r6, #0]
 8008250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008254:	4607      	mov	r7, r0
 8008256:	460c      	mov	r4, r1
 8008258:	b10a      	cbz	r2, 800825e <_printf_common+0x26>
 800825a:	3301      	adds	r3, #1
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	0699      	lsls	r1, r3, #26
 8008262:	bf42      	ittt	mi
 8008264:	6833      	ldrmi	r3, [r6, #0]
 8008266:	3302      	addmi	r3, #2
 8008268:	6033      	strmi	r3, [r6, #0]
 800826a:	6825      	ldr	r5, [r4, #0]
 800826c:	f015 0506 	ands.w	r5, r5, #6
 8008270:	d106      	bne.n	8008280 <_printf_common+0x48>
 8008272:	f104 0a19 	add.w	sl, r4, #25
 8008276:	68e3      	ldr	r3, [r4, #12]
 8008278:	6832      	ldr	r2, [r6, #0]
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	42ab      	cmp	r3, r5
 800827e:	dc26      	bgt.n	80082ce <_printf_common+0x96>
 8008280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008284:	1e13      	subs	r3, r2, #0
 8008286:	6822      	ldr	r2, [r4, #0]
 8008288:	bf18      	it	ne
 800828a:	2301      	movne	r3, #1
 800828c:	0692      	lsls	r2, r2, #26
 800828e:	d42b      	bmi.n	80082e8 <_printf_common+0xb0>
 8008290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008294:	4649      	mov	r1, r9
 8008296:	4638      	mov	r0, r7
 8008298:	47c0      	blx	r8
 800829a:	3001      	adds	r0, #1
 800829c:	d01e      	beq.n	80082dc <_printf_common+0xa4>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	f003 0306 	and.w	r3, r3, #6
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	bf02      	ittt	eq
 80082aa:	68e5      	ldreq	r5, [r4, #12]
 80082ac:	6833      	ldreq	r3, [r6, #0]
 80082ae:	1aed      	subeq	r5, r5, r3
 80082b0:	68a3      	ldr	r3, [r4, #8]
 80082b2:	bf0c      	ite	eq
 80082b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b8:	2500      	movne	r5, #0
 80082ba:	4293      	cmp	r3, r2
 80082bc:	bfc4      	itt	gt
 80082be:	1a9b      	subgt	r3, r3, r2
 80082c0:	18ed      	addgt	r5, r5, r3
 80082c2:	2600      	movs	r6, #0
 80082c4:	341a      	adds	r4, #26
 80082c6:	42b5      	cmp	r5, r6
 80082c8:	d11a      	bne.n	8008300 <_printf_common+0xc8>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e008      	b.n	80082e0 <_printf_common+0xa8>
 80082ce:	2301      	movs	r3, #1
 80082d0:	4652      	mov	r2, sl
 80082d2:	4649      	mov	r1, r9
 80082d4:	4638      	mov	r0, r7
 80082d6:	47c0      	blx	r8
 80082d8:	3001      	adds	r0, #1
 80082da:	d103      	bne.n	80082e4 <_printf_common+0xac>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e4:	3501      	adds	r5, #1
 80082e6:	e7c6      	b.n	8008276 <_printf_common+0x3e>
 80082e8:	18e1      	adds	r1, r4, r3
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	2030      	movs	r0, #48	; 0x30
 80082ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082f2:	4422      	add	r2, r4
 80082f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082fc:	3302      	adds	r3, #2
 80082fe:	e7c7      	b.n	8008290 <_printf_common+0x58>
 8008300:	2301      	movs	r3, #1
 8008302:	4622      	mov	r2, r4
 8008304:	4649      	mov	r1, r9
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d0e6      	beq.n	80082dc <_printf_common+0xa4>
 800830e:	3601      	adds	r6, #1
 8008310:	e7d9      	b.n	80082c6 <_printf_common+0x8e>
	...

08008314 <_printf_i>:
 8008314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	7e0f      	ldrb	r7, [r1, #24]
 800831a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800831c:	2f78      	cmp	r7, #120	; 0x78
 800831e:	4691      	mov	r9, r2
 8008320:	4680      	mov	r8, r0
 8008322:	460c      	mov	r4, r1
 8008324:	469a      	mov	sl, r3
 8008326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800832a:	d807      	bhi.n	800833c <_printf_i+0x28>
 800832c:	2f62      	cmp	r7, #98	; 0x62
 800832e:	d80a      	bhi.n	8008346 <_printf_i+0x32>
 8008330:	2f00      	cmp	r7, #0
 8008332:	f000 80d4 	beq.w	80084de <_printf_i+0x1ca>
 8008336:	2f58      	cmp	r7, #88	; 0x58
 8008338:	f000 80c0 	beq.w	80084bc <_printf_i+0x1a8>
 800833c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008344:	e03a      	b.n	80083bc <_printf_i+0xa8>
 8008346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800834a:	2b15      	cmp	r3, #21
 800834c:	d8f6      	bhi.n	800833c <_printf_i+0x28>
 800834e:	a101      	add	r1, pc, #4	; (adr r1, 8008354 <_printf_i+0x40>)
 8008350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008354:	080083ad 	.word	0x080083ad
 8008358:	080083c1 	.word	0x080083c1
 800835c:	0800833d 	.word	0x0800833d
 8008360:	0800833d 	.word	0x0800833d
 8008364:	0800833d 	.word	0x0800833d
 8008368:	0800833d 	.word	0x0800833d
 800836c:	080083c1 	.word	0x080083c1
 8008370:	0800833d 	.word	0x0800833d
 8008374:	0800833d 	.word	0x0800833d
 8008378:	0800833d 	.word	0x0800833d
 800837c:	0800833d 	.word	0x0800833d
 8008380:	080084c5 	.word	0x080084c5
 8008384:	080083ed 	.word	0x080083ed
 8008388:	0800847f 	.word	0x0800847f
 800838c:	0800833d 	.word	0x0800833d
 8008390:	0800833d 	.word	0x0800833d
 8008394:	080084e7 	.word	0x080084e7
 8008398:	0800833d 	.word	0x0800833d
 800839c:	080083ed 	.word	0x080083ed
 80083a0:	0800833d 	.word	0x0800833d
 80083a4:	0800833d 	.word	0x0800833d
 80083a8:	08008487 	.word	0x08008487
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	602a      	str	r2, [r5, #0]
 80083b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083bc:	2301      	movs	r3, #1
 80083be:	e09f      	b.n	8008500 <_printf_i+0x1ec>
 80083c0:	6820      	ldr	r0, [r4, #0]
 80083c2:	682b      	ldr	r3, [r5, #0]
 80083c4:	0607      	lsls	r7, r0, #24
 80083c6:	f103 0104 	add.w	r1, r3, #4
 80083ca:	6029      	str	r1, [r5, #0]
 80083cc:	d501      	bpl.n	80083d2 <_printf_i+0xbe>
 80083ce:	681e      	ldr	r6, [r3, #0]
 80083d0:	e003      	b.n	80083da <_printf_i+0xc6>
 80083d2:	0646      	lsls	r6, r0, #25
 80083d4:	d5fb      	bpl.n	80083ce <_printf_i+0xba>
 80083d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083da:	2e00      	cmp	r6, #0
 80083dc:	da03      	bge.n	80083e6 <_printf_i+0xd2>
 80083de:	232d      	movs	r3, #45	; 0x2d
 80083e0:	4276      	negs	r6, r6
 80083e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e6:	485a      	ldr	r0, [pc, #360]	; (8008550 <_printf_i+0x23c>)
 80083e8:	230a      	movs	r3, #10
 80083ea:	e012      	b.n	8008412 <_printf_i+0xfe>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	6820      	ldr	r0, [r4, #0]
 80083f0:	1d19      	adds	r1, r3, #4
 80083f2:	6029      	str	r1, [r5, #0]
 80083f4:	0605      	lsls	r5, r0, #24
 80083f6:	d501      	bpl.n	80083fc <_printf_i+0xe8>
 80083f8:	681e      	ldr	r6, [r3, #0]
 80083fa:	e002      	b.n	8008402 <_printf_i+0xee>
 80083fc:	0641      	lsls	r1, r0, #25
 80083fe:	d5fb      	bpl.n	80083f8 <_printf_i+0xe4>
 8008400:	881e      	ldrh	r6, [r3, #0]
 8008402:	4853      	ldr	r0, [pc, #332]	; (8008550 <_printf_i+0x23c>)
 8008404:	2f6f      	cmp	r7, #111	; 0x6f
 8008406:	bf0c      	ite	eq
 8008408:	2308      	moveq	r3, #8
 800840a:	230a      	movne	r3, #10
 800840c:	2100      	movs	r1, #0
 800840e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008412:	6865      	ldr	r5, [r4, #4]
 8008414:	60a5      	str	r5, [r4, #8]
 8008416:	2d00      	cmp	r5, #0
 8008418:	bfa2      	ittt	ge
 800841a:	6821      	ldrge	r1, [r4, #0]
 800841c:	f021 0104 	bicge.w	r1, r1, #4
 8008420:	6021      	strge	r1, [r4, #0]
 8008422:	b90e      	cbnz	r6, 8008428 <_printf_i+0x114>
 8008424:	2d00      	cmp	r5, #0
 8008426:	d04b      	beq.n	80084c0 <_printf_i+0x1ac>
 8008428:	4615      	mov	r5, r2
 800842a:	fbb6 f1f3 	udiv	r1, r6, r3
 800842e:	fb03 6711 	mls	r7, r3, r1, r6
 8008432:	5dc7      	ldrb	r7, [r0, r7]
 8008434:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008438:	4637      	mov	r7, r6
 800843a:	42bb      	cmp	r3, r7
 800843c:	460e      	mov	r6, r1
 800843e:	d9f4      	bls.n	800842a <_printf_i+0x116>
 8008440:	2b08      	cmp	r3, #8
 8008442:	d10b      	bne.n	800845c <_printf_i+0x148>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	07de      	lsls	r6, r3, #31
 8008448:	d508      	bpl.n	800845c <_printf_i+0x148>
 800844a:	6923      	ldr	r3, [r4, #16]
 800844c:	6861      	ldr	r1, [r4, #4]
 800844e:	4299      	cmp	r1, r3
 8008450:	bfde      	ittt	le
 8008452:	2330      	movle	r3, #48	; 0x30
 8008454:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008458:	f105 35ff 	addle.w	r5, r5, #4294967295
 800845c:	1b52      	subs	r2, r2, r5
 800845e:	6122      	str	r2, [r4, #16]
 8008460:	f8cd a000 	str.w	sl, [sp]
 8008464:	464b      	mov	r3, r9
 8008466:	aa03      	add	r2, sp, #12
 8008468:	4621      	mov	r1, r4
 800846a:	4640      	mov	r0, r8
 800846c:	f7ff fee4 	bl	8008238 <_printf_common>
 8008470:	3001      	adds	r0, #1
 8008472:	d14a      	bne.n	800850a <_printf_i+0x1f6>
 8008474:	f04f 30ff 	mov.w	r0, #4294967295
 8008478:	b004      	add	sp, #16
 800847a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	f043 0320 	orr.w	r3, r3, #32
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	4833      	ldr	r0, [pc, #204]	; (8008554 <_printf_i+0x240>)
 8008488:	2778      	movs	r7, #120	; 0x78
 800848a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	6829      	ldr	r1, [r5, #0]
 8008492:	061f      	lsls	r7, r3, #24
 8008494:	f851 6b04 	ldr.w	r6, [r1], #4
 8008498:	d402      	bmi.n	80084a0 <_printf_i+0x18c>
 800849a:	065f      	lsls	r7, r3, #25
 800849c:	bf48      	it	mi
 800849e:	b2b6      	uxthmi	r6, r6
 80084a0:	07df      	lsls	r7, r3, #31
 80084a2:	bf48      	it	mi
 80084a4:	f043 0320 	orrmi.w	r3, r3, #32
 80084a8:	6029      	str	r1, [r5, #0]
 80084aa:	bf48      	it	mi
 80084ac:	6023      	strmi	r3, [r4, #0]
 80084ae:	b91e      	cbnz	r6, 80084b8 <_printf_i+0x1a4>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	f023 0320 	bic.w	r3, r3, #32
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	2310      	movs	r3, #16
 80084ba:	e7a7      	b.n	800840c <_printf_i+0xf8>
 80084bc:	4824      	ldr	r0, [pc, #144]	; (8008550 <_printf_i+0x23c>)
 80084be:	e7e4      	b.n	800848a <_printf_i+0x176>
 80084c0:	4615      	mov	r5, r2
 80084c2:	e7bd      	b.n	8008440 <_printf_i+0x12c>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	6826      	ldr	r6, [r4, #0]
 80084c8:	6961      	ldr	r1, [r4, #20]
 80084ca:	1d18      	adds	r0, r3, #4
 80084cc:	6028      	str	r0, [r5, #0]
 80084ce:	0635      	lsls	r5, r6, #24
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	d501      	bpl.n	80084d8 <_printf_i+0x1c4>
 80084d4:	6019      	str	r1, [r3, #0]
 80084d6:	e002      	b.n	80084de <_printf_i+0x1ca>
 80084d8:	0670      	lsls	r0, r6, #25
 80084da:	d5fb      	bpl.n	80084d4 <_printf_i+0x1c0>
 80084dc:	8019      	strh	r1, [r3, #0]
 80084de:	2300      	movs	r3, #0
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	4615      	mov	r5, r2
 80084e4:	e7bc      	b.n	8008460 <_printf_i+0x14c>
 80084e6:	682b      	ldr	r3, [r5, #0]
 80084e8:	1d1a      	adds	r2, r3, #4
 80084ea:	602a      	str	r2, [r5, #0]
 80084ec:	681d      	ldr	r5, [r3, #0]
 80084ee:	6862      	ldr	r2, [r4, #4]
 80084f0:	2100      	movs	r1, #0
 80084f2:	4628      	mov	r0, r5
 80084f4:	f7f7 fe84 	bl	8000200 <memchr>
 80084f8:	b108      	cbz	r0, 80084fe <_printf_i+0x1ea>
 80084fa:	1b40      	subs	r0, r0, r5
 80084fc:	6060      	str	r0, [r4, #4]
 80084fe:	6863      	ldr	r3, [r4, #4]
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	2300      	movs	r3, #0
 8008504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008508:	e7aa      	b.n	8008460 <_printf_i+0x14c>
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	462a      	mov	r2, r5
 800850e:	4649      	mov	r1, r9
 8008510:	4640      	mov	r0, r8
 8008512:	47d0      	blx	sl
 8008514:	3001      	adds	r0, #1
 8008516:	d0ad      	beq.n	8008474 <_printf_i+0x160>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	079b      	lsls	r3, r3, #30
 800851c:	d413      	bmi.n	8008546 <_printf_i+0x232>
 800851e:	68e0      	ldr	r0, [r4, #12]
 8008520:	9b03      	ldr	r3, [sp, #12]
 8008522:	4298      	cmp	r0, r3
 8008524:	bfb8      	it	lt
 8008526:	4618      	movlt	r0, r3
 8008528:	e7a6      	b.n	8008478 <_printf_i+0x164>
 800852a:	2301      	movs	r3, #1
 800852c:	4632      	mov	r2, r6
 800852e:	4649      	mov	r1, r9
 8008530:	4640      	mov	r0, r8
 8008532:	47d0      	blx	sl
 8008534:	3001      	adds	r0, #1
 8008536:	d09d      	beq.n	8008474 <_printf_i+0x160>
 8008538:	3501      	adds	r5, #1
 800853a:	68e3      	ldr	r3, [r4, #12]
 800853c:	9903      	ldr	r1, [sp, #12]
 800853e:	1a5b      	subs	r3, r3, r1
 8008540:	42ab      	cmp	r3, r5
 8008542:	dcf2      	bgt.n	800852a <_printf_i+0x216>
 8008544:	e7eb      	b.n	800851e <_printf_i+0x20a>
 8008546:	2500      	movs	r5, #0
 8008548:	f104 0619 	add.w	r6, r4, #25
 800854c:	e7f5      	b.n	800853a <_printf_i+0x226>
 800854e:	bf00      	nop
 8008550:	08008a51 	.word	0x08008a51
 8008554:	08008a62 	.word	0x08008a62

08008558 <__sflush_r>:
 8008558:	898a      	ldrh	r2, [r1, #12]
 800855a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855e:	4605      	mov	r5, r0
 8008560:	0710      	lsls	r0, r2, #28
 8008562:	460c      	mov	r4, r1
 8008564:	d458      	bmi.n	8008618 <__sflush_r+0xc0>
 8008566:	684b      	ldr	r3, [r1, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	dc05      	bgt.n	8008578 <__sflush_r+0x20>
 800856c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	dc02      	bgt.n	8008578 <__sflush_r+0x20>
 8008572:	2000      	movs	r0, #0
 8008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800857a:	2e00      	cmp	r6, #0
 800857c:	d0f9      	beq.n	8008572 <__sflush_r+0x1a>
 800857e:	2300      	movs	r3, #0
 8008580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008584:	682f      	ldr	r7, [r5, #0]
 8008586:	6a21      	ldr	r1, [r4, #32]
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	d032      	beq.n	80085f2 <__sflush_r+0x9a>
 800858c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	075a      	lsls	r2, r3, #29
 8008592:	d505      	bpl.n	80085a0 <__sflush_r+0x48>
 8008594:	6863      	ldr	r3, [r4, #4]
 8008596:	1ac0      	subs	r0, r0, r3
 8008598:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800859a:	b10b      	cbz	r3, 80085a0 <__sflush_r+0x48>
 800859c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800859e:	1ac0      	subs	r0, r0, r3
 80085a0:	2300      	movs	r3, #0
 80085a2:	4602      	mov	r2, r0
 80085a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085a6:	6a21      	ldr	r1, [r4, #32]
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b0      	blx	r6
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	d106      	bne.n	80085c0 <__sflush_r+0x68>
 80085b2:	6829      	ldr	r1, [r5, #0]
 80085b4:	291d      	cmp	r1, #29
 80085b6:	d82b      	bhi.n	8008610 <__sflush_r+0xb8>
 80085b8:	4a29      	ldr	r2, [pc, #164]	; (8008660 <__sflush_r+0x108>)
 80085ba:	410a      	asrs	r2, r1
 80085bc:	07d6      	lsls	r6, r2, #31
 80085be:	d427      	bmi.n	8008610 <__sflush_r+0xb8>
 80085c0:	2200      	movs	r2, #0
 80085c2:	6062      	str	r2, [r4, #4]
 80085c4:	04d9      	lsls	r1, r3, #19
 80085c6:	6922      	ldr	r2, [r4, #16]
 80085c8:	6022      	str	r2, [r4, #0]
 80085ca:	d504      	bpl.n	80085d6 <__sflush_r+0x7e>
 80085cc:	1c42      	adds	r2, r0, #1
 80085ce:	d101      	bne.n	80085d4 <__sflush_r+0x7c>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b903      	cbnz	r3, 80085d6 <__sflush_r+0x7e>
 80085d4:	6560      	str	r0, [r4, #84]	; 0x54
 80085d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085d8:	602f      	str	r7, [r5, #0]
 80085da:	2900      	cmp	r1, #0
 80085dc:	d0c9      	beq.n	8008572 <__sflush_r+0x1a>
 80085de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085e2:	4299      	cmp	r1, r3
 80085e4:	d002      	beq.n	80085ec <__sflush_r+0x94>
 80085e6:	4628      	mov	r0, r5
 80085e8:	f7ff fa92 	bl	8007b10 <_free_r>
 80085ec:	2000      	movs	r0, #0
 80085ee:	6360      	str	r0, [r4, #52]	; 0x34
 80085f0:	e7c0      	b.n	8008574 <__sflush_r+0x1c>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4628      	mov	r0, r5
 80085f6:	47b0      	blx	r6
 80085f8:	1c41      	adds	r1, r0, #1
 80085fa:	d1c8      	bne.n	800858e <__sflush_r+0x36>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0c5      	beq.n	800858e <__sflush_r+0x36>
 8008602:	2b1d      	cmp	r3, #29
 8008604:	d001      	beq.n	800860a <__sflush_r+0xb2>
 8008606:	2b16      	cmp	r3, #22
 8008608:	d101      	bne.n	800860e <__sflush_r+0xb6>
 800860a:	602f      	str	r7, [r5, #0]
 800860c:	e7b1      	b.n	8008572 <__sflush_r+0x1a>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	e7ad      	b.n	8008574 <__sflush_r+0x1c>
 8008618:	690f      	ldr	r7, [r1, #16]
 800861a:	2f00      	cmp	r7, #0
 800861c:	d0a9      	beq.n	8008572 <__sflush_r+0x1a>
 800861e:	0793      	lsls	r3, r2, #30
 8008620:	680e      	ldr	r6, [r1, #0]
 8008622:	bf08      	it	eq
 8008624:	694b      	ldreq	r3, [r1, #20]
 8008626:	600f      	str	r7, [r1, #0]
 8008628:	bf18      	it	ne
 800862a:	2300      	movne	r3, #0
 800862c:	eba6 0807 	sub.w	r8, r6, r7
 8008630:	608b      	str	r3, [r1, #8]
 8008632:	f1b8 0f00 	cmp.w	r8, #0
 8008636:	dd9c      	ble.n	8008572 <__sflush_r+0x1a>
 8008638:	6a21      	ldr	r1, [r4, #32]
 800863a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800863c:	4643      	mov	r3, r8
 800863e:	463a      	mov	r2, r7
 8008640:	4628      	mov	r0, r5
 8008642:	47b0      	blx	r6
 8008644:	2800      	cmp	r0, #0
 8008646:	dc06      	bgt.n	8008656 <__sflush_r+0xfe>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800864e:	81a3      	strh	r3, [r4, #12]
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	e78e      	b.n	8008574 <__sflush_r+0x1c>
 8008656:	4407      	add	r7, r0
 8008658:	eba8 0800 	sub.w	r8, r8, r0
 800865c:	e7e9      	b.n	8008632 <__sflush_r+0xda>
 800865e:	bf00      	nop
 8008660:	dfbffffe 	.word	0xdfbffffe

08008664 <_fflush_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	690b      	ldr	r3, [r1, #16]
 8008668:	4605      	mov	r5, r0
 800866a:	460c      	mov	r4, r1
 800866c:	b913      	cbnz	r3, 8008674 <_fflush_r+0x10>
 800866e:	2500      	movs	r5, #0
 8008670:	4628      	mov	r0, r5
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	b118      	cbz	r0, 800867e <_fflush_r+0x1a>
 8008676:	6a03      	ldr	r3, [r0, #32]
 8008678:	b90b      	cbnz	r3, 800867e <_fflush_r+0x1a>
 800867a:	f7fe fffd 	bl	8007678 <__sinit>
 800867e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0f3      	beq.n	800866e <_fflush_r+0xa>
 8008686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008688:	07d0      	lsls	r0, r2, #31
 800868a:	d404      	bmi.n	8008696 <_fflush_r+0x32>
 800868c:	0599      	lsls	r1, r3, #22
 800868e:	d402      	bmi.n	8008696 <_fflush_r+0x32>
 8008690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008692:	f7ff fa3a 	bl	8007b0a <__retarget_lock_acquire_recursive>
 8008696:	4628      	mov	r0, r5
 8008698:	4621      	mov	r1, r4
 800869a:	f7ff ff5d 	bl	8008558 <__sflush_r>
 800869e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086a0:	07da      	lsls	r2, r3, #31
 80086a2:	4605      	mov	r5, r0
 80086a4:	d4e4      	bmi.n	8008670 <_fflush_r+0xc>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	059b      	lsls	r3, r3, #22
 80086aa:	d4e1      	bmi.n	8008670 <_fflush_r+0xc>
 80086ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ae:	f7ff fa2d 	bl	8007b0c <__retarget_lock_release_recursive>
 80086b2:	e7dd      	b.n	8008670 <_fflush_r+0xc>

080086b4 <__swhatbuf_r>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086bc:	2900      	cmp	r1, #0
 80086be:	b096      	sub	sp, #88	; 0x58
 80086c0:	4615      	mov	r5, r2
 80086c2:	461e      	mov	r6, r3
 80086c4:	da0d      	bge.n	80086e2 <__swhatbuf_r+0x2e>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80086cc:	f04f 0100 	mov.w	r1, #0
 80086d0:	bf0c      	ite	eq
 80086d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80086d6:	2340      	movne	r3, #64	; 0x40
 80086d8:	2000      	movs	r0, #0
 80086da:	6031      	str	r1, [r6, #0]
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	b016      	add	sp, #88	; 0x58
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	466a      	mov	r2, sp
 80086e4:	f000 f862 	bl	80087ac <_fstat_r>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	dbec      	blt.n	80086c6 <__swhatbuf_r+0x12>
 80086ec:	9901      	ldr	r1, [sp, #4]
 80086ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80086f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80086f6:	4259      	negs	r1, r3
 80086f8:	4159      	adcs	r1, r3
 80086fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086fe:	e7eb      	b.n	80086d8 <__swhatbuf_r+0x24>

08008700 <__smakebuf_r>:
 8008700:	898b      	ldrh	r3, [r1, #12]
 8008702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008704:	079d      	lsls	r5, r3, #30
 8008706:	4606      	mov	r6, r0
 8008708:	460c      	mov	r4, r1
 800870a:	d507      	bpl.n	800871c <__smakebuf_r+0x1c>
 800870c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	2301      	movs	r3, #1
 8008716:	6163      	str	r3, [r4, #20]
 8008718:	b002      	add	sp, #8
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	ab01      	add	r3, sp, #4
 800871e:	466a      	mov	r2, sp
 8008720:	f7ff ffc8 	bl	80086b4 <__swhatbuf_r>
 8008724:	9900      	ldr	r1, [sp, #0]
 8008726:	4605      	mov	r5, r0
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff fa5d 	bl	8007be8 <_malloc_r>
 800872e:	b948      	cbnz	r0, 8008744 <__smakebuf_r+0x44>
 8008730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008734:	059a      	lsls	r2, r3, #22
 8008736:	d4ef      	bmi.n	8008718 <__smakebuf_r+0x18>
 8008738:	f023 0303 	bic.w	r3, r3, #3
 800873c:	f043 0302 	orr.w	r3, r3, #2
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	e7e3      	b.n	800870c <__smakebuf_r+0xc>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	6020      	str	r0, [r4, #0]
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	6163      	str	r3, [r4, #20]
 8008752:	9b01      	ldr	r3, [sp, #4]
 8008754:	6120      	str	r0, [r4, #16]
 8008756:	b15b      	cbz	r3, 8008770 <__smakebuf_r+0x70>
 8008758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875c:	4630      	mov	r0, r6
 800875e:	f000 f837 	bl	80087d0 <_isatty_r>
 8008762:	b128      	cbz	r0, 8008770 <__smakebuf_r+0x70>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	431d      	orrs	r5, r3
 8008774:	81a5      	strh	r5, [r4, #12]
 8008776:	e7cf      	b.n	8008718 <__smakebuf_r+0x18>

08008778 <memmove>:
 8008778:	4288      	cmp	r0, r1
 800877a:	b510      	push	{r4, lr}
 800877c:	eb01 0402 	add.w	r4, r1, r2
 8008780:	d902      	bls.n	8008788 <memmove+0x10>
 8008782:	4284      	cmp	r4, r0
 8008784:	4623      	mov	r3, r4
 8008786:	d807      	bhi.n	8008798 <memmove+0x20>
 8008788:	1e43      	subs	r3, r0, #1
 800878a:	42a1      	cmp	r1, r4
 800878c:	d008      	beq.n	80087a0 <memmove+0x28>
 800878e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008796:	e7f8      	b.n	800878a <memmove+0x12>
 8008798:	4402      	add	r2, r0
 800879a:	4601      	mov	r1, r0
 800879c:	428a      	cmp	r2, r1
 800879e:	d100      	bne.n	80087a2 <memmove+0x2a>
 80087a0:	bd10      	pop	{r4, pc}
 80087a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087aa:	e7f7      	b.n	800879c <memmove+0x24>

080087ac <_fstat_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d07      	ldr	r5, [pc, #28]	; (80087cc <_fstat_r+0x20>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	f7f9 f92e 	bl	8001a1a <_fstat>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d102      	bne.n	80087c8 <_fstat_r+0x1c>
 80087c2:	682b      	ldr	r3, [r5, #0]
 80087c4:	b103      	cbz	r3, 80087c8 <_fstat_r+0x1c>
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
 80087ca:	bf00      	nop
 80087cc:	20000bc8 	.word	0x20000bc8

080087d0 <_isatty_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d06      	ldr	r5, [pc, #24]	; (80087ec <_isatty_r+0x1c>)
 80087d4:	2300      	movs	r3, #0
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	f7f9 f92d 	bl	8001a3a <_isatty>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_isatty_r+0x1a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_isatty_r+0x1a>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20000bc8 	.word	0x20000bc8

080087f0 <_sbrk_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d06      	ldr	r5, [pc, #24]	; (800880c <_sbrk_r+0x1c>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	f7f9 f936 	bl	8001a6c <_sbrk>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_sbrk_r+0x1a>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_sbrk_r+0x1a>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	20000bc8 	.word	0x20000bc8

08008810 <memcpy>:
 8008810:	440a      	add	r2, r1
 8008812:	4291      	cmp	r1, r2
 8008814:	f100 33ff 	add.w	r3, r0, #4294967295
 8008818:	d100      	bne.n	800881c <memcpy+0xc>
 800881a:	4770      	bx	lr
 800881c:	b510      	push	{r4, lr}
 800881e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008826:	4291      	cmp	r1, r2
 8008828:	d1f9      	bne.n	800881e <memcpy+0xe>
 800882a:	bd10      	pop	{r4, pc}

0800882c <_realloc_r>:
 800882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4680      	mov	r8, r0
 8008832:	4614      	mov	r4, r2
 8008834:	460e      	mov	r6, r1
 8008836:	b921      	cbnz	r1, 8008842 <_realloc_r+0x16>
 8008838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800883c:	4611      	mov	r1, r2
 800883e:	f7ff b9d3 	b.w	8007be8 <_malloc_r>
 8008842:	b92a      	cbnz	r2, 8008850 <_realloc_r+0x24>
 8008844:	f7ff f964 	bl	8007b10 <_free_r>
 8008848:	4625      	mov	r5, r4
 800884a:	4628      	mov	r0, r5
 800884c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008850:	f000 f81b 	bl	800888a <_malloc_usable_size_r>
 8008854:	4284      	cmp	r4, r0
 8008856:	4607      	mov	r7, r0
 8008858:	d802      	bhi.n	8008860 <_realloc_r+0x34>
 800885a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800885e:	d812      	bhi.n	8008886 <_realloc_r+0x5a>
 8008860:	4621      	mov	r1, r4
 8008862:	4640      	mov	r0, r8
 8008864:	f7ff f9c0 	bl	8007be8 <_malloc_r>
 8008868:	4605      	mov	r5, r0
 800886a:	2800      	cmp	r0, #0
 800886c:	d0ed      	beq.n	800884a <_realloc_r+0x1e>
 800886e:	42bc      	cmp	r4, r7
 8008870:	4622      	mov	r2, r4
 8008872:	4631      	mov	r1, r6
 8008874:	bf28      	it	cs
 8008876:	463a      	movcs	r2, r7
 8008878:	f7ff ffca 	bl	8008810 <memcpy>
 800887c:	4631      	mov	r1, r6
 800887e:	4640      	mov	r0, r8
 8008880:	f7ff f946 	bl	8007b10 <_free_r>
 8008884:	e7e1      	b.n	800884a <_realloc_r+0x1e>
 8008886:	4635      	mov	r5, r6
 8008888:	e7df      	b.n	800884a <_realloc_r+0x1e>

0800888a <_malloc_usable_size_r>:
 800888a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800888e:	1f18      	subs	r0, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	bfbc      	itt	lt
 8008894:	580b      	ldrlt	r3, [r1, r0]
 8008896:	18c0      	addlt	r0, r0, r3
 8008898:	4770      	bx	lr
	...

0800889c <_init>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr

080088a8 <_fini>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr
