
STM_CLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800af08  0800af08  0001af08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b510  0800b510  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b510  0800b510  0001b510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b518  0800b518  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b518  0800b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b51c  0800b51c  0001b51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000cc0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d38  20000d38  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020df6  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000504f  00000000  00000000  00040ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cc8  00000000  00000000  00045f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001658  00000000  00000000  00047bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c7e4  00000000  00000000  00049250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002856c  00000000  00000000  00075a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb3ab  00000000  00000000  0009dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008218  00000000  00000000  0019934c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  001a1564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aef0 	.word	0x0800aef0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800aef0 	.word	0x0800aef0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005b0:	4a28      	ldr	r2, [pc, #160]	; (8000654 <MX_ADC1_Init+0xb8>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_ADC1_Init+0xbc>)
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <MX_ADC1_Init+0xb4>)
 80005fe:	f002 faf7 	bl	8002bf0 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f001 fd22 	bl	8002050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800060c:	230a      	movs	r3, #10
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000614:	2303      	movs	r3, #3
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_ADC1_Init+0xb4>)
 800061e:	f002 fd73 	bl	8003108 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f001 fd12 	bl	8002050 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062c:	2303      	movs	r3, #3
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC1_Init+0xb4>)
 800063a:	f002 fd65 	bl	8003108 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000644:	f001 fd04 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000094 	.word	0x20000094
 8000654:	40012000 	.word	0x40012000
 8000658:	0f000001 	.word	0x0f000001

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a3c      	ldr	r2, [pc, #240]	; (800076c <HAL_ADC_MspInit+0x110>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d171      	bne.n	8000762 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	4a3a      	ldr	r2, [pc, #232]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068c:	6453      	str	r3, [r2, #68]	; 0x44
 800068e:	4b38      	ldr	r3, [pc, #224]	; (8000770 <HAL_ADC_MspInit+0x114>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a33      	ldr	r2, [pc, #204]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <HAL_ADC_MspInit+0x114>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4823      	ldr	r0, [pc, #140]	; (8000774 <HAL_ADC_MspInit+0x118>)
 80006e6:	f004 fb0b 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ea:	2308      	movs	r3, #8
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	481e      	ldr	r0, [pc, #120]	; (8000778 <HAL_ADC_MspInit+0x11c>)
 80006fe:	f004 faff 	bl	8004d00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <HAL_ADC_MspInit+0x124>)
 8000706:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <HAL_ADC_MspInit+0x120>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000728:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_ADC_MspInit+0x120>)
 800072c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000738:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_ADC_MspInit+0x120>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <HAL_ADC_MspInit+0x120>)
 8000748:	f003 f8aa 	bl	80038a0 <HAL_DMA_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000752:	f001 fc7d 	bl	8002050 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_ADC_MspInit+0x120>)
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_ADC_MspInit+0x120>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40012000 	.word	0x40012000
 8000770:	40023800 	.word	0x40023800
 8000774:	40020800 	.word	0x40020800
 8000778:	40020000 	.word	0x40020000
 800077c:	200000dc 	.word	0x200000dc
 8000780:	40026410 	.word	0x40026410

08000784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <MX_DMA_Init+0x3c>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2038      	movs	r0, #56	; 0x38
 80007ac:	f003 f841 	bl	8003832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b0:	2038      	movs	r0, #56	; 0x38
 80007b2:	f003 f85a 	bl	800386a <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ETH_Init+0x84>)
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <MX_ETH_Init+0x88>)
 80007cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ETH_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_ETH_Init+0x8c>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ETH_Init+0x8c>)
 80007dc:	22e1      	movs	r2, #225	; 0xe1
 80007de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_ETH_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ETH_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_ETH_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ETH_Init+0x84>)
 80007f4:	4a16      	ldr	r2, [pc, #88]	; (8000850 <MX_ETH_Init+0x8c>)
 80007f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ETH_Init+0x84>)
 80007fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007fe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ETH_Init+0x84>)
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <MX_ETH_Init+0x90>)
 8000804:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_ETH_Init+0x84>)
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_ETH_Init+0x94>)
 800080a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_ETH_Init+0x84>)
 800080e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000812:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_ETH_Init+0x84>)
 8000816:	f003 fc45 	bl	80040a4 <HAL_ETH_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000820:	f001 fc16 	bl	8002050 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000824:	2238      	movs	r2, #56	; 0x38
 8000826:	2100      	movs	r1, #0
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x98>)
 800082a:	f009 fc1f 	bl	800a06c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_ETH_Init+0x98>)
 8000830:	2221      	movs	r2, #33	; 0x21
 8000832:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_ETH_Init+0x98>)
 8000836:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800083a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_ETH_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002b4 	.word	0x200002b4
 800084c:	40028000 	.word	0x40028000
 8000850:	20000364 	.word	0x20000364
 8000854:	200001dc 	.word	0x200001dc
 8000858:	2000013c 	.word	0x2000013c
 800085c:	2000027c 	.word	0x2000027c

08000860 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a55      	ldr	r2, [pc, #340]	; (80009d4 <HAL_ETH_MspInit+0x174>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80a4 	bne.w	80009cc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
 8000888:	4b53      	ldr	r3, [pc, #332]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a52      	ldr	r2, [pc, #328]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800088e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a44      	ldr	r2, [pc, #272]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
 80008cc:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4a3d      	ldr	r2, [pc, #244]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6313      	str	r3, [r2, #48]	; 0x30
 80008e8:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a36      	ldr	r2, [pc, #216]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 8000936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <HAL_ETH_MspInit+0x178>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000948:	2332      	movs	r3, #50	; 0x32
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000958:	230b      	movs	r3, #11
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	481e      	ldr	r0, [pc, #120]	; (80009dc <HAL_ETH_MspInit+0x17c>)
 8000964:	f004 f9cc 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000968:	2386      	movs	r3, #134	; 0x86
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000978:	230b      	movs	r3, #11
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4817      	ldr	r0, [pc, #92]	; (80009e0 <HAL_ETH_MspInit+0x180>)
 8000984:	f004 f9bc 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099a:	230b      	movs	r3, #11
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <HAL_ETH_MspInit+0x184>)
 80009a6:	f004 f9ab 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009bc:	230b      	movs	r3, #11
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80009c8:	f004 f99a 	bl	8004d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	; 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40028000 	.word	0x40028000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800

080009ec <initFlash>:
 * @retval The sector of a given address
 */
uint32_t FirstSector, NbOfSectors;

void initFlash(target_flashRange_t* target, uint32_t startAddr, uint32_t endAddr)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
	target->USER_START_ADDR = startAddr;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	601a      	str	r2, [r3, #0]
	target->USER_END_ADDR = endAddr;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	605a      	str	r2, [r3, #4]
	target->USER_TARGET_ADDR = target->USER_START_ADDR;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	609a      	str	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <GetSector>:

uint32_t GetSector(uint32_t Address)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a82      	ldr	r2, [pc, #520]	; (8000c30 <GetSector+0x218>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d206      	bcs.n	8000a3a <GetSector+0x22>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a32:	d302      	bcc.n	8000a3a <GetSector+0x22>
    {
      sector = FLASH_SECTOR_0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e0f3      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a7d      	ldr	r2, [pc, #500]	; (8000c34 <GetSector+0x21c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d206      	bcs.n	8000a50 <GetSector+0x38>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a7a      	ldr	r2, [pc, #488]	; (8000c30 <GetSector+0x218>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d302      	bcc.n	8000a50 <GetSector+0x38>
    {
      sector = FLASH_SECTOR_1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e0e8      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a79      	ldr	r2, [pc, #484]	; (8000c38 <GetSector+0x220>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d206      	bcs.n	8000a66 <GetSector+0x4e>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a76      	ldr	r2, [pc, #472]	; (8000c34 <GetSector+0x21c>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d302      	bcc.n	8000a66 <GetSector+0x4e>
    {
      sector = FLASH_SECTOR_2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e0dd      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a74      	ldr	r2, [pc, #464]	; (8000c3c <GetSector+0x224>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d806      	bhi.n	8000a7c <GetSector+0x64>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a71      	ldr	r2, [pc, #452]	; (8000c38 <GetSector+0x220>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d302      	bcc.n	8000a7c <GetSector+0x64>
    {
      sector = FLASH_SECTOR_3;
 8000a76:	2303      	movs	r3, #3
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e0d2      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a70      	ldr	r2, [pc, #448]	; (8000c40 <GetSector+0x228>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d806      	bhi.n	8000a92 <GetSector+0x7a>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a6d      	ldr	r2, [pc, #436]	; (8000c3c <GetSector+0x224>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d902      	bls.n	8000a92 <GetSector+0x7a>
    {
      sector = FLASH_SECTOR_4;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e0c7      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a6b      	ldr	r2, [pc, #428]	; (8000c44 <GetSector+0x22c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d806      	bhi.n	8000aa8 <GetSector+0x90>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a68      	ldr	r2, [pc, #416]	; (8000c40 <GetSector+0x228>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d902      	bls.n	8000aa8 <GetSector+0x90>
    {
      sector = FLASH_SECTOR_5;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e0bc      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a67      	ldr	r2, [pc, #412]	; (8000c48 <GetSector+0x230>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d806      	bhi.n	8000abe <GetSector+0xa6>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a64      	ldr	r2, [pc, #400]	; (8000c44 <GetSector+0x22c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d902      	bls.n	8000abe <GetSector+0xa6>
    {
      sector = FLASH_SECTOR_6;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e0b1      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a62      	ldr	r2, [pc, #392]	; (8000c4c <GetSector+0x234>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d806      	bhi.n	8000ad4 <GetSector+0xbc>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a5f      	ldr	r2, [pc, #380]	; (8000c48 <GetSector+0x230>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d902      	bls.n	8000ad4 <GetSector+0xbc>
    {
      sector = FLASH_SECTOR_7;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e0a6      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a5e      	ldr	r2, [pc, #376]	; (8000c50 <GetSector+0x238>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d806      	bhi.n	8000aea <GetSector+0xd2>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a5b      	ldr	r2, [pc, #364]	; (8000c4c <GetSector+0x234>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d902      	bls.n	8000aea <GetSector+0xd2>
    {
      sector = FLASH_SECTOR_8;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e09b      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a59      	ldr	r2, [pc, #356]	; (8000c54 <GetSector+0x23c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d806      	bhi.n	8000b00 <GetSector+0xe8>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a56      	ldr	r2, [pc, #344]	; (8000c50 <GetSector+0x238>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d902      	bls.n	8000b00 <GetSector+0xe8>
    {
      sector = FLASH_SECTOR_9;
 8000afa:	2309      	movs	r3, #9
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	e090      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a55      	ldr	r2, [pc, #340]	; (8000c58 <GetSector+0x240>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d806      	bhi.n	8000b16 <GetSector+0xfe>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a52      	ldr	r2, [pc, #328]	; (8000c54 <GetSector+0x23c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d902      	bls.n	8000b16 <GetSector+0xfe>
    {
      sector = FLASH_SECTOR_10;
 8000b10:	230a      	movs	r3, #10
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e085      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000b1c:	d206      	bcs.n	8000b2c <GetSector+0x114>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a4d      	ldr	r2, [pc, #308]	; (8000c58 <GetSector+0x240>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d902      	bls.n	8000b2c <GetSector+0x114>
    {
      sector = FLASH_SECTOR_11;
 8000b26:	230b      	movs	r3, #11
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e07a      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a4b      	ldr	r2, [pc, #300]	; (8000c5c <GetSector+0x244>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d206      	bcs.n	8000b42 <GetSector+0x12a>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000b3a:	d302      	bcc.n	8000b42 <GetSector+0x12a>
    {
      sector = FLASH_SECTOR_12;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	e06f      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <GetSector+0x248>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d206      	bcs.n	8000b58 <GetSector+0x140>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a43      	ldr	r2, [pc, #268]	; (8000c5c <GetSector+0x244>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d302      	bcc.n	8000b58 <GetSector+0x140>
    {
      sector = FLASH_SECTOR_13;
 8000b52:	230d      	movs	r3, #13
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e064      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <GetSector+0x24c>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d206      	bcs.n	8000b6e <GetSector+0x156>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <GetSector+0x248>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d302      	bcc.n	8000b6e <GetSector+0x156>
    {
      sector = FLASH_SECTOR_14;
 8000b68:	230e      	movs	r3, #14
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	e059      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_16) && (Address >= ADDR_FLASH_SECTOR_15))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a3d      	ldr	r2, [pc, #244]	; (8000c68 <GetSector+0x250>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d806      	bhi.n	8000b84 <GetSector+0x16c>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a3a      	ldr	r2, [pc, #232]	; (8000c64 <GetSector+0x24c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d302      	bcc.n	8000b84 <GetSector+0x16c>
    {
      sector = FLASH_SECTOR_15;
 8000b7e:	230f      	movs	r3, #15
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e04e      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_17) && (Address >= ADDR_FLASH_SECTOR_16))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a39      	ldr	r2, [pc, #228]	; (8000c6c <GetSector+0x254>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d806      	bhi.n	8000b9a <GetSector+0x182>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <GetSector+0x250>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d902      	bls.n	8000b9a <GetSector+0x182>
    {
      sector = FLASH_SECTOR_16;
 8000b94:	2310      	movs	r3, #16
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e043      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_18) && (Address >= ADDR_FLASH_SECTOR_17))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a34      	ldr	r2, [pc, #208]	; (8000c70 <GetSector+0x258>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d806      	bhi.n	8000bb0 <GetSector+0x198>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <GetSector+0x254>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d902      	bls.n	8000bb0 <GetSector+0x198>
    {
      sector = FLASH_SECTOR_17;
 8000baa:	2311      	movs	r3, #17
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	e038      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_19) && (Address >= ADDR_FLASH_SECTOR_18))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a30      	ldr	r2, [pc, #192]	; (8000c74 <GetSector+0x25c>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d806      	bhi.n	8000bc6 <GetSector+0x1ae>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <GetSector+0x258>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d902      	bls.n	8000bc6 <GetSector+0x1ae>
    {
      sector = FLASH_SECTOR_18;
 8000bc0:	2312      	movs	r3, #18
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e02d      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_20) && (Address >= ADDR_FLASH_SECTOR_19))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <GetSector+0x260>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d806      	bhi.n	8000bdc <GetSector+0x1c4>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <GetSector+0x25c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d902      	bls.n	8000bdc <GetSector+0x1c4>
    {
      sector = FLASH_SECTOR_19;
 8000bd6:	2313      	movs	r3, #19
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e022      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_21) && (Address >= ADDR_FLASH_SECTOR_20))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a27      	ldr	r2, [pc, #156]	; (8000c7c <GetSector+0x264>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d806      	bhi.n	8000bf2 <GetSector+0x1da>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a24      	ldr	r2, [pc, #144]	; (8000c78 <GetSector+0x260>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d902      	bls.n	8000bf2 <GetSector+0x1da>
    {
      sector = FLASH_SECTOR_20;
 8000bec:	2314      	movs	r3, #20
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	e017      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_22) && (Address >= ADDR_FLASH_SECTOR_21))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <GetSector+0x268>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d806      	bhi.n	8000c08 <GetSector+0x1f0>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <GetSector+0x264>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d902      	bls.n	8000c08 <GetSector+0x1f0>
    {
      sector = FLASH_SECTOR_21;
 8000c02:	2315      	movs	r3, #21
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	e00c      	b.n	8000c22 <GetSector+0x20a>
    }
  else if((Address < ADDR_FLASH_SECTOR_23) && (Address >= ADDR_FLASH_SECTOR_22))
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <GetSector+0x26c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d806      	bhi.n	8000c1e <GetSector+0x206>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <GetSector+0x268>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d902      	bls.n	8000c1e <GetSector+0x206>
    {
      sector = FLASH_SECTOR_22;
 8000c18:	2316      	movs	r3, #22
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e001      	b.n	8000c22 <GetSector+0x20a>
    }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23) */
    {
      sector = FLASH_SECTOR_23;
 8000c1e:	2317      	movs	r3, #23
 8000c20:	60fb      	str	r3, [r7, #12]
    }
  return sector;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	08004000 	.word	0x08004000
 8000c34:	08008000 	.word	0x08008000
 8000c38:	0800c000 	.word	0x0800c000
 8000c3c:	0800ffff 	.word	0x0800ffff
 8000c40:	0801ffff 	.word	0x0801ffff
 8000c44:	0803ffff 	.word	0x0803ffff
 8000c48:	0805ffff 	.word	0x0805ffff
 8000c4c:	0807ffff 	.word	0x0807ffff
 8000c50:	0809ffff 	.word	0x0809ffff
 8000c54:	080bffff 	.word	0x080bffff
 8000c58:	080dffff 	.word	0x080dffff
 8000c5c:	08104000 	.word	0x08104000
 8000c60:	08108000 	.word	0x08108000
 8000c64:	0810c000 	.word	0x0810c000
 8000c68:	0810ffff 	.word	0x0810ffff
 8000c6c:	0811ffff 	.word	0x0811ffff
 8000c70:	0813ffff 	.word	0x0813ffff
 8000c74:	0815ffff 	.word	0x0815ffff
 8000c78:	0817ffff 	.word	0x0817ffff
 8000c7c:	0819ffff 	.word	0x0819ffff
 8000c80:	081bffff 	.word	0x081bffff
 8000c84:	081dffff 	.word	0x081dffff

08000c88 <GetSectorSize>:
 * @brief  Gets sector Size
 * @param  None
 * @retval The size of a given sector
 */
uint32_t GetSectorSize(uint32_t Sector)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) ||\
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d014      	beq.n	8000cc4 <GetSectorSize+0x3c>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d011      	beq.n	8000cc4 <GetSectorSize+0x3c>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d00e      	beq.n	8000cc4 <GetSectorSize+0x3c>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d00b      	beq.n	8000cc4 <GetSectorSize+0x3c>
      (Sector == FLASH_SECTOR_3) || (Sector == FLASH_SECTOR_12) || (Sector == FLASH_SECTOR_13) ||\
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b0c      	cmp	r3, #12
 8000cb0:	d008      	beq.n	8000cc4 <GetSectorSize+0x3c>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0d      	cmp	r3, #13
 8000cb6:	d005      	beq.n	8000cc4 <GetSectorSize+0x3c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b0e      	cmp	r3, #14
 8000cbc:	d002      	beq.n	8000cc4 <GetSectorSize+0x3c>
      (Sector == FLASH_SECTOR_14) || (Sector == FLASH_SECTOR_15))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d103      	bne.n	8000ccc <GetSectorSize+0x44>
    {
      sectorsize = 16 * 1024;
 8000cc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e00c      	b.n	8000ce6 <GetSectorSize+0x5e>
    }
  else if((Sector == FLASH_SECTOR_4) || (Sector == FLASH_SECTOR_16))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	d002      	beq.n	8000cd8 <GetSectorSize+0x50>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b10      	cmp	r3, #16
 8000cd6:	d103      	bne.n	8000ce0 <GetSectorSize+0x58>
    {
      sectorsize = 64 * 1024;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	e002      	b.n	8000ce6 <GetSectorSize+0x5e>
    }
  else
    {
      sectorsize = 128 * 1024;
 8000ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce4:	60fb      	str	r3, [r7, #12]
    }
  return sectorsize;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <readFlash>:

Status_flashRW readFlash(uint32_t StartADDR)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  unsigned int value = *(unsigned int*)StartADDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  printf("addr[0x%08x] = %08x\r\n", StartADDR, value);
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <readFlash+0x24>)
 8000d08:	f009 f816 	bl	8009d38 <iprintf>
  return RW_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	0800af08 	.word	0x0800af08

08000d1c <overwriteFlash>:

Status_flashRW overwriteFlash(target_flashRange_t* target, uint32_t DATA)
{
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000d26:	f003 fd39 	bl	800479c <HAL_FLASH_Unlock>
	uint32_t Address = target->USER_TARGET_ADDR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	60fb      	str	r3, [r7, #12]
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA) == HAL_OK)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	461c      	mov	r4, r3
 8000d36:	4615      	mov	r5, r2
 8000d38:	4622      	mov	r2, r4
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	68f9      	ldr	r1, [r7, #12]
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f003 fcd8 	bl	80046f4 <HAL_FLASH_Program>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d109      	bne.n	8000d5e <overwriteFlash+0x42>
	{
		printf("Changed: ");
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <overwriteFlash+0x4c>)
 8000d4c:	f008 fff4 	bl	8009d38 <iprintf>
		readFlash(Address);
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff ffcf 	bl	8000cf4 <readFlash>
	else
	{
		return RW_ERROR;
	}

	HAL_FLASH_Lock();
 8000d56:	f003 fd43 	bl	80047e0 <HAL_FLASH_Lock>
	return RW_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <overwriteFlash+0x44>
		return RW_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bdb0      	pop	{r4, r5, r7, pc}
 8000d68:	0800af20 	.word	0x0800af20

08000d6c <eraseFlash>:

Status_flashRW eraseFlash(target_flashRange_t* target)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  FLASH_EraseInitTypeDef EraseInitStruct;
  //uint32_t Address = 0;
  uint32_t PageError;

  HAL_FLASH_Unlock();
 8000d74:	f003 fd12 	bl	800479c <HAL_FLASH_Unlock>
  FirstSector = GetSector(target->USER_START_ADDR);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe4b 	bl	8000a18 <GetSector>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <eraseFlash+0x68>)
 8000d86:	6013      	str	r3, [r2, #0]
  NbOfSectors = GetSector(target->USER_END_ADDR) - FirstSector + 1;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fe43 	bl	8000a18 <GetSector>
 8000d92:	4602      	mov	r2, r0
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <eraseFlash+0x68>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <eraseFlash+0x6c>)
 8000d9e:	6013      	str	r3, [r2, #0]
  EraseInitStruct.TypeErase 		= FLASH_TYPEERASE_SECTORS;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61fb      	str	r3, [r7, #28]
  EraseInitStruct.Sector        		= FirstSector;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <eraseFlash+0x68>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	617b      	str	r3, [r7, #20]
  EraseInitStruct.NbSectors     	= NbOfSectors;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <eraseFlash+0x6c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	61bb      	str	r3, [r7, #24]
  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000db4:	f107 0208 	add.w	r2, r7, #8
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fe5e 	bl	8004a80 <HAL_FLASHEx_Erase>
      }
    }
#endif


  HAL_FLASH_Lock();
 8000dc4:	f003 fd0c 	bl	80047e0 <HAL_FLASH_Lock>
  return RW_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000036c 	.word	0x2000036c
 8000dd8:	20000370 	.word	0x20000370

08000ddc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b4f      	ldr	r3, [pc, #316]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a43      	ldr	r2, [pc, #268]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a3c      	ldr	r2, [pc, #240]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a35      	ldr	r2, [pc, #212]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ea0:	4828      	ldr	r0, [pc, #160]	; (8000f44 <MX_GPIO_Init+0x168>)
 8000ea2:	f004 f8f1 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2140      	movs	r1, #64	; 0x40
 8000eaa:	4827      	ldr	r0, [pc, #156]	; (8000f48 <MX_GPIO_Init+0x16c>)
 8000eac:	f004 f8ec 	bl	8005088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000eb6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4821      	ldr	r0, [pc, #132]	; (8000f4c <MX_GPIO_Init+0x170>)
 8000ec8:	f003 ff1a 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ecc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <MX_GPIO_Init+0x168>)
 8000ee6:	f003 ff0b 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000eea:	2340      	movs	r3, #64	; 0x40
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_GPIO_Init+0x16c>)
 8000f02:	f003 fefd 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <MX_GPIO_Init+0x16c>)
 8000f1a:	f003 fef1 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f22:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_GPIO_Init+0x174>)
 8000f34:	f003 fee4 	bl	8004d00 <HAL_GPIO_Init>

}
 8000f38:	bf00      	nop
 8000f3a:	3730      	adds	r7, #48	; 0x30
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020c00 	.word	0x40020c00

08000f54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <MX_I2C1_Init+0x78>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f60:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <MX_I2C1_Init+0x7c>)
 8000f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000f92:	f004 f8c5 	bl	8005120 <HAL_I2C_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f9c:	f001 f858 	bl	8002050 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000fa4:	f004 fe35 	bl	8005c12 <HAL_I2CEx_ConfigAnalogFilter>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000fae:	f001 f84f 	bl	8002050 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_I2C1_Init+0x74>)
 8000fb6:	f004 fe68 	bl	8005c8a <HAL_I2CEx_ConfigDigitalFilter>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f001 f846 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000374 	.word	0x20000374
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	000186a0 	.word	0x000186a0

08000fd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a19      	ldr	r2, [pc, #100]	; (8001058 <HAL_I2C_MspInit+0x84>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12c      	bne.n	8001050 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_I2C_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <HAL_I2C_MspInit+0x88>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_I2C_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001018:	2312      	movs	r3, #18
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001024:	2304      	movs	r3, #4
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <HAL_I2C_MspInit+0x8c>)
 8001030:	f003 fe66 	bl	8004d00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_I2C_MspInit+0x88>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_I2C_MspInit+0x88>)
 800103e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001042:	6413      	str	r3, [r2, #64]	; 0x40
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_I2C_MspInit+0x88>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40005400 	.word	0x40005400
 800105c:	40023800 	.word	0x40023800
 8001060:	40020400 	.word	0x40020400

08001064 <I2C_Scan>:
#include "lcd.h"

void I2C_Scan() {
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b098      	sub	sp, #96	; 0x60
 8001068:	af00      	add	r7, sp, #0
  char info[] = "Scanning I2C bus...\r\n";
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <I2C_Scan+0xc0>)
 800106c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001070:	461d      	mov	r5, r3
 8001072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001076:	e895 0003 	ldmia.w	r5, {r0, r1}
 800107a:	6020      	str	r0, [r4, #0]
 800107c:	3404      	adds	r4, #4
 800107e:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8001080:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f8b3 	bl	80001f0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	4824      	ldr	r0, [pc, #144]	; (8001128 <I2C_Scan+0xc4>)
 8001098:	f007 fa5f 	bl	800855a <HAL_UART_Transmit>

  HAL_StatusTypeDef res;
  for(uint16_t i = 0; i < 128; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80010a2:	e02f      	b.n	8001104 <I2C_Scan+0xa0>
      res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80010a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	b299      	uxth	r1, r3
 80010ac:	230a      	movs	r3, #10
 80010ae:	2201      	movs	r2, #1
 80010b0:	481e      	ldr	r0, [pc, #120]	; (800112c <I2C_Scan+0xc8>)
 80010b2:	f004 fa77 	bl	80055a4 <HAL_I2C_IsDeviceReady>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      if(res == HAL_OK) {
 80010bc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d113      	bne.n	80010ec <I2C_Scan+0x88>
	  char msg[64];
	  snprintf(msg, sizeof(msg), "0x%02X", i);
 80010c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80010c8:	1d38      	adds	r0, r7, #4
 80010ca:	4a19      	ldr	r2, [pc, #100]	; (8001130 <I2C_Scan+0xcc>)
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	f008 fea1 	bl	8009e14 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f88b 	bl	80001f0 <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29a      	uxth	r2, r3
 80010de:	1d39      	adds	r1, r7, #4
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	4810      	ldr	r0, [pc, #64]	; (8001128 <I2C_Scan+0xc4>)
 80010e6:	f007 fa38 	bl	800855a <HAL_UART_Transmit>
 80010ea:	e006      	b.n	80010fa <I2C_Scan+0x96>
      } else {
	  HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2201      	movs	r2, #1
 80010f2:	4910      	ldr	r1, [pc, #64]	; (8001134 <I2C_Scan+0xd0>)
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <I2C_Scan+0xc4>)
 80010f6:	f007 fa30 	bl	800855a <HAL_UART_Transmit>
  for(uint16_t i = 0; i < 128; i++) {
 80010fa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80010fe:	3301      	adds	r3, #1
 8001100:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001104:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001108:	2b7f      	cmp	r3, #127	; 0x7f
 800110a:	d9cb      	bls.n	80010a4 <I2C_Scan+0x40>
      }
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	2202      	movs	r2, #2
 8001112:	4909      	ldr	r1, [pc, #36]	; (8001138 <I2C_Scan+0xd4>)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <I2C_Scan+0xc4>)
 8001116:	f007 fa20 	bl	800855a <HAL_UART_Transmit>
}
 800111a:	bf00      	nop
 800111c:	3760      	adds	r7, #96	; 0x60
 800111e:	46bd      	mov	sp, r7
 8001120:	bdb0      	pop	{r4, r5, r7, pc}
 8001122:	bf00      	nop
 8001124:	0800af3c 	.word	0x0800af3c
 8001128:	20000678 	.word	0x20000678
 800112c:	20000374 	.word	0x20000374
 8001130:	0800af2c 	.word	0x0800af2c
 8001134:	0800af34 	.word	0x0800af34
 8001138:	0800af38 	.word	0x0800af38

0800113c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af02      	add	r7, sp, #8
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	460b      	mov	r3, r1
 8001148:	71bb      	strb	r3, [r7, #6]
 800114a:	4613      	mov	r3, r2
 800114c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef res;
  for(;;) {
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	b299      	uxth	r1, r3
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	2201      	movs	r2, #1
 8001158:	4822      	ldr	r0, [pc, #136]	; (80011e4 <LCD_SendInternal+0xa8>)
 800115a:	f004 fa23 	bl	80055a4 <HAL_I2C_IsDeviceReady>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
      if(res == HAL_OK)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d000      	beq.n	800116a <LCD_SendInternal+0x2e>
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8001168:	e7f1      	b.n	800114e <LCD_SendInternal+0x12>
	break;
 800116a:	bf00      	nop
  }

  uint8_t up = data & 0xF0;
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	f023 030f 	bic.w	r3, r3, #15
 8001172:	73bb      	strb	r3, [r7, #14]
  uint8_t lo = (data << 4) & 0xF0;
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	737b      	strb	r3, [r7, #13]

  uint8_t data_arr[4];
  data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 800117a:	7bba      	ldrb	r2, [r7, #14]
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	4313      	orrs	r3, r2
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f043 030c 	orr.w	r3, r3, #12
 8001186:	b2db      	uxtb	r3, r3
 8001188:	723b      	strb	r3, [r7, #8]
  data_arr[1] = up|flags|BACKLIGHT;
 800118a:	7bba      	ldrb	r2, [r7, #14]
 800118c:	797b      	ldrb	r3, [r7, #5]
 800118e:	4313      	orrs	r3, r2
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	b2db      	uxtb	r3, r3
 8001198:	727b      	strb	r3, [r7, #9]
  data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 800119a:	7b7a      	ldrb	r2, [r7, #13]
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	4313      	orrs	r3, r2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f043 030c 	orr.w	r3, r3, #12
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	72bb      	strb	r3, [r7, #10]
  data_arr[3] = lo|flags|BACKLIGHT;
 80011aa:	7b7a      	ldrb	r2, [r7, #13]
 80011ac:	797b      	ldrb	r3, [r7, #5]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	72fb      	strb	r3, [r7, #11]

  res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	b299      	uxth	r1, r3
 80011be:	f107 0208 	add.w	r2, r7, #8
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2304      	movs	r3, #4
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <LCD_SendInternal+0xa8>)
 80011cc:	f004 f8ec 	bl	80053a8 <HAL_I2C_Master_Transmit>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(LCD_DELAY_MS);
 80011d4:	2005      	movs	r0, #5
 80011d6:	f001 fce7 	bl	8002ba8 <HAL_Delay>
  return res;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000374 	.word	0x20000374

080011e8 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, cmd, 0);
 80011f8:	79b9      	ldrb	r1, [r7, #6]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2200      	movs	r2, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff9c 	bl	800113c <LCD_SendInternal>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	460a      	mov	r2, r1
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, data, PIN_RS);
 800121c:	79b9      	ldrb	r1, [r7, #6]
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2201      	movs	r2, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff8a 	bl	800113c <LCD_SendInternal>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  // 4-bit mode, 2 lines, 5x7 format
  LCD_SendCommand(lcd_addr, 0b00110000);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2130      	movs	r1, #48	; 0x30
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffd2 	bl	80011e8 <LCD_SendCommand>
  // display & cursor home (keep this!)
  LCD_SendCommand(lcd_addr, 0b00000010);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2102      	movs	r1, #2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ffcd 	bl	80011e8 <LCD_SendCommand>
  // display on, right shift, underline off, blink off
  LCD_SendCommand(lcd_addr, 0b00001100);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	210c      	movs	r1, #12
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ffc8 	bl	80011e8 <LCD_SendCommand>
  // clear display (optional here)
  LCD_SendCommand(lcd_addr, 0b00000001);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2101      	movs	r1, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffc3 	bl	80011e8 <LCD_SendCommand>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	6039      	str	r1, [r7, #0]
 8001274:	71fb      	strb	r3, [r7, #7]
  while(*str) {
 8001276:	e009      	b.n	800128c <LCD_SendString+0x22>
      LCD_SendData(lcd_addr, (uint8_t)(*str));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ffc3 	bl	800120c <LCD_SendData>
      str++;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	603b      	str	r3, [r7, #0]
  while(*str) {
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f1      	bne.n	8001278 <LCD_SendString+0xe>
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <init>:

void init() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  I2C_Scan();
 80012a4:	f7ff fede 	bl	8001064 <I2C_Scan>
  LCD_Init(LCD_ADDR);
 80012a8:	204e      	movs	r0, #78	; 0x4e
 80012aa:	f7ff ffc1 	bl	8001230 <LCD_Init>

  // set address to 0x00
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	204e      	movs	r0, #78	; 0x4e
 80012b2:	f7ff ff99 	bl	80011e8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 80012b6:	4907      	ldr	r1, [pc, #28]	; (80012d4 <init+0x34>)
 80012b8:	204e      	movs	r0, #78	; 0x4e
 80012ba:	f7ff ffd6 	bl	800126a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80012be:	21c0      	movs	r1, #192	; 0xc0
 80012c0:	204e      	movs	r0, #78	; 0x4e
 80012c2:	f7ff ff91 	bl	80011e8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "  over I2C bus");
 80012c6:	4904      	ldr	r1, [pc, #16]	; (80012d8 <init+0x38>)
 80012c8:	204e      	movs	r0, #78	; 0x4e
 80012ca:	f7ff ffce 	bl	800126a <LCD_SendString>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800af54 	.word	0x0800af54
 80012d8:	0800af64 	.word	0x0800af64

080012dc <LCD_PrintAll>:

void LCD_PrintAll(char *str1, char *str2)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	204e      	movs	r0, #78	; 0x4e
 80012ea:	f7ff ff7d 	bl	80011e8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str1);
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	204e      	movs	r0, #78	; 0x4e
 80012f2:	f7ff ffba 	bl	800126a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80012f6:	21c0      	movs	r1, #192	; 0xc0
 80012f8:	204e      	movs	r0, #78	; 0x4e
 80012fa:	f7ff ff75 	bl	80011e8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str2);
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	204e      	movs	r0, #78	; 0x4e
 8001302:	f7ff ffb2 	bl	800126a <LCD_SendString>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <LCD_Clear>:
      LCD_SendCommand(LCD_ADDR, 0b11000000);
      LCD_SendString(LCD_ADDR, str);
    }
}
void LCD_Clear()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	204e      	movs	r0, #78	; 0x4e
 8001318:	f7ff ff66 	bl	80011e8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 800131c:	4906      	ldr	r1, [pc, #24]	; (8001338 <LCD_Clear+0x28>)
 800131e:	204e      	movs	r0, #78	; 0x4e
 8001320:	f7ff ffa3 	bl	800126a <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 8001324:	21c0      	movs	r1, #192	; 0xc0
 8001326:	204e      	movs	r0, #78	; 0x4e
 8001328:	f7ff ff5e 	bl	80011e8 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 800132c:	4902      	ldr	r1, [pc, #8]	; (8001338 <LCD_Clear+0x28>)
 800132e:	204e      	movs	r0, #78	; 0x4e
 8001330:	f7ff ff9b 	bl	800126a <LCD_SendString>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	0800af74 	.word	0x0800af74

0800133c <_write>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

int _write(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	b29a      	uxth	r2, r3
 800134c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <_write+0x28>)
 8001354:	f007 f901 	bl	800855a <HAL_UART_Transmit>
	return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000678 	.word	0x20000678

08001368 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800136c:	f001 fbaa 	bl	8002ac4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001370:	f000 f8a8 	bl	80014c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001374:	f7ff fd32 	bl	8000ddc <MX_GPIO_Init>
	MX_DMA_Init();
 8001378:	f7ff fa04 	bl	8000784 <MX_DMA_Init>
	MX_ETH_Init();
 800137c:	f7ff fa22 	bl	80007c4 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8001380:	f001 fa44 	bl	800280c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001384:	f001 faec 	bl	8002960 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 8001388:	f7ff fde4 	bl	8000f54 <MX_I2C1_Init>
	MX_RTC_Init();
 800138c:	f000 fe66 	bl	800205c <MX_RTC_Init>
	MX_TIM2_Init();
 8001390:	f001 f8de 	bl	8002550 <MX_TIM2_Init>
	MX_UART4_Init();
 8001394:	f001 fa10 	bl	80027b8 <MX_UART4_Init>
	MX_ADC1_Init();
 8001398:	f7ff f900 	bl	800059c <MX_ADC1_Init>
	MX_TIM3_Init();
 800139c:	f001 f926 	bl	80025ec <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80013a0:	f000 f8fc 	bl	800159c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80013a4:	2108      	movs	r1, #8
 80013a6:	4836      	ldr	r0, [pc, #216]	; (8001480 <main+0x118>)
 80013a8:	f006 f95e 	bl	8007668 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, Joycon, sizeof(Joycon)/sizeof(Joycon[0]));
 80013ac:	2202      	movs	r2, #2
 80013ae:	4935      	ldr	r1, [pc, #212]	; (8001484 <main+0x11c>)
 80013b0:	4835      	ldr	r0, [pc, #212]	; (8001488 <main+0x120>)
 80013b2:	f001 fd71 	bl	8002e98 <HAL_ADC_Start_DMA>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
 80013b6:	2201      	movs	r2, #1
 80013b8:	4934      	ldr	r1, [pc, #208]	; (800148c <main+0x124>)
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <main+0x128>)
 80013bc:	f007 f95f 	bl	800867e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
 80013c0:	2201      	movs	r2, #1
 80013c2:	4934      	ldr	r1, [pc, #208]	; (8001494 <main+0x12c>)
 80013c4:	4834      	ldr	r0, [pc, #208]	; (8001498 <main+0x130>)
 80013c6:	f007 f95a 	bl	800867e <HAL_UART_Receive_IT>

	//unsigned int value, addr = FLASH_USER_START_ADDR, cnt = 0;
	//unsigned char buf[30];
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80013ca:	2200      	movs	r2, #0
 80013cc:	4933      	ldr	r1, [pc, #204]	; (800149c <main+0x134>)
 80013ce:	4834      	ldr	r0, [pc, #208]	; (80014a0 <main+0x138>)
 80013d0:	f005 fe52 	bl	8007078 <HAL_RTC_SetAlarm_IT>
	init();
 80013d4:	f7ff ff64 	bl	80012a0 <init>
	LCD_Clear();
 80013d8:	f7ff ff9a 	bl	8001310 <LCD_Clear>
	set_date(RTC_WEEKDAY_MONDAY, 11, 13, 23);
 80013dc:	2317      	movs	r3, #23
 80013de:	220d      	movs	r2, #13
 80013e0:	210b      	movs	r1, #11
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 f980 	bl	80016e8 <set_date>
	set_time(13,25,0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2119      	movs	r1, #25
 80013ec:	200d      	movs	r0, #13
 80013ee:	f000 f911 	bl	8001614 <set_time>
	set_alarm(0, 0, 5);
 80013f2:	2205      	movs	r2, #5
 80013f4:	2100      	movs	r1, #0
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 f92e 	bl	8001658 <set_alarm>

	initFlash(&flash, FLASH_USER_START_ADDR, FLASH_USER_END_ADDR);
 80013fc:	4829      	ldr	r0, [pc, #164]	; (80014a4 <main+0x13c>)
 80013fe:	f7ff fc43 	bl	8000c88 <GetSectorSize>
 8001402:	4602      	mov	r2, r0
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <main+0x140>)
 8001406:	4413      	add	r3, r2
 8001408:	461a      	mov	r2, r3
 800140a:	4926      	ldr	r1, [pc, #152]	; (80014a4 <main+0x13c>)
 800140c:	4827      	ldr	r0, [pc, #156]	; (80014ac <main+0x144>)
 800140e:	f7ff faed 	bl	80009ec <initFlash>
	while (1)
	{
		//printf("x: %d\r\ny: %d\r\n",Joycon[0],Joycon[1]);
		//printf("current state: %d\r\n", clock_state);
#if 1
		switch(clock_state)
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <main+0x148>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d82d      	bhi.n	8001476 <main+0x10e>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <main+0xb8>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	08001431 	.word	0x08001431
 8001424:	0800143f 	.word	0x0800143f
 8001428:	08001463 	.word	0x08001463
 800142c:	0800146b 	.word	0x0800146b
		{
		case NORMAL_STATE:
			get_time();
 8001430:	f000 f982 	bl	8001738 <get_time>
			HAL_Delay(300);
 8001434:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001438:	f001 fbb6 	bl	8002ba8 <HAL_Delay>
			break;
 800143c:	e01f      	b.n	800147e <main+0x116>
		case TIME_SETTING:
			// 1. timer setting
			// 2. save at flash
			timeSetter();
 800143e:	f000 f9e3 	bl	8001808 <timeSetter>
			if(isSave == true)
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <main+0x14c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <main+0xea>
			{
				saveCurrentTime();
 800144a:	f000 fba7 	bl	8001b9c <saveCurrentTime>
				LCD_Clear();
 800144e:	f7ff ff5f 	bl	8001310 <LCD_Clear>
			}
			printf("setting mode\r\n");
 8001452:	4819      	ldr	r0, [pc, #100]	; (80014b8 <main+0x150>)
 8001454:	f008 fcd6 	bl	8009e04 <puts>
			HAL_Delay(500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145c:	f001 fba4 	bl	8002ba8 <HAL_Delay>
			break;
 8001460:	e00d      	b.n	800147e <main+0x116>
		case ALARM_TIME_SETTING:
			// 1. alarm time setting
			// 2. save at flash
			printf("alarm mode\r\n");
 8001462:	4816      	ldr	r0, [pc, #88]	; (80014bc <main+0x154>)
 8001464:	f008 fcce 	bl	8009e04 <puts>
			break;
 8001468:	e009      	b.n	800147e <main+0x116>
		case MUSIC_SELECT:
			// 1. music select
			// 2. save at flash
			selectSong();
 800146a:	f000 fbf5 	bl	8001c58 <selectSong>
//			{
//				remove_tone();
//				saveCurrentSong();
//				LCD_Clear();
//			}
			printf("music mode\r\n");
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <main+0x158>)
 8001470:	f008 fcc8 	bl	8009e04 <puts>
			break;
 8001474:	e003      	b.n	800147e <main+0x116>
		default:
			clock_state = NORMAL_STATE;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <main+0x148>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
			break;
 800147c:	bf00      	nop
		switch(clock_state)
 800147e:	e7c8      	b.n	8001412 <main+0xaa>
 8001480:	200005ec 	.word	0x200005ec
 8001484:	2000040c 	.word	0x2000040c
 8001488:	20000094 	.word	0x20000094
 800148c:	200003c9 	.word	0x200003c9
 8001490:	20000678 	.word	0x20000678
 8001494:	200003ca 	.word	0x200003ca
 8001498:	20000634 	.word	0x20000634
 800149c:	200003cc 	.word	0x200003cc
 80014a0:	20000580 	.word	0x20000580
 80014a4:	081c0000 	.word	0x081c0000
 80014a8:	081bffff 	.word	0x081bffff
 80014ac:	200004e4 	.word	0x200004e4
 80014b0:	200003c8 	.word	0x200003c8
 80014b4:	200004c8 	.word	0x200004c8
 80014b8:	0800af88 	.word	0x0800af88
 80014bc:	0800af98 	.word	0x0800af98
 80014c0:	0800afa4 	.word	0x0800afa4

080014c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f008 fdca 	bl	800a06c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <SystemClock_Config+0xd0>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a28      	ldr	r2, [pc, #160]	; (8001594 <SystemClock_Config+0xd0>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <SystemClock_Config+0xd0>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <SystemClock_Config+0xd4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a22      	ldr	r2, [pc, #136]	; (8001598 <SystemClock_Config+0xd4>)
 800150e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <SystemClock_Config+0xd4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001520:	2305      	movs	r3, #5
 8001522:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001524:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800152a:	2301      	movs	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001538:	2304      	movs	r3, #4
 800153a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800153c:	23a8      	movs	r3, #168	; 0xa8
 800153e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001544:	2307      	movs	r3, #7
 8001546:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fcf9 	bl	8005f44 <HAL_RCC_OscConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001558:	f000 fd7a 	bl	8002050 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155c:	230f      	movs	r3, #15
 800155e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001560:	2302      	movs	r3, #2
 8001562:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001568:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2105      	movs	r1, #5
 800157a:	4618      	mov	r0, r3
 800157c:	f004 ff5a 	bl	8006434 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001586:	f000 fd63 	bl	8002050 <Error_Handler>
	}
}
 800158a:	bf00      	nop
 800158c:	3750      	adds	r7, #80	; 0x50
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	201c      	movs	r0, #28
 80015a6:	f002 f944 	bl	8003832 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015aa:	201c      	movs	r0, #28
 80015ac:	f002 f95d 	bl	800386a <HAL_NVIC_EnableIRQ>
	/* RTC_Alarm_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2029      	movs	r0, #41	; 0x29
 80015b6:	f002 f93c 	bl	8003832 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015ba:	2029      	movs	r0, #41	; 0x29
 80015bc:	f002 f955 	bl	800386a <HAL_NVIC_EnableIRQ>
	/* EXTI9_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2017      	movs	r0, #23
 80015c6:	f002 f934 	bl	8003832 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015ca:	2017      	movs	r0, #23
 80015cc:	f002 f94d 	bl	800386a <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2012      	movs	r0, #18
 80015d6:	f002 f92c 	bl	8003832 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015da:	2012      	movs	r0, #18
 80015dc:	f002 f945 	bl	800386a <HAL_NVIC_EnableIRQ>
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2027      	movs	r0, #39	; 0x27
 80015e6:	f002 f924 	bl	8003832 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015ea:	2027      	movs	r0, #39	; 0x27
 80015ec:	f002 f93d 	bl	800386a <HAL_NVIC_EnableIRQ>
	/* UART4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2034      	movs	r0, #52	; 0x34
 80015f6:	f002 f91c 	bl	8003832 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015fa:	2034      	movs	r0, #52	; 0x34
 80015fc:	f002 f935 	bl	800386a <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2028      	movs	r0, #40	; 0x28
 8001606:	f002 f914 	bl	8003832 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800160a:	2028      	movs	r0, #40	; 0x28
 800160c:	f002 f92d 	bl	800386a <HAL_NVIC_EnableIRQ>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <set_time>:

/* USER CODE BEGIN 4 */
void set_time(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	460b      	mov	r3, r1
 8001620:	71bb      	strb	r3, [r7, #6]
 8001622:	4613      	mov	r3, r2
 8001624:	717b      	strb	r3, [r7, #5]
	//RTC_TimeTypeDef sTime;

	sTime.Hours = hh + 1;
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <set_time+0x3c>)
 800162e:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = mm;
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <set_time+0x3c>)
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	7053      	strb	r3, [r2, #1]
	sTime.Seconds = ss;
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <set_time+0x3c>)
 8001638:	797b      	ldrb	r3, [r7, #5]
 800163a:	7093      	strb	r3, [r2, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800163c:	2200      	movs	r2, #0
 800163e:	4904      	ldr	r1, [pc, #16]	; (8001650 <set_time+0x3c>)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <set_time+0x40>)
 8001642:	f005 fb4d 	bl	8006ce0 <HAL_RTC_SetTime>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200003f8 	.word	0x200003f8
 8001654:	20000580 	.word	0x20000580

08001658 <set_alarm>:
void set_alarm(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	460b      	mov	r3, r1
 8001664:	71bb      	strb	r3, [r7, #6]
 8001666:	4613      	mov	r3, r2
 8001668:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Hours = hh;
 800166a:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <set_alarm+0x88>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = mm;
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <set_alarm+0x88>)
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = ss;
 8001676:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <set_alarm+0x88>)
 8001678:	797b      	ldrb	r3, [r7, #5]
 800167a:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <set_alarm+0x88>)
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <set_alarm+0x88>)
 8001684:	2200      	movs	r2, #0
 8001686:	70da      	strb	r2, [r3, #3]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <set_alarm+0x88>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <set_alarm+0x88>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <set_alarm+0x88>)
 8001696:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800169a:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <set_alarm+0x88>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <set_alarm+0x88>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <set_alarm+0x88>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <set_alarm+0x88>)
 80016b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016b8:	2201      	movs	r2, #1
 80016ba:	4909      	ldr	r1, [pc, #36]	; (80016e0 <set_alarm+0x88>)
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <set_alarm+0x8c>)
 80016be:	f005 fcdb 	bl	8007078 <HAL_RTC_SetAlarm_IT>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <set_alarm+0x74>
	{
		Error_Handler();
 80016c8:	f000 fcc2 	bl	8002050 <Error_Handler>
	}
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80016cc:	2200      	movs	r2, #0
 80016ce:	4904      	ldr	r1, [pc, #16]	; (80016e0 <set_alarm+0x88>)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <set_alarm+0x8c>)
 80016d2:	f005 fcd1 	bl	8007078 <HAL_RTC_SetAlarm_IT>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200003cc 	.word	0x200003cc
 80016e4:	20000580 	.word	0x20000580

080016e8 <set_date>:
void set_date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	4603      	mov	r3, r0
 80016fc:	71bb      	strb	r3, [r7, #6]
 80016fe:	460b      	mov	r3, r1
 8001700:	717b      	strb	r3, [r7, #5]
 8001702:	4613      	mov	r3, r2
 8001704:	713b      	strb	r3, [r7, #4]
	//RTC_DateTypeDef sDate;

	sDate.WeekDay = ww;
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <set_date+0x48>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	7013      	strb	r3, [r2, #0]
	sDate.Month = mm;
 800170c:	4a08      	ldr	r2, [pc, #32]	; (8001730 <set_date+0x48>)
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	7053      	strb	r3, [r2, #1]
	sDate.Date = dd;
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <set_date+0x48>)
 8001714:	797b      	ldrb	r3, [r7, #5]
 8001716:	7093      	strb	r3, [r2, #2]
	sDate.Year = yy;
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <set_date+0x48>)
 800171a:	793b      	ldrb	r3, [r7, #4]
 800171c:	70d3      	strb	r3, [r2, #3]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800171e:	2200      	movs	r2, #0
 8001720:	4903      	ldr	r1, [pc, #12]	; (8001730 <set_date+0x48>)
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <set_date+0x4c>)
 8001724:	f005 fbd4 	bl	8006ed0 <HAL_RTC_SetDate>
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	200003f4 	.word	0x200003f4
 8001734:	20000580 	.word	0x20000580

08001738 <get_time>:

void get_time(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800173e:	2200      	movs	r2, #0
 8001740:	4925      	ldr	r1, [pc, #148]	; (80017d8 <get_time+0xa0>)
 8001742:	4826      	ldr	r0, [pc, #152]	; (80017dc <get_time+0xa4>)
 8001744:	f005 fb66 	bl	8006e14 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001748:	2200      	movs	r2, #0
 800174a:	4925      	ldr	r1, [pc, #148]	; (80017e0 <get_time+0xa8>)
 800174c:	4823      	ldr	r0, [pc, #140]	; (80017dc <get_time+0xa4>)
 800174e:	f005 fc43 	bl	8006fd8 <HAL_RTC_GetDate>
	curr_ap = sTime.TimeFormat;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <get_time+0xa0>)
 8001754:	78da      	ldrb	r2, [r3, #3]
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <get_time+0xac>)
 8001758:	701a      	strb	r2, [r3, #0]
	curr_h = sTime.Hours;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <get_time+0xa0>)
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <get_time+0xb0>)
 8001760:	701a      	strb	r2, [r3, #0]
	curr_m = sTime.Minutes;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <get_time+0xa0>)
 8001764:	785a      	ldrb	r2, [r3, #1]
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <get_time+0xb4>)
 8001768:	701a      	strb	r2, [r3, #0]
	curr_s = sTime.Seconds;
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <get_time+0xa0>)
 800176c:	789a      	ldrb	r2, [r3, #2]
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <get_time+0xb8>)
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <get_time+0xbc>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <get_time+0xc0>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
	memset(showTime, 0, sizeof(showTime)/sizeof(showTime));
	memset(showDate, 0, sizeof(showDate)/sizeof(showDate));
	sprintf((char*)showTime, "%s %02d:%02d:%02d",ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <get_time+0xa0>)
 8001780:	78db      	ldrb	r3, [r3, #3]
 8001782:	461a      	mov	r2, r3
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <get_time+0xc4>)
 800178c:	441a      	add	r2, r3
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <get_time+0xa0>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <get_time+0xa0>)
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	4619      	mov	r1, r3
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <get_time+0xa0>)
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	9100      	str	r1, [sp, #0]
 80017a2:	4603      	mov	r3, r0
 80017a4:	4916      	ldr	r1, [pc, #88]	; (8001800 <get_time+0xc8>)
 80017a6:	4813      	ldr	r0, [pc, #76]	; (80017f4 <get_time+0xbc>)
 80017a8:	f008 fb68 	bl	8009e7c <siprintf>
	sprintf((char*)showDate, "  %04d/%02d/%02d",2000+sDate.Year, sDate.Month, sDate.Date);
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <get_time+0xa8>)
 80017ae:	78db      	ldrb	r3, [r3, #3]
 80017b0:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <get_time+0xa8>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <get_time+0xa8>)
 80017bc:	789b      	ldrb	r3, [r3, #2]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	460b      	mov	r3, r1
 80017c2:	4910      	ldr	r1, [pc, #64]	; (8001804 <get_time+0xcc>)
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <get_time+0xc0>)
 80017c6:	f008 fb59 	bl	8009e7c <siprintf>
	LCD_PrintAll(showDate, showTime);
 80017ca:	490a      	ldr	r1, [pc, #40]	; (80017f4 <get_time+0xbc>)
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <get_time+0xc0>)
 80017ce:	f7ff fd85 	bl	80012dc <LCD_PrintAll>
	//printf("%s %s\r\n", showTime, showDate);
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200003f8 	.word	0x200003f8
 80017dc:	20000580 	.word	0x20000580
 80017e0:	200003f4 	.word	0x200003f4
 80017e4:	200004c9 	.word	0x200004c9
 80017e8:	200004ca 	.word	0x200004ca
 80017ec:	200004cb 	.word	0x200004cb
 80017f0:	200004cc 	.word	0x200004cc
 80017f4:	20000414 	.word	0x20000414
 80017f8:	20000424 	.word	0x20000424
 80017fc:	20000000 	.word	0x20000000
 8001800:	0800afb0 	.word	0x0800afb0
 8001804:	0800afc4 	.word	0x0800afc4

08001808 <timeSetter>:


void timeSetter()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af02      	add	r7, sp, #8
	static bool toggleChar = false;
	static uint8_t choice = 0;

	if(IsRight())
 800180e:	f000 fb63 	bl	8001ed8 <IsRight>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <timeSetter+0x2c>
	{
		choice ++;
 8001818:	4b9d      	ldr	r3, [pc, #628]	; (8001a90 <timeSetter+0x288>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b9b      	ldr	r3, [pc, #620]	; (8001a90 <timeSetter+0x288>)
 8001822:	701a      	strb	r2, [r3, #0]
		if(choice > 3)
 8001824:	4b9a      	ldr	r3, [pc, #616]	; (8001a90 <timeSetter+0x288>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d915      	bls.n	8001858 <timeSetter+0x50>
		{
			choice = 0;
 800182c:	4b98      	ldr	r3, [pc, #608]	; (8001a90 <timeSetter+0x288>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	e011      	b.n	8001858 <timeSetter+0x50>
		}
	}
	else if(IsLeft())
 8001834:	f000 fb62 	bl	8001efc <IsLeft>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00c      	beq.n	8001858 <timeSetter+0x50>
	{
		choice --;
 800183e:	4b94      	ldr	r3, [pc, #592]	; (8001a90 <timeSetter+0x288>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3b01      	subs	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <timeSetter+0x288>)
 8001848:	701a      	strb	r2, [r3, #0]
		if(choice > 4)
 800184a:	4b91      	ldr	r3, [pc, #580]	; (8001a90 <timeSetter+0x288>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d902      	bls.n	8001858 <timeSetter+0x50>
		{
			choice = 3;
 8001852:	4b8f      	ldr	r3, [pc, #572]	; (8001a90 <timeSetter+0x288>)
 8001854:	2203      	movs	r2, #3
 8001856:	701a      	strb	r2, [r3, #0]
		}
	}
	//"%s %02d:%02d:%02d"
	switch (choice)
 8001858:	4b8d      	ldr	r3, [pc, #564]	; (8001a90 <timeSetter+0x288>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b03      	cmp	r3, #3
 800185e:	f200 8172 	bhi.w	8001b46 <timeSetter+0x33e>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <timeSetter+0x60>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	08001879 	.word	0x08001879
 800186c:	0800190b 	.word	0x0800190b
 8001870:	080019b7 	.word	0x080019b7
 8001874:	08001a61 	.word	0x08001a61
	{
	case AMPM:
		if(toggleChar)
 8001878:	4b86      	ldr	r3, [pc, #536]	; (8001a94 <timeSetter+0x28c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00e      	beq.n	800189e <timeSetter+0x96>
		{
			sprintf(controlTime, "__ %02d:%02d:%02d",curr_h,curr_m,curr_s);
 8001880:	4b85      	ldr	r3, [pc, #532]	; (8001a98 <timeSetter+0x290>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b85      	ldr	r3, [pc, #532]	; (8001a9c <timeSetter+0x294>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4b84      	ldr	r3, [pc, #528]	; (8001aa0 <timeSetter+0x298>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	460b      	mov	r3, r1
 8001894:	4983      	ldr	r1, [pc, #524]	; (8001aa4 <timeSetter+0x29c>)
 8001896:	4884      	ldr	r0, [pc, #528]	; (8001aa8 <timeSetter+0x2a0>)
 8001898:	f008 faf0 	bl	8009e7c <siprintf>
				curr_ap--;
			}
			curr_ap = curr_ap % 2;
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
		}
		break;
 800189c:	e154      	b.n	8001b48 <timeSetter+0x340>
			if(IsUP())
 800189e:	f000 fb3f 	bl	8001f20 <IsUP>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <timeSetter+0xae>
				curr_ap++;
 80018a8:	4b80      	ldr	r3, [pc, #512]	; (8001aac <timeSetter+0x2a4>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b7e      	ldr	r3, [pc, #504]	; (8001aac <timeSetter+0x2a4>)
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e00a      	b.n	80018cc <timeSetter+0xc4>
			else if(IsDown())
 80018b6:	f000 fb45 	bl	8001f44 <IsDown>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <timeSetter+0xc4>
				curr_ap--;
 80018c0:	4b7a      	ldr	r3, [pc, #488]	; (8001aac <timeSetter+0x2a4>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b78      	ldr	r3, [pc, #480]	; (8001aac <timeSetter+0x2a4>)
 80018ca:	701a      	strb	r2, [r3, #0]
			curr_ap = curr_ap % 2;
 80018cc:	4b77      	ldr	r3, [pc, #476]	; (8001aac <timeSetter+0x2a4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b75      	ldr	r3, [pc, #468]	; (8001aac <timeSetter+0x2a4>)
 80018d8:	701a      	strb	r2, [r3, #0]
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 80018da:	4b74      	ldr	r3, [pc, #464]	; (8001aac <timeSetter+0x2a4>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	4a72      	ldr	r2, [pc, #456]	; (8001ab0 <timeSetter+0x2a8>)
 80018e8:	441a      	add	r2, r3
 80018ea:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <timeSetter+0x290>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <timeSetter+0x294>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <timeSetter+0x298>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	9100      	str	r1, [sp, #0]
 80018fe:	4603      	mov	r3, r0
 8001900:	496c      	ldr	r1, [pc, #432]	; (8001ab4 <timeSetter+0x2ac>)
 8001902:	4869      	ldr	r0, [pc, #420]	; (8001aa8 <timeSetter+0x2a0>)
 8001904:	f008 faba 	bl	8009e7c <siprintf>
		break;
 8001908:	e11e      	b.n	8001b48 <timeSetter+0x340>
	case HOUR:
		if(toggleChar)
 800190a:	4b62      	ldr	r3, [pc, #392]	; (8001a94 <timeSetter+0x28c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d014      	beq.n	800193c <timeSetter+0x134>
		{
			sprintf(controlTime, "%s __:%02d:%02d",ampm[curr_ap%2],curr_m,curr_s);
 8001912:	4b66      	ldr	r3, [pc, #408]	; (8001aac <timeSetter+0x2a4>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	f003 0201 	and.w	r2, r3, #1
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <timeSetter+0x2a8>)
 8001922:	441a      	add	r2, r3
 8001924:	4b5d      	ldr	r3, [pc, #372]	; (8001a9c <timeSetter+0x294>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <timeSetter+0x298>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	460b      	mov	r3, r1
 8001932:	4961      	ldr	r1, [pc, #388]	; (8001ab8 <timeSetter+0x2b0>)
 8001934:	485c      	ldr	r0, [pc, #368]	; (8001aa8 <timeSetter+0x2a0>)
 8001936:	f008 faa1 	bl	8009e7c <siprintf>
				curr_h--;
			}
			curr_h %= 24;
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
		}
		break;
 800193a:	e105      	b.n	8001b48 <timeSetter+0x340>
			if(IsUP())
 800193c:	f000 faf0 	bl	8001f20 <IsUP>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <timeSetter+0x14c>
				curr_h++;
 8001946:	4b54      	ldr	r3, [pc, #336]	; (8001a98 <timeSetter+0x290>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	3301      	adds	r3, #1
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b52      	ldr	r3, [pc, #328]	; (8001a98 <timeSetter+0x290>)
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e00a      	b.n	800196a <timeSetter+0x162>
			else if(IsDown())
 8001954:	f000 faf6 	bl	8001f44 <IsDown>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <timeSetter+0x162>
				curr_h--;
 800195e:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <timeSetter+0x290>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <timeSetter+0x290>)
 8001968:	701a      	strb	r2, [r3, #0]
			curr_h %= 24;
 800196a:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <timeSetter+0x290>)
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	4b53      	ldr	r3, [pc, #332]	; (8001abc <timeSetter+0x2b4>)
 8001970:	fba3 1302 	umull	r1, r3, r3, r2
 8001974:	0919      	lsrs	r1, r3, #4
 8001976:	460b      	mov	r3, r1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	440b      	add	r3, r1
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <timeSetter+0x290>)
 8001984:	701a      	strb	r2, [r3, #0]
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <timeSetter+0x2a4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	4a47      	ldr	r2, [pc, #284]	; (8001ab0 <timeSetter+0x2a8>)
 8001994:	441a      	add	r2, r3
 8001996:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <timeSetter+0x290>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <timeSetter+0x294>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <timeSetter+0x298>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	9100      	str	r1, [sp, #0]
 80019aa:	4603      	mov	r3, r0
 80019ac:	4941      	ldr	r1, [pc, #260]	; (8001ab4 <timeSetter+0x2ac>)
 80019ae:	483e      	ldr	r0, [pc, #248]	; (8001aa8 <timeSetter+0x2a0>)
 80019b0:	f008 fa64 	bl	8009e7c <siprintf>
		break;
 80019b4:	e0c8      	b.n	8001b48 <timeSetter+0x340>
	case MIN:
		if(toggleChar)
 80019b6:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <timeSetter+0x28c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d013      	beq.n	80019e6 <timeSetter+0x1de>
		{
			sprintf(controlTime, "%s %02d:__:%02d",ampm[curr_ap],curr_h,curr_s);
 80019be:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <timeSetter+0x2a4>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <timeSetter+0x2a8>)
 80019cc:	441a      	add	r2, r3
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <timeSetter+0x290>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <timeSetter+0x298>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	460b      	mov	r3, r1
 80019dc:	4938      	ldr	r1, [pc, #224]	; (8001ac0 <timeSetter+0x2b8>)
 80019de:	4832      	ldr	r0, [pc, #200]	; (8001aa8 <timeSetter+0x2a0>)
 80019e0:	f008 fa4c 	bl	8009e7c <siprintf>
				curr_m--;
			}
			curr_m %= 60;
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
		}
		break;
 80019e4:	e0b0      	b.n	8001b48 <timeSetter+0x340>
			if(IsUP())
 80019e6:	f000 fa9b 	bl	8001f20 <IsUP>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <timeSetter+0x1f6>
				curr_m++;
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <timeSetter+0x294>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <timeSetter+0x294>)
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e00a      	b.n	8001a14 <timeSetter+0x20c>
			else if(IsDown())
 80019fe:	f000 faa1 	bl	8001f44 <IsDown>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <timeSetter+0x20c>
				curr_m--;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <timeSetter+0x294>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <timeSetter+0x294>)
 8001a12:	701a      	strb	r2, [r3, #0]
			curr_m %= 60;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <timeSetter+0x294>)
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <timeSetter+0x2bc>)
 8001a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a1e:	0959      	lsrs	r1, r3, #5
 8001a20:	460b      	mov	r3, r1
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a5b      	subs	r3, r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <timeSetter+0x294>)
 8001a2e:	701a      	strb	r2, [r3, #0]
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <timeSetter+0x2a4>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <timeSetter+0x2a8>)
 8001a3e:	441a      	add	r2, r3
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <timeSetter+0x290>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <timeSetter+0x294>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <timeSetter+0x298>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	9100      	str	r1, [sp, #0]
 8001a54:	4603      	mov	r3, r0
 8001a56:	4917      	ldr	r1, [pc, #92]	; (8001ab4 <timeSetter+0x2ac>)
 8001a58:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <timeSetter+0x2a0>)
 8001a5a:	f008 fa0f 	bl	8009e7c <siprintf>
		break;
 8001a5e:	e073      	b.n	8001b48 <timeSetter+0x340>
	case SEC:
		if(toggleChar)
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <timeSetter+0x28c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d031      	beq.n	8001acc <timeSetter+0x2c4>
		{
			sprintf(controlTime, "%s %02d:%02d:__",ampm[curr_ap],curr_h,curr_m);
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <timeSetter+0x2a4>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <timeSetter+0x2a8>)
 8001a76:	441a      	add	r2, r3
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <timeSetter+0x290>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <timeSetter+0x294>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	460b      	mov	r3, r1
 8001a86:	4910      	ldr	r1, [pc, #64]	; (8001ac8 <timeSetter+0x2c0>)
 8001a88:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <timeSetter+0x2a0>)
 8001a8a:	f008 f9f7 	bl	8009e7c <siprintf>
				curr_s--;
			}
			curr_s %= 60;
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
		}
		break;
 8001a8e:	e05b      	b.n	8001b48 <timeSetter+0x340>
 8001a90:	2000057c 	.word	0x2000057c
 8001a94:	2000057d 	.word	0x2000057d
 8001a98:	200004ca 	.word	0x200004ca
 8001a9c:	200004cb 	.word	0x200004cb
 8001aa0:	200004cc 	.word	0x200004cc
 8001aa4:	0800afd8 	.word	0x0800afd8
 8001aa8:	20000434 	.word	0x20000434
 8001aac:	200004c9 	.word	0x200004c9
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	0800afb0 	.word	0x0800afb0
 8001ab8:	0800afec 	.word	0x0800afec
 8001abc:	aaaaaaab 	.word	0xaaaaaaab
 8001ac0:	0800affc 	.word	0x0800affc
 8001ac4:	88888889 	.word	0x88888889
 8001ac8:	0800b00c 	.word	0x0800b00c
			if(IsUP())
 8001acc:	f000 fa28 	bl	8001f20 <IsUP>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <timeSetter+0x2dc>
				curr_s++;
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <timeSetter+0x36c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <timeSetter+0x36c>)
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e00a      	b.n	8001afa <timeSetter+0x2f2>
			else if(IsDown())
 8001ae4:	f000 fa2e 	bl	8001f44 <IsDown>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <timeSetter+0x2f2>
				curr_s--;
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <timeSetter+0x36c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <timeSetter+0x36c>)
 8001af8:	701a      	strb	r2, [r3, #0]
			curr_s %= 60;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <timeSetter+0x36c>)
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <timeSetter+0x370>)
 8001b00:	fba3 1302 	umull	r1, r3, r3, r2
 8001b04:	0959      	lsrs	r1, r3, #5
 8001b06:	460b      	mov	r3, r1
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	1a5b      	subs	r3, r3, r1
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <timeSetter+0x36c>)
 8001b14:	701a      	strb	r2, [r3, #0]
			sprintf(controlTime, "%s %02d:%02d:%02d",ampm[curr_ap],curr_h,curr_m,curr_s);
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <timeSetter+0x374>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <timeSetter+0x378>)
 8001b24:	441a      	add	r2, r3
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <timeSetter+0x37c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <timeSetter+0x380>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <timeSetter+0x36c>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	9100      	str	r1, [sp, #0]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4913      	ldr	r1, [pc, #76]	; (8001b8c <timeSetter+0x384>)
 8001b3e:	4814      	ldr	r0, [pc, #80]	; (8001b90 <timeSetter+0x388>)
 8001b40:	f008 f99c 	bl	8009e7c <siprintf>
		break;
 8001b44:	e000      	b.n	8001b48 <timeSetter+0x340>
	default:
		break;
 8001b46:	bf00      	nop
	}
	LCD_PrintAll("Set Time      ", controlTime);
 8001b48:	4911      	ldr	r1, [pc, #68]	; (8001b90 <timeSetter+0x388>)
 8001b4a:	4812      	ldr	r0, [pc, #72]	; (8001b94 <timeSetter+0x38c>)
 8001b4c:	f7ff fbc6 	bl	80012dc <LCD_PrintAll>
	toggleChar = !toggleChar;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <timeSetter+0x390>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f083 0301 	eor.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <timeSetter+0x390>)
 8001b6c:	701a      	strb	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200004cc 	.word	0x200004cc
 8001b78:	88888889 	.word	0x88888889
 8001b7c:	200004c9 	.word	0x200004c9
 8001b80:	20000000 	.word	0x20000000
 8001b84:	200004ca 	.word	0x200004ca
 8001b88:	200004cb 	.word	0x200004cb
 8001b8c:	0800afb0 	.word	0x0800afb0
 8001b90:	20000434 	.word	0x20000434
 8001b94:	0800b01c 	.word	0x0800b01c
 8001b98:	2000057d 	.word	0x2000057d

08001b9c <saveCurrentTime>:
void saveCurrentTime()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	saveData[0] = ACTIVE_FLASH;
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <saveCurrentTime+0x98>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
	saveData[1] = ampm[curr_ap];
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <saveCurrentTime+0x9c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <saveCurrentTime+0xa0>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <saveCurrentTime+0x98>)
 8001bbc:	605a      	str	r2, [r3, #4]
	saveData[2] = curr_h;
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <saveCurrentTime+0xa4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <saveCurrentTime+0x98>)
 8001bc6:	609a      	str	r2, [r3, #8]
	saveData[3] = curr_m;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <saveCurrentTime+0xa8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <saveCurrentTime+0x98>)
 8001bd0:	60da      	str	r2, [r3, #12]
	saveData[4] = curr_s;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <saveCurrentTime+0xac>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <saveCurrentTime+0x98>)
 8001bda:	611a      	str	r2, [r3, #16]
	eraseFlash(&flash);
 8001bdc:	481b      	ldr	r0, [pc, #108]	; (8001c4c <saveCurrentTime+0xb0>)
 8001bde:	f7ff f8c5 	bl	8000d6c <eraseFlash>
	for(int index = 0; index < FLASH_TIME_DATA + 20; index += 4)
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	e014      	b.n	8001c12 <saveCurrentTime+0x76>
	{
		overwriteFlash(&flash, saveData[index/4]);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da00      	bge.n	8001bf0 <saveCurrentTime+0x54>
 8001bee:	3303      	adds	r3, #3
 8001bf0:	109b      	asrs	r3, r3, #2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <saveCurrentTime+0x98>)
 8001bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4813      	ldr	r0, [pc, #76]	; (8001c4c <saveCurrentTime+0xb0>)
 8001bfe:	f7ff f88d 	bl	8000d1c <overwriteFlash>
		flash.USER_TARGET_ADDR += 4;
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <saveCurrentTime+0xb0>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <saveCurrentTime+0xb0>)
 8001c0a:	6093      	str	r3, [r2, #8]
	for(int index = 0; index < FLASH_TIME_DATA + 20; index += 4)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b13      	cmp	r3, #19
 8001c16:	dde7      	ble.n	8001be8 <saveCurrentTime+0x4c>
	}
	flash.USER_TARGET_ADDR = flash.USER_START_ADDR;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <saveCurrentTime+0xb0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <saveCurrentTime+0xb0>)
 8001c1e:	6093      	str	r3, [r2, #8]
	isSave = false;
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <saveCurrentTime+0xb4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
	clock_state = NORMAL_STATE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <saveCurrentTime+0xb8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000568 	.word	0x20000568
 8001c38:	200004c9 	.word	0x200004c9
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	200004ca 	.word	0x200004ca
 8001c44:	200004cb 	.word	0x200004cb
 8001c48:	200004cc 	.word	0x200004cc
 8001c4c:	200004e4 	.word	0x200004e4
 8001c50:	200004c8 	.word	0x200004c8
 8001c54:	200003c8 	.word	0x200003c8

08001c58 <selectSong>:
{
	isSave = false;
	clock_state = NORMAL_STATE;
}
void selectSong(void)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
	static uint8_t songIndex = 0, now_playing = 0;
	char currentSong[LCD_SIZE] = {0};
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

	if(IsUP())
 8001c6c:	f000 f958 	bl	8001f20 <IsUP>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <selectSong+0x36>
	{
		songIndex++;
 8001c76:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <selectSong+0xbc>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <selectSong+0xbc>)
 8001c80:	701a      	strb	r2, [r3, #0]
		now_playing = 0;
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <selectSong+0xc0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]

		LCD_Clear();
 8001c88:	f7ff fb42 	bl	8001310 <LCD_Clear>
 8001c8c:	e00f      	b.n	8001cae <selectSong+0x56>
	}
	else if(IsDown())
 8001c8e:	f000 f959 	bl	8001f44 <IsDown>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <selectSong+0x56>
	{
		songIndex--;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <selectSong+0xbc>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <selectSong+0xbc>)
 8001ca2:	701a      	strb	r2, [r3, #0]
		now_playing = 0;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <selectSong+0xc0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]

		LCD_Clear();
 8001caa:	f7ff fb31 	bl	8001310 <LCD_Clear>
	}
	printf("y: %ld\r\n",Joycon[1]);
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <selectSong+0xc4>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481a      	ldr	r0, [pc, #104]	; (8001d20 <selectSong+0xc8>)
 8001cb6:	f008 f83f 	bl	8009d38 <iprintf>
	songIndex %= 2;
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <selectSong+0xbc>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <selectSong+0xbc>)
 8001cc6:	701a      	strb	r2, [r3, #0]
	if(songIndex == 0)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <selectSong+0xbc>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <selectSong+0x84>
	{
		memcpy(currentSong, "1. Spring Water", sizeof(currentSong)/sizeof(currentSong[0]));
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <selectSong+0xcc>)
 8001cd2:	463c      	mov	r4, r7
 8001cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cda:	e009      	b.n	8001cf0 <selectSong+0x98>
	}
	else if(songIndex == 1)
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <selectSong+0xbc>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <selectSong+0x98>
	{
		memcpy(currentSong, "2. Three Bears", sizeof(currentSong)/sizeof(currentSong[0]));
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <selectSong+0xd0>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f008 fa39 	bl	800a162 <memcpy>
	}
	LCD_PrintAll("Wake Up Call", currentSong);
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <selectSong+0xd4>)
 8001cf6:	f7ff faf1 	bl	80012dc <LCD_PrintAll>
	songList[songIndex](&now_playing);
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <selectSong+0xbc>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <selectSong+0xd8>)
 8001d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d06:	4804      	ldr	r0, [pc, #16]	; (8001d18 <selectSong+0xc0>)
 8001d08:	4798      	blx	r3

}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000057e 	.word	0x2000057e
 8001d18:	2000057f 	.word	0x2000057f
 8001d1c:	2000040c 	.word	0x2000040c
 8001d20:	0800b02c 	.word	0x0800b02c
 8001d24:	0800b038 	.word	0x0800b038
 8001d28:	0800b048 	.word	0x0800b048
 8001d2c:	0800b058 	.word	0x0800b058
 8001d30:	20000008 	.word	0x20000008

08001d34 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin);
 8001d3c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <HAL_RTC_AlarmAEventCallback+0x20>)
 8001d42:	f003 f9ba 	bl	80050ba <HAL_GPIO_TogglePin>
	printf("RINGRINGRINGRING!!!!!!!!!!!!!!!!!!!!\r\n");
 8001d46:	4804      	ldr	r0, [pc, #16]	; (8001d58 <HAL_RTC_AlarmAEventCallback+0x24>)
 8001d48:	f008 f85c 	bl	8009e04 <puts>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40020400 	.word	0x40020400
 8001d58:	0800b068 	.word	0x0800b068

08001d5c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
	//stime = HxAL_GetTick();
	// joystick switch
	GPIO_PinState pinstate;
	if(GPIO_Pin == SWITCH_Pin)
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	2b80      	cmp	r3, #128	; 0x80
 8001d6a:	f040 808c 	bne.w	8001e86 <HAL_GPIO_EXTI_Callback+0x12a>
	{
		//printf("switch toggle\r\n");
		stime = HAL_GetTick();
 8001d6e:	f000 ff0f 	bl	8002b90 <HAL_GetTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a46      	ldr	r2, [pc, #280]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d76:	6013      	str	r3, [r2, #0]
		interval = stime - etime;
 8001d78:	4b45      	ldr	r3, [pc, #276]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b45      	ldr	r3, [pc, #276]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x138>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	4a45      	ldr	r2, [pc, #276]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001d84:	6013      	str	r3, [r2, #0]
		etime = stime;
 8001d86:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a42      	ldr	r2, [pc, #264]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x138>)
 8001d8c:	6013      	str	r3, [r2, #0]
		if(interval > 100)
 8001d8e:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d977      	bls.n	8001e86 <HAL_GPIO_EXTI_Callback+0x12a>
		{
			memset(buf,0, sizeof(buf));
 8001d96:	2278      	movs	r2, #120	; 0x78
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4840      	ldr	r0, [pc, #256]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x140>)
 8001d9c:	f008 f966 	bl	800a06c <memset>
			pinstate = HAL_GPIO_ReadPin(SWITCH_GPIO_Port, SWITCH_Pin);
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	483f      	ldr	r0, [pc, #252]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x144>)
 8001da4:	f003 f958 	bl	8005058 <HAL_GPIO_ReadPin>
 8001da8:	4603      	mov	r3, r0
 8001daa:	73fb      	strb	r3, [r7, #15]
			if(pinstate == GPIO_PIN_SET)
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d114      	bne.n	8001ddc <HAL_GPIO_EXTI_Callback+0x80>
			{
				printf("OFF\r\n");
 8001db2:	483c      	ldr	r0, [pc, #240]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x148>)
 8001db4:	f008 f826 	bl	8009e04 <puts>
				holdclk = interval;
 8001db8:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001dbe:	6013      	str	r3, [r2, #0]
				oneClick++;
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_GPIO_EXTI_Callback+0x150>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_GPIO_EXTI_Callback+0x150>)
 8001dca:	701a      	strb	r2, [r3, #0]
				oneClick %= 2;
 8001dcc:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_GPIO_EXTI_Callback+0x150>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_GPIO_EXTI_Callback+0x150>)
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e016      	b.n	8001e0a <HAL_GPIO_EXTI_Callback+0xae>
			}
			else if(pinstate == GPIO_PIN_RESET)
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d113      	bne.n	8001e0a <HAL_GPIO_EXTI_Callback+0xae>
			{
				printf("ON\r\n");
 8001de2:	4833      	ldr	r0, [pc, #204]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x154>)
 8001de4:	f008 f80e 	bl	8009e04 <puts>
				holdclk = 0;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
				if(interval < 1000)
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df6:	d205      	bcs.n	8001e04 <HAL_GPIO_EXTI_Callback+0xa8>
				{
					dbclk++;
 8001df8:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x158>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x158>)
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_EXTI_Callback+0xae>
				}
				else
				{
					dbclk = 0;
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x158>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
				}

			}
			//printf("intvl time: %d\r\n",interval);
			// Alarm time Setting State
			if(holdclk >= 3000)
 8001e0a:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d903      	bls.n	8001e1e <HAL_GPIO_EXTI_Callback+0xc2>
			{
				printf("***held at least 3 sec ***\r\n");
 8001e16:	4828      	ldr	r0, [pc, #160]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001e18:	f007 fff4 	bl	8009e04 <puts>
 8001e1c:	e010      	b.n	8001e40 <HAL_GPIO_EXTI_Callback+0xe4>
			}
			// Morning call Setting State
			else if(dbclk >= 2)
 8001e1e:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x158>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d90c      	bls.n	8001e40 <HAL_GPIO_EXTI_Callback+0xe4>
			{
				printf("***double click activate***\r\n");
 8001e26:	4825      	ldr	r0, [pc, #148]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x160>)
 8001e28:	f007 ffec 	bl	8009e04 <puts>
				if(clock_state == NORMAL_STATE)
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_GPIO_EXTI_Callback+0xde>
				{
					clock_state = MUSIC_SELECT;
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001e36:	2203      	movs	r2, #3
 8001e38:	701a      	strb	r2, [r3, #0]
				}
				dbclk = 0;
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x158>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
			}
			// Timer Setting State
			if(oneClick == 1)
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_GPIO_EXTI_Callback+0x150>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d11e      	bne.n	8001e86 <HAL_GPIO_EXTI_Callback+0x12a>
			{
				printf("timer setting\r\n");
 8001e48:	481e      	ldr	r0, [pc, #120]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001e4a:	f007 ffdb 	bl	8009e04 <puts>
				cpyflag = 1;
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
				if(clock_state == NORMAL_STATE)
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <HAL_GPIO_EXTI_Callback+0x10e>
				{
					clock_state = TIME_SETTING;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
					printf("set to Time\r\n");
 8001e62:	481a      	ldr	r0, [pc, #104]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x170>)
 8001e64:	f007 ffce 	bl	8009e04 <puts>
					isSave = true;
				}
			}
		}
	}
}
 8001e68:	e00d      	b.n	8001e86 <HAL_GPIO_EXTI_Callback+0x12a>
				else if(clock_state == TIME_SETTING || clock_state == MUSIC_SELECT)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_EXTI_Callback+0x11e>
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x164>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d105      	bne.n	8001e86 <HAL_GPIO_EXTI_Callback+0x12a>
					printf("set to Save\r\n");
 8001e7a:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001e7c:	f007 ffc2 	bl	8009e04 <puts>
					isSave = true;
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x178>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200004d0 	.word	0x200004d0
 8001e94:	200004d4 	.word	0x200004d4
 8001e98:	200004d8 	.word	0x200004d8
 8001e9c:	200004f0 	.word	0x200004f0
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	0800b090 	.word	0x0800b090
 8001ea8:	200004e0 	.word	0x200004e0
 8001eac:	200004c7 	.word	0x200004c7
 8001eb0:	0800b098 	.word	0x0800b098
 8001eb4:	200004dc 	.word	0x200004dc
 8001eb8:	0800b09c 	.word	0x0800b09c
 8001ebc:	0800b0b8 	.word	0x0800b0b8
 8001ec0:	200003c8 	.word	0x200003c8
 8001ec4:	0800b0d8 	.word	0x0800b0d8
 8001ec8:	200004c6 	.word	0x200004c6
 8001ecc:	0800b0e8 	.word	0x0800b0e8
 8001ed0:	0800b0f8 	.word	0x0800b0f8
 8001ed4:	200004c8 	.word	0x200004c8

08001ed8 <IsRight>:

bool IsRight(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	return Joycon[0] >= RIGHT ? true : false;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <IsRight+0x20>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	bf8c      	ite	hi
 8001ee8:	2301      	movhi	r3, #1
 8001eea:	2300      	movls	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	2000040c 	.word	0x2000040c

08001efc <IsLeft>:
bool IsLeft(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
	return Joycon[0] <= LEFT ? true : false;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <IsLeft+0x20>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f08:	bf94      	ite	ls
 8001f0a:	2301      	movls	r3, #1
 8001f0c:	2300      	movhi	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000040c 	.word	0x2000040c

08001f20 <IsUP>:
bool IsUP(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
	return Joycon[1] >= UP ? true : false;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <IsUP+0x20>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	bf8c      	ite	hi
 8001f30:	2301      	movhi	r3, #1
 8001f32:	2300      	movls	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	2000040c 	.word	0x2000040c

08001f44 <IsDown>:
bool IsDown(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	return Joycon[1] <= DOWN ? true : false;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <IsDown+0x20>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f50:	bf94      	ite	ls
 8001f52:	2301      	movls	r3, #1
 8001f54:	2300      	movhi	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	2000040c 	.word	0x2000040c

08001f68 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	// From COM3 ->(UART3)ST(UART4) ->BLE
	if(huart->Instance == USART3)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <HAL_UART_RxCpltCallback+0xc0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d141      	bne.n	8001ffe <HAL_UART_RxCpltCallback+0x96>
	{
		// received enter key
		if(rx3Data == '\r' || ble.cur_BLE_Index > 64)
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_UART_RxCpltCallback+0xc4>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b0d      	cmp	r3, #13
 8001f80:	d004      	beq.n	8001f8c <HAL_UART_RxCpltCallback+0x24>
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001f84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001f88:	2b40      	cmp	r3, #64	; 0x40
 8001f8a:	d91c      	bls.n	8001fc6 <HAL_UART_RxCpltCallback+0x5e>
		{
			printf("\r\n send following data to BLE \r\n");
 8001f8c:	4829      	ldr	r0, [pc, #164]	; (8002034 <HAL_UART_RxCpltCallback+0xcc>)
 8001f8e:	f007 ff39 	bl	8009e04 <puts>
			printf(ble.bleBuffer);
 8001f92:	4827      	ldr	r0, [pc, #156]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001f94:	f007 fed0 	bl	8009d38 <iprintf>
			printf("\r\n");
 8001f98:	4827      	ldr	r0, [pc, #156]	; (8002038 <HAL_UART_RxCpltCallback+0xd0>)
 8001f9a:	f007 ff33 	bl	8009e04 <puts>
			HAL_UART_Transmit(&huart4, (uint8_t*)&ble.bleBuffer, ble.cur_BLE_Index, 500);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001fa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001faa:	4921      	ldr	r1, [pc, #132]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001fac:	4823      	ldr	r0, [pc, #140]	; (800203c <HAL_UART_RxCpltCallback+0xd4>)
 8001fae:	f006 fad4 	bl	800855a <HAL_UART_Transmit>
			memset(ble.bleBuffer, 0, sizeof(ble.bleBuffer)/sizeof(ble.bleBuffer[0]));
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	481e      	ldr	r0, [pc, #120]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001fb8:	f008 f858 	bl	800a06c <memset>
			ble.cur_BLE_Index = 0;
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001fc4:	e015      	b.n	8001ff2 <HAL_UART_RxCpltCallback+0x8a>
		}
		else
		{

			ble.bleBuffer[ble.cur_BLE_Index] = rx3Data;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001fc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_UART_RxCpltCallback+0xc4>)
 8001fd0:	7819      	ldrb	r1, [r3, #0]
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001fd4:	5499      	strb	r1, [r3, r2]
			printf("collecting: %c\r\n", (char)rx3Data);
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_UART_RxCpltCallback+0xc4>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4818      	ldr	r0, [pc, #96]	; (8002040 <HAL_UART_RxCpltCallback+0xd8>)
 8001fde:	f007 feab 	bl	8009d38 <iprintf>
			ble.cur_BLE_Index++;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001fe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_UART_RxCpltCallback+0xc8>)
 8001fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx3Data, sizeof(rx3Data));
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	490d      	ldr	r1, [pc, #52]	; (800202c <HAL_UART_RxCpltCallback+0xc4>)
 8001ff6:	4813      	ldr	r0, [pc, #76]	; (8002044 <HAL_UART_RxCpltCallback+0xdc>)
 8001ff8:	f006 fb41 	bl	800867e <HAL_UART_Receive_IT>
		}
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
#endif
	}

}
 8001ffc:	e00f      	b.n	800201e <HAL_UART_RxCpltCallback+0xb6>
	else if(huart->Instance == UART4)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a11      	ldr	r2, [pc, #68]	; (8002048 <HAL_UART_RxCpltCallback+0xe0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d10a      	bne.n	800201e <HAL_UART_RxCpltCallback+0xb6>
		HAL_UART_Transmit(&huart3, (uint8_t*)&rx4Data, sizeof(rx4Data), 100);
 8002008:	2364      	movs	r3, #100	; 0x64
 800200a:	2201      	movs	r2, #1
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_UART_RxCpltCallback+0xe4>)
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <HAL_UART_RxCpltCallback+0xdc>)
 8002010:	f006 faa3 	bl	800855a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&rx4Data, sizeof(rx4Data));
 8002014:	2201      	movs	r2, #1
 8002016:	490d      	ldr	r1, [pc, #52]	; (800204c <HAL_UART_RxCpltCallback+0xe4>)
 8002018:	4808      	ldr	r0, [pc, #32]	; (800203c <HAL_UART_RxCpltCallback+0xd4>)
 800201a:	f006 fb30 	bl	800867e <HAL_UART_Receive_IT>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40004800 	.word	0x40004800
 800202c:	200003c9 	.word	0x200003c9
 8002030:	20000444 	.word	0x20000444
 8002034:	0800b108 	.word	0x0800b108
 8002038:	0800b128 	.word	0x0800b128
 800203c:	20000634 	.word	0x20000634
 8002040:	0800b12c 	.word	0x0800b12c
 8002044:	20000678 	.word	0x20000678
 8002048:	40004c00 	.word	0x40004c00
 800204c:	200003ca 	.word	0x200003ca

08002050 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002054:	b672      	cpsid	i
}
 8002056:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002058:	e7fe      	b.n	8002058 <Error_Handler+0x8>
	...

0800205c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b090      	sub	sp, #64	; 0x40
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002072:	2300      	movs	r3, #0
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002076:	463b      	mov	r3, r7
 8002078:	2228      	movs	r2, #40	; 0x28
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f007 fff5 	bl	800a06c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <MX_RTC_Init+0x11c>)
 8002084:	4a3d      	ldr	r2, [pc, #244]	; (800217c <MX_RTC_Init+0x120>)
 8002086:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <MX_RTC_Init+0x11c>)
 800208a:	2240      	movs	r2, #64	; 0x40
 800208c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800208e:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <MX_RTC_Init+0x11c>)
 8002090:	227f      	movs	r2, #127	; 0x7f
 8002092:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002094:	4b38      	ldr	r3, [pc, #224]	; (8002178 <MX_RTC_Init+0x11c>)
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <MX_RTC_Init+0x11c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020a0:	4b35      	ldr	r3, [pc, #212]	; (8002178 <MX_RTC_Init+0x11c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020a6:	4b34      	ldr	r3, [pc, #208]	; (8002178 <MX_RTC_Init+0x11c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020ac:	4832      	ldr	r0, [pc, #200]	; (8002178 <MX_RTC_Init+0x11c>)
 80020ae:	f004 fda1 	bl	8006bf4 <HAL_RTC_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80020b8:	f7ff ffca 	bl	8002050 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e0:	2201      	movs	r2, #1
 80020e2:	4619      	mov	r1, r3
 80020e4:	4824      	ldr	r0, [pc, #144]	; (8002178 <MX_RTC_Init+0x11c>)
 80020e6:	f004 fdfb 	bl	8006ce0 <HAL_RTC_SetTime>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80020f0:	f7ff ffae 	bl	8002050 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800210c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002110:	2201      	movs	r2, #1
 8002112:	4619      	mov	r1, r3
 8002114:	4818      	ldr	r0, [pc, #96]	; (8002178 <MX_RTC_Init+0x11c>)
 8002116:	f004 fedb 	bl	8006ed0 <HAL_RTC_SetDate>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002120:	f7ff ff96 	bl	8002050 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8002124:	2301      	movs	r3, #1
 8002126:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8002128:	2301      	movs	r3, #1
 800212a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800212c:	2300      	movs	r3, #0
 800212e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8002134:	2300      	movs	r3, #0
 8002136:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_RTC_Init+0x124>)
 8002142:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002158:	463b      	mov	r3, r7
 800215a:	2201      	movs	r2, #1
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <MX_RTC_Init+0x11c>)
 8002160:	f004 ff8a 	bl	8007078 <HAL_RTC_SetAlarm_IT>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_RTC_Init+0x112>
  {
    Error_Handler();
 800216a:	f7ff ff71 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	3740      	adds	r7, #64	; 0x40
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000580 	.word	0x20000580
 800217c:	40002800 	.word	0x40002800
 8002180:	80808000 	.word	0x80808000

08002184 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	2230      	movs	r2, #48	; 0x30
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f007 ff69 	bl	800a06c <memset>
  if(rtcHandle->Instance==RTC)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_RTC_MspInit+0x4c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d111      	bne.n	80021c8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021a4:	2320      	movs	r3, #32
 80021a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ac:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fb5e 	bl	8006874 <HAL_RCCEx_PeriphCLKConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80021be:	f7ff ff47 	bl	8002050 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HAL_RTC_MspInit+0x50>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021c8:	bf00      	nop
 80021ca:	3738      	adds	r7, #56	; 0x38
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40002800 	.word	0x40002800
 80021d4:	42470e3c 	.word	0x42470e3c

080021d8 <threeBear_song>:
		20,20,20,20,20,20,80,
		0
};

void threeBear_song(int* index)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
		TIM3->CCR3 = 0;
		HAL_Delay(threeBears_intvl[index]);
		TIM3->CCR3 = threeBears_note[index]/2;
	}
	*/
	TIM3->ARR = threeBears_note[*index];
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <threeBear_song+0x78>)
 80021e6:	491b      	ldr	r1, [pc, #108]	; (8002254 <threeBear_song+0x7c>)
 80021e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021ec:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CCR3 = threeBears_note[*index]/2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a18      	ldr	r2, [pc, #96]	; (8002254 <threeBear_song+0x7c>)
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	4a15      	ldr	r2, [pc, #84]	; (8002250 <threeBear_song+0x78>)
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(300);
 80021fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002202:	f000 fcd1 	bl	8002ba8 <HAL_Delay>
	TIM3->CCR3 = 0;
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <threeBear_song+0x78>)
 8002208:	2200      	movs	r2, #0
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(threeBears_intvl[*index]);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <threeBear_song+0x80>)
 8002212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fcc6 	bl	8002ba8 <HAL_Delay>
	TIM3->CCR3 = threeBears_note[*index]/2;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <threeBear_song+0x7c>)
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <threeBear_song+0x78>)
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	63d3      	str	r3, [r2, #60]	; 0x3c
	if(*index > sizeof(threeBears_note)/sizeof(threeBears_note[0])-1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b33      	cmp	r3, #51	; 0x33
 8002232:	d903      	bls.n	800223c <threeBear_song+0x64>
	{
		*index = 0;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		(*index) ++;
	}
}
 800223a:	e004      	b.n	8002246 <threeBear_song+0x6e>
		(*index) ++;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	601a      	str	r2, [r3, #0]
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40000400 	.word	0x40000400
 8002254:	0800b140 	.word	0x0800b140
 8002258:	0800b210 	.word	0x0800b210

0800225c <springWater_song>:

void springWater_song(int* index)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
		TIM3->CCR3 = 0;
		HAL_Delay(springWater_intvl[index]);
		TIM3->CCR3 = springWater_note[index]/2;
	}
	*/
	TIM3->ARR = springWater_note[*index];
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <springWater_song+0x78>)
 800226a:	491b      	ldr	r1, [pc, #108]	; (80022d8 <springWater_song+0x7c>)
 800226c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002270:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->CCR3 = springWater_note[*index]/2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <springWater_song+0x7c>)
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <springWater_song+0x78>)
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(300);
 8002282:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002286:	f000 fc8f 	bl	8002ba8 <HAL_Delay>
	TIM3->CCR3 = 0;
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <springWater_song+0x78>)
 800228c:	2200      	movs	r2, #0
 800228e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(springWater_intvl[*index]);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <springWater_song+0x80>)
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fc84 	bl	8002ba8 <HAL_Delay>
	TIM3->CCR3 = springWater_note[*index]/2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <springWater_song+0x7c>)
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <springWater_song+0x78>)
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	63d3      	str	r3, [r2, #60]	; 0x3c
	if(*index > sizeof(springWater_note) / sizeof(springWater_note[0])-1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b3a      	cmp	r3, #58	; 0x3a
 80022b6:	d903      	bls.n	80022c0 <springWater_song+0x64>
	{
		*index = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		(*index) ++;
	}
}
 80022be:	e004      	b.n	80022ca <springWater_song+0x6e>
		(*index) ++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40000400 	.word	0x40000400
 80022d8:	0800b2e0 	.word	0x0800b2e0
 80022dc:	0800b3cc 	.word	0x0800b3cc

080022e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_MspInit+0x4c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a0f      	ldr	r2, [pc, #60]	; (800232c <HAL_MspInit+0x4c>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_MspInit+0x4c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_MspInit+0x4c>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_MspInit+0x4c>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_MspInit+0x4c>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <NMI_Handler+0x4>

08002336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <MemManage_Handler+0x4>

08002342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <UsageFault_Handler+0x4>

0800234e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237c:	f000 fbf4 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <ADC_IRQHandler+0x10>)
 800238a:	f000 fc74 	bl	8002c76 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000094 	.word	0x20000094

08002398 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 800239c:	2080      	movs	r0, #128	; 0x80
 800239e:	f002 fea7 	bl	80050f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <TIM2_IRQHandler+0x10>)
 80023ae:	f005 fa23 	bl	80077f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200005a4 	.word	0x200005a4

080023bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <USART3_IRQHandler+0x10>)
 80023c2:	f006 f98d 	bl	80086e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000678 	.word	0x20000678

080023d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80023d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023d8:	f002 fe8a 	bl	80050f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <RTC_Alarm_IRQHandler+0x10>)
 80023e6:	f004 ff89 	bl	80072fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000580 	.word	0x20000580

080023f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <UART4_IRQHandler+0x10>)
 80023fa:	f006 f971 	bl	80086e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000634 	.word	0x20000634

08002408 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <DMA2_Stream0_IRQHandler+0x10>)
 800240e:	f001 fbdf 	bl	8003bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200000dc 	.word	0x200000dc

0800241c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e00a      	b.n	8002444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800242e:	f3af 8000 	nop.w
 8002432:	4601      	mov	r1, r0
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	60ba      	str	r2, [r7, #8]
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	dbf0      	blt.n	800242e <_read+0x12>
  }

  return len;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800247e:	605a      	str	r2, [r3, #4]
  return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_isatty>:

int _isatty(int file)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <_sbrk+0x5c>)
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <_sbrk+0x60>)
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <_sbrk+0x64>)
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <_sbrk+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d207      	bcs.n	8002500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f0:	f007 fe0a 	bl	800a108 <__errno>
 80024f4:	4603      	mov	r3, r0
 80024f6:	220c      	movs	r2, #12
 80024f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	e009      	b.n	8002514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <_sbrk+0x64>)
 8002510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20030000 	.word	0x20030000
 8002520:	00000400 	.word	0x00000400
 8002524:	200005a0 	.word	0x200005a0
 8002528:	20000d38 	.word	0x20000d38

0800252c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <SystemInit+0x20>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <SystemInit+0x20>)
 8002538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800253c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002564:	463b      	mov	r3, r7
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800256c:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <MX_TIM2_Init+0x98>)
 800256e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <MX_TIM2_Init+0x98>)
 8002576:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800257a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <MX_TIM2_Init+0x98>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <MX_TIM2_Init+0x98>)
 8002584:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002588:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <MX_TIM2_Init+0x98>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <MX_TIM2_Init+0x98>)
 8002592:	2200      	movs	r2, #0
 8002594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002596:	4814      	ldr	r0, [pc, #80]	; (80025e8 <MX_TIM2_Init+0x98>)
 8002598:	f004 ffbd 	bl	8007516 <HAL_TIM_Base_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80025a2:	f7ff fd55 	bl	8002050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	4619      	mov	r1, r3
 80025b2:	480d      	ldr	r0, [pc, #52]	; (80025e8 <MX_TIM2_Init+0x98>)
 80025b4:	f005 faea 	bl	8007b8c <HAL_TIM_ConfigClockSource>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025be:	f7ff fd47 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ca:	463b      	mov	r3, r7
 80025cc:	4619      	mov	r1, r3
 80025ce:	4806      	ldr	r0, [pc, #24]	; (80025e8 <MX_TIM2_Init+0x98>)
 80025d0:	f005 fee6 	bl	80083a0 <HAL_TIMEx_MasterConfigSynchronization>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025da:	f7ff fd39 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200005a4 	.word	0x200005a4

080025ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08e      	sub	sp, #56	; 0x38
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
 8002618:	615a      	str	r2, [r3, #20]
 800261a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800261c:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <MX_TIM3_Init+0xe4>)
 800261e:	4a2d      	ldr	r2, [pc, #180]	; (80026d4 <MX_TIM3_Init+0xe8>)
 8002620:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <MX_TIM3_Init+0xe4>)
 8002624:	2253      	movs	r2, #83	; 0x53
 8002626:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <MX_TIM3_Init+0xe4>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <MX_TIM3_Init+0xe4>)
 8002630:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <MX_TIM3_Init+0xe4>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <MX_TIM3_Init+0xe4>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002642:	4823      	ldr	r0, [pc, #140]	; (80026d0 <MX_TIM3_Init+0xe4>)
 8002644:	f004 ff67 	bl	8007516 <HAL_TIM_Base_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800264e:	f7ff fcff 	bl	8002050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800265c:	4619      	mov	r1, r3
 800265e:	481c      	ldr	r0, [pc, #112]	; (80026d0 <MX_TIM3_Init+0xe4>)
 8002660:	f005 fa94 	bl	8007b8c <HAL_TIM_ConfigClockSource>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800266a:	f7ff fcf1 	bl	8002050 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800266e:	4818      	ldr	r0, [pc, #96]	; (80026d0 <MX_TIM3_Init+0xe4>)
 8002670:	f004 ffa0 	bl	80075b4 <HAL_TIM_PWM_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800267a:	f7ff fce9 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	4619      	mov	r1, r3
 800268c:	4810      	ldr	r0, [pc, #64]	; (80026d0 <MX_TIM3_Init+0xe4>)
 800268e:	f005 fe87 	bl	80083a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002698:	f7ff fcda 	bl	8002050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269c:	2360      	movs	r3, #96	; 0x60
 800269e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2208      	movs	r2, #8
 80026b0:	4619      	mov	r1, r3
 80026b2:	4807      	ldr	r0, [pc, #28]	; (80026d0 <MX_TIM3_Init+0xe4>)
 80026b4:	f005 f9a8 	bl	8007a08 <HAL_TIM_PWM_ConfigChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026be:	f7ff fcc7 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026c2:	4803      	ldr	r0, [pc, #12]	; (80026d0 <MX_TIM3_Init+0xe4>)
 80026c4:	f000 f83e 	bl	8002744 <HAL_TIM_MspPostInit>

}
 80026c8:	bf00      	nop
 80026ca:	3738      	adds	r7, #56	; 0x38
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200005ec 	.word	0x200005ec
 80026d4:	40000400 	.word	0x40000400

080026d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_TIM_Base_MspInit+0x64>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_TIM_Base_MspInit+0x64>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_TIM_Base_MspInit+0x64>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002706:	e012      	b.n	800272e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <HAL_TIM_Base_MspInit+0x68>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10d      	bne.n	800272e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_TIM_Base_MspInit+0x64>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_TIM_Base_MspInit+0x64>)
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_TIM_Base_MspInit+0x64>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40000400 	.word	0x40000400

08002744 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_TIM_MspPostInit+0x68>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d11e      	bne.n	80027a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002786:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002794:	2302      	movs	r3, #2
 8002796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4619      	mov	r1, r3
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_TIM_MspPostInit+0x70>)
 80027a0:	f002 faae 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020800 	.word	0x40020800

080027b8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_UART4_Init+0x4c>)
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <MX_UART4_Init+0x50>)
 80027c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <MX_UART4_Init+0x4c>)
 80027c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_UART4_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_UART4_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_UART4_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_UART4_Init+0x4c>)
 80027de:	220c      	movs	r2, #12
 80027e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_UART4_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_UART4_Init+0x4c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_UART4_Init+0x4c>)
 80027f0:	f005 fe66 	bl	80084c0 <HAL_UART_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80027fa:	f7ff fc29 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000634 	.word	0x20000634
 8002808:	40004c00 	.word	0x40004c00

0800280c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <MX_USART3_UART_Init+0x50>)
 8002814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 8002818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800281c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 8002832:	220c      	movs	r2, #12
 8002834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <MX_USART3_UART_Init+0x4c>)
 8002844:	f005 fe3c 	bl	80084c0 <HAL_UART_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800284e:	f7ff fbff 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000678 	.word	0x20000678
 800285c:	40004800 	.word	0x40004800

08002860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08c      	sub	sp, #48	; 0x30
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a33      	ldr	r2, [pc, #204]	; (800294c <HAL_UART_MspInit+0xec>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12d      	bne.n	80028de <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_UART_MspInit+0xf0>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a31      	ldr	r2, [pc, #196]	; (8002950 <HAL_UART_MspInit+0xf0>)
 800288c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_UART_MspInit+0xf0>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_UART_MspInit+0xf0>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <HAL_UART_MspInit+0xf0>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_UART_MspInit+0xf0>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028cc:	2308      	movs	r3, #8
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	481f      	ldr	r0, [pc, #124]	; (8002954 <HAL_UART_MspInit+0xf4>)
 80028d8:	f002 fa12 	bl	8004d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80028dc:	e031      	b.n	8002942 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART3)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_UART_MspInit+0xf8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d12c      	bne.n	8002942 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_UART_MspInit+0xf0>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_UART_MspInit+0xf0>)
 80028f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f6:	6413      	str	r3, [r2, #64]	; 0x40
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_UART_MspInit+0xf0>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_UART_MspInit+0xf0>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a10      	ldr	r2, [pc, #64]	; (8002950 <HAL_UART_MspInit+0xf0>)
 800290e:	f043 0308 	orr.w	r3, r3, #8
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_UART_MspInit+0xf0>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002920:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002932:	2307      	movs	r3, #7
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	4619      	mov	r1, r3
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <HAL_UART_MspInit+0xfc>)
 800293e:	f002 f9df 	bl	8004d00 <HAL_GPIO_Init>
}
 8002942:	bf00      	nop
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40004c00 	.word	0x40004c00
 8002950:	40023800 	.word	0x40023800
 8002954:	40020800 	.word	0x40020800
 8002958:	40004800 	.word	0x40004800
 800295c:	40020c00 	.word	0x40020c00

08002960 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002966:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800296a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800296e:	2204      	movs	r2, #4
 8002970:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002974:	2202      	movs	r2, #2
 8002976:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002980:	2202      	movs	r2, #2
 8002982:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002986:	2201      	movs	r2, #1
 8002988:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002998:	2201      	movs	r2, #1
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029a4:	f003 f9b0 	bl	8005d08 <HAL_PCD_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80029ae:	f7ff fb4f 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200006bc 	.word	0x200006bc

080029bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029dc:	d13f      	bne.n	8002a5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_PCD_MspInit+0xac>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <HAL_PCD_MspInit+0xac>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_PCD_MspInit+0xac>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029fa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a0c:	230a      	movs	r3, #10
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	4815      	ldr	r0, [pc, #84]	; (8002a6c <HAL_PCD_MspInit+0xb0>)
 8002a18:	f002 f972 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	480e      	ldr	r0, [pc, #56]	; (8002a6c <HAL_PCD_MspInit+0xb0>)
 8002a32:	f002 f965 	bl	8004d00 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_PCD_MspInit+0xac>)
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <HAL_PCD_MspInit+0xac>)
 8002a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a40:	6353      	str	r3, [r2, #52]	; 0x34
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_PCD_MspInit+0xac>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_PCD_MspInit+0xac>)
 8002a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a50:	6453      	str	r3, [r2, #68]	; 0x44
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_PCD_MspInit+0xac>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020000 	.word	0x40020000

08002a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a8c:	4c0b      	ldr	r4, [pc, #44]	; (8002abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a9a:	f7ff fd47 	bl	800252c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a9e:	f007 fb39 	bl	800a114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa2:	f7fe fc61 	bl	8001368 <main>
  bx  lr    
 8002aa6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002aa8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002ab4:	0800b520 	.word	0x0800b520
  ldr r2, =_sbss
 8002ab8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002abc:	20000d38 	.word	0x20000d38

08002ac0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <CAN1_RX0_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_Init+0x40>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <HAL_Init+0x40>)
 8002ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_Init+0x40>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f000 fe95 	bl	800381c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f000 f808 	bl	8002b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af8:	f7ff fbf2 	bl	80022e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_InitTick+0x54>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x58>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fead 	bl	8003886 <HAL_SYSTICK_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d80a      	bhi.n	8002b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f000 fe75 	bl	8003832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_InitTick+0x5c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000010 	.word	0x20000010
 8002b60:	20000018 	.word	0x20000018
 8002b64:	20000014 	.word	0x20000014

08002b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000018 	.word	0x20000018
 8002b8c:	20000bc8 	.word	0x20000bc8

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000bc8 	.word	0x20000bc8

08002ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff ffee 	bl	8002b90 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d005      	beq.n	8002bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_Delay+0x44>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bce:	bf00      	nop
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d8f7      	bhi.n	8002bd0 <HAL_Delay+0x28>
  {
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000018 	.word	0x20000018

08002bf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e033      	b.n	8002c6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fd24 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d118      	bne.n	8002c60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c36:	f023 0302 	bic.w	r3, r3, #2
 8002c3a:	f043 0202 	orr.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fb92 	bl	800336c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c5e:	e001      	b.n	8002c64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d049      	beq.n	8002d40 <HAL_ADC_IRQHandler+0xca>
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d046      	beq.n	8002d40 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d12b      	bne.n	8002d30 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d127      	bne.n	8002d30 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d119      	bne.n	8002d30 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0220 	bic.w	r2, r2, #32
 8002d0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f9c1 	bl	80030b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0212 	mvn.w	r2, #18
 8002d3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d057      	beq.n	8002e06 <HAL_ADC_IRQHandler+0x190>
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d054      	beq.n	8002e06 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d139      	bne.n	8002df6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d12b      	bne.n	8002df6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d124      	bne.n	8002df6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d11d      	bne.n	8002df6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d119      	bne.n	8002df6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fc36 	bl	8003668 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 020c 	mvn.w	r2, #12
 8002e04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d017      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x1d6>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d014      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10d      	bne.n	8002e4c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f94f 	bl	80030e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0201 	mvn.w	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d015      	beq.n	8002e8e <HAL_ADC_IRQHandler+0x218>
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d012      	beq.n	8002e8e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f043 0202 	orr.w	r2, r3, #2
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0220 	mvn.w	r2, #32
 8002e7c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f938 	bl	80030f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0220 	mvn.w	r2, #32
 8002e8c:	601a      	str	r2, [r3, #0]
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Start_DMA+0x1e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e0e9      	b.n	800308a <HAL_ADC_Start_DMA+0x1f2>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d018      	beq.n	8002efe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002edc:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_ADC_Start_DMA+0x1fc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6d      	ldr	r2, [pc, #436]	; (8003098 <HAL_ADC_Start_DMA+0x200>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9a      	lsrs	r2, r3, #18
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ef0:	e002      	b.n	8002ef8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f9      	bne.n	8002ef2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0c:	d107      	bne.n	8002f1e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	f040 80a1 	bne.w	8003070 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d106      	bne.n	8002f7c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f023 0206 	bic.w	r2, r3, #6
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
 8002f7a:	e002      	b.n	8002f82 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f8a:	4b44      	ldr	r3, [pc, #272]	; (800309c <HAL_ADC_Start_DMA+0x204>)
 8002f8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <HAL_ADC_Start_DMA+0x208>)
 8002f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	4a42      	ldr	r2, [pc, #264]	; (80030a4 <HAL_ADC_Start_DMA+0x20c>)
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	4a41      	ldr	r2, [pc, #260]	; (80030a8 <HAL_ADC_Start_DMA+0x210>)
 8002fa4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fbe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	334c      	adds	r3, #76	; 0x4c
 8002fda:	4619      	mov	r1, r3
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f000 fd0c 	bl	80039fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d12a      	bne.n	8003046 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2d      	ldr	r2, [pc, #180]	; (80030ac <HAL_ADC_Start_DMA+0x214>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d015      	beq.n	8003026 <HAL_ADC_Start_DMA+0x18e>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	; (80030b0 <HAL_ADC_Start_DMA+0x218>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d105      	bne.n	8003010 <HAL_ADC_Start_DMA+0x178>
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <HAL_ADC_Start_DMA+0x204>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <HAL_ADC_Start_DMA+0x21c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d136      	bne.n	8003088 <HAL_ADC_Start_DMA+0x1f0>
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_ADC_Start_DMA+0x204>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d130      	bne.n	8003088 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d129      	bne.n	8003088 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	e020      	b.n	8003088 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_ADC_Start_DMA+0x214>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d11b      	bne.n	8003088 <HAL_ADC_Start_DMA+0x1f0>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	e00b      	b.n	8003088 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f043 0210 	orr.w	r2, r3, #16
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000010 	.word	0x20000010
 8003098:	431bde83 	.word	0x431bde83
 800309c:	40012300 	.word	0x40012300
 80030a0:	08003565 	.word	0x08003565
 80030a4:	0800361f 	.word	0x0800361f
 80030a8:	0800363b 	.word	0x0800363b
 80030ac:	40012000 	.word	0x40012000
 80030b0:	40012100 	.word	0x40012100
 80030b4:	40012200 	.word	0x40012200

080030b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x1c>
 8003120:	2302      	movs	r3, #2
 8003122:	e113      	b.n	800334c <HAL_ADC_ConfigChannel+0x244>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b09      	cmp	r3, #9
 8003132:	d925      	bls.n	8003180 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68d9      	ldr	r1, [r3, #12]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	3b1e      	subs	r3, #30
 800314a:	2207      	movs	r2, #7
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43da      	mvns	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	400a      	ands	r2, r1
 8003158:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68d9      	ldr	r1, [r3, #12]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4618      	mov	r0, r3
 800316c:	4603      	mov	r3, r0
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4403      	add	r3, r0
 8003172:	3b1e      	subs	r3, #30
 8003174:	409a      	lsls	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	e022      	b.n	80031c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	2207      	movs	r2, #7
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	400a      	ands	r2, r1
 80031a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6919      	ldr	r1, [r3, #16]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4618      	mov	r0, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4403      	add	r3, r0
 80031bc:	409a      	lsls	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d824      	bhi.n	8003218 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	3b05      	subs	r3, #5
 80031e0:	221f      	movs	r2, #31
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	400a      	ands	r2, r1
 80031ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4618      	mov	r0, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b05      	subs	r3, #5
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	635a      	str	r2, [r3, #52]	; 0x34
 8003216:	e04c      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d824      	bhi.n	800326a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3b23      	subs	r3, #35	; 0x23
 8003232:	221f      	movs	r2, #31
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43da      	mvns	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	400a      	ands	r2, r1
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	4618      	mov	r0, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	3b23      	subs	r3, #35	; 0x23
 800325c:	fa00 f203 	lsl.w	r2, r0, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
 8003268:	e023      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	3b41      	subs	r3, #65	; 0x41
 800327c:	221f      	movs	r2, #31
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	400a      	ands	r2, r1
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	4618      	mov	r0, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	3b41      	subs	r3, #65	; 0x41
 80032a6:	fa00 f203 	lsl.w	r2, r0, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b2:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_ADC_ConfigChannel+0x250>)
 80032b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_ADC_ConfigChannel+0x254>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10f      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1d8>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b12      	cmp	r3, #18
 80032c6:	d10b      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <HAL_ADC_ConfigChannel+0x254>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d12b      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x23a>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <HAL_ADC_ConfigChannel+0x258>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <HAL_ADC_ConfigChannel+0x1f4>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b11      	cmp	r3, #17
 80032fa:	d122      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a11      	ldr	r2, [pc, #68]	; (8003360 <HAL_ADC_ConfigChannel+0x258>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d111      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <HAL_ADC_ConfigChannel+0x25c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a11      	ldr	r2, [pc, #68]	; (8003368 <HAL_ADC_ConfigChannel+0x260>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	0c9a      	lsrs	r2, r3, #18
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003334:	e002      	b.n	800333c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3b01      	subs	r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f9      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012300 	.word	0x40012300
 800335c:	40012000 	.word	0x40012000
 8003360:	10000012 	.word	0x10000012
 8003364:	20000010 	.word	0x20000010
 8003368:	431bde83 	.word	0x431bde83

0800336c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003374:	4b79      	ldr	r3, [pc, #484]	; (800355c <ADC_Init+0x1f0>)
 8003376:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	431a      	orrs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	4a58      	ldr	r2, [pc, #352]	; (8003560 <ADC_Init+0x1f4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d022      	beq.n	800344a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6899      	ldr	r1, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	e00f      	b.n	800346a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0202 	bic.w	r2, r2, #2
 8003478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7e1b      	ldrb	r3, [r3, #24]
 8003484:	005a      	lsls	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	3b01      	subs	r3, #1
 80034c4:	035a      	lsls	r2, r3, #13
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	e007      	b.n	80034e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	051a      	lsls	r2, r3, #20
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003522:	025a      	lsls	r2, r3, #9
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	029a      	lsls	r2, r3, #10
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40012300 	.word	0x40012300
 8003560:	0f000001 	.word	0x0f000001

08003564 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800357a:	2b00      	cmp	r3, #0
 800357c:	d13c      	bne.n	80035f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d12b      	bne.n	80035f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800359c:	2b00      	cmp	r3, #0
 800359e:	d127      	bne.n	80035f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d006      	beq.n	80035bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d119      	bne.n	80035f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0220 	bic.w	r2, r2, #32
 80035ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f043 0201 	orr.w	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fd61 	bl	80030b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035f6:	e00e      	b.n	8003616 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff fd75 	bl	80030f4 <HAL_ADC_ErrorCallback>
}
 800360a:	e004      	b.n	8003616 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff fd4d 	bl	80030cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f043 0204 	orr.w	r2, r3, #4
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff fd4a 	bl	80030f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ae:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	60d3      	str	r3, [r2, #12]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <__NVIC_GetPriorityGrouping+0x18>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 0307 	and.w	r3, r3, #7
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db0b      	blt.n	800370a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	4907      	ldr	r1, [pc, #28]	; (8003718 <__NVIC_EnableIRQ+0x38>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2001      	movs	r0, #1
 8003702:	fa00 f202 	lsl.w	r2, r0, r2
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000e100 	.word	0xe000e100

0800371c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	6039      	str	r1, [r7, #0]
 8003726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	db0a      	blt.n	8003746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	490c      	ldr	r1, [pc, #48]	; (8003768 <__NVIC_SetPriority+0x4c>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	440b      	add	r3, r1
 8003740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003744:	e00a      	b.n	800375c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4908      	ldr	r1, [pc, #32]	; (800376c <__NVIC_SetPriority+0x50>)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3b04      	subs	r3, #4
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	440b      	add	r3, r1
 800375a:	761a      	strb	r2, [r3, #24]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000e100 	.word	0xe000e100
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f1c3 0307 	rsb	r3, r3, #7
 800378a:	2b04      	cmp	r3, #4
 800378c:	bf28      	it	cs
 800378e:	2304      	movcs	r3, #4
 8003790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3304      	adds	r3, #4
 8003796:	2b06      	cmp	r3, #6
 8003798:	d902      	bls.n	80037a0 <NVIC_EncodePriority+0x30>
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3b03      	subs	r3, #3
 800379e:	e000      	b.n	80037a2 <NVIC_EncodePriority+0x32>
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	401a      	ands	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b8:	f04f 31ff 	mov.w	r1, #4294967295
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43d9      	mvns	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	4313      	orrs	r3, r2
         );
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3724      	adds	r7, #36	; 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e8:	d301      	bcc.n	80037ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00f      	b.n	800380e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <SysTick_Config+0x40>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f6:	210f      	movs	r1, #15
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	f7ff ff8e 	bl	800371c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <SysTick_Config+0x40>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003806:	4b04      	ldr	r3, [pc, #16]	; (8003818 <SysTick_Config+0x40>)
 8003808:	2207      	movs	r2, #7
 800380a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000e010 	.word	0xe000e010

0800381c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff29 	bl	800367c <__NVIC_SetPriorityGrouping>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003844:	f7ff ff3e 	bl	80036c4 <__NVIC_GetPriorityGrouping>
 8003848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff ff8e 	bl	8003770 <NVIC_EncodePriority>
 8003854:	4602      	mov	r2, r0
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff5d 	bl	800371c <__NVIC_SetPriority>
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff31 	bl	80036e0 <__NVIC_EnableIRQ>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ffa2 	bl	80037d8 <SysTick_Config>
 8003894:	4603      	mov	r3, r0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff f970 	bl	8002b90 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e099      	b.n	80039f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038dc:	e00f      	b.n	80038fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038de:	f7ff f957 	bl	8002b90 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d908      	bls.n	80038fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2203      	movs	r2, #3
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e078      	b.n	80039f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e8      	bne.n	80038de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <HAL_DMA_Init+0x158>)
 8003918:	4013      	ands	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800392a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	2b04      	cmp	r3, #4
 8003956:	d107      	bne.n	8003968 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	4313      	orrs	r3, r2
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f023 0307 	bic.w	r3, r3, #7
 800397e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2b04      	cmp	r3, #4
 8003990:	d117      	bne.n	80039c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00e      	beq.n	80039c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fb01 	bl	8003fac <DMA_CheckFifoParam>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039be:	2301      	movs	r3, #1
 80039c0:	e016      	b.n	80039f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fab8 	bl	8003f40 <DMA_CalcBaseAndBitshift>
 80039d0:	4603      	mov	r3, r0
 80039d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	223f      	movs	r2, #63	; 0x3f
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	f010803f 	.word	0xf010803f

080039fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_DMA_Start_IT+0x26>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e040      	b.n	8003aa4 <HAL_DMA_Start_IT+0xa8>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d12f      	bne.n	8003a96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fa4a 	bl	8003ee4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	223f      	movs	r2, #63	; 0x3f
 8003a56:	409a      	lsls	r2, r3
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0216 	orr.w	r2, r2, #22
 8003a6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0208 	orr.w	r2, r2, #8
 8003a82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e005      	b.n	8003aa2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003aba:	f7ff f869 	bl	8002b90 <HAL_GetTick>
 8003abe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d008      	beq.n	8003ade <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e052      	b.n	8003b84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0216 	bic.w	r2, r2, #22
 8003aec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003afc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <HAL_DMA_Abort+0x62>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0208 	bic.w	r2, r2, #8
 8003b1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0201 	bic.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b2e:	e013      	b.n	8003b58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b30:	f7ff f82e 	bl	8002b90 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d90c      	bls.n	8003b58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2203      	movs	r2, #3
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e015      	b.n	8003b84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e4      	bne.n	8003b30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	223f      	movs	r2, #63	; 0x3f
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d004      	beq.n	8003baa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2280      	movs	r2, #128	; 0x80
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00c      	b.n	8003bc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2205      	movs	r2, #5
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bdc:	4b8e      	ldr	r3, [pc, #568]	; (8003e18 <HAL_DMA_IRQHandler+0x248>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a8e      	ldr	r2, [pc, #568]	; (8003e1c <HAL_DMA_IRQHandler+0x24c>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01a      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	2208      	movs	r2, #8
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	2201      	movs	r2, #1
 8003c42:	409a      	lsls	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d012      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2201      	movs	r2, #1
 8003c60:	409a      	lsls	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f043 0202 	orr.w	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	2204      	movs	r2, #4
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d012      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	2204      	movs	r2, #4
 8003c96:	409a      	lsls	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	2210      	movs	r2, #16
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d043      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03c      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	2210      	movs	r2, #16
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d018      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d108      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d024      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
 8003cfe:	e01f      	b.n	8003d40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01b      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
 8003d10:	e016      	b.n	8003d40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0208 	bic.w	r2, r2, #8
 8003d2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	2220      	movs	r2, #32
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 808f 	beq.w	8003e70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8087 	beq.w	8003e70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	2220      	movs	r2, #32
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d136      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0216 	bic.w	r2, r2, #22
 8003d88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <HAL_DMA_IRQHandler+0x1da>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0208 	bic.w	r2, r2, #8
 8003db8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	223f      	movs	r2, #63	; 0x3f
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d07e      	beq.n	8003edc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
        }
        return;
 8003de6:	e079      	b.n	8003edc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01d      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d031      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
 8003e14:	e02c      	b.n	8003e70 <HAL_DMA_IRQHandler+0x2a0>
 8003e16:	bf00      	nop
 8003e18:	20000010 	.word	0x20000010
 8003e1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d023      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
 8003e30:	e01e      	b.n	8003e70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10f      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0210 	bic.w	r2, r2, #16
 8003e4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d032      	beq.n	8003ede <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d022      	beq.n	8003eca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2205      	movs	r2, #5
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d307      	bcc.n	8003eb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f2      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x2cc>
 8003eb6:	e000      	b.n	8003eba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003eb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
 8003eda:	e000      	b.n	8003ede <HAL_DMA_IRQHandler+0x30e>
        return;
 8003edc:	bf00      	nop
    }
  }
}
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d108      	bne.n	8003f24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f22:	e007      	b.n	8003f34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	3b10      	subs	r3, #16
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d909      	bls.n	8003f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f80:	e007      	b.n	8003f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	aaaaaaab 	.word	0xaaaaaaab
 8003fa8:	0800b4d4 	.word	0x0800b4d4

08003fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11f      	bne.n	8004006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d856      	bhi.n	800407a <DMA_CheckFifoParam+0xce>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <DMA_CheckFifoParam+0x28>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003ff7 	.word	0x08003ff7
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	0800407b 	.word	0x0800407b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d046      	beq.n	800407e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff4:	e043      	b.n	800407e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ffe:	d140      	bne.n	8004082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004004:	e03d      	b.n	8004082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	d121      	bne.n	8004054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d837      	bhi.n	8004086 <DMA_CheckFifoParam+0xda>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <DMA_CheckFifoParam+0x70>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004033 	.word	0x08004033
 8004024:	0800402d 	.word	0x0800402d
 8004028:	08004045 	.word	0x08004045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e030      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d025      	beq.n	800408a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e022      	b.n	800408a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800404c:	d11f      	bne.n	800408e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004052:	e01c      	b.n	800408e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d903      	bls.n	8004062 <DMA_CheckFifoParam+0xb6>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b03      	cmp	r3, #3
 800405e:	d003      	beq.n	8004068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004060:	e018      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      break;
 8004066:	e015      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00e      	beq.n	8004092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e00b      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 800407a:	bf00      	nop
 800407c:	e00a      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 800407e:	bf00      	nop
 8004080:	e008      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004082:	bf00      	nop
 8004084:	e006      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004086:	bf00      	nop
 8004088:	e004      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;   
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <DMA_CheckFifoParam+0xe8>
      break;
 8004092:	bf00      	nop
    }
  } 
  
  return status; 
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop

080040a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06c      	b.n	8004190 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2223      	movs	r2, #35	; 0x23
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fc fbc9 	bl	8000860 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_ETH_Init+0xf4>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	4a30      	ldr	r2, [pc, #192]	; (8004198 <HAL_ETH_Init+0xf4>)
 80040d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040dc:	6453      	str	r3, [r2, #68]	; 0x44
 80040de:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <HAL_ETH_Init+0xf4>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80040ea:	4b2c      	ldr	r3, [pc, #176]	; (800419c <HAL_ETH_Init+0xf8>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4a2b      	ldr	r2, [pc, #172]	; (800419c <HAL_ETH_Init+0xf8>)
 80040f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80040f6:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_ETH_Init+0xf8>)
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4927      	ldr	r1, [pc, #156]	; (800419c <HAL_ETH_Init+0xf8>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <HAL_ETH_Init+0xf8>)
 8004106:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800411e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004120:	f7fe fd36 	bl	8002b90 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004126:	e011      	b.n	800414c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004128:	f7fe fd32 	bl	8002b90 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004136:	d909      	bls.n	800414c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2204      	movs	r2, #4
 800413c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	22e0      	movs	r2, #224	; 0xe0
 8004144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e021      	b.n	8004190 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e4      	bne.n	8004128 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f958 	bl	8004414 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f9ff 	bl	8004568 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fa55 	bl	800461a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	461a      	mov	r2, r3
 8004176:	2100      	movs	r1, #0
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f9bd 	bl	80044f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2210      	movs	r2, #16
 800418a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	40013800 	.word	0x40013800

080041a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4b51      	ldr	r3, [pc, #324]	; (80042fc <ETH_SetMACConfig+0x15c>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	7c1b      	ldrb	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <ETH_SetMACConfig+0x28>
 80041c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041c6:	e000      	b.n	80041ca <ETH_SetMACConfig+0x2a>
 80041c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	7c5b      	ldrb	r3, [r3, #17]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <ETH_SetMACConfig+0x38>
 80041d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041d6:	e000      	b.n	80041da <ETH_SetMACConfig+0x3a>
 80041d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80041da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80041e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	7fdb      	ldrb	r3, [r3, #31]
 80041e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80041e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80041ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	7f92      	ldrb	r2, [r2, #30]
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	d102      	bne.n	80041fe <ETH_SetMACConfig+0x5e>
 80041f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041fc:	e000      	b.n	8004200 <ETH_SetMACConfig+0x60>
 80041fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8004200:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	7f1b      	ldrb	r3, [r3, #28]
 8004206:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004208:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800420e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	791b      	ldrb	r3, [r3, #4]
 8004214:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004216:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800421e:	2a00      	cmp	r2, #0
 8004220:	d102      	bne.n	8004228 <ETH_SetMACConfig+0x88>
 8004222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004226:	e000      	b.n	800422a <ETH_SetMACConfig+0x8a>
 8004228:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800422a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	7bdb      	ldrb	r3, [r3, #15]
 8004230:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004232:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004238:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004240:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004242:	4313      	orrs	r3, r2
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800425a:	2001      	movs	r0, #1
 800425c:	f7fe fca4 	bl	8002ba8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004276:	4013      	ands	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004286:	2a00      	cmp	r2, #0
 8004288:	d101      	bne.n	800428e <ETH_SetMACConfig+0xee>
 800428a:	2280      	movs	r2, #128	; 0x80
 800428c:	e000      	b.n	8004290 <ETH_SetMACConfig+0xf0>
 800428e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004290:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004296:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800429e:	2a01      	cmp	r2, #1
 80042a0:	d101      	bne.n	80042a6 <ETH_SetMACConfig+0x106>
 80042a2:	2208      	movs	r2, #8
 80042a4:	e000      	b.n	80042a8 <ETH_SetMACConfig+0x108>
 80042a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80042a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80042b0:	2a01      	cmp	r2, #1
 80042b2:	d101      	bne.n	80042b8 <ETH_SetMACConfig+0x118>
 80042b4:	2204      	movs	r2, #4
 80042b6:	e000      	b.n	80042ba <ETH_SetMACConfig+0x11a>
 80042b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80042ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80042c2:	2a01      	cmp	r2, #1
 80042c4:	d101      	bne.n	80042ca <ETH_SetMACConfig+0x12a>
 80042c6:	2202      	movs	r2, #2
 80042c8:	e000      	b.n	80042cc <ETH_SetMACConfig+0x12c>
 80042ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80042cc:	4313      	orrs	r3, r2
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042e4:	2001      	movs	r0, #1
 80042e6:	f7fe fc5f 	bl	8002ba8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	619a      	str	r2, [r3, #24]
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	ff20810f 	.word	0xff20810f

08004300 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <ETH_SetDMAConfig+0x110>)
 800431a:	4013      	ands	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	7b1b      	ldrb	r3, [r3, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <ETH_SetDMAConfig+0x2c>
 8004326:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800432a:	e000      	b.n	800432e <ETH_SetDMAConfig+0x2e>
 800432c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	7b5b      	ldrb	r3, [r3, #13]
 8004332:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004334:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	7f52      	ldrb	r2, [r2, #29]
 800433a:	2a00      	cmp	r2, #0
 800433c:	d102      	bne.n	8004344 <ETH_SetDMAConfig+0x44>
 800433e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004342:	e000      	b.n	8004346 <ETH_SetDMAConfig+0x46>
 8004344:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004346:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	7b9b      	ldrb	r3, [r3, #14]
 800434c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800434e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004354:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	7f1b      	ldrb	r3, [r3, #28]
 800435a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800435c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	7f9b      	ldrb	r3, [r3, #30]
 8004362:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004364:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800436a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004372:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004374:	4313      	orrs	r3, r2
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004384:	461a      	mov	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004396:	2001      	movs	r0, #1
 8004398:	f7fe fc06 	bl	8002ba8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a4:	461a      	mov	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	791b      	ldrb	r3, [r3, #4]
 80043ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80043b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80043ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80043c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80043ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80043d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80043d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043f4:	2001      	movs	r0, #1
 80043f6:	f7fe fbd7 	bl	8002ba8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	f8de3f23 	.word	0xf8de3f23

08004414 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b0a6      	sub	sp, #152	; 0x98
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004428:	2300      	movs	r3, #0
 800442a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800444a:	2300      	movs	r3, #0
 800444c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004450:	2300      	movs	r3, #0
 8004452:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004454:	2300      	movs	r3, #0
 8004456:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800445a:	2300      	movs	r3, #0
 800445c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800445e:	2300      	movs	r3, #0
 8004460:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004464:	2300      	movs	r3, #0
 8004466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800446a:	2300      	movs	r3, #0
 800446c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004470:	2300      	movs	r3, #0
 8004472:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800447c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004480:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004482:	2300      	movs	r3, #0
 8004484:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fe86 	bl	80041a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004494:	2301      	movs	r3, #1
 8004496:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004498:	2301      	movs	r3, #1
 800449a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80044b6:	2300      	movs	r3, #0
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80044c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80044ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80044d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff ff08 	bl	8004300 <ETH_SetDMAConfig>
}
 80044f0:	bf00      	nop
 80044f2:	3798      	adds	r7, #152	; 0x98
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3305      	adds	r3, #5
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	3204      	adds	r2, #4
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <ETH_MACAddressConfig+0x68>)
 800451a:	4413      	add	r3, r2
 800451c:	461a      	mov	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3303      	adds	r3, #3
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	061a      	lsls	r2, r3, #24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3302      	adds	r3, #2
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3301      	adds	r3, #1
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	4313      	orrs	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <ETH_MACAddressConfig+0x6c>)
 800454a:	4413      	add	r3, r2
 800454c:	461a      	mov	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	6013      	str	r3, [r2, #0]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40028040 	.word	0x40028040
 8004564:	40028044 	.word	0x40028044

08004568 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e03e      	b.n	80045f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68d9      	ldr	r1, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	440b      	add	r3, r1
 8004586:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	3206      	adds	r2, #6
 80045a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d80c      	bhi.n	80045d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68d9      	ldr	r1, [r3, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	440b      	add	r3, r1
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	e004      	b.n	80045e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d9bd      	bls.n	8004576 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460c:	611a      	str	r2, [r3, #16]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e046      	b.n	80046b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6919      	ldr	r1, [r3, #16]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	440b      	add	r3, r1
 8004638:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2200      	movs	r2, #0
 800464a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004664:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800466c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	3212      	adds	r2, #18
 8004682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d80c      	bhi.n	80046a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6919      	ldr	r1, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e004      	b.n	80046b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	461a      	mov	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d9b5      	bls.n	8004628 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e6:	60da      	str	r2, [r3, #12]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004706:	4b23      	ldr	r3, [pc, #140]	; (8004794 <HAL_FLASH_Program+0xa0>)
 8004708:	7e1b      	ldrb	r3, [r3, #24]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_FLASH_Program+0x1e>
 800470e:	2302      	movs	r3, #2
 8004710:	e03b      	b.n	800478a <HAL_FLASH_Program+0x96>
 8004712:	4b20      	ldr	r3, [pc, #128]	; (8004794 <HAL_FLASH_Program+0xa0>)
 8004714:	2201      	movs	r2, #1
 8004716:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004718:	f24c 3050 	movw	r0, #50000	; 0xc350
 800471c:	f000 f870 	bl	8004800 <FLASH_WaitForLastOperation>
 8004720:	4603      	mov	r3, r0
 8004722:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d12b      	bne.n	8004782 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004730:	783b      	ldrb	r3, [r7, #0]
 8004732:	4619      	mov	r1, r3
 8004734:	68b8      	ldr	r0, [r7, #8]
 8004736:	f000 f91b 	bl	8004970 <FLASH_Program_Byte>
 800473a:	e016      	b.n	800476a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d105      	bne.n	800474e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004742:	883b      	ldrh	r3, [r7, #0]
 8004744:	4619      	mov	r1, r3
 8004746:	68b8      	ldr	r0, [r7, #8]
 8004748:	f000 f8ee 	bl	8004928 <FLASH_Program_HalfWord>
 800474c:	e00d      	b.n	800476a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d105      	bne.n	8004760 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	68b8      	ldr	r0, [r7, #8]
 800475a:	f000 f8c3 	bl	80048e4 <FLASH_Program_Word>
 800475e:	e004      	b.n	800476a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004764:	68b8      	ldr	r0, [r7, #8]
 8004766:	f000 f88b 	bl	8004880 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800476a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800476e:	f000 f847 	bl	8004800 <FLASH_WaitForLastOperation>
 8004772:	4603      	mov	r3, r0
 8004774:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004776:	4b08      	ldr	r3, [pc, #32]	; (8004798 <HAL_FLASH_Program+0xa4>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <HAL_FLASH_Program+0xa4>)
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004782:	4b04      	ldr	r3, [pc, #16]	; (8004794 <HAL_FLASH_Program+0xa0>)
 8004784:	2200      	movs	r2, #0
 8004786:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004788:	7dfb      	ldrb	r3, [r7, #23]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000bcc 	.word	0x20000bcc
 8004798:	40023c00 	.word	0x40023c00

0800479c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_FLASH_Unlock+0x38>)
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da0b      	bge.n	80047c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_FLASH_Unlock+0x38>)
 80047b0:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <HAL_FLASH_Unlock+0x3c>)
 80047b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047b4:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <HAL_FLASH_Unlock+0x38>)
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <HAL_FLASH_Unlock+0x40>)
 80047b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_FLASH_Unlock+0x38>)
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da01      	bge.n	80047c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80047c6:	79fb      	ldrb	r3, [r7, #7]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40023c00 	.word	0x40023c00
 80047d8:	45670123 	.word	0x45670123
 80047dc:	cdef89ab 	.word	0xcdef89ab

080047e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_FLASH_Lock+0x1c>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	4a04      	ldr	r2, [pc, #16]	; (80047fc <HAL_FLASH_Lock+0x1c>)
 80047ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40023c00 	.word	0x40023c00

08004800 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <FLASH_WaitForLastOperation+0x78>)
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004812:	f7fe f9bd 	bl	8002b90 <HAL_GetTick>
 8004816:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004818:	e010      	b.n	800483c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d00c      	beq.n	800483c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <FLASH_WaitForLastOperation+0x38>
 8004828:	f7fe f9b2 	bl	8002b90 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d201      	bcs.n	800483c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e019      	b.n	8004870 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <FLASH_WaitForLastOperation+0x7c>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e8      	bne.n	800481a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <FLASH_WaitForLastOperation+0x7c>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <FLASH_WaitForLastOperation+0x7c>)
 8004856:	2201      	movs	r2, #1
 8004858:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <FLASH_WaitForLastOperation+0x7c>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004866:	f000 f8a5 	bl	80049b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
  
}  
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000bcc 	.word	0x20000bcc
 800487c:	40023c00 	.word	0x40023c00

08004880 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <FLASH_Program_DoubleWord+0x60>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <FLASH_Program_DoubleWord+0x60>)
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <FLASH_Program_DoubleWord+0x60>)
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	4a10      	ldr	r2, [pc, #64]	; (80048e0 <FLASH_Program_DoubleWord+0x60>)
 800489e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80048a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <FLASH_Program_DoubleWord+0x60>)
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <FLASH_Program_DoubleWord+0x60>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80048b6:	f3bf 8f6f 	isb	sy
}
 80048ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80048bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	000a      	movs	r2, r1
 80048ca:	2300      	movs	r3, #0
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	3104      	adds	r1, #4
 80048d0:	4613      	mov	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <FLASH_Program_Word+0x40>)
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <FLASH_Program_Word+0x40>)
 80048f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <FLASH_Program_Word+0x40>)
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <FLASH_Program_Word+0x40>)
 8004900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004904:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <FLASH_Program_Word+0x40>)
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	4a06      	ldr	r2, [pc, #24]	; (8004924 <FLASH_Program_Word+0x40>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40023c00 	.word	0x40023c00

08004928 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004934:	4b0d      	ldr	r3, [pc, #52]	; (800496c <FLASH_Program_HalfWord+0x44>)
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	4a0c      	ldr	r2, [pc, #48]	; (800496c <FLASH_Program_HalfWord+0x44>)
 800493a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <FLASH_Program_HalfWord+0x44>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <FLASH_Program_HalfWord+0x44>)
 8004946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <FLASH_Program_HalfWord+0x44>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	4a06      	ldr	r2, [pc, #24]	; (800496c <FLASH_Program_HalfWord+0x44>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	801a      	strh	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40023c00 	.word	0x40023c00

08004970 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <FLASH_Program_Byte+0x40>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <FLASH_Program_Byte+0x40>)
 8004982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004986:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <FLASH_Program_Byte+0x40>)
 800498a:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <FLASH_Program_Byte+0x40>)
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <FLASH_Program_Byte+0x40>)
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	4a06      	ldr	r2, [pc, #24]	; (80049b0 <FLASH_Program_Byte+0x40>)
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	701a      	strb	r2, [r3, #0]
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00

080049b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80049b8:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80049c4:	4b2d      	ldr	r3, [pc, #180]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f043 0310 	orr.w	r3, r3, #16
 80049cc:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 80049ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80049d0:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 80049d2:	2210      	movs	r2, #16
 80049d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80049d6:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80049e2:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f043 0308 	orr.w	r3, r3, #8
 80049ea:	4a24      	ldr	r2, [pc, #144]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 80049ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80049ee:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 80049f0:	2220      	movs	r2, #32
 80049f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80049f4:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004a00:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 8004a0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004a0c:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 8004a0e:	2240      	movs	r2, #64	; 0x40
 8004a10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004a12:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f043 0302 	orr.w	r3, r3, #2
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 8004a28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 8004a46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 8004a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a4e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f043 0320 	orr.w	r3, r3, #32
 8004a64:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <FLASH_SetErrorCode+0xc8>)
 8004a66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <FLASH_SetErrorCode+0xc4>)
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	60da      	str	r2, [r3, #12]
  }
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40023c00 	.word	0x40023c00
 8004a7c:	20000bcc 	.word	0x20000bcc

08004a80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a92:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <HAL_FLASHEx_Erase+0xdc>)
 8004a94:	7e1b      	ldrb	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_FLASHEx_Erase+0x1e>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e05a      	b.n	8004b54 <HAL_FLASHEx_Erase+0xd4>
 8004a9e:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <HAL_FLASHEx_Erase+0xdc>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004aa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004aa8:	f7ff feaa 	bl	8004800 <FLASH_WaitForLastOperation>
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d14a      	bne.n	8004b4c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8004abc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d117      	bne.n	8004af6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f000 f846 	bl	8004b64 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ad8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004adc:	f7ff fe90 	bl	8004800 <FLASH_WaitForLastOperation>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004ae4:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <HAL_FLASHEx_Erase+0xe0>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_FLASHEx_Erase+0xe0>)
 8004aea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004aee:	f023 0304 	bic.w	r3, r3, #4
 8004af2:	6113      	str	r3, [r2, #16]
 8004af4:	e028      	b.n	8004b48 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	e01c      	b.n	8004b38 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	4619      	mov	r1, r3
 8004b06:	68b8      	ldr	r0, [r7, #8]
 8004b08:	f000 f866 	bl	8004bd8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b10:	f7ff fe76 	bl	8004800 <FLASH_WaitForLastOperation>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004b18:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <HAL_FLASHEx_Erase+0xe0>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	4a10      	ldr	r2, [pc, #64]	; (8004b60 <HAL_FLASHEx_Erase+0xe0>)
 8004b1e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004b22:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	601a      	str	r2, [r3, #0]
          break;
 8004b30:	e00a      	b.n	8004b48 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	3301      	adds	r3, #1
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4413      	add	r3, r2
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3da      	bcc.n	8004afe <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004b48:	f000 f894 	bl	8004c74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <HAL_FLASHEx_Erase+0xdc>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	761a      	strb	r2, [r3, #24]

  return status;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000bcc 	.word	0x20000bcc
 8004b60:	40023c00 	.word	0x40023c00

08004b64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	6039      	str	r1, [r7, #0]
 8004b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b70:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	4a17      	ldr	r2, [pc, #92]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d108      	bne.n	8004b94 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	4a13      	ldr	r2, [pc, #76]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8c:	f043 0304 	orr.w	r3, r3, #4
 8004b90:	6113      	str	r3, [r2, #16]
 8004b92:	e00f      	b.n	8004bb4 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d106      	bne.n	8004ba8 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6113      	str	r3, [r2, #16]
 8004ba6:	e005      	b.n	8004bb4 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	4a05      	ldr	r2, [pc, #20]	; (8004bd4 <FLASH_MassErase+0x70>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc4:	6113      	str	r3, [r2, #16]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40023c00 	.word	0x40023c00

08004bd8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e010      	b.n	8004c16 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d103      	bne.n	8004c02 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e009      	b.n	8004c16 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d103      	bne.n	8004c10 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e002      	b.n	8004c16 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004c10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b0b      	cmp	r3, #11
 8004c1a:	d902      	bls.n	8004c22 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c22:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	4a12      	ldr	r2, [pc, #72]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004c2e:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	490f      	ldr	r1, [pc, #60]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	4a0c      	ldr	r2, [pc, #48]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	4a07      	ldr	r2, [pc, #28]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c52:	f043 0302 	orr.w	r3, r3, #2
 8004c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <FLASH_Erase_Sector+0x98>)
 8004c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c62:	6113      	str	r3, [r2, #16]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40023c00 	.word	0x40023c00

08004c74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004c78:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d017      	beq.n	8004cb4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004c8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c8e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a19      	ldr	r2, [pc, #100]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004c96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a16      	ldr	r2, [pc, #88]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ca6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ca8:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d017      	beq.n	8004cf0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004cc0:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <FLASH_FlushCaches+0x88>)
 8004cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cee:	6013      	str	r3, [r2, #0]
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40023c00 	.word	0x40023c00

08004d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	; 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e177      	b.n	800500c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	f040 8166 	bne.w	8005006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d005      	beq.n	8004d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d130      	bne.n	8004db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d88:	2201      	movs	r2, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 0201 	and.w	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d017      	beq.n	8004df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d123      	bne.n	8004e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	08da      	lsrs	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3208      	adds	r2, #8
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	220f      	movs	r2, #15
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	08da      	lsrs	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3208      	adds	r2, #8
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2203      	movs	r2, #3
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0203 	and.w	r2, r3, #3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80c0 	beq.w	8005006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	4b66      	ldr	r3, [pc, #408]	; (8005024 <HAL_GPIO_Init+0x324>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	4a65      	ldr	r2, [pc, #404]	; (8005024 <HAL_GPIO_Init+0x324>)
 8004e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e94:	6453      	str	r3, [r2, #68]	; 0x44
 8004e96:	4b63      	ldr	r3, [pc, #396]	; (8005024 <HAL_GPIO_Init+0x324>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea2:	4a61      	ldr	r2, [pc, #388]	; (8005028 <HAL_GPIO_Init+0x328>)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	220f      	movs	r2, #15
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a58      	ldr	r2, [pc, #352]	; (800502c <HAL_GPIO_Init+0x32c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d037      	beq.n	8004f3e <HAL_GPIO_Init+0x23e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a57      	ldr	r2, [pc, #348]	; (8005030 <HAL_GPIO_Init+0x330>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d031      	beq.n	8004f3a <HAL_GPIO_Init+0x23a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a56      	ldr	r2, [pc, #344]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02b      	beq.n	8004f36 <HAL_GPIO_Init+0x236>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a55      	ldr	r2, [pc, #340]	; (8005038 <HAL_GPIO_Init+0x338>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d025      	beq.n	8004f32 <HAL_GPIO_Init+0x232>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a54      	ldr	r2, [pc, #336]	; (800503c <HAL_GPIO_Init+0x33c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01f      	beq.n	8004f2e <HAL_GPIO_Init+0x22e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a53      	ldr	r2, [pc, #332]	; (8005040 <HAL_GPIO_Init+0x340>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d019      	beq.n	8004f2a <HAL_GPIO_Init+0x22a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a52      	ldr	r2, [pc, #328]	; (8005044 <HAL_GPIO_Init+0x344>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <HAL_GPIO_Init+0x226>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a51      	ldr	r2, [pc, #324]	; (8005048 <HAL_GPIO_Init+0x348>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00d      	beq.n	8004f22 <HAL_GPIO_Init+0x222>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a50      	ldr	r2, [pc, #320]	; (800504c <HAL_GPIO_Init+0x34c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <HAL_GPIO_Init+0x21e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a4f      	ldr	r2, [pc, #316]	; (8005050 <HAL_GPIO_Init+0x350>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d101      	bne.n	8004f1a <HAL_GPIO_Init+0x21a>
 8004f16:	2309      	movs	r3, #9
 8004f18:	e012      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f1a:	230a      	movs	r3, #10
 8004f1c:	e010      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	e00e      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f22:	2307      	movs	r3, #7
 8004f24:	e00c      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f26:	2306      	movs	r3, #6
 8004f28:	e00a      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f2a:	2305      	movs	r3, #5
 8004f2c:	e008      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f2e:	2304      	movs	r3, #4
 8004f30:	e006      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f32:	2303      	movs	r3, #3
 8004f34:	e004      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e002      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_GPIO_Init+0x240>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	f002 0203 	and.w	r2, r2, #3
 8004f46:	0092      	lsls	r2, r2, #2
 8004f48:	4093      	lsls	r3, r2
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f50:	4935      	ldr	r1, [pc, #212]	; (8005028 <HAL_GPIO_Init+0x328>)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	3302      	adds	r3, #2
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f5e:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <HAL_GPIO_Init+0x354>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f82:	4a34      	ldr	r2, [pc, #208]	; (8005054 <HAL_GPIO_Init+0x354>)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f88:	4b32      	ldr	r3, [pc, #200]	; (8005054 <HAL_GPIO_Init+0x354>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fac:	4a29      	ldr	r2, [pc, #164]	; (8005054 <HAL_GPIO_Init+0x354>)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fb2:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_GPIO_Init+0x354>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <HAL_GPIO_Init+0x354>)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_GPIO_Init+0x354>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005000:	4a14      	ldr	r2, [pc, #80]	; (8005054 <HAL_GPIO_Init+0x354>)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3301      	adds	r3, #1
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	f67f ae84 	bls.w	8004d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3724      	adds	r7, #36	; 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	40013800 	.word	0x40013800
 800502c:	40020000 	.word	0x40020000
 8005030:	40020400 	.word	0x40020400
 8005034:	40020800 	.word	0x40020800
 8005038:	40020c00 	.word	0x40020c00
 800503c:	40021000 	.word	0x40021000
 8005040:	40021400 	.word	0x40021400
 8005044:	40021800 	.word	0x40021800
 8005048:	40021c00 	.word	0x40021c00
 800504c:	40022000 	.word	0x40022000
 8005050:	40022400 	.word	0x40022400
 8005054:	40013c00 	.word	0x40013c00

08005058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e001      	b.n	800507a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
 8005094:	4613      	mov	r3, r2
 8005096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005098:	787b      	ldrb	r3, [r7, #1]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050a4:	e003      	b.n	80050ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	041a      	lsls	r2, r3, #16
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	619a      	str	r2, [r3, #24]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050cc:	887a      	ldrh	r2, [r7, #2]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4013      	ands	r3, r2
 80050d2:	041a      	lsls	r2, r3, #16
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	43d9      	mvns	r1, r3
 80050d8:	887b      	ldrh	r3, [r7, #2]
 80050da:	400b      	ands	r3, r1
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	619a      	str	r2, [r3, #24]
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d006      	beq.n	8005114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005106:	4a05      	ldr	r2, [pc, #20]	; (800511c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fc fe24 	bl	8001d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40013c00 	.word	0x40013c00

08005120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e12b      	b.n	800538a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fb ff44 	bl	8000fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005184:	f001 fb4e 	bl	8006824 <HAL_RCC_GetPCLK1Freq>
 8005188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4a81      	ldr	r2, [pc, #516]	; (8005394 <HAL_I2C_Init+0x274>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d807      	bhi.n	80051a4 <HAL_I2C_Init+0x84>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a80      	ldr	r2, [pc, #512]	; (8005398 <HAL_I2C_Init+0x278>)
 8005198:	4293      	cmp	r3, r2
 800519a:	bf94      	ite	ls
 800519c:	2301      	movls	r3, #1
 800519e:	2300      	movhi	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e006      	b.n	80051b2 <HAL_I2C_Init+0x92>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a7d      	ldr	r2, [pc, #500]	; (800539c <HAL_I2C_Init+0x27c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	bf94      	ite	ls
 80051ac:	2301      	movls	r3, #1
 80051ae:	2300      	movhi	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e0e7      	b.n	800538a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a78      	ldr	r2, [pc, #480]	; (80053a0 <HAL_I2C_Init+0x280>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	0c9b      	lsrs	r3, r3, #18
 80051c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a6a      	ldr	r2, [pc, #424]	; (8005394 <HAL_I2C_Init+0x274>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d802      	bhi.n	80051f4 <HAL_I2C_Init+0xd4>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	3301      	adds	r3, #1
 80051f2:	e009      	b.n	8005208 <HAL_I2C_Init+0xe8>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	4a69      	ldr	r2, [pc, #420]	; (80053a4 <HAL_I2C_Init+0x284>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	3301      	adds	r3, #1
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	430b      	orrs	r3, r1
 800520e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800521a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	495c      	ldr	r1, [pc, #368]	; (8005394 <HAL_I2C_Init+0x274>)
 8005224:	428b      	cmp	r3, r1
 8005226:	d819      	bhi.n	800525c <HAL_I2C_Init+0x13c>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1e59      	subs	r1, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	fbb1 f3f3 	udiv	r3, r1, r3
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	f640 73fc 	movw	r3, #4092	; 0xffc
 800523c:	400b      	ands	r3, r1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_I2C_Init+0x138>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1e59      	subs	r1, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005250:	3301      	adds	r3, #1
 8005252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005256:	e051      	b.n	80052fc <HAL_I2C_Init+0x1dc>
 8005258:	2304      	movs	r3, #4
 800525a:	e04f      	b.n	80052fc <HAL_I2C_Init+0x1dc>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d111      	bne.n	8005288 <HAL_I2C_Init+0x168>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1e58      	subs	r0, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	440b      	add	r3, r1
 8005272:	fbb0 f3f3 	udiv	r3, r0, r3
 8005276:	3301      	adds	r3, #1
 8005278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e012      	b.n	80052ae <HAL_I2C_Init+0x18e>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1e58      	subs	r0, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	0099      	lsls	r1, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	fbb0 f3f3 	udiv	r3, r0, r3
 800529e:	3301      	adds	r3, #1
 80052a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Init+0x196>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e022      	b.n	80052fc <HAL_I2C_Init+0x1dc>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10e      	bne.n	80052dc <HAL_I2C_Init+0x1bc>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1e58      	subs	r0, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	460b      	mov	r3, r1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	440b      	add	r3, r1
 80052cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d0:	3301      	adds	r3, #1
 80052d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052da:	e00f      	b.n	80052fc <HAL_I2C_Init+0x1dc>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1e58      	subs	r0, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6859      	ldr	r1, [r3, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	0099      	lsls	r1, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80052f2:	3301      	adds	r3, #1
 80052f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	6809      	ldr	r1, [r1, #0]
 8005300:	4313      	orrs	r3, r2
 8005302:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69da      	ldr	r2, [r3, #28]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800532a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6911      	ldr	r1, [r2, #16]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68d2      	ldr	r2, [r2, #12]
 8005336:	4311      	orrs	r1, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	430b      	orrs	r3, r1
 800533e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	000186a0 	.word	0x000186a0
 8005398:	001e847f 	.word	0x001e847f
 800539c:	003d08ff 	.word	0x003d08ff
 80053a0:	431bde83 	.word	0x431bde83
 80053a4:	10624dd3 	.word	0x10624dd3

080053a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	461a      	mov	r2, r3
 80053b4:	460b      	mov	r3, r1
 80053b6:	817b      	strh	r3, [r7, #10]
 80053b8:	4613      	mov	r3, r2
 80053ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053bc:	f7fd fbe8 	bl	8002b90 <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	f040 80e0 	bne.w	8005590 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	2319      	movs	r3, #25
 80053d6:	2201      	movs	r2, #1
 80053d8:	4970      	ldr	r1, [pc, #448]	; (800559c <HAL_I2C_Master_Transmit+0x1f4>)
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fa92 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053e6:	2302      	movs	r3, #2
 80053e8:	e0d3      	b.n	8005592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_I2C_Master_Transmit+0x50>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e0cc      	b.n	8005592 <HAL_I2C_Master_Transmit+0x1ea>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b01      	cmp	r3, #1
 800540c:	d007      	beq.n	800541e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0201 	orr.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2221      	movs	r2, #33	; 0x21
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2210      	movs	r2, #16
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	893a      	ldrh	r2, [r7, #8]
 800544e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a50      	ldr	r2, [pc, #320]	; (80055a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800545e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005460:	8979      	ldrh	r1, [r7, #10]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	6a3a      	ldr	r2, [r7, #32]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f9ca 	bl	8005800 <I2C_MasterRequestWrite>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e08d      	b.n	8005592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800548c:	e066      	b.n	800555c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	6a39      	ldr	r1, [r7, #32]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fb0c 	bl	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d107      	bne.n	80054b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e06b      	b.n	8005592 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d11b      	bne.n	8005530 <HAL_I2C_Master_Transmit+0x188>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d017      	beq.n	8005530 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	6a39      	ldr	r1, [r7, #32]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fafc 	bl	8005b32 <I2C_WaitOnBTFFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2b04      	cmp	r3, #4
 8005546:	d107      	bne.n	8005558 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005556:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e01a      	b.n	8005592 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d194      	bne.n	800548e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e000      	b.n	8005592 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005590:	2302      	movs	r3, #2
  }
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	00100002 	.word	0x00100002
 80055a0:	ffff0000 	.word	0xffff0000

080055a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	460b      	mov	r3, r1
 80055b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80055b4:	f7fd faec 	bl	8002b90 <HAL_GetTick>
 80055b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	f040 8111 	bne.w	80057ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2319      	movs	r3, #25
 80055d2:	2201      	movs	r2, #1
 80055d4:	4988      	ldr	r1, [pc, #544]	; (80057f8 <HAL_I2C_IsDeviceReady+0x254>)
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f994 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80055e2:	2302      	movs	r3, #2
 80055e4:	e104      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_I2C_IsDeviceReady+0x50>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e0fd      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d007      	beq.n	800561a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005628:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2224      	movs	r2, #36	; 0x24
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a70      	ldr	r2, [pc, #448]	; (80057fc <HAL_I2C_IsDeviceReady+0x258>)
 800563c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800564c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2200      	movs	r2, #0
 8005656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f952 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00d      	beq.n	8005682 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005674:	d103      	bne.n	800567e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0b6      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005690:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005692:	f7fd fa7d 	bl	8002b90 <HAL_GetTick>
 8005696:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056c6:	e025      	b.n	8005714 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fd fa62 	bl	8002b90 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <HAL_I2C_IsDeviceReady+0x13a>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	22a0      	movs	r2, #160	; 0xa0
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2ba0      	cmp	r3, #160	; 0xa0
 800571e:	d005      	beq.n	800572c <HAL_I2C_IsDeviceReady+0x188>
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <HAL_I2C_IsDeviceReady+0x188>
 8005726:	7dbb      	ldrb	r3, [r7, #22]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0cd      	beq.n	80056c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b02      	cmp	r3, #2
 8005740:	d129      	bne.n	8005796 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005750:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	2319      	movs	r3, #25
 800576e:	2201      	movs	r2, #1
 8005770:	4921      	ldr	r1, [pc, #132]	; (80057f8 <HAL_I2C_IsDeviceReady+0x254>)
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f8c6 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e036      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	e02c      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2319      	movs	r3, #25
 80057b6:	2201      	movs	r2, #1
 80057b8:	490f      	ldr	r1, [pc, #60]	; (80057f8 <HAL_I2C_IsDeviceReady+0x254>)
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f8a2 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e012      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	3301      	adds	r3, #1
 80057ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	f4ff af32 	bcc.w	800563e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	00100002 	.word	0x00100002
 80057fc:	ffff0000 	.word	0xffff0000

08005800 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	460b      	mov	r3, r1
 800580e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d006      	beq.n	800582a <I2C_MasterRequestWrite+0x2a>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d003      	beq.n	800582a <I2C_MasterRequestWrite+0x2a>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005828:	d108      	bne.n	800583c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e00b      	b.n	8005854 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	2b12      	cmp	r3, #18
 8005842:	d107      	bne.n	8005854 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005852:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f84f 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00d      	beq.n	8005888 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800587a:	d103      	bne.n	8005884 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005882:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e035      	b.n	80058f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005890:	d108      	bne.n	80058a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005892:	897b      	ldrh	r3, [r7, #10]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a0:	611a      	str	r2, [r3, #16]
 80058a2:	e01b      	b.n	80058dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058a4:	897b      	ldrh	r3, [r7, #10]
 80058a6:	11db      	asrs	r3, r3, #7
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 0306 	and.w	r3, r3, #6
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f063 030f 	orn	r3, r3, #15
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	490e      	ldr	r1, [pc, #56]	; (80058fc <I2C_MasterRequestWrite+0xfc>)
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f875 	bl	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e010      	b.n	80058f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058d2:	897b      	ldrh	r3, [r7, #10]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4907      	ldr	r1, [pc, #28]	; (8005900 <I2C_MasterRequestWrite+0x100>)
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f865 	bl	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	00010008 	.word	0x00010008
 8005900:	00010002 	.word	0x00010002

08005904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005914:	e025      	b.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d021      	beq.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fd f937 	bl	8002b90 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d116      	bne.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e023      	b.n	80059aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10d      	bne.n	8005988 <I2C_WaitOnFlagUntilTimeout+0x84>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	43da      	mvns	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	e00c      	b.n	80059a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	43da      	mvns	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d0b6      	beq.n	8005916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059c0:	e051      	b.n	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d0:	d123      	bne.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f043 0204 	orr.w	r2, r3, #4
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e046      	b.n	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d021      	beq.n	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fd f8b5 	bl	8002b90 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d116      	bne.n	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e020      	b.n	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0c1b      	lsrs	r3, r3, #16
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d10c      	bne.n	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	43da      	mvns	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	e00b      	b.n	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	43da      	mvns	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	4013      	ands	r3, r2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d18d      	bne.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005abc:	e02d      	b.n	8005b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f878 	bl	8005bb4 <I2C_IsAcknowledgeFailed>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e02d      	b.n	8005b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d021      	beq.n	8005b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7fd f85b 	bl	8002b90 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d116      	bne.n	8005b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e007      	b.n	8005b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d1ca      	bne.n	8005abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b3e:	e02d      	b.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f837 	bl	8005bb4 <I2C_IsAcknowledgeFailed>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e02d      	b.n	8005bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d021      	beq.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f7fd f81a 	bl	8002b90 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d116      	bne.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e007      	b.n	8005bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d1ca      	bne.n	8005b40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bca:	d11b      	bne.n	8005c04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	f043 0204 	orr.w	r2, r3, #4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d129      	bne.n	8005c7c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	; 0x24
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0210 	bic.w	r2, r2, #16
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d12a      	bne.n	8005cfa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2224      	movs	r2, #36	; 0x24
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005cc4:	89fb      	ldrh	r3, [r7, #14]
 8005cc6:	f023 030f 	bic.w	r3, r3, #15
 8005cca:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	89fb      	ldrh	r3, [r7, #14]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	89fa      	ldrh	r2, [r7, #14]
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005cfa:	2302      	movs	r3, #2
  }
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0a:	b08f      	sub	sp, #60	; 0x3c
 8005d0c:	af0a      	add	r7, sp, #40	; 0x28
 8005d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e10f      	b.n	8005f3a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fc fe41 	bl	80029bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f003 fc8a 	bl	8009672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	687e      	ldr	r6, [r7, #4]
 8005d66:	466d      	mov	r5, sp
 8005d68:	f106 0410 	add.w	r4, r6, #16
 8005d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d78:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d7c:	1d33      	adds	r3, r6, #4
 8005d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d80:	6838      	ldr	r0, [r7, #0]
 8005d82:	f003 fc15 	bl	80095b0 <USB_CoreInit>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0d0      	b.n	8005f3a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f003 fc78 	bl	8009694 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e04a      	b.n	8005e40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005daa:	7bfa      	ldrb	r2, [r7, #15]
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	333d      	adds	r3, #61	; 0x3d
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005dbe:	7bfa      	ldrb	r2, [r7, #15]
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	333c      	adds	r3, #60	; 0x3c
 8005dce:	7bfa      	ldrb	r2, [r7, #15]
 8005dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005dd2:	7bfa      	ldrb	r2, [r7, #15]
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	b298      	uxth	r0, r3
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3344      	adds	r3, #68	; 0x44
 8005de6:	4602      	mov	r2, r0
 8005de8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005dea:	7bfa      	ldrb	r2, [r7, #15]
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	4613      	mov	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	3340      	adds	r3, #64	; 0x40
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005dfe:	7bfa      	ldrb	r2, [r7, #15]
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	3348      	adds	r3, #72	; 0x48
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e12:	7bfa      	ldrb	r2, [r7, #15]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	334c      	adds	r3, #76	; 0x4c
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e26:	7bfa      	ldrb	r2, [r7, #15]
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	3354      	adds	r3, #84	; 0x54
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
 8005e40:	7bfa      	ldrb	r2, [r7, #15]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d3af      	bcc.n	8005daa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
 8005e4e:	e044      	b.n	8005eda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e50:	7bfa      	ldrb	r2, [r7, #15]
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	4613      	mov	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e66:	7bfa      	ldrb	r2, [r7, #15]
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005e78:	7bfa      	ldrb	r2, [r7, #15]
 8005e7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e7c:	7bfa      	ldrb	r2, [r7, #15]
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	4613      	mov	r3, r2
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e92:	7bfa      	ldrb	r2, [r7, #15]
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ea8:	7bfa      	ldrb	r2, [r7, #15]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ebe:	7bfa      	ldrb	r2, [r7, #15]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
 8005eda:	7bfa      	ldrb	r2, [r7, #15]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d3b5      	bcc.n	8005e50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	687e      	ldr	r6, [r7, #4]
 8005eec:	466d      	mov	r5, sp
 8005eee:	f106 0410 	add.w	r4, r6, #16
 8005ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005efa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005efe:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f02:	1d33      	adds	r3, r6, #4
 8005f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f06:	6838      	ldr	r0, [r7, #0]
 8005f08:	f003 fc10 	bl	800972c <USB_DevInit>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e00d      	b.n	8005f3a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f003 fddb 	bl	8009aee <USB_DevDisconnect>

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e267      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d075      	beq.n	800604e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f62:	4b88      	ldr	r3, [pc, #544]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d00c      	beq.n	8005f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f6e:	4b85      	ldr	r3, [pc, #532]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d112      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f7a:	4b82      	ldr	r3, [pc, #520]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f86:	d10b      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f88:	4b7e      	ldr	r3, [pc, #504]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d05b      	beq.n	800604c <HAL_RCC_OscConfig+0x108>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d157      	bne.n	800604c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e242      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x74>
 8005faa:	4b76      	ldr	r3, [pc, #472]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a75      	ldr	r2, [pc, #468]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e01d      	b.n	8005ff4 <HAL_RCC_OscConfig+0xb0>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCC_OscConfig+0x98>
 8005fc2:	4b70      	ldr	r3, [pc, #448]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a6f      	ldr	r2, [pc, #444]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b6d      	ldr	r3, [pc, #436]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a6c      	ldr	r2, [pc, #432]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e00b      	b.n	8005ff4 <HAL_RCC_OscConfig+0xb0>
 8005fdc:	4b69      	ldr	r3, [pc, #420]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a68      	ldr	r2, [pc, #416]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	4b66      	ldr	r3, [pc, #408]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a65      	ldr	r2, [pc, #404]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d013      	beq.n	8006024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffc:	f7fc fdc8 	bl	8002b90 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006004:	f7fc fdc4 	bl	8002b90 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e207      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	4b5b      	ldr	r3, [pc, #364]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0xc0>
 8006022:	e014      	b.n	800604e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006024:	f7fc fdb4 	bl	8002b90 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800602c:	f7fc fdb0 	bl	8002b90 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e1f3      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603e:	4b51      	ldr	r3, [pc, #324]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0xe8>
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d063      	beq.n	8006122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800605a:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006066:	4b47      	ldr	r3, [pc, #284]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800606e:	2b08      	cmp	r3, #8
 8006070:	d11c      	bne.n	80060ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006072:	4b44      	ldr	r3, [pc, #272]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d116      	bne.n	80060ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607e:	4b41      	ldr	r3, [pc, #260]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_RCC_OscConfig+0x152>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d001      	beq.n	8006096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e1c7      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006096:	4b3b      	ldr	r3, [pc, #236]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4937      	ldr	r1, [pc, #220]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	e03a      	b.n	8006122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d020      	beq.n	80060f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b4:	4b34      	ldr	r3, [pc, #208]	; (8006188 <HAL_RCC_OscConfig+0x244>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ba:	f7fc fd69 	bl	8002b90 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c2:	f7fc fd65 	bl	8002b90 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e1a8      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e0:	4b28      	ldr	r3, [pc, #160]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4925      	ldr	r1, [pc, #148]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	e015      	b.n	8006122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f6:	4b24      	ldr	r3, [pc, #144]	; (8006188 <HAL_RCC_OscConfig+0x244>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fc:	f7fc fd48 	bl	8002b90 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006104:	f7fc fd44 	bl	8002b90 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e187      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006116:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d036      	beq.n	800619c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d016      	beq.n	8006164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006136:	4b15      	ldr	r3, [pc, #84]	; (800618c <HAL_RCC_OscConfig+0x248>)
 8006138:	2201      	movs	r2, #1
 800613a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613c:	f7fc fd28 	bl	8002b90 <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006144:	f7fc fd24 	bl	8002b90 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e167      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0f0      	beq.n	8006144 <HAL_RCC_OscConfig+0x200>
 8006162:	e01b      	b.n	800619c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006164:	4b09      	ldr	r3, [pc, #36]	; (800618c <HAL_RCC_OscConfig+0x248>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800616a:	f7fc fd11 	bl	8002b90 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006170:	e00e      	b.n	8006190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006172:	f7fc fd0d 	bl	8002b90 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d907      	bls.n	8006190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e150      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
 8006184:	40023800 	.word	0x40023800
 8006188:	42470000 	.word	0x42470000
 800618c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006190:	4b88      	ldr	r3, [pc, #544]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1ea      	bne.n	8006172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8097 	beq.w	80062d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ae:	4b81      	ldr	r3, [pc, #516]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10f      	bne.n	80061da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	4b7d      	ldr	r3, [pc, #500]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	4a7c      	ldr	r2, [pc, #496]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80061c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ca:	4b7a      	ldr	r3, [pc, #488]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061da:	4b77      	ldr	r3, [pc, #476]	; (80063b8 <HAL_RCC_OscConfig+0x474>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d118      	bne.n	8006218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061e6:	4b74      	ldr	r3, [pc, #464]	; (80063b8 <HAL_RCC_OscConfig+0x474>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a73      	ldr	r2, [pc, #460]	; (80063b8 <HAL_RCC_OscConfig+0x474>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f2:	f7fc fccd 	bl	8002b90 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fa:	f7fc fcc9 	bl	8002b90 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e10c      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620c:	4b6a      	ldr	r3, [pc, #424]	; (80063b8 <HAL_RCC_OscConfig+0x474>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d106      	bne.n	800622e <HAL_RCC_OscConfig+0x2ea>
 8006220:	4b64      	ldr	r3, [pc, #400]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	4a63      	ldr	r2, [pc, #396]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	6713      	str	r3, [r2, #112]	; 0x70
 800622c:	e01c      	b.n	8006268 <HAL_RCC_OscConfig+0x324>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b05      	cmp	r3, #5
 8006234:	d10c      	bne.n	8006250 <HAL_RCC_OscConfig+0x30c>
 8006236:	4b5f      	ldr	r3, [pc, #380]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a5e      	ldr	r2, [pc, #376]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 800623c:	f043 0304 	orr.w	r3, r3, #4
 8006240:	6713      	str	r3, [r2, #112]	; 0x70
 8006242:	4b5c      	ldr	r3, [pc, #368]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a5b      	ldr	r2, [pc, #364]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	6713      	str	r3, [r2, #112]	; 0x70
 800624e:	e00b      	b.n	8006268 <HAL_RCC_OscConfig+0x324>
 8006250:	4b58      	ldr	r3, [pc, #352]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	4a57      	ldr	r2, [pc, #348]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	6713      	str	r3, [r2, #112]	; 0x70
 800625c:	4b55      	ldr	r3, [pc, #340]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4a54      	ldr	r2, [pc, #336]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006262:	f023 0304 	bic.w	r3, r3, #4
 8006266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d015      	beq.n	800629c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fc fc8e 	bl	8002b90 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006276:	e00a      	b.n	800628e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006278:	f7fc fc8a 	bl	8002b90 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0cb      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628e:	4b49      	ldr	r3, [pc, #292]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0ee      	beq.n	8006278 <HAL_RCC_OscConfig+0x334>
 800629a:	e014      	b.n	80062c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800629c:	f7fc fc78 	bl	8002b90 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fc fc74 	bl	8002b90 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0b5      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ba:	4b3e      	ldr	r3, [pc, #248]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1ee      	bne.n	80062a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d105      	bne.n	80062d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062cc:	4b39      	ldr	r3, [pc, #228]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	4a38      	ldr	r2, [pc, #224]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80062d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80a1 	beq.w	8006424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062e2:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d05c      	beq.n	80063a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d141      	bne.n	800637a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f6:	4b31      	ldr	r3, [pc, #196]	; (80063bc <HAL_RCC_OscConfig+0x478>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fc fc48 	bl	8002b90 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006304:	f7fc fc44 	bl	8002b90 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e087      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006316:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	019b      	lsls	r3, r3, #6
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	3b01      	subs	r3, #1
 800633c:	041b      	lsls	r3, r3, #16
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	061b      	lsls	r3, r3, #24
 8006346:	491b      	ldr	r1, [pc, #108]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006348:	4313      	orrs	r3, r2
 800634a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_RCC_OscConfig+0x478>)
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006352:	f7fc fc1d 	bl	8002b90 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635a:	f7fc fc19 	bl	8002b90 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e05c      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800636c:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0x416>
 8006378:	e054      	b.n	8006424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <HAL_RCC_OscConfig+0x478>)
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006380:	f7fc fc06 	bl	8002b90 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006388:	f7fc fc02 	bl	8002b90 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e045      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x444>
 80063a6:	e03d      	b.n	8006424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e038      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40007000 	.word	0x40007000
 80063bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063c0:	4b1b      	ldr	r3, [pc, #108]	; (8006430 <HAL_RCC_OscConfig+0x4ec>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d028      	beq.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d8:	429a      	cmp	r2, r3
 80063da:	d121      	bne.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d11a      	bne.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d111      	bne.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	3b01      	subs	r3, #1
 800640a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800640c:	429a      	cmp	r2, r3
 800640e:	d107      	bne.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d001      	beq.n	8006424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40023800 	.word	0x40023800

08006434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0cc      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006448:	4b68      	ldr	r3, [pc, #416]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d90c      	bls.n	8006470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b65      	ldr	r3, [pc, #404]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b63      	ldr	r3, [pc, #396]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0b8      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d020      	beq.n	80064be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006488:	4b59      	ldr	r3, [pc, #356]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	4a58      	ldr	r2, [pc, #352]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064a0:	4b53      	ldr	r3, [pc, #332]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a52      	ldr	r2, [pc, #328]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ac:	4b50      	ldr	r3, [pc, #320]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	494d      	ldr	r1, [pc, #308]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d044      	beq.n	8006554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d107      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	4b47      	ldr	r3, [pc, #284]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d119      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e07f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d003      	beq.n	80064f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d107      	bne.n	8006502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f2:	4b3f      	ldr	r3, [pc, #252]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e06f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006502:	4b3b      	ldr	r3, [pc, #236]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e067      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006512:	4b37      	ldr	r3, [pc, #220]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f023 0203 	bic.w	r2, r3, #3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	4934      	ldr	r1, [pc, #208]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	4313      	orrs	r3, r2
 8006522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006524:	f7fc fb34 	bl	8002b90 <HAL_GetTick>
 8006528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652a:	e00a      	b.n	8006542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800652c:	f7fc fb30 	bl	8002b90 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f241 3288 	movw	r2, #5000	; 0x1388
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e04f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006542:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 020c 	and.w	r2, r3, #12
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	429a      	cmp	r2, r3
 8006552:	d1eb      	bne.n	800652c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006554:	4b25      	ldr	r3, [pc, #148]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d20c      	bcs.n	800657c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006562:	4b22      	ldr	r3, [pc, #136]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656a:	4b20      	ldr	r3, [pc, #128]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e032      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006588:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4916      	ldr	r1, [pc, #88]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065a6:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	490e      	ldr	r1, [pc, #56]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ba:	f000 f821 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 80065be:	4602      	mov	r2, r0
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	490a      	ldr	r1, [pc, #40]	; (80065f4 <HAL_RCC_ClockConfig+0x1c0>)
 80065cc:	5ccb      	ldrb	r3, [r1, r3]
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <HAL_RCC_ClockConfig+0x1c4>)
 80065d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <HAL_RCC_ClockConfig+0x1c8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fc fa94 	bl	8002b08 <HAL_InitTick>

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40023c00 	.word	0x40023c00
 80065f0:	40023800 	.word	0x40023800
 80065f4:	0800b4bc 	.word	0x0800b4bc
 80065f8:	20000010 	.word	0x20000010
 80065fc:	20000014 	.word	0x20000014

08006600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006604:	b094      	sub	sp, #80	; 0x50
 8006606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	647b      	str	r3, [r7, #68]	; 0x44
 800660c:	2300      	movs	r3, #0
 800660e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006610:	2300      	movs	r3, #0
 8006612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006618:	4b79      	ldr	r3, [pc, #484]	; (8006800 <HAL_RCC_GetSysClockFreq+0x200>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 030c 	and.w	r3, r3, #12
 8006620:	2b08      	cmp	r3, #8
 8006622:	d00d      	beq.n	8006640 <HAL_RCC_GetSysClockFreq+0x40>
 8006624:	2b08      	cmp	r3, #8
 8006626:	f200 80e1 	bhi.w	80067ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_RCC_GetSysClockFreq+0x34>
 800662e:	2b04      	cmp	r3, #4
 8006630:	d003      	beq.n	800663a <HAL_RCC_GetSysClockFreq+0x3a>
 8006632:	e0db      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006634:	4b73      	ldr	r3, [pc, #460]	; (8006804 <HAL_RCC_GetSysClockFreq+0x204>)
 8006636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006638:	e0db      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800663a:	4b73      	ldr	r3, [pc, #460]	; (8006808 <HAL_RCC_GetSysClockFreq+0x208>)
 800663c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800663e:	e0d8      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006640:	4b6f      	ldr	r3, [pc, #444]	; (8006800 <HAL_RCC_GetSysClockFreq+0x200>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800664a:	4b6d      	ldr	r3, [pc, #436]	; (8006800 <HAL_RCC_GetSysClockFreq+0x200>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d063      	beq.n	800671e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006656:	4b6a      	ldr	r3, [pc, #424]	; (8006800 <HAL_RCC_GetSysClockFreq+0x200>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	099b      	lsrs	r3, r3, #6
 800665c:	2200      	movs	r2, #0
 800665e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006668:	633b      	str	r3, [r7, #48]	; 0x30
 800666a:	2300      	movs	r3, #0
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
 800666e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	f04f 0000 	mov.w	r0, #0
 800667a:	f04f 0100 	mov.w	r1, #0
 800667e:	0159      	lsls	r1, r3, #5
 8006680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006684:	0150      	lsls	r0, r2, #5
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4621      	mov	r1, r4
 800668c:	1a51      	subs	r1, r2, r1
 800668e:	6139      	str	r1, [r7, #16]
 8006690:	4629      	mov	r1, r5
 8006692:	eb63 0301 	sbc.w	r3, r3, r1
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066a4:	4659      	mov	r1, fp
 80066a6:	018b      	lsls	r3, r1, #6
 80066a8:	4651      	mov	r1, sl
 80066aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066ae:	4651      	mov	r1, sl
 80066b0:	018a      	lsls	r2, r1, #6
 80066b2:	4651      	mov	r1, sl
 80066b4:	ebb2 0801 	subs.w	r8, r2, r1
 80066b8:	4659      	mov	r1, fp
 80066ba:	eb63 0901 	sbc.w	r9, r3, r1
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066d2:	4690      	mov	r8, r2
 80066d4:	4699      	mov	r9, r3
 80066d6:	4623      	mov	r3, r4
 80066d8:	eb18 0303 	adds.w	r3, r8, r3
 80066dc:	60bb      	str	r3, [r7, #8]
 80066de:	462b      	mov	r3, r5
 80066e0:	eb49 0303 	adc.w	r3, r9, r3
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066f2:	4629      	mov	r1, r5
 80066f4:	024b      	lsls	r3, r1, #9
 80066f6:	4621      	mov	r1, r4
 80066f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066fc:	4621      	mov	r1, r4
 80066fe:	024a      	lsls	r2, r1, #9
 8006700:	4610      	mov	r0, r2
 8006702:	4619      	mov	r1, r3
 8006704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006706:	2200      	movs	r2, #0
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
 800670a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800670c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006710:	f7f9 fdc6 	bl	80002a0 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4613      	mov	r3, r2
 800671a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671c:	e058      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800671e:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_RCC_GetSysClockFreq+0x200>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	099b      	lsrs	r3, r3, #6
 8006724:	2200      	movs	r2, #0
 8006726:	4618      	mov	r0, r3
 8006728:	4611      	mov	r1, r2
 800672a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800672e:	623b      	str	r3, [r7, #32]
 8006730:	2300      	movs	r3, #0
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
 8006734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006738:	4642      	mov	r2, r8
 800673a:	464b      	mov	r3, r9
 800673c:	f04f 0000 	mov.w	r0, #0
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	0159      	lsls	r1, r3, #5
 8006746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800674a:	0150      	lsls	r0, r2, #5
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4641      	mov	r1, r8
 8006752:	ebb2 0a01 	subs.w	sl, r2, r1
 8006756:	4649      	mov	r1, r9
 8006758:	eb63 0b01 	sbc.w	fp, r3, r1
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800676c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006770:	ebb2 040a 	subs.w	r4, r2, sl
 8006774:	eb63 050b 	sbc.w	r5, r3, fp
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	00eb      	lsls	r3, r5, #3
 8006782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006786:	00e2      	lsls	r2, r4, #3
 8006788:	4614      	mov	r4, r2
 800678a:	461d      	mov	r5, r3
 800678c:	4643      	mov	r3, r8
 800678e:	18e3      	adds	r3, r4, r3
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	464b      	mov	r3, r9
 8006794:	eb45 0303 	adc.w	r3, r5, r3
 8006798:	607b      	str	r3, [r7, #4]
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067a6:	4629      	mov	r1, r5
 80067a8:	028b      	lsls	r3, r1, #10
 80067aa:	4621      	mov	r1, r4
 80067ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067b0:	4621      	mov	r1, r4
 80067b2:	028a      	lsls	r2, r1, #10
 80067b4:	4610      	mov	r0, r2
 80067b6:	4619      	mov	r1, r3
 80067b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ba:	2200      	movs	r2, #0
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	61fa      	str	r2, [r7, #28]
 80067c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067c4:	f7f9 fd6c 	bl	80002a0 <__aeabi_uldivmod>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4613      	mov	r3, r2
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_GetSysClockFreq+0x200>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	3301      	adds	r3, #1
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80067e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067ea:	e002      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <HAL_RCC_GetSysClockFreq+0x204>)
 80067ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3750      	adds	r7, #80	; 0x50
 80067f8:	46bd      	mov	sp, r7
 80067fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067fe:	bf00      	nop
 8006800:	40023800 	.word	0x40023800
 8006804:	00f42400 	.word	0x00f42400
 8006808:	007a1200 	.word	0x007a1200

0800680c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006810:	4b03      	ldr	r3, [pc, #12]	; (8006820 <HAL_RCC_GetHCLKFreq+0x14>)
 8006812:	681b      	ldr	r3, [r3, #0]
}
 8006814:	4618      	mov	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000010 	.word	0x20000010

08006824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006828:	f7ff fff0 	bl	800680c <HAL_RCC_GetHCLKFreq>
 800682c:	4602      	mov	r2, r0
 800682e:	4b05      	ldr	r3, [pc, #20]	; (8006844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	0a9b      	lsrs	r3, r3, #10
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	4903      	ldr	r1, [pc, #12]	; (8006848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800683a:	5ccb      	ldrb	r3, [r1, r3]
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006840:	4618      	mov	r0, r3
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40023800 	.word	0x40023800
 8006848:	0800b4cc 	.word	0x0800b4cc

0800684c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006850:	f7ff ffdc 	bl	800680c <HAL_RCC_GetHCLKFreq>
 8006854:	4602      	mov	r2, r0
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	0b5b      	lsrs	r3, r3, #13
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	4903      	ldr	r1, [pc, #12]	; (8006870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006862:	5ccb      	ldrb	r3, [r1, r3]
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006868:	4618      	mov	r0, r3
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40023800 	.word	0x40023800
 8006870:	0800b4cc 	.word	0x0800b4cc

08006874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d075      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068a8:	4b91      	ldr	r3, [pc, #580]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ae:	f7fc f96f 	bl	8002b90 <HAL_GetTick>
 80068b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068b4:	e008      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068b6:	f7fc f96b 	bl	8002b90 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e189      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068c8:	4b8a      	ldr	r3, [pc, #552]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f0      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d009      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	019a      	lsls	r2, r3, #6
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	071b      	lsls	r3, r3, #28
 80068ec:	4981      	ldr	r1, [pc, #516]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01f      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006900:	4b7c      	ldr	r3, [pc, #496]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006906:	0f1b      	lsrs	r3, r3, #28
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	019a      	lsls	r2, r3, #6
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	061b      	lsls	r3, r3, #24
 800691a:	431a      	orrs	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	071b      	lsls	r3, r3, #28
 8006920:	4974      	ldr	r1, [pc, #464]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006928:	4b72      	ldr	r3, [pc, #456]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800692a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800692e:	f023 021f 	bic.w	r2, r3, #31
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	3b01      	subs	r3, #1
 8006938:	496e      	ldr	r1, [pc, #440]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00d      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	019a      	lsls	r2, r3, #6
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	061b      	lsls	r3, r3, #24
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	071b      	lsls	r3, r3, #28
 8006960:	4964      	ldr	r1, [pc, #400]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006968:	4b61      	ldr	r3, [pc, #388]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800696e:	f7fc f90f 	bl	8002b90 <HAL_GetTick>
 8006972:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006976:	f7fc f90b 	bl	8002b90 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e129      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006988:	4b5a      	ldr	r3, [pc, #360]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d079      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069ac:	4b52      	ldr	r3, [pc, #328]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069b2:	f7fc f8ed 	bl	8002b90 <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069b8:	e008      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80069ba:	f7fc f8e9 	bl	8002b90 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e107      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069cc:	4b49      	ldr	r3, [pc, #292]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d8:	d0ef      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d020      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80069e6:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ec:	0f1b      	lsrs	r3, r3, #28
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	019a      	lsls	r2, r3, #6
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	061b      	lsls	r3, r3, #24
 8006a00:	431a      	orrs	r2, r3
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	071b      	lsls	r3, r3, #28
 8006a06:	493b      	ldr	r1, [pc, #236]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a0e:	4b39      	ldr	r3, [pc, #228]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	4934      	ldr	r1, [pc, #208]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01e      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a34:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	0e1b      	lsrs	r3, r3, #24
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	019a      	lsls	r2, r3, #6
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	071b      	lsls	r3, r3, #28
 8006a54:	4927      	ldr	r1, [pc, #156]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006a5c:	4b25      	ldr	r3, [pc, #148]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	4922      	ldr	r1, [pc, #136]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a72:	4b21      	ldr	r3, [pc, #132]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006a74:	2201      	movs	r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a78:	f7fc f88a 	bl	8002b90 <HAL_GetTick>
 8006a7c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006a80:	f7fc f886 	bl	8002b90 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e0a4      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a92:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a9e:	d1ef      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 808b 	beq.w	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	4a0f      	ldr	r2, [pc, #60]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006abc:	6413      	str	r3, [r2, #64]	; 0x40
 8006abe:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006aca:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a0b      	ldr	r2, [pc, #44]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ad6:	f7fc f85b 	bl	8002b90 <HAL_GetTick>
 8006ada:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006adc:	e010      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ade:	f7fc f857 	bl	8002b90 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d909      	bls.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e075      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006af0:	42470068 	.word	0x42470068
 8006af4:	40023800 	.word	0x40023800
 8006af8:	42470070 	.word	0x42470070
 8006afc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b00:	4b38      	ldr	r3, [pc, #224]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0e8      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b0c:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d02f      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d028      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b2a:	4b2f      	ldr	r3, [pc, #188]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b34:	4b2d      	ldr	r3, [pc, #180]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b3a:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b40:	4a29      	ldr	r2, [pc, #164]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b46:	4b28      	ldr	r3, [pc, #160]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d114      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b52:	f7fc f81d 	bl	8002b90 <HAL_GetTick>
 8006b56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b58:	e00a      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b5a:	f7fc f819 	bl	8002b90 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e035      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b70:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ee      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b88:	d10d      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9e:	4912      	ldr	r1, [pc, #72]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	608b      	str	r3, [r1, #8]
 8006ba4:	e005      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006ba6:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4a0f      	ldr	r2, [pc, #60]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bb0:	6093      	str	r3, [r2, #8]
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bbe:	490a      	ldr	r1, [pc, #40]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006bd6:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006bd8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40007000 	.word	0x40007000
 8006be8:	40023800 	.word	0x40023800
 8006bec:	42470e40 	.word	0x42470e40
 8006bf0:	424711e0 	.word	0x424711e0

08006bf4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e066      	b.n	8006cd8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7f5b      	ldrb	r3, [r3, #29]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d105      	bne.n	8006c20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fb fab2 	bl	8002184 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	22ca      	movs	r2, #202	; 0xca
 8006c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2253      	movs	r2, #83	; 0x53
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fbce 	bl	80073d8 <RTC_EnterInitMode>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d12c      	bne.n	8006ca0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c58:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6899      	ldr	r1, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	68d2      	ldr	r2, [r2, #12]
 8006c80:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6919      	ldr	r1, [r3, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	041a      	lsls	r2, r3, #16
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fbd5 	bl	8007446 <RTC_ExitInitMode>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d113      	bne.n	8006cce <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699a      	ldr	r2, [r3, #24]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	22ff      	movs	r2, #255	; 0xff
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ce0:	b590      	push	{r4, r7, lr}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	7f1b      	ldrb	r3, [r3, #28]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_RTC_SetTime+0x1c>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e087      	b.n	8006e0c <HAL_RTC_SetTime+0x12c>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2202      	movs	r2, #2
 8006d06:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d126      	bne.n	8006d5c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fbb2 	bl	8007490 <RTC_ByteToBcd2>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fbab 	bl	8007490 <RTC_ByteToBcd2>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006d3e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	789b      	ldrb	r3, [r3, #2]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fba3 	bl	8007490 <RTC_ByteToBcd2>
 8006d4a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006d4c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	78db      	ldrb	r3, [r3, #3]
 8006d54:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e018      	b.n	8006d8e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d7c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006d82:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	78db      	ldrb	r3, [r3, #3]
 8006d88:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	22ca      	movs	r2, #202	; 0xca
 8006d94:	625a      	str	r2, [r3, #36]	; 0x24
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2253      	movs	r2, #83	; 0x53
 8006d9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fb1a 	bl	80073d8 <RTC_EnterInitMode>
 8006da4:	4603      	mov	r3, r0
 8006da6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006da8:	7cfb      	ldrb	r3, [r7, #19]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d120      	bne.n	8006df0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006db8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006dbc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dcc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6899      	ldr	r1, [r3, #8]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fb2d 	bl	8007446 <RTC_ExitInitMode>
 8006dec:	4603      	mov	r3, r0
 8006dee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006df0:	7cfb      	ldrb	r3, [r7, #19]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d102      	bne.n	8006dfc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	22ff      	movs	r2, #255	; 0xff
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	771a      	strb	r2, [r3, #28]

  return status;
 8006e0a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd90      	pop	{r4, r7, pc}

08006e14 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	0c1b      	lsrs	r3, r3, #16
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	0d9b      	lsrs	r3, r3, #22
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d11a      	bne.n	8006ec6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fb18 	bl	80074ca <RTC_Bcd2ToByte>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fb0f 	bl	80074ca <RTC_Bcd2ToByte>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	789b      	ldrb	r3, [r3, #2]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fb06 	bl	80074ca <RTC_Bcd2ToByte>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ed0:	b590      	push	{r4, r7, lr}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	7f1b      	ldrb	r3, [r3, #28]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_RTC_SetDate+0x1c>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e071      	b.n	8006fd0 <HAL_RTC_SetDate+0x100>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10e      	bne.n	8006f1c <HAL_RTC_SetDate+0x4c>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	f003 0310 	and.w	r3, r3, #16
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	785b      	ldrb	r3, [r3, #1]
 8006f0e:	f023 0310 	bic.w	r3, r3, #16
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	330a      	adds	r3, #10
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d11c      	bne.n	8006f5c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	78db      	ldrb	r3, [r3, #3]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fab2 	bl	8007490 <RTC_ByteToBcd2>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 faab 	bl	8007490 <RTC_ByteToBcd2>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006f3e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	789b      	ldrb	r3, [r3, #2]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 faa3 	bl	8007490 <RTC_ByteToBcd2>
 8006f4a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006f4c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	e00e      	b.n	8006f7a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	78db      	ldrb	r3, [r3, #3]
 8006f60:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f68:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006f6e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	22ca      	movs	r2, #202	; 0xca
 8006f80:	625a      	str	r2, [r3, #36]	; 0x24
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2253      	movs	r2, #83	; 0x53
 8006f88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 fa24 	bl	80073d8 <RTC_EnterInitMode>
 8006f90:	4603      	mov	r3, r0
 8006f92:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006f94:	7cfb      	ldrb	r3, [r7, #19]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10c      	bne.n	8006fb4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006fa4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fa8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fa4b 	bl	8007446 <RTC_ExitInitMode>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006fb4:	7cfb      	ldrb	r3, [r7, #19]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	22ff      	movs	r2, #255	; 0xff
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	771a      	strb	r2, [r3, #28]

  return status;
 8006fce:	7cfb      	ldrb	r3, [r7, #19]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd90      	pop	{r4, r7, pc}

08006fd8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ff2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	0a1b      	lsrs	r3, r3, #8
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	b2da      	uxtb	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800701a:	b2da      	uxtb	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	0b5b      	lsrs	r3, r3, #13
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	b2da      	uxtb	r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d11a      	bne.n	800706c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	78db      	ldrb	r3, [r3, #3]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fa45 	bl	80074ca <RTC_Bcd2ToByte>
 8007040:	4603      	mov	r3, r0
 8007042:	461a      	mov	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fa3c 	bl	80074ca <RTC_Bcd2ToByte>
 8007052:	4603      	mov	r3, r0
 8007054:	461a      	mov	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	789b      	ldrb	r3, [r3, #2]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fa33 	bl	80074ca <RTC_Bcd2ToByte>
 8007064:	4603      	mov	r3, r0
 8007066:	461a      	mov	r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b089      	sub	sp, #36	; 0x24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007084:	4b9a      	ldr	r3, [pc, #616]	; (80072f0 <HAL_RTC_SetAlarm_IT+0x278>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a9a      	ldr	r2, [pc, #616]	; (80072f4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800708a:	fba2 2303 	umull	r2, r3, r2, r3
 800708e:	0adb      	lsrs	r3, r3, #11
 8007090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007094:	fb02 f303 	mul.w	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	7f1b      	ldrb	r3, [r3, #28]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <HAL_RTC_SetAlarm_IT+0x36>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e11c      	b.n	80072e8 <HAL_RTC_SetAlarm_IT+0x270>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2202      	movs	r2, #2
 80070b8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d137      	bne.n	8007130 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2200      	movs	r2, #0
 80070d2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f9d9 	bl	8007490 <RTC_ByteToBcd2>
 80070de:	4603      	mov	r3, r0
 80070e0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f9d2 	bl	8007490 <RTC_ByteToBcd2>
 80070ec:	4603      	mov	r3, r0
 80070ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80070f0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	789b      	ldrb	r3, [r3, #2]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 f9ca 	bl	8007490 <RTC_ByteToBcd2>
 80070fc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	78db      	ldrb	r3, [r3, #3]
 8007106:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007108:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007112:	4618      	mov	r0, r3
 8007114:	f000 f9bc 	bl	8007490 <RTC_ByteToBcd2>
 8007118:	4603      	mov	r3, r0
 800711a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800711c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007124:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800712a:	4313      	orrs	r3, r2
 800712c:	61fb      	str	r3, [r7, #28]
 800712e:	e023      	b.n	8007178 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2200      	movs	r2, #0
 8007142:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007150:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007156:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	78db      	ldrb	r3, [r3, #3]
 800715c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800715e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007166:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007168:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800716e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007174:	4313      	orrs	r3, r2
 8007176:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007180:	4313      	orrs	r3, r2
 8007182:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	22ca      	movs	r2, #202	; 0xca
 800718a:	625a      	str	r2, [r3, #36]	; 0x24
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2253      	movs	r2, #83	; 0x53
 8007192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719c:	d141      	bne.n	8007222 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071ac:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80071be:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	1e5a      	subs	r2, r3, #1
 80071c4:	617a      	str	r2, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	22ff      	movs	r2, #255	; 0xff
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2203      	movs	r2, #3
 80071d6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e082      	b.n	80072e8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0e7      	beq.n	80071c0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800720e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800721e:	609a      	str	r2, [r3, #8]
 8007220:	e04b      	b.n	80072ba <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007230:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007242:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007244:	4b2a      	ldr	r3, [pc, #168]	; (80072f0 <HAL_RTC_SetAlarm_IT+0x278>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800724a:	fba2 2303 	umull	r2, r3, r2, r3
 800724e:	0adb      	lsrs	r3, r3, #11
 8007250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007254:	fb02 f303 	mul.w	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	1e5a      	subs	r2, r3, #1
 800725e:	617a      	str	r2, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	22ff      	movs	r2, #255	; 0xff
 800726a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2203      	movs	r2, #3
 8007270:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e035      	b.n	80072e8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0e7      	beq.n	800725a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072b8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80072ba:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a0e      	ldr	r2, [pc, #56]	; (80072f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80072c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	4a0b      	ldr	r2, [pc, #44]	; (80072f8 <HAL_RTC_SetAlarm_IT+0x280>)
 80072cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	22ff      	movs	r2, #255	; 0xff
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3724      	adds	r7, #36	; 0x24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd90      	pop	{r4, r7, pc}
 80072f0:	20000010 	.word	0x20000010
 80072f4:	10624dd3 	.word	0x10624dd3
 80072f8:	40013c00 	.word	0x40013c00

080072fc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d012      	beq.n	8007338 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00b      	beq.n	8007338 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fa fd07 	bl	8001d34 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007336:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d012      	beq.n	800736c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00b      	beq.n	800736c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f8d4 	bl	8007502 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f462 7220 	orn	r2, r2, #640	; 0x280
 800736a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RTC_AlarmIRQHandler+0x88>)
 800736e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007372:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	775a      	strb	r2, [r3, #29]
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	40013c00 	.word	0x40013c00

08007388 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073a4:	f7fb fbf4 	bl	8002b90 <HAL_GetTick>
 80073a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073aa:	e009      	b.n	80073c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073ac:	f7fb fbf0 	bl	8002b90 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ba:	d901      	bls.n	80073c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e007      	b.n	80073d0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0ee      	beq.n	80073ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d122      	bne.n	800743c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007404:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007406:	f7fb fbc3 	bl	8002b90 <HAL_GetTick>
 800740a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800740c:	e00c      	b.n	8007428 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800740e:	f7fb fbbf 	bl	8002b90 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800741c:	d904      	bls.n	8007428 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2204      	movs	r2, #4
 8007422:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007432:	2b00      	cmp	r3, #0
 8007434:	d102      	bne.n	800743c <RTC_EnterInitMode+0x64>
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d1e8      	bne.n	800740e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007460:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff89 	bl	8007388 <HAL_RTC_WaitForSynchro>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2204      	movs	r2, #4
 8007480:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800749e:	e005      	b.n	80074ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	3301      	adds	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	3b0a      	subs	r3, #10
 80074aa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d8f6      	bhi.n	80074a0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	b2db      	uxtb	r3, r3
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	4603      	mov	r3, r0
 80074d2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	0092      	lsls	r2, r2, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	4413      	add	r3, r2
 80074f4:	b2db      	uxtb	r3, r3
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e041      	b.n	80075ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7fb f8cb 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3304      	adds	r3, #4
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f000 fc13 	bl	8007d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e041      	b.n	800764a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f839 	bl	8007652 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f000 fbc4 	bl	8007d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_TIM_PWM_Start+0x24>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e022      	b.n	80076d2 <HAL_TIM_PWM_Start+0x6a>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b04      	cmp	r3, #4
 8007690:	d109      	bne.n	80076a6 <HAL_TIM_PWM_Start+0x3e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b01      	cmp	r3, #1
 800769c:	bf14      	ite	ne
 800769e:	2301      	movne	r3, #1
 80076a0:	2300      	moveq	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	e015      	b.n	80076d2 <HAL_TIM_PWM_Start+0x6a>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d109      	bne.n	80076c0 <HAL_TIM_PWM_Start+0x58>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	bf14      	ite	ne
 80076b8:	2301      	movne	r3, #1
 80076ba:	2300      	moveq	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	e008      	b.n	80076d2 <HAL_TIM_PWM_Start+0x6a>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	bf14      	ite	ne
 80076cc:	2301      	movne	r3, #1
 80076ce:	2300      	moveq	r3, #0
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e07c      	b.n	80077d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <HAL_TIM_PWM_Start+0x82>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e8:	e013      	b.n	8007712 <HAL_TIM_PWM_Start+0xaa>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_PWM_Start+0x92>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f8:	e00b      	b.n	8007712 <HAL_TIM_PWM_Start+0xaa>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start+0xa2>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007708:	e003      	b.n	8007712 <HAL_TIM_PWM_Start+0xaa>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2202      	movs	r2, #2
 800770e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2201      	movs	r2, #1
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fe1a 	bl	8008354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a2d      	ldr	r2, [pc, #180]	; (80077dc <HAL_TIM_PWM_Start+0x174>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d004      	beq.n	8007734 <HAL_TIM_PWM_Start+0xcc>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a2c      	ldr	r2, [pc, #176]	; (80077e0 <HAL_TIM_PWM_Start+0x178>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d101      	bne.n	8007738 <HAL_TIM_PWM_Start+0xd0>
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <HAL_TIM_PWM_Start+0xd2>
 8007738:	2300      	movs	r3, #0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800774c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a22      	ldr	r2, [pc, #136]	; (80077dc <HAL_TIM_PWM_Start+0x174>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d022      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007760:	d01d      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <HAL_TIM_PWM_Start+0x17c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d018      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1d      	ldr	r2, [pc, #116]	; (80077e8 <HAL_TIM_PWM_Start+0x180>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d013      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <HAL_TIM_PWM_Start+0x184>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00e      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a16      	ldr	r2, [pc, #88]	; (80077e0 <HAL_TIM_PWM_Start+0x178>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d009      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <HAL_TIM_PWM_Start+0x188>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d004      	beq.n	800779e <HAL_TIM_PWM_Start+0x136>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a16      	ldr	r2, [pc, #88]	; (80077f4 <HAL_TIM_PWM_Start+0x18c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d111      	bne.n	80077c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b06      	cmp	r3, #6
 80077ae:	d010      	beq.n	80077d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c0:	e007      	b.n	80077d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40010400 	.word	0x40010400
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40000800 	.word	0x40000800
 80077ec:	40000c00 	.word	0x40000c00
 80077f0:	40014000 	.word	0x40014000
 80077f4:	40001800 	.word	0x40001800

080077f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b02      	cmp	r3, #2
 800780c:	d122      	bne.n	8007854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d11b      	bne.n	8007854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0202 	mvn.w	r2, #2
 8007824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa81 	bl	8007d42 <HAL_TIM_IC_CaptureCallback>
 8007840:	e005      	b.n	800784e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa73 	bl	8007d2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa84 	bl	8007d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b04      	cmp	r3, #4
 8007860:	d122      	bne.n	80078a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b04      	cmp	r3, #4
 800786e:	d11b      	bne.n	80078a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0204 	mvn.w	r2, #4
 8007878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fa57 	bl	8007d42 <HAL_TIM_IC_CaptureCallback>
 8007894:	e005      	b.n	80078a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa49 	bl	8007d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fa5a 	bl	8007d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d122      	bne.n	80078fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d11b      	bne.n	80078fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0208 	mvn.w	r2, #8
 80078cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2204      	movs	r2, #4
 80078d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa2d 	bl	8007d42 <HAL_TIM_IC_CaptureCallback>
 80078e8:	e005      	b.n	80078f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa1f 	bl	8007d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fa30 	bl	8007d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b10      	cmp	r3, #16
 8007908:	d122      	bne.n	8007950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b10      	cmp	r3, #16
 8007916:	d11b      	bne.n	8007950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0210 	mvn.w	r2, #16
 8007920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2208      	movs	r2, #8
 8007926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa03 	bl	8007d42 <HAL_TIM_IC_CaptureCallback>
 800793c:	e005      	b.n	800794a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f9f5 	bl	8007d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fa06 	bl	8007d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b01      	cmp	r3, #1
 800795c:	d10e      	bne.n	800797c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b01      	cmp	r3, #1
 800796a:	d107      	bne.n	800797c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f06f 0201 	mvn.w	r2, #1
 8007974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f9cf 	bl	8007d1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b80      	cmp	r3, #128	; 0x80
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fd82 	bl	80084ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d10e      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d107      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f9cb 	bl	8007d6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d10e      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d107      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0220 	mvn.w	r2, #32
 80079f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fd4c 	bl	8008498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d101      	bne.n	8007a26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e0ae      	b.n	8007b84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b0c      	cmp	r3, #12
 8007a32:	f200 809f 	bhi.w	8007b74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a36:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a71 	.word	0x08007a71
 8007a40:	08007b75 	.word	0x08007b75
 8007a44:	08007b75 	.word	0x08007b75
 8007a48:	08007b75 	.word	0x08007b75
 8007a4c:	08007ab1 	.word	0x08007ab1
 8007a50:	08007b75 	.word	0x08007b75
 8007a54:	08007b75 	.word	0x08007b75
 8007a58:	08007b75 	.word	0x08007b75
 8007a5c:	08007af3 	.word	0x08007af3
 8007a60:	08007b75 	.word	0x08007b75
 8007a64:	08007b75 	.word	0x08007b75
 8007a68:	08007b75 	.word	0x08007b75
 8007a6c:	08007b33 	.word	0x08007b33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68b9      	ldr	r1, [r7, #8]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fa22 	bl	8007ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0208 	orr.w	r2, r2, #8
 8007a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0204 	bic.w	r2, r2, #4
 8007a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6999      	ldr	r1, [r3, #24]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	619a      	str	r2, [r3, #24]
      break;
 8007aae:	e064      	b.n	8007b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fa72 	bl	8007fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6999      	ldr	r1, [r3, #24]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	021a      	lsls	r2, r3, #8
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	619a      	str	r2, [r3, #24]
      break;
 8007af0:	e043      	b.n	8007b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fac7 	bl	800808c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0208 	orr.w	r2, r2, #8
 8007b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0204 	bic.w	r2, r2, #4
 8007b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69d9      	ldr	r1, [r3, #28]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	61da      	str	r2, [r3, #28]
      break;
 8007b30:	e023      	b.n	8007b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68b9      	ldr	r1, [r7, #8]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fb1b 	bl	8008174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69d9      	ldr	r1, [r3, #28]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	021a      	lsls	r2, r3, #8
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	61da      	str	r2, [r3, #28]
      break;
 8007b72:	e002      	b.n	8007b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
      break;
 8007b78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e0b4      	b.n	8007d12 <HAL_TIM_ConfigClockSource+0x186>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be0:	d03e      	beq.n	8007c60 <HAL_TIM_ConfigClockSource+0xd4>
 8007be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be6:	f200 8087 	bhi.w	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bee:	f000 8086 	beq.w	8007cfe <HAL_TIM_ConfigClockSource+0x172>
 8007bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf6:	d87f      	bhi.n	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bf8:	2b70      	cmp	r3, #112	; 0x70
 8007bfa:	d01a      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0xa6>
 8007bfc:	2b70      	cmp	r3, #112	; 0x70
 8007bfe:	d87b      	bhi.n	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007c00:	2b60      	cmp	r3, #96	; 0x60
 8007c02:	d050      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8007c04:	2b60      	cmp	r3, #96	; 0x60
 8007c06:	d877      	bhi.n	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007c08:	2b50      	cmp	r3, #80	; 0x50
 8007c0a:	d03c      	beq.n	8007c86 <HAL_TIM_ConfigClockSource+0xfa>
 8007c0c:	2b50      	cmp	r3, #80	; 0x50
 8007c0e:	d873      	bhi.n	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007c10:	2b40      	cmp	r3, #64	; 0x40
 8007c12:	d058      	beq.n	8007cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	d86f      	bhi.n	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007c18:	2b30      	cmp	r3, #48	; 0x30
 8007c1a:	d064      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8007c1c:	2b30      	cmp	r3, #48	; 0x30
 8007c1e:	d86b      	bhi.n	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d060      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	d867      	bhi.n	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d05c      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8007c2c:	2b10      	cmp	r3, #16
 8007c2e:	d05a      	beq.n	8007ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8007c30:	e062      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	6899      	ldr	r1, [r3, #8]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f000 fb67 	bl	8008314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	609a      	str	r2, [r3, #8]
      break;
 8007c5e:	e04f      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	6899      	ldr	r1, [r3, #8]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f000 fb50 	bl	8008314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c82:	609a      	str	r2, [r3, #8]
      break;
 8007c84:	e03c      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	6859      	ldr	r1, [r3, #4]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f000 fac4 	bl	8008220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2150      	movs	r1, #80	; 0x50
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fb1d 	bl	80082de <TIM_ITRx_SetConfig>
      break;
 8007ca4:	e02c      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6859      	ldr	r1, [r3, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f000 fae3 	bl	800827e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2160      	movs	r1, #96	; 0x60
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fb0d 	bl	80082de <TIM_ITRx_SetConfig>
      break;
 8007cc4:	e01c      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	6859      	ldr	r1, [r3, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f000 faa4 	bl	8008220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2140      	movs	r1, #64	; 0x40
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fafd 	bl	80082de <TIM_ITRx_SetConfig>
      break;
 8007ce4:	e00c      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f000 faf4 	bl	80082de <TIM_ITRx_SetConfig>
      break;
 8007cf6:	e003      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfc:	e000      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a40      	ldr	r2, [pc, #256]	; (8007e94 <TIM_Base_SetConfig+0x114>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d013      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9e:	d00f      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a3d      	ldr	r2, [pc, #244]	; (8007e98 <TIM_Base_SetConfig+0x118>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00b      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a3c      	ldr	r2, [pc, #240]	; (8007e9c <TIM_Base_SetConfig+0x11c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d007      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a3b      	ldr	r2, [pc, #236]	; (8007ea0 <TIM_Base_SetConfig+0x120>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a3a      	ldr	r2, [pc, #232]	; (8007ea4 <TIM_Base_SetConfig+0x124>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d108      	bne.n	8007dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a2f      	ldr	r2, [pc, #188]	; (8007e94 <TIM_Base_SetConfig+0x114>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d02b      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de0:	d027      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a2c      	ldr	r2, [pc, #176]	; (8007e98 <TIM_Base_SetConfig+0x118>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d023      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a2b      	ldr	r2, [pc, #172]	; (8007e9c <TIM_Base_SetConfig+0x11c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d01f      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <TIM_Base_SetConfig+0x120>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d01b      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a29      	ldr	r2, [pc, #164]	; (8007ea4 <TIM_Base_SetConfig+0x124>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d017      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a28      	ldr	r2, [pc, #160]	; (8007ea8 <TIM_Base_SetConfig+0x128>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d013      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a27      	ldr	r2, [pc, #156]	; (8007eac <TIM_Base_SetConfig+0x12c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00f      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a26      	ldr	r2, [pc, #152]	; (8007eb0 <TIM_Base_SetConfig+0x130>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00b      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a25      	ldr	r2, [pc, #148]	; (8007eb4 <TIM_Base_SetConfig+0x134>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a24      	ldr	r2, [pc, #144]	; (8007eb8 <TIM_Base_SetConfig+0x138>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <TIM_Base_SetConfig+0xb2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a23      	ldr	r2, [pc, #140]	; (8007ebc <TIM_Base_SetConfig+0x13c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d108      	bne.n	8007e44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <TIM_Base_SetConfig+0x114>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_Base_SetConfig+0xf8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a0c      	ldr	r2, [pc, #48]	; (8007ea4 <TIM_Base_SetConfig+0x124>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d103      	bne.n	8007e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	615a      	str	r2, [r3, #20]
}
 8007e86:	bf00      	nop
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40010000 	.word	0x40010000
 8007e98:	40000400 	.word	0x40000400
 8007e9c:	40000800 	.word	0x40000800
 8007ea0:	40000c00 	.word	0x40000c00
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40014400 	.word	0x40014400
 8007eb0:	40014800 	.word	0x40014800
 8007eb4:	40001800 	.word	0x40001800
 8007eb8:	40001c00 	.word	0x40001c00
 8007ebc:	40002000 	.word	0x40002000

08007ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f023 0302 	bic.w	r3, r3, #2
 8007f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a20      	ldr	r2, [pc, #128]	; (8007f98 <TIM_OC1_SetConfig+0xd8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <TIM_OC1_SetConfig+0x64>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a1f      	ldr	r2, [pc, #124]	; (8007f9c <TIM_OC1_SetConfig+0xdc>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d10c      	bne.n	8007f3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f023 0308 	bic.w	r3, r3, #8
 8007f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f023 0304 	bic.w	r3, r3, #4
 8007f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a15      	ldr	r2, [pc, #84]	; (8007f98 <TIM_OC1_SetConfig+0xd8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d003      	beq.n	8007f4e <TIM_OC1_SetConfig+0x8e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a14      	ldr	r2, [pc, #80]	; (8007f9c <TIM_OC1_SetConfig+0xdc>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d111      	bne.n	8007f72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	621a      	str	r2, [r3, #32]
}
 8007f8c:	bf00      	nop
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	40010000 	.word	0x40010000
 8007f9c:	40010400 	.word	0x40010400

08007fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	f023 0210 	bic.w	r2, r3, #16
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0320 	bic.w	r3, r3, #32
 8007fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a22      	ldr	r2, [pc, #136]	; (8008084 <TIM_OC2_SetConfig+0xe4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d003      	beq.n	8008008 <TIM_OC2_SetConfig+0x68>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a21      	ldr	r2, [pc, #132]	; (8008088 <TIM_OC2_SetConfig+0xe8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d10d      	bne.n	8008024 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800800e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008022:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a17      	ldr	r2, [pc, #92]	; (8008084 <TIM_OC2_SetConfig+0xe4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_OC2_SetConfig+0x94>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a16      	ldr	r2, [pc, #88]	; (8008088 <TIM_OC2_SetConfig+0xe8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d113      	bne.n	800805c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800803a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	621a      	str	r2, [r3, #32]
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40010000 	.word	0x40010000
 8008088:	40010400 	.word	0x40010400

0800808c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	021b      	lsls	r3, r3, #8
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	4313      	orrs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a21      	ldr	r2, [pc, #132]	; (800816c <TIM_OC3_SetConfig+0xe0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d003      	beq.n	80080f2 <TIM_OC3_SetConfig+0x66>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a20      	ldr	r2, [pc, #128]	; (8008170 <TIM_OC3_SetConfig+0xe4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d10d      	bne.n	800810e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800810c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a16      	ldr	r2, [pc, #88]	; (800816c <TIM_OC3_SetConfig+0xe0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d003      	beq.n	800811e <TIM_OC3_SetConfig+0x92>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a15      	ldr	r2, [pc, #84]	; (8008170 <TIM_OC3_SetConfig+0xe4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d113      	bne.n	8008146 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800812c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	621a      	str	r2, [r3, #32]
}
 8008160:	bf00      	nop
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	40010000 	.word	0x40010000
 8008170:	40010400 	.word	0x40010400

08008174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	031b      	lsls	r3, r3, #12
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a12      	ldr	r2, [pc, #72]	; (8008218 <TIM_OC4_SetConfig+0xa4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d003      	beq.n	80081dc <TIM_OC4_SetConfig+0x68>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a11      	ldr	r2, [pc, #68]	; (800821c <TIM_OC4_SetConfig+0xa8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d109      	bne.n	80081f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	019b      	lsls	r3, r3, #6
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	621a      	str	r2, [r3, #32]
}
 800820a:	bf00      	nop
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	40010000 	.word	0x40010000
 800821c:	40010400 	.word	0x40010400

08008220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f023 0201 	bic.w	r2, r3, #1
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800824a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f023 030a 	bic.w	r3, r3, #10
 800825c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	621a      	str	r2, [r3, #32]
}
 8008272:	bf00      	nop
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800827e:	b480      	push	{r7}
 8008280:	b087      	sub	sp, #28
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	f023 0210 	bic.w	r2, r3, #16
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	031b      	lsls	r3, r3, #12
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	621a      	str	r2, [r3, #32]
}
 80082d2:	bf00      	nop
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082de:	b480      	push	{r7}
 80082e0:	b085      	sub	sp, #20
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	f043 0307 	orr.w	r3, r3, #7
 8008300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	609a      	str	r2, [r3, #8]
}
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800832e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	021a      	lsls	r2, r3, #8
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	431a      	orrs	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4313      	orrs	r3, r2
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	609a      	str	r2, [r3, #8]
}
 8008348:	bf00      	nop
 800834a:	371c      	adds	r7, #28
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f003 031f 	and.w	r3, r3, #31
 8008366:	2201      	movs	r2, #1
 8008368:	fa02 f303 	lsl.w	r3, r2, r3
 800836c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a1a      	ldr	r2, [r3, #32]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	43db      	mvns	r3, r3
 8008376:	401a      	ands	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a1a      	ldr	r2, [r3, #32]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f003 031f 	and.w	r3, r3, #31
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	fa01 f303 	lsl.w	r3, r1, r3
 800838c:	431a      	orrs	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	621a      	str	r2, [r3, #32]
}
 8008392:	bf00      	nop
 8008394:	371c      	adds	r7, #28
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
	...

080083a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d101      	bne.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083b4:	2302      	movs	r3, #2
 80083b6:	e05a      	b.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a21      	ldr	r2, [pc, #132]	; (800847c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d022      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008404:	d01d      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1d      	ldr	r2, [pc, #116]	; (8008480 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d018      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a1b      	ldr	r2, [pc, #108]	; (8008484 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d013      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a1a      	ldr	r2, [pc, #104]	; (8008488 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d00e      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a18      	ldr	r2, [pc, #96]	; (800848c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d009      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a17      	ldr	r2, [pc, #92]	; (8008490 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d004      	beq.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a15      	ldr	r2, [pc, #84]	; (8008494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d10c      	bne.n	800845c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4313      	orrs	r3, r2
 8008452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40010000 	.word	0x40010000
 8008480:	40000400 	.word	0x40000400
 8008484:	40000800 	.word	0x40000800
 8008488:	40000c00 	.word	0x40000c00
 800848c:	40010400 	.word	0x40010400
 8008490:	40014000 	.word	0x40014000
 8008494:	40001800 	.word	0x40001800

08008498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e03f      	b.n	8008552 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fa f9ba 	bl	8002860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2224      	movs	r2, #36	; 0x24
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fddf 	bl	80090c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	695a      	ldr	r2, [r3, #20]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b08a      	sub	sp, #40	; 0x28
 800855e:	af02      	add	r7, sp, #8
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	603b      	str	r3, [r7, #0]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b20      	cmp	r3, #32
 8008578:	d17c      	bne.n	8008674 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_UART_Transmit+0x2c>
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e075      	b.n	8008676 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_UART_Transmit+0x3e>
 8008594:	2302      	movs	r3, #2
 8008596:	e06e      	b.n	8008676 <HAL_UART_Transmit+0x11c>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2221      	movs	r2, #33	; 0x21
 80085aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085ae:	f7fa faef 	bl	8002b90 <HAL_GetTick>
 80085b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	88fa      	ldrh	r2, [r7, #6]
 80085b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	88fa      	ldrh	r2, [r7, #6]
 80085be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c8:	d108      	bne.n	80085dc <HAL_UART_Transmit+0x82>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	61bb      	str	r3, [r7, #24]
 80085da:	e003      	b.n	80085e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80085ec:	e02a      	b.n	8008644 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2180      	movs	r1, #128	; 0x80
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fb1f 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e036      	b.n	8008676 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10b      	bne.n	8008626 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800861c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	3302      	adds	r3, #2
 8008622:	61bb      	str	r3, [r7, #24]
 8008624:	e007      	b.n	8008636 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	3301      	adds	r3, #1
 8008634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b01      	subs	r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008648:	b29b      	uxth	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1cf      	bne.n	80085ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2200      	movs	r2, #0
 8008656:	2140      	movs	r1, #64	; 0x40
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 faef 	bl	8008c3c <UART_WaitOnFlagUntilTimeout>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e006      	b.n	8008676 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2220      	movs	r2, #32
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	e000      	b.n	8008676 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008674:	2302      	movs	r3, #2
  }
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	4613      	mov	r3, r2
 800868a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b20      	cmp	r3, #32
 8008696:	d11d      	bne.n	80086d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <HAL_UART_Receive_IT+0x26>
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e016      	b.n	80086d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d101      	bne.n	80086b6 <HAL_UART_Receive_IT+0x38>
 80086b2:	2302      	movs	r3, #2
 80086b4:	e00f      	b.n	80086d6 <HAL_UART_Receive_IT+0x58>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	461a      	mov	r2, r3
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 fb24 	bl	8008d18 <UART_Start_Receive_IT>
 80086d0:	4603      	mov	r3, r0
 80086d2:	e000      	b.n	80086d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80086d4:	2302      	movs	r3, #2
  }
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b0ba      	sub	sp, #232	; 0xe8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008706:	2300      	movs	r3, #0
 8008708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800870c:	2300      	movs	r3, #0
 800870e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008716:	f003 030f 	and.w	r3, r3, #15
 800871a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800871e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10f      	bne.n	8008746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d009      	beq.n	8008746 <HAL_UART_IRQHandler+0x66>
 8008732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fc07 	bl	8008f52 <UART_Receive_IT>
      return;
 8008744:	e256      	b.n	8008bf4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 80de 	beq.w	800890c <HAL_UART_IRQHandler+0x22c>
 8008750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800875c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008760:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80d1 	beq.w	800890c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800876a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <HAL_UART_IRQHandler+0xae>
 8008776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800877a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	f043 0201 	orr.w	r2, r3, #1
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800878e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008792:	f003 0304 	and.w	r3, r3, #4
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00b      	beq.n	80087b2 <HAL_UART_IRQHandler+0xd2>
 800879a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	f043 0202 	orr.w	r2, r3, #2
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <HAL_UART_IRQHandler+0xf6>
 80087be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	f043 0204 	orr.w	r2, r3, #4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d011      	beq.n	8008806 <HAL_UART_IRQHandler+0x126>
 80087e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d105      	bne.n	80087fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80087ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	f043 0208 	orr.w	r2, r3, #8
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 81ed 	beq.w	8008bea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	2b00      	cmp	r3, #0
 800881a:	d008      	beq.n	800882e <HAL_UART_IRQHandler+0x14e>
 800881c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008820:	f003 0320 	and.w	r3, r3, #32
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fb92 	bl	8008f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008838:	2b40      	cmp	r3, #64	; 0x40
 800883a:	bf0c      	ite	eq
 800883c:	2301      	moveq	r3, #1
 800883e:	2300      	movne	r3, #0
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	f003 0308 	and.w	r3, r3, #8
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <HAL_UART_IRQHandler+0x17a>
 8008852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008856:	2b00      	cmp	r3, #0
 8008858:	d04f      	beq.n	80088fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa9a 	bl	8008d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886a:	2b40      	cmp	r3, #64	; 0x40
 800886c:	d141      	bne.n	80088f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3314      	adds	r3, #20
 8008874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3314      	adds	r3, #20
 8008896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800889a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800889e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1d9      	bne.n	800886e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d013      	beq.n	80088ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	4a7d      	ldr	r2, [pc, #500]	; (8008abc <HAL_UART_IRQHandler+0x3dc>)
 80088c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fb f95c 	bl	8003b8c <HAL_DMA_Abort_IT>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d016      	beq.n	8008908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e8:	e00e      	b.n	8008908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f990 	bl	8008c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f0:	e00a      	b.n	8008908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f98c 	bl	8008c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f8:	e006      	b.n	8008908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f988 	bl	8008c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008906:	e170      	b.n	8008bea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008908:	bf00      	nop
    return;
 800890a:	e16e      	b.n	8008bea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	2b01      	cmp	r3, #1
 8008912:	f040 814a 	bne.w	8008baa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 8143 	beq.w	8008baa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 813c 	beq.w	8008baa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008932:	2300      	movs	r3, #0
 8008934:	60bb      	str	r3, [r7, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	60bb      	str	r3, [r7, #8]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	60bb      	str	r3, [r7, #8]
 8008946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008952:	2b40      	cmp	r3, #64	; 0x40
 8008954:	f040 80b4 	bne.w	8008ac0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 8140 	beq.w	8008bee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008976:	429a      	cmp	r2, r3
 8008978:	f080 8139 	bcs.w	8008bee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008982:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898e:	f000 8088 	beq.w	8008aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	330c      	adds	r3, #12
 8008998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	330c      	adds	r3, #12
 80089ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80089ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80089d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1d9      	bne.n	8008992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3314      	adds	r3, #20
 80089e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80089ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089f0:	f023 0301 	bic.w	r3, r3, #1
 80089f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3314      	adds	r3, #20
 80089fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e1      	bne.n	80089de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3314      	adds	r3, #20
 8008a20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3314      	adds	r3, #20
 8008a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e3      	bne.n	8008a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	330c      	adds	r3, #12
 8008a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a72:	f023 0310 	bic.w	r3, r3, #16
 8008a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	330c      	adds	r3, #12
 8008a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a84:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e3      	bne.n	8008a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fb f805 	bl	8003aac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f8b6 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ab8:	e099      	b.n	8008bee <HAL_UART_IRQHandler+0x50e>
 8008aba:	bf00      	nop
 8008abc:	08008e5b 	.word	0x08008e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 808b 	beq.w	8008bf2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 8086 	beq.w	8008bf2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	330c      	adds	r3, #12
 8008aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	330c      	adds	r3, #12
 8008b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e3      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3314      	adds	r3, #20
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3314      	adds	r3, #20
 8008b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b42:	633a      	str	r2, [r7, #48]	; 0x30
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e3      	bne.n	8008b1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	e853 3f00 	ldrex	r3, [r3]
 8008b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0310 	bic.w	r3, r3, #16
 8008b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	330c      	adds	r3, #12
 8008b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b88:	61fa      	str	r2, [r7, #28]
 8008b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	69b9      	ldr	r1, [r7, #24]
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	617b      	str	r3, [r7, #20]
   return(result);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e3      	bne.n	8008b64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f83e 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ba8:	e023      	b.n	8008bf2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d009      	beq.n	8008bca <HAL_UART_IRQHandler+0x4ea>
 8008bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f95d 	bl	8008e82 <UART_Transmit_IT>
    return;
 8008bc8:	e014      	b.n	8008bf4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00e      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x514>
 8008bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d008      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f99d 	bl	8008f22 <UART_EndTransmit_IT>
    return;
 8008be8:	e004      	b.n	8008bf4 <HAL_UART_IRQHandler+0x514>
    return;
 8008bea:	bf00      	nop
 8008bec:	e002      	b.n	8008bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8008bee:	bf00      	nop
 8008bf0:	e000      	b.n	8008bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8008bf2:	bf00      	nop
  }
}
 8008bf4:	37e8      	adds	r7, #232	; 0xe8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop

08008bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b090      	sub	sp, #64	; 0x40
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4c:	e050      	b.n	8008cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c54:	d04c      	beq.n	8008cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d007      	beq.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c5c:	f7f9 ff98 	bl	8002b90 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d241      	bcs.n	8008cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	330c      	adds	r3, #12
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	330c      	adds	r3, #12
 8008c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c8c:	637a      	str	r2, [r7, #52]	; 0x34
 8008c8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e5      	bne.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3314      	adds	r3, #20
 8008ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f023 0301 	bic.w	r3, r3, #1
 8008cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3314      	adds	r3, #20
 8008cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cc0:	623a      	str	r2, [r7, #32]
 8008cc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	69f9      	ldr	r1, [r7, #28]
 8008cc6:	6a3a      	ldr	r2, [r7, #32]
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e5      	bne.n	8008ca0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e00f      	b.n	8008d10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	bf0c      	ite	eq
 8008d00:	2301      	moveq	r3, #1
 8008d02:	2300      	movne	r3, #0
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	461a      	mov	r2, r3
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d09f      	beq.n	8008c4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3740      	adds	r7, #64	; 0x40
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	4613      	mov	r3, r2
 8008d24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	88fa      	ldrh	r2, [r7, #6]
 8008d30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	88fa      	ldrh	r2, [r7, #6]
 8008d36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2222      	movs	r2, #34	; 0x22
 8008d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d007      	beq.n	8008d66 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68da      	ldr	r2, [r3, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	695a      	ldr	r2, [r3, #20]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0201 	orr.w	r2, r2, #1
 8008d74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0220 	orr.w	r2, r2, #32
 8008d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b095      	sub	sp, #84	; 0x54
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	330c      	adds	r3, #12
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	330c      	adds	r3, #12
 8008dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dc4:	e841 2300 	strex	r3, r2, [r1]
 8008dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e5      	bne.n	8008d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3314      	adds	r3, #20
 8008dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	e853 3f00 	ldrex	r3, [r3]
 8008dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f023 0301 	bic.w	r3, r3, #1
 8008de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3314      	adds	r3, #20
 8008dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008df8:	e841 2300 	strex	r3, r2, [r1]
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e5      	bne.n	8008dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d119      	bne.n	8008e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	330c      	adds	r3, #12
 8008e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f023 0310 	bic.w	r3, r3, #16
 8008e22:	647b      	str	r3, [r7, #68]	; 0x44
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	330c      	adds	r3, #12
 8008e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e2c:	61ba      	str	r2, [r7, #24]
 8008e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6979      	ldr	r1, [r7, #20]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	613b      	str	r3, [r7, #16]
   return(result);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e5      	bne.n	8008e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2220      	movs	r2, #32
 8008e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e4e:	bf00      	nop
 8008e50:	3754      	adds	r7, #84	; 0x54
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fecb 	bl	8008c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b085      	sub	sp, #20
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b21      	cmp	r3, #33	; 0x21
 8008e94:	d13e      	bne.n	8008f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9e:	d114      	bne.n	8008eca <UART_Transmit_IT+0x48>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d110      	bne.n	8008eca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	1c9a      	adds	r2, r3, #2
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	621a      	str	r2, [r3, #32]
 8008ec8:	e008      	b.n	8008edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	1c59      	adds	r1, r3, #1
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	6211      	str	r1, [r2, #32]
 8008ed4:	781a      	ldrb	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10f      	bne.n	8008f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	e000      	b.n	8008f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f14:	2302      	movs	r3, #2
  }
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7ff fe5a 	bl	8008bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b08c      	sub	sp, #48	; 0x30
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b22      	cmp	r3, #34	; 0x22
 8008f64:	f040 80ab 	bne.w	80090be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f70:	d117      	bne.n	8008fa2 <UART_Receive_IT+0x50>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d113      	bne.n	8008fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9a:	1c9a      	adds	r2, r3, #2
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8008fa0:	e026      	b.n	8008ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb4:	d007      	beq.n	8008fc6 <UART_Receive_IT+0x74>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10a      	bne.n	8008fd4 <UART_Receive_IT+0x82>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d106      	bne.n	8008fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	701a      	strb	r2, [r3, #0]
 8008fd2:	e008      	b.n	8008fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009000:	2b00      	cmp	r3, #0
 8009002:	d15a      	bne.n	80090ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0220 	bic.w	r2, r2, #32
 8009012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	695a      	ldr	r2, [r3, #20]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0201 	bic.w	r2, r2, #1
 8009032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2220      	movs	r2, #32
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	2b01      	cmp	r3, #1
 8009042:	d135      	bne.n	80090b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	330c      	adds	r3, #12
 8009050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	613b      	str	r3, [r7, #16]
   return(result);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f023 0310 	bic.w	r3, r3, #16
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	330c      	adds	r3, #12
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	623a      	str	r2, [r7, #32]
 800906c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	69f9      	ldr	r1, [r7, #28]
 8009070:	6a3a      	ldr	r2, [r7, #32]
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	61bb      	str	r3, [r7, #24]
   return(result);
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e5      	bne.n	800904a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0310 	and.w	r3, r3, #16
 8009088:	2b10      	cmp	r3, #16
 800908a:	d10a      	bne.n	80090a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff fdbb 	bl	8008c24 <HAL_UARTEx_RxEventCallback>
 80090ae:	e002      	b.n	80090b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7f8 ff59 	bl	8001f68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	e002      	b.n	80090c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	e000      	b.n	80090c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80090be:	2302      	movs	r3, #2
  }
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3730      	adds	r7, #48	; 0x30
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090cc:	b0c0      	sub	sp, #256	; 0x100
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e4:	68d9      	ldr	r1, [r3, #12]
 80090e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	ea40 0301 	orr.w	r3, r0, r1
 80090f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	431a      	orrs	r2, r3
 8009100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	431a      	orrs	r2, r3
 8009108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	4313      	orrs	r3, r2
 8009110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009120:	f021 010c 	bic.w	r1, r1, #12
 8009124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800912e:	430b      	orrs	r3, r1
 8009130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800913e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009142:	6999      	ldr	r1, [r3, #24]
 8009144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	ea40 0301 	orr.w	r3, r0, r1
 800914e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	4b8f      	ldr	r3, [pc, #572]	; (8009394 <UART_SetConfig+0x2cc>)
 8009158:	429a      	cmp	r2, r3
 800915a:	d005      	beq.n	8009168 <UART_SetConfig+0xa0>
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	4b8d      	ldr	r3, [pc, #564]	; (8009398 <UART_SetConfig+0x2d0>)
 8009164:	429a      	cmp	r2, r3
 8009166:	d104      	bne.n	8009172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009168:	f7fd fb70 	bl	800684c <HAL_RCC_GetPCLK2Freq>
 800916c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009170:	e003      	b.n	800917a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009172:	f7fd fb57 	bl	8006824 <HAL_RCC_GetPCLK1Freq>
 8009176:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009184:	f040 810c 	bne.w	80093a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800918c:	2200      	movs	r2, #0
 800918e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800919a:	4622      	mov	r2, r4
 800919c:	462b      	mov	r3, r5
 800919e:	1891      	adds	r1, r2, r2
 80091a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80091a2:	415b      	adcs	r3, r3
 80091a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091aa:	4621      	mov	r1, r4
 80091ac:	eb12 0801 	adds.w	r8, r2, r1
 80091b0:	4629      	mov	r1, r5
 80091b2:	eb43 0901 	adc.w	r9, r3, r1
 80091b6:	f04f 0200 	mov.w	r2, #0
 80091ba:	f04f 0300 	mov.w	r3, #0
 80091be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091ca:	4690      	mov	r8, r2
 80091cc:	4699      	mov	r9, r3
 80091ce:	4623      	mov	r3, r4
 80091d0:	eb18 0303 	adds.w	r3, r8, r3
 80091d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091d8:	462b      	mov	r3, r5
 80091da:	eb49 0303 	adc.w	r3, r9, r3
 80091de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80091f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091f6:	460b      	mov	r3, r1
 80091f8:	18db      	adds	r3, r3, r3
 80091fa:	653b      	str	r3, [r7, #80]	; 0x50
 80091fc:	4613      	mov	r3, r2
 80091fe:	eb42 0303 	adc.w	r3, r2, r3
 8009202:	657b      	str	r3, [r7, #84]	; 0x54
 8009204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800920c:	f7f7 f848 	bl	80002a0 <__aeabi_uldivmod>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4b61      	ldr	r3, [pc, #388]	; (800939c <UART_SetConfig+0x2d4>)
 8009216:	fba3 2302 	umull	r2, r3, r3, r2
 800921a:	095b      	lsrs	r3, r3, #5
 800921c:	011c      	lsls	r4, r3, #4
 800921e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009222:	2200      	movs	r2, #0
 8009224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009228:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800922c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	1891      	adds	r1, r2, r2
 8009236:	64b9      	str	r1, [r7, #72]	; 0x48
 8009238:	415b      	adcs	r3, r3
 800923a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800923c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009240:	4641      	mov	r1, r8
 8009242:	eb12 0a01 	adds.w	sl, r2, r1
 8009246:	4649      	mov	r1, r9
 8009248:	eb43 0b01 	adc.w	fp, r3, r1
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800925c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009260:	4692      	mov	sl, r2
 8009262:	469b      	mov	fp, r3
 8009264:	4643      	mov	r3, r8
 8009266:	eb1a 0303 	adds.w	r3, sl, r3
 800926a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800926e:	464b      	mov	r3, r9
 8009270:	eb4b 0303 	adc.w	r3, fp, r3
 8009274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009284:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800928c:	460b      	mov	r3, r1
 800928e:	18db      	adds	r3, r3, r3
 8009290:	643b      	str	r3, [r7, #64]	; 0x40
 8009292:	4613      	mov	r3, r2
 8009294:	eb42 0303 	adc.w	r3, r2, r3
 8009298:	647b      	str	r3, [r7, #68]	; 0x44
 800929a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800929e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092a2:	f7f6 fffd 	bl	80002a0 <__aeabi_uldivmod>
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	4611      	mov	r1, r2
 80092ac:	4b3b      	ldr	r3, [pc, #236]	; (800939c <UART_SetConfig+0x2d4>)
 80092ae:	fba3 2301 	umull	r2, r3, r3, r1
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	2264      	movs	r2, #100	; 0x64
 80092b6:	fb02 f303 	mul.w	r3, r2, r3
 80092ba:	1acb      	subs	r3, r1, r3
 80092bc:	00db      	lsls	r3, r3, #3
 80092be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092c2:	4b36      	ldr	r3, [pc, #216]	; (800939c <UART_SetConfig+0x2d4>)
 80092c4:	fba3 2302 	umull	r2, r3, r3, r2
 80092c8:	095b      	lsrs	r3, r3, #5
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092d0:	441c      	add	r4, r3
 80092d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092e4:	4642      	mov	r2, r8
 80092e6:	464b      	mov	r3, r9
 80092e8:	1891      	adds	r1, r2, r2
 80092ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80092ec:	415b      	adcs	r3, r3
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092f4:	4641      	mov	r1, r8
 80092f6:	1851      	adds	r1, r2, r1
 80092f8:	6339      	str	r1, [r7, #48]	; 0x30
 80092fa:	4649      	mov	r1, r9
 80092fc:	414b      	adcs	r3, r1
 80092fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800930c:	4659      	mov	r1, fp
 800930e:	00cb      	lsls	r3, r1, #3
 8009310:	4651      	mov	r1, sl
 8009312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009316:	4651      	mov	r1, sl
 8009318:	00ca      	lsls	r2, r1, #3
 800931a:	4610      	mov	r0, r2
 800931c:	4619      	mov	r1, r3
 800931e:	4603      	mov	r3, r0
 8009320:	4642      	mov	r2, r8
 8009322:	189b      	adds	r3, r3, r2
 8009324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009328:	464b      	mov	r3, r9
 800932a:	460a      	mov	r2, r1
 800932c:	eb42 0303 	adc.w	r3, r2, r3
 8009330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009340:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009348:	460b      	mov	r3, r1
 800934a:	18db      	adds	r3, r3, r3
 800934c:	62bb      	str	r3, [r7, #40]	; 0x28
 800934e:	4613      	mov	r3, r2
 8009350:	eb42 0303 	adc.w	r3, r2, r3
 8009354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800935a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800935e:	f7f6 ff9f 	bl	80002a0 <__aeabi_uldivmod>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4b0d      	ldr	r3, [pc, #52]	; (800939c <UART_SetConfig+0x2d4>)
 8009368:	fba3 1302 	umull	r1, r3, r3, r2
 800936c:	095b      	lsrs	r3, r3, #5
 800936e:	2164      	movs	r1, #100	; 0x64
 8009370:	fb01 f303 	mul.w	r3, r1, r3
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	3332      	adds	r3, #50	; 0x32
 800937a:	4a08      	ldr	r2, [pc, #32]	; (800939c <UART_SetConfig+0x2d4>)
 800937c:	fba2 2303 	umull	r2, r3, r2, r3
 8009380:	095b      	lsrs	r3, r3, #5
 8009382:	f003 0207 	and.w	r2, r3, #7
 8009386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4422      	add	r2, r4
 800938e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009390:	e106      	b.n	80095a0 <UART_SetConfig+0x4d8>
 8009392:	bf00      	nop
 8009394:	40011000 	.word	0x40011000
 8009398:	40011400 	.word	0x40011400
 800939c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093b2:	4642      	mov	r2, r8
 80093b4:	464b      	mov	r3, r9
 80093b6:	1891      	adds	r1, r2, r2
 80093b8:	6239      	str	r1, [r7, #32]
 80093ba:	415b      	adcs	r3, r3
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
 80093be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093c2:	4641      	mov	r1, r8
 80093c4:	1854      	adds	r4, r2, r1
 80093c6:	4649      	mov	r1, r9
 80093c8:	eb43 0501 	adc.w	r5, r3, r1
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	00eb      	lsls	r3, r5, #3
 80093d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093da:	00e2      	lsls	r2, r4, #3
 80093dc:	4614      	mov	r4, r2
 80093de:	461d      	mov	r5, r3
 80093e0:	4643      	mov	r3, r8
 80093e2:	18e3      	adds	r3, r4, r3
 80093e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093e8:	464b      	mov	r3, r9
 80093ea:	eb45 0303 	adc.w	r3, r5, r3
 80093ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800940e:	4629      	mov	r1, r5
 8009410:	008b      	lsls	r3, r1, #2
 8009412:	4621      	mov	r1, r4
 8009414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009418:	4621      	mov	r1, r4
 800941a:	008a      	lsls	r2, r1, #2
 800941c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009420:	f7f6 ff3e 	bl	80002a0 <__aeabi_uldivmod>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4b60      	ldr	r3, [pc, #384]	; (80095ac <UART_SetConfig+0x4e4>)
 800942a:	fba3 2302 	umull	r2, r3, r3, r2
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	011c      	lsls	r4, r3, #4
 8009432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009436:	2200      	movs	r2, #0
 8009438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800943c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009444:	4642      	mov	r2, r8
 8009446:	464b      	mov	r3, r9
 8009448:	1891      	adds	r1, r2, r2
 800944a:	61b9      	str	r1, [r7, #24]
 800944c:	415b      	adcs	r3, r3
 800944e:	61fb      	str	r3, [r7, #28]
 8009450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009454:	4641      	mov	r1, r8
 8009456:	1851      	adds	r1, r2, r1
 8009458:	6139      	str	r1, [r7, #16]
 800945a:	4649      	mov	r1, r9
 800945c:	414b      	adcs	r3, r1
 800945e:	617b      	str	r3, [r7, #20]
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800946c:	4659      	mov	r1, fp
 800946e:	00cb      	lsls	r3, r1, #3
 8009470:	4651      	mov	r1, sl
 8009472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009476:	4651      	mov	r1, sl
 8009478:	00ca      	lsls	r2, r1, #3
 800947a:	4610      	mov	r0, r2
 800947c:	4619      	mov	r1, r3
 800947e:	4603      	mov	r3, r0
 8009480:	4642      	mov	r2, r8
 8009482:	189b      	adds	r3, r3, r2
 8009484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009488:	464b      	mov	r3, r9
 800948a:	460a      	mov	r2, r1
 800948c:	eb42 0303 	adc.w	r3, r2, r3
 8009490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	67bb      	str	r3, [r7, #120]	; 0x78
 800949e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094ac:	4649      	mov	r1, r9
 80094ae:	008b      	lsls	r3, r1, #2
 80094b0:	4641      	mov	r1, r8
 80094b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094b6:	4641      	mov	r1, r8
 80094b8:	008a      	lsls	r2, r1, #2
 80094ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80094be:	f7f6 feef 	bl	80002a0 <__aeabi_uldivmod>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	4b38      	ldr	r3, [pc, #224]	; (80095ac <UART_SetConfig+0x4e4>)
 80094ca:	fba3 2301 	umull	r2, r3, r3, r1
 80094ce:	095b      	lsrs	r3, r3, #5
 80094d0:	2264      	movs	r2, #100	; 0x64
 80094d2:	fb02 f303 	mul.w	r3, r2, r3
 80094d6:	1acb      	subs	r3, r1, r3
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	3332      	adds	r3, #50	; 0x32
 80094dc:	4a33      	ldr	r2, [pc, #204]	; (80095ac <UART_SetConfig+0x4e4>)
 80094de:	fba2 2303 	umull	r2, r3, r2, r3
 80094e2:	095b      	lsrs	r3, r3, #5
 80094e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094e8:	441c      	add	r4, r3
 80094ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ee:	2200      	movs	r2, #0
 80094f0:	673b      	str	r3, [r7, #112]	; 0x70
 80094f2:	677a      	str	r2, [r7, #116]	; 0x74
 80094f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	1891      	adds	r1, r2, r2
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	415b      	adcs	r3, r3
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009508:	4641      	mov	r1, r8
 800950a:	1851      	adds	r1, r2, r1
 800950c:	6039      	str	r1, [r7, #0]
 800950e:	4649      	mov	r1, r9
 8009510:	414b      	adcs	r3, r1
 8009512:	607b      	str	r3, [r7, #4]
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009520:	4659      	mov	r1, fp
 8009522:	00cb      	lsls	r3, r1, #3
 8009524:	4651      	mov	r1, sl
 8009526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800952a:	4651      	mov	r1, sl
 800952c:	00ca      	lsls	r2, r1, #3
 800952e:	4610      	mov	r0, r2
 8009530:	4619      	mov	r1, r3
 8009532:	4603      	mov	r3, r0
 8009534:	4642      	mov	r2, r8
 8009536:	189b      	adds	r3, r3, r2
 8009538:	66bb      	str	r3, [r7, #104]	; 0x68
 800953a:	464b      	mov	r3, r9
 800953c:	460a      	mov	r2, r1
 800953e:	eb42 0303 	adc.w	r3, r2, r3
 8009542:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	663b      	str	r3, [r7, #96]	; 0x60
 800954e:	667a      	str	r2, [r7, #100]	; 0x64
 8009550:	f04f 0200 	mov.w	r2, #0
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800955c:	4649      	mov	r1, r9
 800955e:	008b      	lsls	r3, r1, #2
 8009560:	4641      	mov	r1, r8
 8009562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009566:	4641      	mov	r1, r8
 8009568:	008a      	lsls	r2, r1, #2
 800956a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800956e:	f7f6 fe97 	bl	80002a0 <__aeabi_uldivmod>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4b0d      	ldr	r3, [pc, #52]	; (80095ac <UART_SetConfig+0x4e4>)
 8009578:	fba3 1302 	umull	r1, r3, r3, r2
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	2164      	movs	r1, #100	; 0x64
 8009580:	fb01 f303 	mul.w	r3, r1, r3
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	3332      	adds	r3, #50	; 0x32
 800958a:	4a08      	ldr	r2, [pc, #32]	; (80095ac <UART_SetConfig+0x4e4>)
 800958c:	fba2 2303 	umull	r2, r3, r2, r3
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	f003 020f 	and.w	r2, r3, #15
 8009596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4422      	add	r2, r4
 800959e:	609a      	str	r2, [r3, #8]
}
 80095a0:	bf00      	nop
 80095a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095a6:	46bd      	mov	sp, r7
 80095a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ac:	51eb851f 	.word	0x51eb851f

080095b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095b0:	b084      	sub	sp, #16
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	f107 001c 	add.w	r0, r7, #28
 80095be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d122      	bne.n	800960e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80095dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d105      	bne.n	8009602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 faa2 	bl	8009b4c <USB_CoreReset>
 8009608:	4603      	mov	r3, r0
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	e01a      	b.n	8009644 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fa96 	bl	8009b4c <USB_CoreReset>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d106      	bne.n	8009638 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
 8009636:	e005      	b.n	8009644 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	2b01      	cmp	r3, #1
 8009648:	d10b      	bne.n	8009662 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f043 0206 	orr.w	r2, r3, #6
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f043 0220 	orr.w	r2, r3, #32
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800966e:	b004      	add	sp, #16
 8009670:	4770      	bx	lr

08009672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f023 0201 	bic.w	r2, r3, #1
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d115      	bne.n	80096e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096c2:	2001      	movs	r0, #1
 80096c4:	f7f9 fa70 	bl	8002ba8 <HAL_Delay>
      ms++;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa2e 	bl	8009b30 <USB_GetMode>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d01e      	beq.n	8009718 <USB_SetCurrentMode+0x84>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2b31      	cmp	r3, #49	; 0x31
 80096de:	d9f0      	bls.n	80096c2 <USB_SetCurrentMode+0x2e>
 80096e0:	e01a      	b.n	8009718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096e2:	78fb      	ldrb	r3, [r7, #3]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d115      	bne.n	8009714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096f4:	2001      	movs	r0, #1
 80096f6:	f7f9 fa57 	bl	8002ba8 <HAL_Delay>
      ms++;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3301      	adds	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fa15 	bl	8009b30 <USB_GetMode>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <USB_SetCurrentMode+0x84>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b31      	cmp	r3, #49	; 0x31
 8009710:	d9f0      	bls.n	80096f4 <USB_SetCurrentMode+0x60>
 8009712:	e001      	b.n	8009718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e005      	b.n	8009724 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b32      	cmp	r3, #50	; 0x32
 800971c:	d101      	bne.n	8009722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e000      	b.n	8009724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800972c:	b084      	sub	sp, #16
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800973a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009746:	2300      	movs	r3, #0
 8009748:	613b      	str	r3, [r7, #16]
 800974a:	e009      	b.n	8009760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	3340      	adds	r3, #64	; 0x40
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	2200      	movs	r2, #0
 8009758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3301      	adds	r3, #1
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2b0e      	cmp	r3, #14
 8009764:	d9f2      	bls.n	800974c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d11c      	bne.n	80097a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800977a:	f043 0302 	orr.w	r3, r3, #2
 800977e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009790:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38
 80097a4:	e00b      	b.n	80097be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097c4:	461a      	mov	r2, r3
 80097c6:	2300      	movs	r3, #0
 80097c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d0:	4619      	mov	r1, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d8:	461a      	mov	r2, r3
 80097da:	680b      	ldr	r3, [r1, #0]
 80097dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d10c      	bne.n	80097fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d104      	bne.n	80097f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097ea:	2100      	movs	r1, #0
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f965 	bl	8009abc <USB_SetDevSpeed>
 80097f2:	e008      	b.n	8009806 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80097f4:	2101      	movs	r1, #1
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f960 	bl	8009abc <USB_SetDevSpeed>
 80097fc:	e003      	b.n	8009806 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097fe:	2103      	movs	r1, #3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f95b 	bl	8009abc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009806:	2110      	movs	r1, #16
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f8f3 	bl	80099f4 <USB_FlushTxFifo>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f91f 	bl	8009a5c <USB_FlushRxFifo>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982e:	461a      	mov	r2, r3
 8009830:	2300      	movs	r3, #0
 8009832:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983a:	461a      	mov	r2, r3
 800983c:	2300      	movs	r3, #0
 800983e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	461a      	mov	r2, r3
 8009848:	2300      	movs	r3, #0
 800984a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800984c:	2300      	movs	r3, #0
 800984e:	613b      	str	r3, [r7, #16]
 8009850:	e043      	b.n	80098da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009868:	d118      	bne.n	800989c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10a      	bne.n	8009886 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987c:	461a      	mov	r2, r3
 800987e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	e013      	b.n	80098ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009892:	461a      	mov	r2, r3
 8009894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	e008      	b.n	80098ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a8:	461a      	mov	r2, r3
 80098aa:	2300      	movs	r3, #0
 80098ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	461a      	mov	r2, r3
 80098bc:	2300      	movs	r3, #0
 80098be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098cc:	461a      	mov	r2, r3
 80098ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	3301      	adds	r3, #1
 80098d8:	613b      	str	r3, [r7, #16]
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d3b7      	bcc.n	8009852 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098e2:	2300      	movs	r3, #0
 80098e4:	613b      	str	r3, [r7, #16]
 80098e6:	e043      	b.n	8009970 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098fe:	d118      	bne.n	8009932 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009912:	461a      	mov	r2, r3
 8009914:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	e013      	b.n	8009944 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009928:	461a      	mov	r2, r3
 800992a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	e008      	b.n	8009944 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	461a      	mov	r2, r3
 8009940:	2300      	movs	r3, #0
 8009942:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009950:	461a      	mov	r2, r3
 8009952:	2300      	movs	r3, #0
 8009954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009962:	461a      	mov	r2, r3
 8009964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	3301      	adds	r3, #1
 800996e:	613b      	str	r3, [r7, #16]
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	429a      	cmp	r2, r3
 8009976:	d3b7      	bcc.n	80098e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800998a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009998:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f043 0210 	orr.w	r2, r3, #16
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699a      	ldr	r2, [r3, #24]
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <USB_DevInit+0x2c4>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d005      	beq.n	80099ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	f043 0208 	orr.w	r2, r3, #8
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d107      	bne.n	80099e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099d8:	f043 0304 	orr.w	r3, r3, #4
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099ec:	b004      	add	sp, #16
 80099ee:	4770      	bx	lr
 80099f0:	803c3800 	.word	0x803c3800

080099f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3301      	adds	r3, #1
 8009a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4a13      	ldr	r2, [pc, #76]	; (8009a58 <USB_FlushTxFifo+0x64>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d901      	bls.n	8009a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e01b      	b.n	8009a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	daf2      	bge.n	8009a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	019b      	lsls	r3, r3, #6
 8009a24:	f043 0220 	orr.w	r2, r3, #32
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4a08      	ldr	r2, [pc, #32]	; (8009a58 <USB_FlushTxFifo+0x64>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d901      	bls.n	8009a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e006      	b.n	8009a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	d0f0      	beq.n	8009a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	00030d40 	.word	0x00030d40

08009a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4a11      	ldr	r2, [pc, #68]	; (8009ab8 <USB_FlushRxFifo+0x5c>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d901      	bls.n	8009a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e018      	b.n	8009aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	daf2      	bge.n	8009a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2210      	movs	r2, #16
 8009a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4a08      	ldr	r2, [pc, #32]	; (8009ab8 <USB_FlushRxFifo+0x5c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d901      	bls.n	8009a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e006      	b.n	8009aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	2b10      	cmp	r3, #16
 8009aa8:	d0f0      	beq.n	8009a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	00030d40 	.word	0x00030d40

08009abc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	78fb      	ldrb	r3, [r7, #3]
 8009ad6:	68f9      	ldr	r1, [r7, #12]
 8009ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009adc:	4313      	orrs	r3, r2
 8009ade:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b085      	sub	sp, #20
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b08:	f023 0303 	bic.w	r3, r3, #3
 8009b0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b1c:	f043 0302 	orr.w	r3, r3, #2
 8009b20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <USB_CoreReset+0x64>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d901      	bls.n	8009b6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e01b      	b.n	8009ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	daf2      	bge.n	8009b58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f043 0201 	orr.w	r2, r3, #1
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3301      	adds	r3, #1
 8009b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <USB_CoreReset+0x64>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d901      	bls.n	8009b94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e006      	b.n	8009ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d0f0      	beq.n	8009b82 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	00030d40 	.word	0x00030d40

08009bb4 <std>:
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	4604      	mov	r4, r0
 8009bba:	e9c0 3300 	strd	r3, r3, [r0]
 8009bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bc2:	6083      	str	r3, [r0, #8]
 8009bc4:	8181      	strh	r1, [r0, #12]
 8009bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8009bc8:	81c2      	strh	r2, [r0, #14]
 8009bca:	6183      	str	r3, [r0, #24]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	2208      	movs	r2, #8
 8009bd0:	305c      	adds	r0, #92	; 0x5c
 8009bd2:	f000 fa4b 	bl	800a06c <memset>
 8009bd6:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <std+0x58>)
 8009bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8009bda:	4b0d      	ldr	r3, [pc, #52]	; (8009c10 <std+0x5c>)
 8009bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bde:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <std+0x60>)
 8009be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009be2:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <std+0x64>)
 8009be4:	6323      	str	r3, [r4, #48]	; 0x30
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <std+0x68>)
 8009be8:	6224      	str	r4, [r4, #32]
 8009bea:	429c      	cmp	r4, r3
 8009bec:	d006      	beq.n	8009bfc <std+0x48>
 8009bee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009bf2:	4294      	cmp	r4, r2
 8009bf4:	d002      	beq.n	8009bfc <std+0x48>
 8009bf6:	33d0      	adds	r3, #208	; 0xd0
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	d105      	bne.n	8009c08 <std+0x54>
 8009bfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c04:	f000 baaa 	b.w	800a15c <__retarget_lock_init_recursive>
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	bf00      	nop
 8009c0c:	08009ebd 	.word	0x08009ebd
 8009c10:	08009edf 	.word	0x08009edf
 8009c14:	08009f17 	.word	0x08009f17
 8009c18:	08009f3b 	.word	0x08009f3b
 8009c1c:	20000bec 	.word	0x20000bec

08009c20 <stdio_exit_handler>:
 8009c20:	4a02      	ldr	r2, [pc, #8]	; (8009c2c <stdio_exit_handler+0xc>)
 8009c22:	4903      	ldr	r1, [pc, #12]	; (8009c30 <stdio_exit_handler+0x10>)
 8009c24:	4803      	ldr	r0, [pc, #12]	; (8009c34 <stdio_exit_handler+0x14>)
 8009c26:	f000 b869 	b.w	8009cfc <_fwalk_sglue>
 8009c2a:	bf00      	nop
 8009c2c:	2000001c 	.word	0x2000001c
 8009c30:	0800acd5 	.word	0x0800acd5
 8009c34:	20000028 	.word	0x20000028

08009c38 <cleanup_stdio>:
 8009c38:	6841      	ldr	r1, [r0, #4]
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <cleanup_stdio+0x34>)
 8009c3c:	4299      	cmp	r1, r3
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	4604      	mov	r4, r0
 8009c42:	d001      	beq.n	8009c48 <cleanup_stdio+0x10>
 8009c44:	f001 f846 	bl	800acd4 <_fflush_r>
 8009c48:	68a1      	ldr	r1, [r4, #8]
 8009c4a:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <cleanup_stdio+0x38>)
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d002      	beq.n	8009c56 <cleanup_stdio+0x1e>
 8009c50:	4620      	mov	r0, r4
 8009c52:	f001 f83f 	bl	800acd4 <_fflush_r>
 8009c56:	68e1      	ldr	r1, [r4, #12]
 8009c58:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <cleanup_stdio+0x3c>)
 8009c5a:	4299      	cmp	r1, r3
 8009c5c:	d004      	beq.n	8009c68 <cleanup_stdio+0x30>
 8009c5e:	4620      	mov	r0, r4
 8009c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c64:	f001 b836 	b.w	800acd4 <_fflush_r>
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20000bec 	.word	0x20000bec
 8009c70:	20000c54 	.word	0x20000c54
 8009c74:	20000cbc 	.word	0x20000cbc

08009c78 <global_stdio_init.part.0>:
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <global_stdio_init.part.0+0x30>)
 8009c7c:	4c0b      	ldr	r4, [pc, #44]	; (8009cac <global_stdio_init.part.0+0x34>)
 8009c7e:	4a0c      	ldr	r2, [pc, #48]	; (8009cb0 <global_stdio_init.part.0+0x38>)
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	4620      	mov	r0, r4
 8009c84:	2200      	movs	r2, #0
 8009c86:	2104      	movs	r1, #4
 8009c88:	f7ff ff94 	bl	8009bb4 <std>
 8009c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c90:	2201      	movs	r2, #1
 8009c92:	2109      	movs	r1, #9
 8009c94:	f7ff ff8e 	bl	8009bb4 <std>
 8009c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ca2:	2112      	movs	r1, #18
 8009ca4:	f7ff bf86 	b.w	8009bb4 <std>
 8009ca8:	20000d24 	.word	0x20000d24
 8009cac:	20000bec 	.word	0x20000bec
 8009cb0:	08009c21 	.word	0x08009c21

08009cb4 <__sfp_lock_acquire>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	; (8009cbc <__sfp_lock_acquire+0x8>)
 8009cb6:	f000 ba52 	b.w	800a15e <__retarget_lock_acquire_recursive>
 8009cba:	bf00      	nop
 8009cbc:	20000d2d 	.word	0x20000d2d

08009cc0 <__sfp_lock_release>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	; (8009cc8 <__sfp_lock_release+0x8>)
 8009cc2:	f000 ba4d 	b.w	800a160 <__retarget_lock_release_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	20000d2d 	.word	0x20000d2d

08009ccc <__sinit>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4604      	mov	r4, r0
 8009cd0:	f7ff fff0 	bl	8009cb4 <__sfp_lock_acquire>
 8009cd4:	6a23      	ldr	r3, [r4, #32]
 8009cd6:	b11b      	cbz	r3, 8009ce0 <__sinit+0x14>
 8009cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cdc:	f7ff bff0 	b.w	8009cc0 <__sfp_lock_release>
 8009ce0:	4b04      	ldr	r3, [pc, #16]	; (8009cf4 <__sinit+0x28>)
 8009ce2:	6223      	str	r3, [r4, #32]
 8009ce4:	4b04      	ldr	r3, [pc, #16]	; (8009cf8 <__sinit+0x2c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f5      	bne.n	8009cd8 <__sinit+0xc>
 8009cec:	f7ff ffc4 	bl	8009c78 <global_stdio_init.part.0>
 8009cf0:	e7f2      	b.n	8009cd8 <__sinit+0xc>
 8009cf2:	bf00      	nop
 8009cf4:	08009c39 	.word	0x08009c39
 8009cf8:	20000d24 	.word	0x20000d24

08009cfc <_fwalk_sglue>:
 8009cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d00:	4607      	mov	r7, r0
 8009d02:	4688      	mov	r8, r1
 8009d04:	4614      	mov	r4, r2
 8009d06:	2600      	movs	r6, #0
 8009d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d10:	d505      	bpl.n	8009d1e <_fwalk_sglue+0x22>
 8009d12:	6824      	ldr	r4, [r4, #0]
 8009d14:	2c00      	cmp	r4, #0
 8009d16:	d1f7      	bne.n	8009d08 <_fwalk_sglue+0xc>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1e:	89ab      	ldrh	r3, [r5, #12]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d907      	bls.n	8009d34 <_fwalk_sglue+0x38>
 8009d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	d003      	beq.n	8009d34 <_fwalk_sglue+0x38>
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4638      	mov	r0, r7
 8009d30:	47c0      	blx	r8
 8009d32:	4306      	orrs	r6, r0
 8009d34:	3568      	adds	r5, #104	; 0x68
 8009d36:	e7e9      	b.n	8009d0c <_fwalk_sglue+0x10>

08009d38 <iprintf>:
 8009d38:	b40f      	push	{r0, r1, r2, r3}
 8009d3a:	b507      	push	{r0, r1, r2, lr}
 8009d3c:	4906      	ldr	r1, [pc, #24]	; (8009d58 <iprintf+0x20>)
 8009d3e:	ab04      	add	r3, sp, #16
 8009d40:	6808      	ldr	r0, [r1, #0]
 8009d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d46:	6881      	ldr	r1, [r0, #8]
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	f000 fc93 	bl	800a674 <_vfiprintf_r>
 8009d4e:	b003      	add	sp, #12
 8009d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d54:	b004      	add	sp, #16
 8009d56:	4770      	bx	lr
 8009d58:	20000074 	.word	0x20000074

08009d5c <_puts_r>:
 8009d5c:	6a03      	ldr	r3, [r0, #32]
 8009d5e:	b570      	push	{r4, r5, r6, lr}
 8009d60:	6884      	ldr	r4, [r0, #8]
 8009d62:	4605      	mov	r5, r0
 8009d64:	460e      	mov	r6, r1
 8009d66:	b90b      	cbnz	r3, 8009d6c <_puts_r+0x10>
 8009d68:	f7ff ffb0 	bl	8009ccc <__sinit>
 8009d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d6e:	07db      	lsls	r3, r3, #31
 8009d70:	d405      	bmi.n	8009d7e <_puts_r+0x22>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	0598      	lsls	r0, r3, #22
 8009d76:	d402      	bmi.n	8009d7e <_puts_r+0x22>
 8009d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d7a:	f000 f9f0 	bl	800a15e <__retarget_lock_acquire_recursive>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	0719      	lsls	r1, r3, #28
 8009d82:	d513      	bpl.n	8009dac <_puts_r+0x50>
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	b18b      	cbz	r3, 8009dac <_puts_r+0x50>
 8009d88:	3e01      	subs	r6, #1
 8009d8a:	68a3      	ldr	r3, [r4, #8]
 8009d8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d90:	3b01      	subs	r3, #1
 8009d92:	60a3      	str	r3, [r4, #8]
 8009d94:	b9e9      	cbnz	r1, 8009dd2 <_puts_r+0x76>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da2e      	bge.n	8009df8 <_puts_r+0x9c>
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	210a      	movs	r1, #10
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f000 f8cf 	bl	8009f42 <__swbuf_r>
 8009da4:	3001      	adds	r0, #1
 8009da6:	d007      	beq.n	8009db8 <_puts_r+0x5c>
 8009da8:	250a      	movs	r5, #10
 8009daa:	e007      	b.n	8009dbc <_puts_r+0x60>
 8009dac:	4621      	mov	r1, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 f904 	bl	8009fbc <__swsetup_r>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d0e7      	beq.n	8009d88 <_puts_r+0x2c>
 8009db8:	f04f 35ff 	mov.w	r5, #4294967295
 8009dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dbe:	07da      	lsls	r2, r3, #31
 8009dc0:	d405      	bmi.n	8009dce <_puts_r+0x72>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	059b      	lsls	r3, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_puts_r+0x72>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dca:	f000 f9c9 	bl	800a160 <__retarget_lock_release_recursive>
 8009dce:	4628      	mov	r0, r5
 8009dd0:	bd70      	pop	{r4, r5, r6, pc}
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	da04      	bge.n	8009de0 <_puts_r+0x84>
 8009dd6:	69a2      	ldr	r2, [r4, #24]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	dc06      	bgt.n	8009dea <_puts_r+0x8e>
 8009ddc:	290a      	cmp	r1, #10
 8009dde:	d004      	beq.n	8009dea <_puts_r+0x8e>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	6022      	str	r2, [r4, #0]
 8009de6:	7019      	strb	r1, [r3, #0]
 8009de8:	e7cf      	b.n	8009d8a <_puts_r+0x2e>
 8009dea:	4622      	mov	r2, r4
 8009dec:	4628      	mov	r0, r5
 8009dee:	f000 f8a8 	bl	8009f42 <__swbuf_r>
 8009df2:	3001      	adds	r0, #1
 8009df4:	d1c9      	bne.n	8009d8a <_puts_r+0x2e>
 8009df6:	e7df      	b.n	8009db8 <_puts_r+0x5c>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	250a      	movs	r5, #10
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	6022      	str	r2, [r4, #0]
 8009e00:	701d      	strb	r5, [r3, #0]
 8009e02:	e7db      	b.n	8009dbc <_puts_r+0x60>

08009e04 <puts>:
 8009e04:	4b02      	ldr	r3, [pc, #8]	; (8009e10 <puts+0xc>)
 8009e06:	4601      	mov	r1, r0
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	f7ff bfa7 	b.w	8009d5c <_puts_r>
 8009e0e:	bf00      	nop
 8009e10:	20000074 	.word	0x20000074

08009e14 <sniprintf>:
 8009e14:	b40c      	push	{r2, r3}
 8009e16:	b530      	push	{r4, r5, lr}
 8009e18:	4b17      	ldr	r3, [pc, #92]	; (8009e78 <sniprintf+0x64>)
 8009e1a:	1e0c      	subs	r4, r1, #0
 8009e1c:	681d      	ldr	r5, [r3, #0]
 8009e1e:	b09d      	sub	sp, #116	; 0x74
 8009e20:	da08      	bge.n	8009e34 <sniprintf+0x20>
 8009e22:	238b      	movs	r3, #139	; 0x8b
 8009e24:	602b      	str	r3, [r5, #0]
 8009e26:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2a:	b01d      	add	sp, #116	; 0x74
 8009e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e30:	b002      	add	sp, #8
 8009e32:	4770      	bx	lr
 8009e34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e3c:	bf14      	ite	ne
 8009e3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e42:	4623      	moveq	r3, r4
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	9307      	str	r3, [sp, #28]
 8009e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e4c:	9002      	str	r0, [sp, #8]
 8009e4e:	9006      	str	r0, [sp, #24]
 8009e50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e56:	ab21      	add	r3, sp, #132	; 0x84
 8009e58:	a902      	add	r1, sp, #8
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	f000 fae1 	bl	800a424 <_svfiprintf_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	bfbc      	itt	lt
 8009e66:	238b      	movlt	r3, #139	; 0x8b
 8009e68:	602b      	strlt	r3, [r5, #0]
 8009e6a:	2c00      	cmp	r4, #0
 8009e6c:	d0dd      	beq.n	8009e2a <sniprintf+0x16>
 8009e6e:	9b02      	ldr	r3, [sp, #8]
 8009e70:	2200      	movs	r2, #0
 8009e72:	701a      	strb	r2, [r3, #0]
 8009e74:	e7d9      	b.n	8009e2a <sniprintf+0x16>
 8009e76:	bf00      	nop
 8009e78:	20000074 	.word	0x20000074

08009e7c <siprintf>:
 8009e7c:	b40e      	push	{r1, r2, r3}
 8009e7e:	b500      	push	{lr}
 8009e80:	b09c      	sub	sp, #112	; 0x70
 8009e82:	ab1d      	add	r3, sp, #116	; 0x74
 8009e84:	9002      	str	r0, [sp, #8]
 8009e86:	9006      	str	r0, [sp, #24]
 8009e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e8c:	4809      	ldr	r0, [pc, #36]	; (8009eb4 <siprintf+0x38>)
 8009e8e:	9107      	str	r1, [sp, #28]
 8009e90:	9104      	str	r1, [sp, #16]
 8009e92:	4909      	ldr	r1, [pc, #36]	; (8009eb8 <siprintf+0x3c>)
 8009e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e98:	9105      	str	r1, [sp, #20]
 8009e9a:	6800      	ldr	r0, [r0, #0]
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	a902      	add	r1, sp, #8
 8009ea0:	f000 fac0 	bl	800a424 <_svfiprintf_r>
 8009ea4:	9b02      	ldr	r3, [sp, #8]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
 8009eaa:	b01c      	add	sp, #112	; 0x70
 8009eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb0:	b003      	add	sp, #12
 8009eb2:	4770      	bx	lr
 8009eb4:	20000074 	.word	0x20000074
 8009eb8:	ffff0208 	.word	0xffff0208

08009ebc <__sread>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	f000 f8fc 	bl	800a0c0 <_read_r>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	bfab      	itete	ge
 8009ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ece:	89a3      	ldrhlt	r3, [r4, #12]
 8009ed0:	181b      	addge	r3, r3, r0
 8009ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ed6:	bfac      	ite	ge
 8009ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eda:	81a3      	strhlt	r3, [r4, #12]
 8009edc:	bd10      	pop	{r4, pc}

08009ede <__swrite>:
 8009ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	461f      	mov	r7, r3
 8009ee4:	898b      	ldrh	r3, [r1, #12]
 8009ee6:	05db      	lsls	r3, r3, #23
 8009ee8:	4605      	mov	r5, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	4616      	mov	r6, r2
 8009eee:	d505      	bpl.n	8009efc <__swrite+0x1e>
 8009ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f000 f8d0 	bl	800a09c <_lseek_r>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f06:	81a3      	strh	r3, [r4, #12]
 8009f08:	4632      	mov	r2, r6
 8009f0a:	463b      	mov	r3, r7
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f12:	f000 b8e7 	b.w	800a0e4 <_write_r>

08009f16 <__sseek>:
 8009f16:	b510      	push	{r4, lr}
 8009f18:	460c      	mov	r4, r1
 8009f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1e:	f000 f8bd 	bl	800a09c <_lseek_r>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	bf15      	itete	ne
 8009f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f32:	81a3      	strheq	r3, [r4, #12]
 8009f34:	bf18      	it	ne
 8009f36:	81a3      	strhne	r3, [r4, #12]
 8009f38:	bd10      	pop	{r4, pc}

08009f3a <__sclose>:
 8009f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3e:	f000 b89d 	b.w	800a07c <_close_r>

08009f42 <__swbuf_r>:
 8009f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f44:	460e      	mov	r6, r1
 8009f46:	4614      	mov	r4, r2
 8009f48:	4605      	mov	r5, r0
 8009f4a:	b118      	cbz	r0, 8009f54 <__swbuf_r+0x12>
 8009f4c:	6a03      	ldr	r3, [r0, #32]
 8009f4e:	b90b      	cbnz	r3, 8009f54 <__swbuf_r+0x12>
 8009f50:	f7ff febc 	bl	8009ccc <__sinit>
 8009f54:	69a3      	ldr	r3, [r4, #24]
 8009f56:	60a3      	str	r3, [r4, #8]
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	071a      	lsls	r2, r3, #28
 8009f5c:	d525      	bpl.n	8009faa <__swbuf_r+0x68>
 8009f5e:	6923      	ldr	r3, [r4, #16]
 8009f60:	b31b      	cbz	r3, 8009faa <__swbuf_r+0x68>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	6922      	ldr	r2, [r4, #16]
 8009f66:	1a98      	subs	r0, r3, r2
 8009f68:	6963      	ldr	r3, [r4, #20]
 8009f6a:	b2f6      	uxtb	r6, r6
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	4637      	mov	r7, r6
 8009f70:	dc04      	bgt.n	8009f7c <__swbuf_r+0x3a>
 8009f72:	4621      	mov	r1, r4
 8009f74:	4628      	mov	r0, r5
 8009f76:	f000 fead 	bl	800acd4 <_fflush_r>
 8009f7a:	b9e0      	cbnz	r0, 8009fb6 <__swbuf_r+0x74>
 8009f7c:	68a3      	ldr	r3, [r4, #8]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	60a3      	str	r3, [r4, #8]
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	701e      	strb	r6, [r3, #0]
 8009f8a:	6962      	ldr	r2, [r4, #20]
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d004      	beq.n	8009f9c <__swbuf_r+0x5a>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	07db      	lsls	r3, r3, #31
 8009f96:	d506      	bpl.n	8009fa6 <__swbuf_r+0x64>
 8009f98:	2e0a      	cmp	r6, #10
 8009f9a:	d104      	bne.n	8009fa6 <__swbuf_r+0x64>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 fe98 	bl	800acd4 <_fflush_r>
 8009fa4:	b938      	cbnz	r0, 8009fb6 <__swbuf_r+0x74>
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 f805 	bl	8009fbc <__swsetup_r>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d0d5      	beq.n	8009f62 <__swbuf_r+0x20>
 8009fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8009fba:	e7f4      	b.n	8009fa6 <__swbuf_r+0x64>

08009fbc <__swsetup_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4b2a      	ldr	r3, [pc, #168]	; (800a068 <__swsetup_r+0xac>)
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	6818      	ldr	r0, [r3, #0]
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	b118      	cbz	r0, 8009fd0 <__swsetup_r+0x14>
 8009fc8:	6a03      	ldr	r3, [r0, #32]
 8009fca:	b90b      	cbnz	r3, 8009fd0 <__swsetup_r+0x14>
 8009fcc:	f7ff fe7e 	bl	8009ccc <__sinit>
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd6:	0718      	lsls	r0, r3, #28
 8009fd8:	d422      	bmi.n	800a020 <__swsetup_r+0x64>
 8009fda:	06d9      	lsls	r1, r3, #27
 8009fdc:	d407      	bmi.n	8009fee <__swsetup_r+0x32>
 8009fde:	2309      	movs	r3, #9
 8009fe0:	602b      	str	r3, [r5, #0]
 8009fe2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	e034      	b.n	800a058 <__swsetup_r+0x9c>
 8009fee:	0758      	lsls	r0, r3, #29
 8009ff0:	d512      	bpl.n	800a018 <__swsetup_r+0x5c>
 8009ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ff4:	b141      	cbz	r1, 800a008 <__swsetup_r+0x4c>
 8009ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ffa:	4299      	cmp	r1, r3
 8009ffc:	d002      	beq.n	800a004 <__swsetup_r+0x48>
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 f8be 	bl	800a180 <_free_r>
 800a004:	2300      	movs	r3, #0
 800a006:	6363      	str	r3, [r4, #52]	; 0x34
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a00e:	81a3      	strh	r3, [r4, #12]
 800a010:	2300      	movs	r3, #0
 800a012:	6063      	str	r3, [r4, #4]
 800a014:	6923      	ldr	r3, [r4, #16]
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f043 0308 	orr.w	r3, r3, #8
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	b94b      	cbnz	r3, 800a038 <__swsetup_r+0x7c>
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a02a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a02e:	d003      	beq.n	800a038 <__swsetup_r+0x7c>
 800a030:	4621      	mov	r1, r4
 800a032:	4628      	mov	r0, r5
 800a034:	f000 fe9c 	bl	800ad70 <__smakebuf_r>
 800a038:	89a0      	ldrh	r0, [r4, #12]
 800a03a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a03e:	f010 0301 	ands.w	r3, r0, #1
 800a042:	d00a      	beq.n	800a05a <__swsetup_r+0x9e>
 800a044:	2300      	movs	r3, #0
 800a046:	60a3      	str	r3, [r4, #8]
 800a048:	6963      	ldr	r3, [r4, #20]
 800a04a:	425b      	negs	r3, r3
 800a04c:	61a3      	str	r3, [r4, #24]
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	b943      	cbnz	r3, 800a064 <__swsetup_r+0xa8>
 800a052:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a056:	d1c4      	bne.n	8009fe2 <__swsetup_r+0x26>
 800a058:	bd38      	pop	{r3, r4, r5, pc}
 800a05a:	0781      	lsls	r1, r0, #30
 800a05c:	bf58      	it	pl
 800a05e:	6963      	ldrpl	r3, [r4, #20]
 800a060:	60a3      	str	r3, [r4, #8]
 800a062:	e7f4      	b.n	800a04e <__swsetup_r+0x92>
 800a064:	2000      	movs	r0, #0
 800a066:	e7f7      	b.n	800a058 <__swsetup_r+0x9c>
 800a068:	20000074 	.word	0x20000074

0800a06c <memset>:
 800a06c:	4402      	add	r2, r0
 800a06e:	4603      	mov	r3, r0
 800a070:	4293      	cmp	r3, r2
 800a072:	d100      	bne.n	800a076 <memset+0xa>
 800a074:	4770      	bx	lr
 800a076:	f803 1b01 	strb.w	r1, [r3], #1
 800a07a:	e7f9      	b.n	800a070 <memset+0x4>

0800a07c <_close_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d06      	ldr	r5, [pc, #24]	; (800a098 <_close_r+0x1c>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	f7f8 f9e5 	bl	8002456 <_close>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_close_r+0x1a>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_close_r+0x1a>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20000d28 	.word	0x20000d28

0800a09c <_lseek_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d07      	ldr	r5, [pc, #28]	; (800a0bc <_lseek_r+0x20>)
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	602a      	str	r2, [r5, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f7f8 f9fa 	bl	80024a4 <_lseek>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_lseek_r+0x1e>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_lseek_r+0x1e>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20000d28 	.word	0x20000d28

0800a0c0 <_read_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	; (800a0e0 <_read_r+0x20>)
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	602a      	str	r2, [r5, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f7f8 f9a4 	bl	800241c <_read>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d102      	bne.n	800a0de <_read_r+0x1e>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	b103      	cbz	r3, 800a0de <_read_r+0x1e>
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	20000d28 	.word	0x20000d28

0800a0e4 <_write_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d07      	ldr	r5, [pc, #28]	; (800a104 <_write_r+0x20>)
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	4608      	mov	r0, r1
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	602a      	str	r2, [r5, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f7f7 f922 	bl	800133c <_write>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_write_r+0x1e>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_write_r+0x1e>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20000d28 	.word	0x20000d28

0800a108 <__errno>:
 800a108:	4b01      	ldr	r3, [pc, #4]	; (800a110 <__errno+0x8>)
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	20000074 	.word	0x20000074

0800a114 <__libc_init_array>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	4d0d      	ldr	r5, [pc, #52]	; (800a14c <__libc_init_array+0x38>)
 800a118:	4c0d      	ldr	r4, [pc, #52]	; (800a150 <__libc_init_array+0x3c>)
 800a11a:	1b64      	subs	r4, r4, r5
 800a11c:	10a4      	asrs	r4, r4, #2
 800a11e:	2600      	movs	r6, #0
 800a120:	42a6      	cmp	r6, r4
 800a122:	d109      	bne.n	800a138 <__libc_init_array+0x24>
 800a124:	4d0b      	ldr	r5, [pc, #44]	; (800a154 <__libc_init_array+0x40>)
 800a126:	4c0c      	ldr	r4, [pc, #48]	; (800a158 <__libc_init_array+0x44>)
 800a128:	f000 fee2 	bl	800aef0 <_init>
 800a12c:	1b64      	subs	r4, r4, r5
 800a12e:	10a4      	asrs	r4, r4, #2
 800a130:	2600      	movs	r6, #0
 800a132:	42a6      	cmp	r6, r4
 800a134:	d105      	bne.n	800a142 <__libc_init_array+0x2e>
 800a136:	bd70      	pop	{r4, r5, r6, pc}
 800a138:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13c:	4798      	blx	r3
 800a13e:	3601      	adds	r6, #1
 800a140:	e7ee      	b.n	800a120 <__libc_init_array+0xc>
 800a142:	f855 3b04 	ldr.w	r3, [r5], #4
 800a146:	4798      	blx	r3
 800a148:	3601      	adds	r6, #1
 800a14a:	e7f2      	b.n	800a132 <__libc_init_array+0x1e>
 800a14c:	0800b518 	.word	0x0800b518
 800a150:	0800b518 	.word	0x0800b518
 800a154:	0800b518 	.word	0x0800b518
 800a158:	0800b51c 	.word	0x0800b51c

0800a15c <__retarget_lock_init_recursive>:
 800a15c:	4770      	bx	lr

0800a15e <__retarget_lock_acquire_recursive>:
 800a15e:	4770      	bx	lr

0800a160 <__retarget_lock_release_recursive>:
 800a160:	4770      	bx	lr

0800a162 <memcpy>:
 800a162:	440a      	add	r2, r1
 800a164:	4291      	cmp	r1, r2
 800a166:	f100 33ff 	add.w	r3, r0, #4294967295
 800a16a:	d100      	bne.n	800a16e <memcpy+0xc>
 800a16c:	4770      	bx	lr
 800a16e:	b510      	push	{r4, lr}
 800a170:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a174:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a178:	4291      	cmp	r1, r2
 800a17a:	d1f9      	bne.n	800a170 <memcpy+0xe>
 800a17c:	bd10      	pop	{r4, pc}
	...

0800a180 <_free_r>:
 800a180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a182:	2900      	cmp	r1, #0
 800a184:	d044      	beq.n	800a210 <_free_r+0x90>
 800a186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a18a:	9001      	str	r0, [sp, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f1a1 0404 	sub.w	r4, r1, #4
 800a192:	bfb8      	it	lt
 800a194:	18e4      	addlt	r4, r4, r3
 800a196:	f000 f8df 	bl	800a358 <__malloc_lock>
 800a19a:	4a1e      	ldr	r2, [pc, #120]	; (800a214 <_free_r+0x94>)
 800a19c:	9801      	ldr	r0, [sp, #4]
 800a19e:	6813      	ldr	r3, [r2, #0]
 800a1a0:	b933      	cbnz	r3, 800a1b0 <_free_r+0x30>
 800a1a2:	6063      	str	r3, [r4, #4]
 800a1a4:	6014      	str	r4, [r2, #0]
 800a1a6:	b003      	add	sp, #12
 800a1a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1ac:	f000 b8da 	b.w	800a364 <__malloc_unlock>
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	d908      	bls.n	800a1c6 <_free_r+0x46>
 800a1b4:	6825      	ldr	r5, [r4, #0]
 800a1b6:	1961      	adds	r1, r4, r5
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	bf01      	itttt	eq
 800a1bc:	6819      	ldreq	r1, [r3, #0]
 800a1be:	685b      	ldreq	r3, [r3, #4]
 800a1c0:	1949      	addeq	r1, r1, r5
 800a1c2:	6021      	streq	r1, [r4, #0]
 800a1c4:	e7ed      	b.n	800a1a2 <_free_r+0x22>
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	b10b      	cbz	r3, 800a1d0 <_free_r+0x50>
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	d9fa      	bls.n	800a1c6 <_free_r+0x46>
 800a1d0:	6811      	ldr	r1, [r2, #0]
 800a1d2:	1855      	adds	r5, r2, r1
 800a1d4:	42a5      	cmp	r5, r4
 800a1d6:	d10b      	bne.n	800a1f0 <_free_r+0x70>
 800a1d8:	6824      	ldr	r4, [r4, #0]
 800a1da:	4421      	add	r1, r4
 800a1dc:	1854      	adds	r4, r2, r1
 800a1de:	42a3      	cmp	r3, r4
 800a1e0:	6011      	str	r1, [r2, #0]
 800a1e2:	d1e0      	bne.n	800a1a6 <_free_r+0x26>
 800a1e4:	681c      	ldr	r4, [r3, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	6053      	str	r3, [r2, #4]
 800a1ea:	440c      	add	r4, r1
 800a1ec:	6014      	str	r4, [r2, #0]
 800a1ee:	e7da      	b.n	800a1a6 <_free_r+0x26>
 800a1f0:	d902      	bls.n	800a1f8 <_free_r+0x78>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	6003      	str	r3, [r0, #0]
 800a1f6:	e7d6      	b.n	800a1a6 <_free_r+0x26>
 800a1f8:	6825      	ldr	r5, [r4, #0]
 800a1fa:	1961      	adds	r1, r4, r5
 800a1fc:	428b      	cmp	r3, r1
 800a1fe:	bf04      	itt	eq
 800a200:	6819      	ldreq	r1, [r3, #0]
 800a202:	685b      	ldreq	r3, [r3, #4]
 800a204:	6063      	str	r3, [r4, #4]
 800a206:	bf04      	itt	eq
 800a208:	1949      	addeq	r1, r1, r5
 800a20a:	6021      	streq	r1, [r4, #0]
 800a20c:	6054      	str	r4, [r2, #4]
 800a20e:	e7ca      	b.n	800a1a6 <_free_r+0x26>
 800a210:	b003      	add	sp, #12
 800a212:	bd30      	pop	{r4, r5, pc}
 800a214:	20000d30 	.word	0x20000d30

0800a218 <sbrk_aligned>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	4e0e      	ldr	r6, [pc, #56]	; (800a254 <sbrk_aligned+0x3c>)
 800a21c:	460c      	mov	r4, r1
 800a21e:	6831      	ldr	r1, [r6, #0]
 800a220:	4605      	mov	r5, r0
 800a222:	b911      	cbnz	r1, 800a22a <sbrk_aligned+0x12>
 800a224:	f000 fe1c 	bl	800ae60 <_sbrk_r>
 800a228:	6030      	str	r0, [r6, #0]
 800a22a:	4621      	mov	r1, r4
 800a22c:	4628      	mov	r0, r5
 800a22e:	f000 fe17 	bl	800ae60 <_sbrk_r>
 800a232:	1c43      	adds	r3, r0, #1
 800a234:	d00a      	beq.n	800a24c <sbrk_aligned+0x34>
 800a236:	1cc4      	adds	r4, r0, #3
 800a238:	f024 0403 	bic.w	r4, r4, #3
 800a23c:	42a0      	cmp	r0, r4
 800a23e:	d007      	beq.n	800a250 <sbrk_aligned+0x38>
 800a240:	1a21      	subs	r1, r4, r0
 800a242:	4628      	mov	r0, r5
 800a244:	f000 fe0c 	bl	800ae60 <_sbrk_r>
 800a248:	3001      	adds	r0, #1
 800a24a:	d101      	bne.n	800a250 <sbrk_aligned+0x38>
 800a24c:	f04f 34ff 	mov.w	r4, #4294967295
 800a250:	4620      	mov	r0, r4
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	20000d34 	.word	0x20000d34

0800a258 <_malloc_r>:
 800a258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a25c:	1ccd      	adds	r5, r1, #3
 800a25e:	f025 0503 	bic.w	r5, r5, #3
 800a262:	3508      	adds	r5, #8
 800a264:	2d0c      	cmp	r5, #12
 800a266:	bf38      	it	cc
 800a268:	250c      	movcc	r5, #12
 800a26a:	2d00      	cmp	r5, #0
 800a26c:	4607      	mov	r7, r0
 800a26e:	db01      	blt.n	800a274 <_malloc_r+0x1c>
 800a270:	42a9      	cmp	r1, r5
 800a272:	d905      	bls.n	800a280 <_malloc_r+0x28>
 800a274:	230c      	movs	r3, #12
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	2600      	movs	r6, #0
 800a27a:	4630      	mov	r0, r6
 800a27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a280:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a354 <_malloc_r+0xfc>
 800a284:	f000 f868 	bl	800a358 <__malloc_lock>
 800a288:	f8d8 3000 	ldr.w	r3, [r8]
 800a28c:	461c      	mov	r4, r3
 800a28e:	bb5c      	cbnz	r4, 800a2e8 <_malloc_r+0x90>
 800a290:	4629      	mov	r1, r5
 800a292:	4638      	mov	r0, r7
 800a294:	f7ff ffc0 	bl	800a218 <sbrk_aligned>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	4604      	mov	r4, r0
 800a29c:	d155      	bne.n	800a34a <_malloc_r+0xf2>
 800a29e:	f8d8 4000 	ldr.w	r4, [r8]
 800a2a2:	4626      	mov	r6, r4
 800a2a4:	2e00      	cmp	r6, #0
 800a2a6:	d145      	bne.n	800a334 <_malloc_r+0xdc>
 800a2a8:	2c00      	cmp	r4, #0
 800a2aa:	d048      	beq.n	800a33e <_malloc_r+0xe6>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	eb04 0903 	add.w	r9, r4, r3
 800a2b6:	f000 fdd3 	bl	800ae60 <_sbrk_r>
 800a2ba:	4581      	cmp	r9, r0
 800a2bc:	d13f      	bne.n	800a33e <_malloc_r+0xe6>
 800a2be:	6821      	ldr	r1, [r4, #0]
 800a2c0:	1a6d      	subs	r5, r5, r1
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	f7ff ffa7 	bl	800a218 <sbrk_aligned>
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	d037      	beq.n	800a33e <_malloc_r+0xe6>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	442b      	add	r3, r5
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d038      	beq.n	800a34e <_malloc_r+0xf6>
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	42a2      	cmp	r2, r4
 800a2e0:	d12b      	bne.n	800a33a <_malloc_r+0xe2>
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	605a      	str	r2, [r3, #4]
 800a2e6:	e00f      	b.n	800a308 <_malloc_r+0xb0>
 800a2e8:	6822      	ldr	r2, [r4, #0]
 800a2ea:	1b52      	subs	r2, r2, r5
 800a2ec:	d41f      	bmi.n	800a32e <_malloc_r+0xd6>
 800a2ee:	2a0b      	cmp	r2, #11
 800a2f0:	d917      	bls.n	800a322 <_malloc_r+0xca>
 800a2f2:	1961      	adds	r1, r4, r5
 800a2f4:	42a3      	cmp	r3, r4
 800a2f6:	6025      	str	r5, [r4, #0]
 800a2f8:	bf18      	it	ne
 800a2fa:	6059      	strne	r1, [r3, #4]
 800a2fc:	6863      	ldr	r3, [r4, #4]
 800a2fe:	bf08      	it	eq
 800a300:	f8c8 1000 	streq.w	r1, [r8]
 800a304:	5162      	str	r2, [r4, r5]
 800a306:	604b      	str	r3, [r1, #4]
 800a308:	4638      	mov	r0, r7
 800a30a:	f104 060b 	add.w	r6, r4, #11
 800a30e:	f000 f829 	bl	800a364 <__malloc_unlock>
 800a312:	f026 0607 	bic.w	r6, r6, #7
 800a316:	1d23      	adds	r3, r4, #4
 800a318:	1af2      	subs	r2, r6, r3
 800a31a:	d0ae      	beq.n	800a27a <_malloc_r+0x22>
 800a31c:	1b9b      	subs	r3, r3, r6
 800a31e:	50a3      	str	r3, [r4, r2]
 800a320:	e7ab      	b.n	800a27a <_malloc_r+0x22>
 800a322:	42a3      	cmp	r3, r4
 800a324:	6862      	ldr	r2, [r4, #4]
 800a326:	d1dd      	bne.n	800a2e4 <_malloc_r+0x8c>
 800a328:	f8c8 2000 	str.w	r2, [r8]
 800a32c:	e7ec      	b.n	800a308 <_malloc_r+0xb0>
 800a32e:	4623      	mov	r3, r4
 800a330:	6864      	ldr	r4, [r4, #4]
 800a332:	e7ac      	b.n	800a28e <_malloc_r+0x36>
 800a334:	4634      	mov	r4, r6
 800a336:	6876      	ldr	r6, [r6, #4]
 800a338:	e7b4      	b.n	800a2a4 <_malloc_r+0x4c>
 800a33a:	4613      	mov	r3, r2
 800a33c:	e7cc      	b.n	800a2d8 <_malloc_r+0x80>
 800a33e:	230c      	movs	r3, #12
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	4638      	mov	r0, r7
 800a344:	f000 f80e 	bl	800a364 <__malloc_unlock>
 800a348:	e797      	b.n	800a27a <_malloc_r+0x22>
 800a34a:	6025      	str	r5, [r4, #0]
 800a34c:	e7dc      	b.n	800a308 <_malloc_r+0xb0>
 800a34e:	605b      	str	r3, [r3, #4]
 800a350:	deff      	udf	#255	; 0xff
 800a352:	bf00      	nop
 800a354:	20000d30 	.word	0x20000d30

0800a358 <__malloc_lock>:
 800a358:	4801      	ldr	r0, [pc, #4]	; (800a360 <__malloc_lock+0x8>)
 800a35a:	f7ff bf00 	b.w	800a15e <__retarget_lock_acquire_recursive>
 800a35e:	bf00      	nop
 800a360:	20000d2c 	.word	0x20000d2c

0800a364 <__malloc_unlock>:
 800a364:	4801      	ldr	r0, [pc, #4]	; (800a36c <__malloc_unlock+0x8>)
 800a366:	f7ff befb 	b.w	800a160 <__retarget_lock_release_recursive>
 800a36a:	bf00      	nop
 800a36c:	20000d2c 	.word	0x20000d2c

0800a370 <__ssputs_r>:
 800a370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a374:	688e      	ldr	r6, [r1, #8]
 800a376:	461f      	mov	r7, r3
 800a378:	42be      	cmp	r6, r7
 800a37a:	680b      	ldr	r3, [r1, #0]
 800a37c:	4682      	mov	sl, r0
 800a37e:	460c      	mov	r4, r1
 800a380:	4690      	mov	r8, r2
 800a382:	d82c      	bhi.n	800a3de <__ssputs_r+0x6e>
 800a384:	898a      	ldrh	r2, [r1, #12]
 800a386:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a38a:	d026      	beq.n	800a3da <__ssputs_r+0x6a>
 800a38c:	6965      	ldr	r5, [r4, #20]
 800a38e:	6909      	ldr	r1, [r1, #16]
 800a390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a394:	eba3 0901 	sub.w	r9, r3, r1
 800a398:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a39c:	1c7b      	adds	r3, r7, #1
 800a39e:	444b      	add	r3, r9
 800a3a0:	106d      	asrs	r5, r5, #1
 800a3a2:	429d      	cmp	r5, r3
 800a3a4:	bf38      	it	cc
 800a3a6:	461d      	movcc	r5, r3
 800a3a8:	0553      	lsls	r3, r2, #21
 800a3aa:	d527      	bpl.n	800a3fc <__ssputs_r+0x8c>
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	f7ff ff53 	bl	800a258 <_malloc_r>
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	b360      	cbz	r0, 800a410 <__ssputs_r+0xa0>
 800a3b6:	6921      	ldr	r1, [r4, #16]
 800a3b8:	464a      	mov	r2, r9
 800a3ba:	f7ff fed2 	bl	800a162 <memcpy>
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	6126      	str	r6, [r4, #16]
 800a3cc:	6165      	str	r5, [r4, #20]
 800a3ce:	444e      	add	r6, r9
 800a3d0:	eba5 0509 	sub.w	r5, r5, r9
 800a3d4:	6026      	str	r6, [r4, #0]
 800a3d6:	60a5      	str	r5, [r4, #8]
 800a3d8:	463e      	mov	r6, r7
 800a3da:	42be      	cmp	r6, r7
 800a3dc:	d900      	bls.n	800a3e0 <__ssputs_r+0x70>
 800a3de:	463e      	mov	r6, r7
 800a3e0:	6820      	ldr	r0, [r4, #0]
 800a3e2:	4632      	mov	r2, r6
 800a3e4:	4641      	mov	r1, r8
 800a3e6:	f000 fcff 	bl	800ade8 <memmove>
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	1b9b      	subs	r3, r3, r6
 800a3ee:	60a3      	str	r3, [r4, #8]
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	4433      	add	r3, r6
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	f000 fd3f 	bl	800ae80 <_realloc_r>
 800a402:	4606      	mov	r6, r0
 800a404:	2800      	cmp	r0, #0
 800a406:	d1e0      	bne.n	800a3ca <__ssputs_r+0x5a>
 800a408:	6921      	ldr	r1, [r4, #16]
 800a40a:	4650      	mov	r0, sl
 800a40c:	f7ff feb8 	bl	800a180 <_free_r>
 800a410:	230c      	movs	r3, #12
 800a412:	f8ca 3000 	str.w	r3, [sl]
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a41c:	81a3      	strh	r3, [r4, #12]
 800a41e:	f04f 30ff 	mov.w	r0, #4294967295
 800a422:	e7e9      	b.n	800a3f8 <__ssputs_r+0x88>

0800a424 <_svfiprintf_r>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	4698      	mov	r8, r3
 800a42a:	898b      	ldrh	r3, [r1, #12]
 800a42c:	061b      	lsls	r3, r3, #24
 800a42e:	b09d      	sub	sp, #116	; 0x74
 800a430:	4607      	mov	r7, r0
 800a432:	460d      	mov	r5, r1
 800a434:	4614      	mov	r4, r2
 800a436:	d50e      	bpl.n	800a456 <_svfiprintf_r+0x32>
 800a438:	690b      	ldr	r3, [r1, #16]
 800a43a:	b963      	cbnz	r3, 800a456 <_svfiprintf_r+0x32>
 800a43c:	2140      	movs	r1, #64	; 0x40
 800a43e:	f7ff ff0b 	bl	800a258 <_malloc_r>
 800a442:	6028      	str	r0, [r5, #0]
 800a444:	6128      	str	r0, [r5, #16]
 800a446:	b920      	cbnz	r0, 800a452 <_svfiprintf_r+0x2e>
 800a448:	230c      	movs	r3, #12
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	e0d0      	b.n	800a5f4 <_svfiprintf_r+0x1d0>
 800a452:	2340      	movs	r3, #64	; 0x40
 800a454:	616b      	str	r3, [r5, #20]
 800a456:	2300      	movs	r3, #0
 800a458:	9309      	str	r3, [sp, #36]	; 0x24
 800a45a:	2320      	movs	r3, #32
 800a45c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a460:	f8cd 800c 	str.w	r8, [sp, #12]
 800a464:	2330      	movs	r3, #48	; 0x30
 800a466:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a60c <_svfiprintf_r+0x1e8>
 800a46a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a46e:	f04f 0901 	mov.w	r9, #1
 800a472:	4623      	mov	r3, r4
 800a474:	469a      	mov	sl, r3
 800a476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a47a:	b10a      	cbz	r2, 800a480 <_svfiprintf_r+0x5c>
 800a47c:	2a25      	cmp	r2, #37	; 0x25
 800a47e:	d1f9      	bne.n	800a474 <_svfiprintf_r+0x50>
 800a480:	ebba 0b04 	subs.w	fp, sl, r4
 800a484:	d00b      	beq.n	800a49e <_svfiprintf_r+0x7a>
 800a486:	465b      	mov	r3, fp
 800a488:	4622      	mov	r2, r4
 800a48a:	4629      	mov	r1, r5
 800a48c:	4638      	mov	r0, r7
 800a48e:	f7ff ff6f 	bl	800a370 <__ssputs_r>
 800a492:	3001      	adds	r0, #1
 800a494:	f000 80a9 	beq.w	800a5ea <_svfiprintf_r+0x1c6>
 800a498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49a:	445a      	add	r2, fp
 800a49c:	9209      	str	r2, [sp, #36]	; 0x24
 800a49e:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 80a1 	beq.w	800a5ea <_svfiprintf_r+0x1c6>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b2:	f10a 0a01 	add.w	sl, sl, #1
 800a4b6:	9304      	str	r3, [sp, #16]
 800a4b8:	9307      	str	r3, [sp, #28]
 800a4ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4be:	931a      	str	r3, [sp, #104]	; 0x68
 800a4c0:	4654      	mov	r4, sl
 800a4c2:	2205      	movs	r2, #5
 800a4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c8:	4850      	ldr	r0, [pc, #320]	; (800a60c <_svfiprintf_r+0x1e8>)
 800a4ca:	f7f5 fe99 	bl	8000200 <memchr>
 800a4ce:	9a04      	ldr	r2, [sp, #16]
 800a4d0:	b9d8      	cbnz	r0, 800a50a <_svfiprintf_r+0xe6>
 800a4d2:	06d0      	lsls	r0, r2, #27
 800a4d4:	bf44      	itt	mi
 800a4d6:	2320      	movmi	r3, #32
 800a4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4dc:	0711      	lsls	r1, r2, #28
 800a4de:	bf44      	itt	mi
 800a4e0:	232b      	movmi	r3, #43	; 0x2b
 800a4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ec:	d015      	beq.n	800a51a <_svfiprintf_r+0xf6>
 800a4ee:	9a07      	ldr	r2, [sp, #28]
 800a4f0:	4654      	mov	r4, sl
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f04f 0c0a 	mov.w	ip, #10
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4fe:	3b30      	subs	r3, #48	; 0x30
 800a500:	2b09      	cmp	r3, #9
 800a502:	d94d      	bls.n	800a5a0 <_svfiprintf_r+0x17c>
 800a504:	b1b0      	cbz	r0, 800a534 <_svfiprintf_r+0x110>
 800a506:	9207      	str	r2, [sp, #28]
 800a508:	e014      	b.n	800a534 <_svfiprintf_r+0x110>
 800a50a:	eba0 0308 	sub.w	r3, r0, r8
 800a50e:	fa09 f303 	lsl.w	r3, r9, r3
 800a512:	4313      	orrs	r3, r2
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	46a2      	mov	sl, r4
 800a518:	e7d2      	b.n	800a4c0 <_svfiprintf_r+0x9c>
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	1d19      	adds	r1, r3, #4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	9103      	str	r1, [sp, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	bfbb      	ittet	lt
 800a526:	425b      	neglt	r3, r3
 800a528:	f042 0202 	orrlt.w	r2, r2, #2
 800a52c:	9307      	strge	r3, [sp, #28]
 800a52e:	9307      	strlt	r3, [sp, #28]
 800a530:	bfb8      	it	lt
 800a532:	9204      	strlt	r2, [sp, #16]
 800a534:	7823      	ldrb	r3, [r4, #0]
 800a536:	2b2e      	cmp	r3, #46	; 0x2e
 800a538:	d10c      	bne.n	800a554 <_svfiprintf_r+0x130>
 800a53a:	7863      	ldrb	r3, [r4, #1]
 800a53c:	2b2a      	cmp	r3, #42	; 0x2a
 800a53e:	d134      	bne.n	800a5aa <_svfiprintf_r+0x186>
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	1d1a      	adds	r2, r3, #4
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	9203      	str	r2, [sp, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bfb8      	it	lt
 800a54c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a550:	3402      	adds	r4, #2
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a61c <_svfiprintf_r+0x1f8>
 800a558:	7821      	ldrb	r1, [r4, #0]
 800a55a:	2203      	movs	r2, #3
 800a55c:	4650      	mov	r0, sl
 800a55e:	f7f5 fe4f 	bl	8000200 <memchr>
 800a562:	b138      	cbz	r0, 800a574 <_svfiprintf_r+0x150>
 800a564:	9b04      	ldr	r3, [sp, #16]
 800a566:	eba0 000a 	sub.w	r0, r0, sl
 800a56a:	2240      	movs	r2, #64	; 0x40
 800a56c:	4082      	lsls	r2, r0
 800a56e:	4313      	orrs	r3, r2
 800a570:	3401      	adds	r4, #1
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a578:	4825      	ldr	r0, [pc, #148]	; (800a610 <_svfiprintf_r+0x1ec>)
 800a57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a57e:	2206      	movs	r2, #6
 800a580:	f7f5 fe3e 	bl	8000200 <memchr>
 800a584:	2800      	cmp	r0, #0
 800a586:	d038      	beq.n	800a5fa <_svfiprintf_r+0x1d6>
 800a588:	4b22      	ldr	r3, [pc, #136]	; (800a614 <_svfiprintf_r+0x1f0>)
 800a58a:	bb1b      	cbnz	r3, 800a5d4 <_svfiprintf_r+0x1b0>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	3307      	adds	r3, #7
 800a590:	f023 0307 	bic.w	r3, r3, #7
 800a594:	3308      	adds	r3, #8
 800a596:	9303      	str	r3, [sp, #12]
 800a598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59a:	4433      	add	r3, r6
 800a59c:	9309      	str	r3, [sp, #36]	; 0x24
 800a59e:	e768      	b.n	800a472 <_svfiprintf_r+0x4e>
 800a5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	e7a6      	b.n	800a4f8 <_svfiprintf_r+0xd4>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	3401      	adds	r4, #1
 800a5ae:	9305      	str	r3, [sp, #20]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f04f 0c0a 	mov.w	ip, #10
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5bc:	3a30      	subs	r2, #48	; 0x30
 800a5be:	2a09      	cmp	r2, #9
 800a5c0:	d903      	bls.n	800a5ca <_svfiprintf_r+0x1a6>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0c6      	beq.n	800a554 <_svfiprintf_r+0x130>
 800a5c6:	9105      	str	r1, [sp, #20]
 800a5c8:	e7c4      	b.n	800a554 <_svfiprintf_r+0x130>
 800a5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e7f0      	b.n	800a5b6 <_svfiprintf_r+0x192>
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4b0f      	ldr	r3, [pc, #60]	; (800a618 <_svfiprintf_r+0x1f4>)
 800a5dc:	a904      	add	r1, sp, #16
 800a5de:	4638      	mov	r0, r7
 800a5e0:	f3af 8000 	nop.w
 800a5e4:	1c42      	adds	r2, r0, #1
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	d1d6      	bne.n	800a598 <_svfiprintf_r+0x174>
 800a5ea:	89ab      	ldrh	r3, [r5, #12]
 800a5ec:	065b      	lsls	r3, r3, #25
 800a5ee:	f53f af2d 	bmi.w	800a44c <_svfiprintf_r+0x28>
 800a5f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5f4:	b01d      	add	sp, #116	; 0x74
 800a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fa:	ab03      	add	r3, sp, #12
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	462a      	mov	r2, r5
 800a600:	4b05      	ldr	r3, [pc, #20]	; (800a618 <_svfiprintf_r+0x1f4>)
 800a602:	a904      	add	r1, sp, #16
 800a604:	4638      	mov	r0, r7
 800a606:	f000 f9bd 	bl	800a984 <_printf_i>
 800a60a:	e7eb      	b.n	800a5e4 <_svfiprintf_r+0x1c0>
 800a60c:	0800b4dc 	.word	0x0800b4dc
 800a610:	0800b4e6 	.word	0x0800b4e6
 800a614:	00000000 	.word	0x00000000
 800a618:	0800a371 	.word	0x0800a371
 800a61c:	0800b4e2 	.word	0x0800b4e2

0800a620 <__sfputc_r>:
 800a620:	6893      	ldr	r3, [r2, #8]
 800a622:	3b01      	subs	r3, #1
 800a624:	2b00      	cmp	r3, #0
 800a626:	b410      	push	{r4}
 800a628:	6093      	str	r3, [r2, #8]
 800a62a:	da08      	bge.n	800a63e <__sfputc_r+0x1e>
 800a62c:	6994      	ldr	r4, [r2, #24]
 800a62e:	42a3      	cmp	r3, r4
 800a630:	db01      	blt.n	800a636 <__sfputc_r+0x16>
 800a632:	290a      	cmp	r1, #10
 800a634:	d103      	bne.n	800a63e <__sfputc_r+0x1e>
 800a636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a63a:	f7ff bc82 	b.w	8009f42 <__swbuf_r>
 800a63e:	6813      	ldr	r3, [r2, #0]
 800a640:	1c58      	adds	r0, r3, #1
 800a642:	6010      	str	r0, [r2, #0]
 800a644:	7019      	strb	r1, [r3, #0]
 800a646:	4608      	mov	r0, r1
 800a648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <__sfputs_r>:
 800a64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a650:	4606      	mov	r6, r0
 800a652:	460f      	mov	r7, r1
 800a654:	4614      	mov	r4, r2
 800a656:	18d5      	adds	r5, r2, r3
 800a658:	42ac      	cmp	r4, r5
 800a65a:	d101      	bne.n	800a660 <__sfputs_r+0x12>
 800a65c:	2000      	movs	r0, #0
 800a65e:	e007      	b.n	800a670 <__sfputs_r+0x22>
 800a660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a664:	463a      	mov	r2, r7
 800a666:	4630      	mov	r0, r6
 800a668:	f7ff ffda 	bl	800a620 <__sfputc_r>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d1f3      	bne.n	800a658 <__sfputs_r+0xa>
 800a670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a674 <_vfiprintf_r>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	460d      	mov	r5, r1
 800a67a:	b09d      	sub	sp, #116	; 0x74
 800a67c:	4614      	mov	r4, r2
 800a67e:	4698      	mov	r8, r3
 800a680:	4606      	mov	r6, r0
 800a682:	b118      	cbz	r0, 800a68c <_vfiprintf_r+0x18>
 800a684:	6a03      	ldr	r3, [r0, #32]
 800a686:	b90b      	cbnz	r3, 800a68c <_vfiprintf_r+0x18>
 800a688:	f7ff fb20 	bl	8009ccc <__sinit>
 800a68c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a68e:	07d9      	lsls	r1, r3, #31
 800a690:	d405      	bmi.n	800a69e <_vfiprintf_r+0x2a>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	059a      	lsls	r2, r3, #22
 800a696:	d402      	bmi.n	800a69e <_vfiprintf_r+0x2a>
 800a698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a69a:	f7ff fd60 	bl	800a15e <__retarget_lock_acquire_recursive>
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	071b      	lsls	r3, r3, #28
 800a6a2:	d501      	bpl.n	800a6a8 <_vfiprintf_r+0x34>
 800a6a4:	692b      	ldr	r3, [r5, #16]
 800a6a6:	b99b      	cbnz	r3, 800a6d0 <_vfiprintf_r+0x5c>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff fc86 	bl	8009fbc <__swsetup_r>
 800a6b0:	b170      	cbz	r0, 800a6d0 <_vfiprintf_r+0x5c>
 800a6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6b4:	07dc      	lsls	r4, r3, #31
 800a6b6:	d504      	bpl.n	800a6c2 <_vfiprintf_r+0x4e>
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6bc:	b01d      	add	sp, #116	; 0x74
 800a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	0598      	lsls	r0, r3, #22
 800a6c6:	d4f7      	bmi.n	800a6b8 <_vfiprintf_r+0x44>
 800a6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ca:	f7ff fd49 	bl	800a160 <__retarget_lock_release_recursive>
 800a6ce:	e7f3      	b.n	800a6b8 <_vfiprintf_r+0x44>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d4:	2320      	movs	r3, #32
 800a6d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6de:	2330      	movs	r3, #48	; 0x30
 800a6e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a894 <_vfiprintf_r+0x220>
 800a6e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e8:	f04f 0901 	mov.w	r9, #1
 800a6ec:	4623      	mov	r3, r4
 800a6ee:	469a      	mov	sl, r3
 800a6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6f4:	b10a      	cbz	r2, 800a6fa <_vfiprintf_r+0x86>
 800a6f6:	2a25      	cmp	r2, #37	; 0x25
 800a6f8:	d1f9      	bne.n	800a6ee <_vfiprintf_r+0x7a>
 800a6fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a6fe:	d00b      	beq.n	800a718 <_vfiprintf_r+0xa4>
 800a700:	465b      	mov	r3, fp
 800a702:	4622      	mov	r2, r4
 800a704:	4629      	mov	r1, r5
 800a706:	4630      	mov	r0, r6
 800a708:	f7ff ffa1 	bl	800a64e <__sfputs_r>
 800a70c:	3001      	adds	r0, #1
 800a70e:	f000 80a9 	beq.w	800a864 <_vfiprintf_r+0x1f0>
 800a712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a714:	445a      	add	r2, fp
 800a716:	9209      	str	r2, [sp, #36]	; 0x24
 800a718:	f89a 3000 	ldrb.w	r3, [sl]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80a1 	beq.w	800a864 <_vfiprintf_r+0x1f0>
 800a722:	2300      	movs	r3, #0
 800a724:	f04f 32ff 	mov.w	r2, #4294967295
 800a728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a72c:	f10a 0a01 	add.w	sl, sl, #1
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	9307      	str	r3, [sp, #28]
 800a734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a738:	931a      	str	r3, [sp, #104]	; 0x68
 800a73a:	4654      	mov	r4, sl
 800a73c:	2205      	movs	r2, #5
 800a73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a742:	4854      	ldr	r0, [pc, #336]	; (800a894 <_vfiprintf_r+0x220>)
 800a744:	f7f5 fd5c 	bl	8000200 <memchr>
 800a748:	9a04      	ldr	r2, [sp, #16]
 800a74a:	b9d8      	cbnz	r0, 800a784 <_vfiprintf_r+0x110>
 800a74c:	06d1      	lsls	r1, r2, #27
 800a74e:	bf44      	itt	mi
 800a750:	2320      	movmi	r3, #32
 800a752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a756:	0713      	lsls	r3, r2, #28
 800a758:	bf44      	itt	mi
 800a75a:	232b      	movmi	r3, #43	; 0x2b
 800a75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a760:	f89a 3000 	ldrb.w	r3, [sl]
 800a764:	2b2a      	cmp	r3, #42	; 0x2a
 800a766:	d015      	beq.n	800a794 <_vfiprintf_r+0x120>
 800a768:	9a07      	ldr	r2, [sp, #28]
 800a76a:	4654      	mov	r4, sl
 800a76c:	2000      	movs	r0, #0
 800a76e:	f04f 0c0a 	mov.w	ip, #10
 800a772:	4621      	mov	r1, r4
 800a774:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a778:	3b30      	subs	r3, #48	; 0x30
 800a77a:	2b09      	cmp	r3, #9
 800a77c:	d94d      	bls.n	800a81a <_vfiprintf_r+0x1a6>
 800a77e:	b1b0      	cbz	r0, 800a7ae <_vfiprintf_r+0x13a>
 800a780:	9207      	str	r2, [sp, #28]
 800a782:	e014      	b.n	800a7ae <_vfiprintf_r+0x13a>
 800a784:	eba0 0308 	sub.w	r3, r0, r8
 800a788:	fa09 f303 	lsl.w	r3, r9, r3
 800a78c:	4313      	orrs	r3, r2
 800a78e:	9304      	str	r3, [sp, #16]
 800a790:	46a2      	mov	sl, r4
 800a792:	e7d2      	b.n	800a73a <_vfiprintf_r+0xc6>
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	1d19      	adds	r1, r3, #4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	9103      	str	r1, [sp, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	bfbb      	ittet	lt
 800a7a0:	425b      	neglt	r3, r3
 800a7a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7a6:	9307      	strge	r3, [sp, #28]
 800a7a8:	9307      	strlt	r3, [sp, #28]
 800a7aa:	bfb8      	it	lt
 800a7ac:	9204      	strlt	r2, [sp, #16]
 800a7ae:	7823      	ldrb	r3, [r4, #0]
 800a7b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7b2:	d10c      	bne.n	800a7ce <_vfiprintf_r+0x15a>
 800a7b4:	7863      	ldrb	r3, [r4, #1]
 800a7b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b8:	d134      	bne.n	800a824 <_vfiprintf_r+0x1b0>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	1d1a      	adds	r2, r3, #4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	9203      	str	r2, [sp, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	bfb8      	it	lt
 800a7c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ca:	3402      	adds	r4, #2
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a8a4 <_vfiprintf_r+0x230>
 800a7d2:	7821      	ldrb	r1, [r4, #0]
 800a7d4:	2203      	movs	r2, #3
 800a7d6:	4650      	mov	r0, sl
 800a7d8:	f7f5 fd12 	bl	8000200 <memchr>
 800a7dc:	b138      	cbz	r0, 800a7ee <_vfiprintf_r+0x17a>
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	eba0 000a 	sub.w	r0, r0, sl
 800a7e4:	2240      	movs	r2, #64	; 0x40
 800a7e6:	4082      	lsls	r2, r0
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	3401      	adds	r4, #1
 800a7ec:	9304      	str	r3, [sp, #16]
 800a7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f2:	4829      	ldr	r0, [pc, #164]	; (800a898 <_vfiprintf_r+0x224>)
 800a7f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7f8:	2206      	movs	r2, #6
 800a7fa:	f7f5 fd01 	bl	8000200 <memchr>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d03f      	beq.n	800a882 <_vfiprintf_r+0x20e>
 800a802:	4b26      	ldr	r3, [pc, #152]	; (800a89c <_vfiprintf_r+0x228>)
 800a804:	bb1b      	cbnz	r3, 800a84e <_vfiprintf_r+0x1da>
 800a806:	9b03      	ldr	r3, [sp, #12]
 800a808:	3307      	adds	r3, #7
 800a80a:	f023 0307 	bic.w	r3, r3, #7
 800a80e:	3308      	adds	r3, #8
 800a810:	9303      	str	r3, [sp, #12]
 800a812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a814:	443b      	add	r3, r7
 800a816:	9309      	str	r3, [sp, #36]	; 0x24
 800a818:	e768      	b.n	800a6ec <_vfiprintf_r+0x78>
 800a81a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a81e:	460c      	mov	r4, r1
 800a820:	2001      	movs	r0, #1
 800a822:	e7a6      	b.n	800a772 <_vfiprintf_r+0xfe>
 800a824:	2300      	movs	r3, #0
 800a826:	3401      	adds	r4, #1
 800a828:	9305      	str	r3, [sp, #20]
 800a82a:	4619      	mov	r1, r3
 800a82c:	f04f 0c0a 	mov.w	ip, #10
 800a830:	4620      	mov	r0, r4
 800a832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a836:	3a30      	subs	r2, #48	; 0x30
 800a838:	2a09      	cmp	r2, #9
 800a83a:	d903      	bls.n	800a844 <_vfiprintf_r+0x1d0>
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d0c6      	beq.n	800a7ce <_vfiprintf_r+0x15a>
 800a840:	9105      	str	r1, [sp, #20]
 800a842:	e7c4      	b.n	800a7ce <_vfiprintf_r+0x15a>
 800a844:	fb0c 2101 	mla	r1, ip, r1, r2
 800a848:	4604      	mov	r4, r0
 800a84a:	2301      	movs	r3, #1
 800a84c:	e7f0      	b.n	800a830 <_vfiprintf_r+0x1bc>
 800a84e:	ab03      	add	r3, sp, #12
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	462a      	mov	r2, r5
 800a854:	4b12      	ldr	r3, [pc, #72]	; (800a8a0 <_vfiprintf_r+0x22c>)
 800a856:	a904      	add	r1, sp, #16
 800a858:	4630      	mov	r0, r6
 800a85a:	f3af 8000 	nop.w
 800a85e:	4607      	mov	r7, r0
 800a860:	1c78      	adds	r0, r7, #1
 800a862:	d1d6      	bne.n	800a812 <_vfiprintf_r+0x19e>
 800a864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a866:	07d9      	lsls	r1, r3, #31
 800a868:	d405      	bmi.n	800a876 <_vfiprintf_r+0x202>
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	059a      	lsls	r2, r3, #22
 800a86e:	d402      	bmi.n	800a876 <_vfiprintf_r+0x202>
 800a870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a872:	f7ff fc75 	bl	800a160 <__retarget_lock_release_recursive>
 800a876:	89ab      	ldrh	r3, [r5, #12]
 800a878:	065b      	lsls	r3, r3, #25
 800a87a:	f53f af1d 	bmi.w	800a6b8 <_vfiprintf_r+0x44>
 800a87e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a880:	e71c      	b.n	800a6bc <_vfiprintf_r+0x48>
 800a882:	ab03      	add	r3, sp, #12
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	462a      	mov	r2, r5
 800a888:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <_vfiprintf_r+0x22c>)
 800a88a:	a904      	add	r1, sp, #16
 800a88c:	4630      	mov	r0, r6
 800a88e:	f000 f879 	bl	800a984 <_printf_i>
 800a892:	e7e4      	b.n	800a85e <_vfiprintf_r+0x1ea>
 800a894:	0800b4dc 	.word	0x0800b4dc
 800a898:	0800b4e6 	.word	0x0800b4e6
 800a89c:	00000000 	.word	0x00000000
 800a8a0:	0800a64f 	.word	0x0800a64f
 800a8a4:	0800b4e2 	.word	0x0800b4e2

0800a8a8 <_printf_common>:
 800a8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ac:	4616      	mov	r6, r2
 800a8ae:	4699      	mov	r9, r3
 800a8b0:	688a      	ldr	r2, [r1, #8]
 800a8b2:	690b      	ldr	r3, [r1, #16]
 800a8b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	bfb8      	it	lt
 800a8bc:	4613      	movlt	r3, r2
 800a8be:	6033      	str	r3, [r6, #0]
 800a8c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	b10a      	cbz	r2, 800a8ce <_printf_common+0x26>
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	6033      	str	r3, [r6, #0]
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	0699      	lsls	r1, r3, #26
 800a8d2:	bf42      	ittt	mi
 800a8d4:	6833      	ldrmi	r3, [r6, #0]
 800a8d6:	3302      	addmi	r3, #2
 800a8d8:	6033      	strmi	r3, [r6, #0]
 800a8da:	6825      	ldr	r5, [r4, #0]
 800a8dc:	f015 0506 	ands.w	r5, r5, #6
 800a8e0:	d106      	bne.n	800a8f0 <_printf_common+0x48>
 800a8e2:	f104 0a19 	add.w	sl, r4, #25
 800a8e6:	68e3      	ldr	r3, [r4, #12]
 800a8e8:	6832      	ldr	r2, [r6, #0]
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	42ab      	cmp	r3, r5
 800a8ee:	dc26      	bgt.n	800a93e <_printf_common+0x96>
 800a8f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8f4:	1e13      	subs	r3, r2, #0
 800a8f6:	6822      	ldr	r2, [r4, #0]
 800a8f8:	bf18      	it	ne
 800a8fa:	2301      	movne	r3, #1
 800a8fc:	0692      	lsls	r2, r2, #26
 800a8fe:	d42b      	bmi.n	800a958 <_printf_common+0xb0>
 800a900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a904:	4649      	mov	r1, r9
 800a906:	4638      	mov	r0, r7
 800a908:	47c0      	blx	r8
 800a90a:	3001      	adds	r0, #1
 800a90c:	d01e      	beq.n	800a94c <_printf_common+0xa4>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	6922      	ldr	r2, [r4, #16]
 800a912:	f003 0306 	and.w	r3, r3, #6
 800a916:	2b04      	cmp	r3, #4
 800a918:	bf02      	ittt	eq
 800a91a:	68e5      	ldreq	r5, [r4, #12]
 800a91c:	6833      	ldreq	r3, [r6, #0]
 800a91e:	1aed      	subeq	r5, r5, r3
 800a920:	68a3      	ldr	r3, [r4, #8]
 800a922:	bf0c      	ite	eq
 800a924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a928:	2500      	movne	r5, #0
 800a92a:	4293      	cmp	r3, r2
 800a92c:	bfc4      	itt	gt
 800a92e:	1a9b      	subgt	r3, r3, r2
 800a930:	18ed      	addgt	r5, r5, r3
 800a932:	2600      	movs	r6, #0
 800a934:	341a      	adds	r4, #26
 800a936:	42b5      	cmp	r5, r6
 800a938:	d11a      	bne.n	800a970 <_printf_common+0xc8>
 800a93a:	2000      	movs	r0, #0
 800a93c:	e008      	b.n	800a950 <_printf_common+0xa8>
 800a93e:	2301      	movs	r3, #1
 800a940:	4652      	mov	r2, sl
 800a942:	4649      	mov	r1, r9
 800a944:	4638      	mov	r0, r7
 800a946:	47c0      	blx	r8
 800a948:	3001      	adds	r0, #1
 800a94a:	d103      	bne.n	800a954 <_printf_common+0xac>
 800a94c:	f04f 30ff 	mov.w	r0, #4294967295
 800a950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a954:	3501      	adds	r5, #1
 800a956:	e7c6      	b.n	800a8e6 <_printf_common+0x3e>
 800a958:	18e1      	adds	r1, r4, r3
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	2030      	movs	r0, #48	; 0x30
 800a95e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a962:	4422      	add	r2, r4
 800a964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a96c:	3302      	adds	r3, #2
 800a96e:	e7c7      	b.n	800a900 <_printf_common+0x58>
 800a970:	2301      	movs	r3, #1
 800a972:	4622      	mov	r2, r4
 800a974:	4649      	mov	r1, r9
 800a976:	4638      	mov	r0, r7
 800a978:	47c0      	blx	r8
 800a97a:	3001      	adds	r0, #1
 800a97c:	d0e6      	beq.n	800a94c <_printf_common+0xa4>
 800a97e:	3601      	adds	r6, #1
 800a980:	e7d9      	b.n	800a936 <_printf_common+0x8e>
	...

0800a984 <_printf_i>:
 800a984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a988:	7e0f      	ldrb	r7, [r1, #24]
 800a98a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a98c:	2f78      	cmp	r7, #120	; 0x78
 800a98e:	4691      	mov	r9, r2
 800a990:	4680      	mov	r8, r0
 800a992:	460c      	mov	r4, r1
 800a994:	469a      	mov	sl, r3
 800a996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a99a:	d807      	bhi.n	800a9ac <_printf_i+0x28>
 800a99c:	2f62      	cmp	r7, #98	; 0x62
 800a99e:	d80a      	bhi.n	800a9b6 <_printf_i+0x32>
 800a9a0:	2f00      	cmp	r7, #0
 800a9a2:	f000 80d4 	beq.w	800ab4e <_printf_i+0x1ca>
 800a9a6:	2f58      	cmp	r7, #88	; 0x58
 800a9a8:	f000 80c0 	beq.w	800ab2c <_printf_i+0x1a8>
 800a9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9b4:	e03a      	b.n	800aa2c <_printf_i+0xa8>
 800a9b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9ba:	2b15      	cmp	r3, #21
 800a9bc:	d8f6      	bhi.n	800a9ac <_printf_i+0x28>
 800a9be:	a101      	add	r1, pc, #4	; (adr r1, 800a9c4 <_printf_i+0x40>)
 800a9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9c4:	0800aa1d 	.word	0x0800aa1d
 800a9c8:	0800aa31 	.word	0x0800aa31
 800a9cc:	0800a9ad 	.word	0x0800a9ad
 800a9d0:	0800a9ad 	.word	0x0800a9ad
 800a9d4:	0800a9ad 	.word	0x0800a9ad
 800a9d8:	0800a9ad 	.word	0x0800a9ad
 800a9dc:	0800aa31 	.word	0x0800aa31
 800a9e0:	0800a9ad 	.word	0x0800a9ad
 800a9e4:	0800a9ad 	.word	0x0800a9ad
 800a9e8:	0800a9ad 	.word	0x0800a9ad
 800a9ec:	0800a9ad 	.word	0x0800a9ad
 800a9f0:	0800ab35 	.word	0x0800ab35
 800a9f4:	0800aa5d 	.word	0x0800aa5d
 800a9f8:	0800aaef 	.word	0x0800aaef
 800a9fc:	0800a9ad 	.word	0x0800a9ad
 800aa00:	0800a9ad 	.word	0x0800a9ad
 800aa04:	0800ab57 	.word	0x0800ab57
 800aa08:	0800a9ad 	.word	0x0800a9ad
 800aa0c:	0800aa5d 	.word	0x0800aa5d
 800aa10:	0800a9ad 	.word	0x0800a9ad
 800aa14:	0800a9ad 	.word	0x0800a9ad
 800aa18:	0800aaf7 	.word	0x0800aaf7
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	1d1a      	adds	r2, r3, #4
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	602a      	str	r2, [r5, #0]
 800aa24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e09f      	b.n	800ab70 <_printf_i+0x1ec>
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	0607      	lsls	r7, r0, #24
 800aa36:	f103 0104 	add.w	r1, r3, #4
 800aa3a:	6029      	str	r1, [r5, #0]
 800aa3c:	d501      	bpl.n	800aa42 <_printf_i+0xbe>
 800aa3e:	681e      	ldr	r6, [r3, #0]
 800aa40:	e003      	b.n	800aa4a <_printf_i+0xc6>
 800aa42:	0646      	lsls	r6, r0, #25
 800aa44:	d5fb      	bpl.n	800aa3e <_printf_i+0xba>
 800aa46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa4a:	2e00      	cmp	r6, #0
 800aa4c:	da03      	bge.n	800aa56 <_printf_i+0xd2>
 800aa4e:	232d      	movs	r3, #45	; 0x2d
 800aa50:	4276      	negs	r6, r6
 800aa52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa56:	485a      	ldr	r0, [pc, #360]	; (800abc0 <_printf_i+0x23c>)
 800aa58:	230a      	movs	r3, #10
 800aa5a:	e012      	b.n	800aa82 <_printf_i+0xfe>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	6820      	ldr	r0, [r4, #0]
 800aa60:	1d19      	adds	r1, r3, #4
 800aa62:	6029      	str	r1, [r5, #0]
 800aa64:	0605      	lsls	r5, r0, #24
 800aa66:	d501      	bpl.n	800aa6c <_printf_i+0xe8>
 800aa68:	681e      	ldr	r6, [r3, #0]
 800aa6a:	e002      	b.n	800aa72 <_printf_i+0xee>
 800aa6c:	0641      	lsls	r1, r0, #25
 800aa6e:	d5fb      	bpl.n	800aa68 <_printf_i+0xe4>
 800aa70:	881e      	ldrh	r6, [r3, #0]
 800aa72:	4853      	ldr	r0, [pc, #332]	; (800abc0 <_printf_i+0x23c>)
 800aa74:	2f6f      	cmp	r7, #111	; 0x6f
 800aa76:	bf0c      	ite	eq
 800aa78:	2308      	moveq	r3, #8
 800aa7a:	230a      	movne	r3, #10
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa82:	6865      	ldr	r5, [r4, #4]
 800aa84:	60a5      	str	r5, [r4, #8]
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	bfa2      	ittt	ge
 800aa8a:	6821      	ldrge	r1, [r4, #0]
 800aa8c:	f021 0104 	bicge.w	r1, r1, #4
 800aa90:	6021      	strge	r1, [r4, #0]
 800aa92:	b90e      	cbnz	r6, 800aa98 <_printf_i+0x114>
 800aa94:	2d00      	cmp	r5, #0
 800aa96:	d04b      	beq.n	800ab30 <_printf_i+0x1ac>
 800aa98:	4615      	mov	r5, r2
 800aa9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa9e:	fb03 6711 	mls	r7, r3, r1, r6
 800aaa2:	5dc7      	ldrb	r7, [r0, r7]
 800aaa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaa8:	4637      	mov	r7, r6
 800aaaa:	42bb      	cmp	r3, r7
 800aaac:	460e      	mov	r6, r1
 800aaae:	d9f4      	bls.n	800aa9a <_printf_i+0x116>
 800aab0:	2b08      	cmp	r3, #8
 800aab2:	d10b      	bne.n	800aacc <_printf_i+0x148>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	07de      	lsls	r6, r3, #31
 800aab8:	d508      	bpl.n	800aacc <_printf_i+0x148>
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	6861      	ldr	r1, [r4, #4]
 800aabe:	4299      	cmp	r1, r3
 800aac0:	bfde      	ittt	le
 800aac2:	2330      	movle	r3, #48	; 0x30
 800aac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aacc:	1b52      	subs	r2, r2, r5
 800aace:	6122      	str	r2, [r4, #16]
 800aad0:	f8cd a000 	str.w	sl, [sp]
 800aad4:	464b      	mov	r3, r9
 800aad6:	aa03      	add	r2, sp, #12
 800aad8:	4621      	mov	r1, r4
 800aada:	4640      	mov	r0, r8
 800aadc:	f7ff fee4 	bl	800a8a8 <_printf_common>
 800aae0:	3001      	adds	r0, #1
 800aae2:	d14a      	bne.n	800ab7a <_printf_i+0x1f6>
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	b004      	add	sp, #16
 800aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	f043 0320 	orr.w	r3, r3, #32
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	4833      	ldr	r0, [pc, #204]	; (800abc4 <_printf_i+0x240>)
 800aaf8:	2778      	movs	r7, #120	; 0x78
 800aafa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	6829      	ldr	r1, [r5, #0]
 800ab02:	061f      	lsls	r7, r3, #24
 800ab04:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab08:	d402      	bmi.n	800ab10 <_printf_i+0x18c>
 800ab0a:	065f      	lsls	r7, r3, #25
 800ab0c:	bf48      	it	mi
 800ab0e:	b2b6      	uxthmi	r6, r6
 800ab10:	07df      	lsls	r7, r3, #31
 800ab12:	bf48      	it	mi
 800ab14:	f043 0320 	orrmi.w	r3, r3, #32
 800ab18:	6029      	str	r1, [r5, #0]
 800ab1a:	bf48      	it	mi
 800ab1c:	6023      	strmi	r3, [r4, #0]
 800ab1e:	b91e      	cbnz	r6, 800ab28 <_printf_i+0x1a4>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	f023 0320 	bic.w	r3, r3, #32
 800ab26:	6023      	str	r3, [r4, #0]
 800ab28:	2310      	movs	r3, #16
 800ab2a:	e7a7      	b.n	800aa7c <_printf_i+0xf8>
 800ab2c:	4824      	ldr	r0, [pc, #144]	; (800abc0 <_printf_i+0x23c>)
 800ab2e:	e7e4      	b.n	800aafa <_printf_i+0x176>
 800ab30:	4615      	mov	r5, r2
 800ab32:	e7bd      	b.n	800aab0 <_printf_i+0x12c>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	6826      	ldr	r6, [r4, #0]
 800ab38:	6961      	ldr	r1, [r4, #20]
 800ab3a:	1d18      	adds	r0, r3, #4
 800ab3c:	6028      	str	r0, [r5, #0]
 800ab3e:	0635      	lsls	r5, r6, #24
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	d501      	bpl.n	800ab48 <_printf_i+0x1c4>
 800ab44:	6019      	str	r1, [r3, #0]
 800ab46:	e002      	b.n	800ab4e <_printf_i+0x1ca>
 800ab48:	0670      	lsls	r0, r6, #25
 800ab4a:	d5fb      	bpl.n	800ab44 <_printf_i+0x1c0>
 800ab4c:	8019      	strh	r1, [r3, #0]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	6123      	str	r3, [r4, #16]
 800ab52:	4615      	mov	r5, r2
 800ab54:	e7bc      	b.n	800aad0 <_printf_i+0x14c>
 800ab56:	682b      	ldr	r3, [r5, #0]
 800ab58:	1d1a      	adds	r2, r3, #4
 800ab5a:	602a      	str	r2, [r5, #0]
 800ab5c:	681d      	ldr	r5, [r3, #0]
 800ab5e:	6862      	ldr	r2, [r4, #4]
 800ab60:	2100      	movs	r1, #0
 800ab62:	4628      	mov	r0, r5
 800ab64:	f7f5 fb4c 	bl	8000200 <memchr>
 800ab68:	b108      	cbz	r0, 800ab6e <_printf_i+0x1ea>
 800ab6a:	1b40      	subs	r0, r0, r5
 800ab6c:	6060      	str	r0, [r4, #4]
 800ab6e:	6863      	ldr	r3, [r4, #4]
 800ab70:	6123      	str	r3, [r4, #16]
 800ab72:	2300      	movs	r3, #0
 800ab74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab78:	e7aa      	b.n	800aad0 <_printf_i+0x14c>
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	462a      	mov	r2, r5
 800ab7e:	4649      	mov	r1, r9
 800ab80:	4640      	mov	r0, r8
 800ab82:	47d0      	blx	sl
 800ab84:	3001      	adds	r0, #1
 800ab86:	d0ad      	beq.n	800aae4 <_printf_i+0x160>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	079b      	lsls	r3, r3, #30
 800ab8c:	d413      	bmi.n	800abb6 <_printf_i+0x232>
 800ab8e:	68e0      	ldr	r0, [r4, #12]
 800ab90:	9b03      	ldr	r3, [sp, #12]
 800ab92:	4298      	cmp	r0, r3
 800ab94:	bfb8      	it	lt
 800ab96:	4618      	movlt	r0, r3
 800ab98:	e7a6      	b.n	800aae8 <_printf_i+0x164>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	4649      	mov	r1, r9
 800aba0:	4640      	mov	r0, r8
 800aba2:	47d0      	blx	sl
 800aba4:	3001      	adds	r0, #1
 800aba6:	d09d      	beq.n	800aae4 <_printf_i+0x160>
 800aba8:	3501      	adds	r5, #1
 800abaa:	68e3      	ldr	r3, [r4, #12]
 800abac:	9903      	ldr	r1, [sp, #12]
 800abae:	1a5b      	subs	r3, r3, r1
 800abb0:	42ab      	cmp	r3, r5
 800abb2:	dcf2      	bgt.n	800ab9a <_printf_i+0x216>
 800abb4:	e7eb      	b.n	800ab8e <_printf_i+0x20a>
 800abb6:	2500      	movs	r5, #0
 800abb8:	f104 0619 	add.w	r6, r4, #25
 800abbc:	e7f5      	b.n	800abaa <_printf_i+0x226>
 800abbe:	bf00      	nop
 800abc0:	0800b4ed 	.word	0x0800b4ed
 800abc4:	0800b4fe 	.word	0x0800b4fe

0800abc8 <__sflush_r>:
 800abc8:	898a      	ldrh	r2, [r1, #12]
 800abca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abce:	4605      	mov	r5, r0
 800abd0:	0710      	lsls	r0, r2, #28
 800abd2:	460c      	mov	r4, r1
 800abd4:	d458      	bmi.n	800ac88 <__sflush_r+0xc0>
 800abd6:	684b      	ldr	r3, [r1, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	dc05      	bgt.n	800abe8 <__sflush_r+0x20>
 800abdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abde:	2b00      	cmp	r3, #0
 800abe0:	dc02      	bgt.n	800abe8 <__sflush_r+0x20>
 800abe2:	2000      	movs	r0, #0
 800abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abea:	2e00      	cmp	r6, #0
 800abec:	d0f9      	beq.n	800abe2 <__sflush_r+0x1a>
 800abee:	2300      	movs	r3, #0
 800abf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abf4:	682f      	ldr	r7, [r5, #0]
 800abf6:	6a21      	ldr	r1, [r4, #32]
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	d032      	beq.n	800ac62 <__sflush_r+0x9a>
 800abfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	075a      	lsls	r2, r3, #29
 800ac02:	d505      	bpl.n	800ac10 <__sflush_r+0x48>
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	1ac0      	subs	r0, r0, r3
 800ac08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac0a:	b10b      	cbz	r3, 800ac10 <__sflush_r+0x48>
 800ac0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac0e:	1ac0      	subs	r0, r0, r3
 800ac10:	2300      	movs	r3, #0
 800ac12:	4602      	mov	r2, r0
 800ac14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac16:	6a21      	ldr	r1, [r4, #32]
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b0      	blx	r6
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	d106      	bne.n	800ac30 <__sflush_r+0x68>
 800ac22:	6829      	ldr	r1, [r5, #0]
 800ac24:	291d      	cmp	r1, #29
 800ac26:	d82b      	bhi.n	800ac80 <__sflush_r+0xb8>
 800ac28:	4a29      	ldr	r2, [pc, #164]	; (800acd0 <__sflush_r+0x108>)
 800ac2a:	410a      	asrs	r2, r1
 800ac2c:	07d6      	lsls	r6, r2, #31
 800ac2e:	d427      	bmi.n	800ac80 <__sflush_r+0xb8>
 800ac30:	2200      	movs	r2, #0
 800ac32:	6062      	str	r2, [r4, #4]
 800ac34:	04d9      	lsls	r1, r3, #19
 800ac36:	6922      	ldr	r2, [r4, #16]
 800ac38:	6022      	str	r2, [r4, #0]
 800ac3a:	d504      	bpl.n	800ac46 <__sflush_r+0x7e>
 800ac3c:	1c42      	adds	r2, r0, #1
 800ac3e:	d101      	bne.n	800ac44 <__sflush_r+0x7c>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b903      	cbnz	r3, 800ac46 <__sflush_r+0x7e>
 800ac44:	6560      	str	r0, [r4, #84]	; 0x54
 800ac46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac48:	602f      	str	r7, [r5, #0]
 800ac4a:	2900      	cmp	r1, #0
 800ac4c:	d0c9      	beq.n	800abe2 <__sflush_r+0x1a>
 800ac4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac52:	4299      	cmp	r1, r3
 800ac54:	d002      	beq.n	800ac5c <__sflush_r+0x94>
 800ac56:	4628      	mov	r0, r5
 800ac58:	f7ff fa92 	bl	800a180 <_free_r>
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	6360      	str	r0, [r4, #52]	; 0x34
 800ac60:	e7c0      	b.n	800abe4 <__sflush_r+0x1c>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4628      	mov	r0, r5
 800ac66:	47b0      	blx	r6
 800ac68:	1c41      	adds	r1, r0, #1
 800ac6a:	d1c8      	bne.n	800abfe <__sflush_r+0x36>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d0c5      	beq.n	800abfe <__sflush_r+0x36>
 800ac72:	2b1d      	cmp	r3, #29
 800ac74:	d001      	beq.n	800ac7a <__sflush_r+0xb2>
 800ac76:	2b16      	cmp	r3, #22
 800ac78:	d101      	bne.n	800ac7e <__sflush_r+0xb6>
 800ac7a:	602f      	str	r7, [r5, #0]
 800ac7c:	e7b1      	b.n	800abe2 <__sflush_r+0x1a>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	e7ad      	b.n	800abe4 <__sflush_r+0x1c>
 800ac88:	690f      	ldr	r7, [r1, #16]
 800ac8a:	2f00      	cmp	r7, #0
 800ac8c:	d0a9      	beq.n	800abe2 <__sflush_r+0x1a>
 800ac8e:	0793      	lsls	r3, r2, #30
 800ac90:	680e      	ldr	r6, [r1, #0]
 800ac92:	bf08      	it	eq
 800ac94:	694b      	ldreq	r3, [r1, #20]
 800ac96:	600f      	str	r7, [r1, #0]
 800ac98:	bf18      	it	ne
 800ac9a:	2300      	movne	r3, #0
 800ac9c:	eba6 0807 	sub.w	r8, r6, r7
 800aca0:	608b      	str	r3, [r1, #8]
 800aca2:	f1b8 0f00 	cmp.w	r8, #0
 800aca6:	dd9c      	ble.n	800abe2 <__sflush_r+0x1a>
 800aca8:	6a21      	ldr	r1, [r4, #32]
 800acaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acac:	4643      	mov	r3, r8
 800acae:	463a      	mov	r2, r7
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b0      	blx	r6
 800acb4:	2800      	cmp	r0, #0
 800acb6:	dc06      	bgt.n	800acc6 <__sflush_r+0xfe>
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	f04f 30ff 	mov.w	r0, #4294967295
 800acc4:	e78e      	b.n	800abe4 <__sflush_r+0x1c>
 800acc6:	4407      	add	r7, r0
 800acc8:	eba8 0800 	sub.w	r8, r8, r0
 800accc:	e7e9      	b.n	800aca2 <__sflush_r+0xda>
 800acce:	bf00      	nop
 800acd0:	dfbffffe 	.word	0xdfbffffe

0800acd4 <_fflush_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	690b      	ldr	r3, [r1, #16]
 800acd8:	4605      	mov	r5, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	b913      	cbnz	r3, 800ace4 <_fflush_r+0x10>
 800acde:	2500      	movs	r5, #0
 800ace0:	4628      	mov	r0, r5
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	b118      	cbz	r0, 800acee <_fflush_r+0x1a>
 800ace6:	6a03      	ldr	r3, [r0, #32]
 800ace8:	b90b      	cbnz	r3, 800acee <_fflush_r+0x1a>
 800acea:	f7fe ffef 	bl	8009ccc <__sinit>
 800acee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0f3      	beq.n	800acde <_fflush_r+0xa>
 800acf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acf8:	07d0      	lsls	r0, r2, #31
 800acfa:	d404      	bmi.n	800ad06 <_fflush_r+0x32>
 800acfc:	0599      	lsls	r1, r3, #22
 800acfe:	d402      	bmi.n	800ad06 <_fflush_r+0x32>
 800ad00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad02:	f7ff fa2c 	bl	800a15e <__retarget_lock_acquire_recursive>
 800ad06:	4628      	mov	r0, r5
 800ad08:	4621      	mov	r1, r4
 800ad0a:	f7ff ff5d 	bl	800abc8 <__sflush_r>
 800ad0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad10:	07da      	lsls	r2, r3, #31
 800ad12:	4605      	mov	r5, r0
 800ad14:	d4e4      	bmi.n	800ace0 <_fflush_r+0xc>
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	059b      	lsls	r3, r3, #22
 800ad1a:	d4e1      	bmi.n	800ace0 <_fflush_r+0xc>
 800ad1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad1e:	f7ff fa1f 	bl	800a160 <__retarget_lock_release_recursive>
 800ad22:	e7dd      	b.n	800ace0 <_fflush_r+0xc>

0800ad24 <__swhatbuf_r>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	460c      	mov	r4, r1
 800ad28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	b096      	sub	sp, #88	; 0x58
 800ad30:	4615      	mov	r5, r2
 800ad32:	461e      	mov	r6, r3
 800ad34:	da0d      	bge.n	800ad52 <__swhatbuf_r+0x2e>
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad3c:	f04f 0100 	mov.w	r1, #0
 800ad40:	bf0c      	ite	eq
 800ad42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad46:	2340      	movne	r3, #64	; 0x40
 800ad48:	2000      	movs	r0, #0
 800ad4a:	6031      	str	r1, [r6, #0]
 800ad4c:	602b      	str	r3, [r5, #0]
 800ad4e:	b016      	add	sp, #88	; 0x58
 800ad50:	bd70      	pop	{r4, r5, r6, pc}
 800ad52:	466a      	mov	r2, sp
 800ad54:	f000 f862 	bl	800ae1c <_fstat_r>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	dbec      	blt.n	800ad36 <__swhatbuf_r+0x12>
 800ad5c:	9901      	ldr	r1, [sp, #4]
 800ad5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad66:	4259      	negs	r1, r3
 800ad68:	4159      	adcs	r1, r3
 800ad6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6e:	e7eb      	b.n	800ad48 <__swhatbuf_r+0x24>

0800ad70 <__smakebuf_r>:
 800ad70:	898b      	ldrh	r3, [r1, #12]
 800ad72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad74:	079d      	lsls	r5, r3, #30
 800ad76:	4606      	mov	r6, r0
 800ad78:	460c      	mov	r4, r1
 800ad7a:	d507      	bpl.n	800ad8c <__smakebuf_r+0x1c>
 800ad7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	6123      	str	r3, [r4, #16]
 800ad84:	2301      	movs	r3, #1
 800ad86:	6163      	str	r3, [r4, #20]
 800ad88:	b002      	add	sp, #8
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	ab01      	add	r3, sp, #4
 800ad8e:	466a      	mov	r2, sp
 800ad90:	f7ff ffc8 	bl	800ad24 <__swhatbuf_r>
 800ad94:	9900      	ldr	r1, [sp, #0]
 800ad96:	4605      	mov	r5, r0
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f7ff fa5d 	bl	800a258 <_malloc_r>
 800ad9e:	b948      	cbnz	r0, 800adb4 <__smakebuf_r+0x44>
 800ada0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada4:	059a      	lsls	r2, r3, #22
 800ada6:	d4ef      	bmi.n	800ad88 <__smakebuf_r+0x18>
 800ada8:	f023 0303 	bic.w	r3, r3, #3
 800adac:	f043 0302 	orr.w	r3, r3, #2
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	e7e3      	b.n	800ad7c <__smakebuf_r+0xc>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	6020      	str	r0, [r4, #0]
 800adb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	9b00      	ldr	r3, [sp, #0]
 800adc0:	6163      	str	r3, [r4, #20]
 800adc2:	9b01      	ldr	r3, [sp, #4]
 800adc4:	6120      	str	r0, [r4, #16]
 800adc6:	b15b      	cbz	r3, 800ade0 <__smakebuf_r+0x70>
 800adc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adcc:	4630      	mov	r0, r6
 800adce:	f000 f837 	bl	800ae40 <_isatty_r>
 800add2:	b128      	cbz	r0, 800ade0 <__smakebuf_r+0x70>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	f023 0303 	bic.w	r3, r3, #3
 800adda:	f043 0301 	orr.w	r3, r3, #1
 800adde:	81a3      	strh	r3, [r4, #12]
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	431d      	orrs	r5, r3
 800ade4:	81a5      	strh	r5, [r4, #12]
 800ade6:	e7cf      	b.n	800ad88 <__smakebuf_r+0x18>

0800ade8 <memmove>:
 800ade8:	4288      	cmp	r0, r1
 800adea:	b510      	push	{r4, lr}
 800adec:	eb01 0402 	add.w	r4, r1, r2
 800adf0:	d902      	bls.n	800adf8 <memmove+0x10>
 800adf2:	4284      	cmp	r4, r0
 800adf4:	4623      	mov	r3, r4
 800adf6:	d807      	bhi.n	800ae08 <memmove+0x20>
 800adf8:	1e43      	subs	r3, r0, #1
 800adfa:	42a1      	cmp	r1, r4
 800adfc:	d008      	beq.n	800ae10 <memmove+0x28>
 800adfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae06:	e7f8      	b.n	800adfa <memmove+0x12>
 800ae08:	4402      	add	r2, r0
 800ae0a:	4601      	mov	r1, r0
 800ae0c:	428a      	cmp	r2, r1
 800ae0e:	d100      	bne.n	800ae12 <memmove+0x2a>
 800ae10:	bd10      	pop	{r4, pc}
 800ae12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae1a:	e7f7      	b.n	800ae0c <memmove+0x24>

0800ae1c <_fstat_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d07      	ldr	r5, [pc, #28]	; (800ae3c <_fstat_r+0x20>)
 800ae20:	2300      	movs	r3, #0
 800ae22:	4604      	mov	r4, r0
 800ae24:	4608      	mov	r0, r1
 800ae26:	4611      	mov	r1, r2
 800ae28:	602b      	str	r3, [r5, #0]
 800ae2a:	f7f7 fb20 	bl	800246e <_fstat>
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	d102      	bne.n	800ae38 <_fstat_r+0x1c>
 800ae32:	682b      	ldr	r3, [r5, #0]
 800ae34:	b103      	cbz	r3, 800ae38 <_fstat_r+0x1c>
 800ae36:	6023      	str	r3, [r4, #0]
 800ae38:	bd38      	pop	{r3, r4, r5, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000d28 	.word	0x20000d28

0800ae40 <_isatty_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4d06      	ldr	r5, [pc, #24]	; (800ae5c <_isatty_r+0x1c>)
 800ae44:	2300      	movs	r3, #0
 800ae46:	4604      	mov	r4, r0
 800ae48:	4608      	mov	r0, r1
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	f7f7 fb1f 	bl	800248e <_isatty>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d102      	bne.n	800ae5a <_isatty_r+0x1a>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	b103      	cbz	r3, 800ae5a <_isatty_r+0x1a>
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	20000d28 	.word	0x20000d28

0800ae60 <_sbrk_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d06      	ldr	r5, [pc, #24]	; (800ae7c <_sbrk_r+0x1c>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	4604      	mov	r4, r0
 800ae68:	4608      	mov	r0, r1
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	f7f7 fb28 	bl	80024c0 <_sbrk>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_sbrk_r+0x1a>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_sbrk_r+0x1a>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20000d28 	.word	0x20000d28

0800ae80 <_realloc_r>:
 800ae80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae84:	4680      	mov	r8, r0
 800ae86:	4614      	mov	r4, r2
 800ae88:	460e      	mov	r6, r1
 800ae8a:	b921      	cbnz	r1, 800ae96 <_realloc_r+0x16>
 800ae8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae90:	4611      	mov	r1, r2
 800ae92:	f7ff b9e1 	b.w	800a258 <_malloc_r>
 800ae96:	b92a      	cbnz	r2, 800aea4 <_realloc_r+0x24>
 800ae98:	f7ff f972 	bl	800a180 <_free_r>
 800ae9c:	4625      	mov	r5, r4
 800ae9e:	4628      	mov	r0, r5
 800aea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea4:	f000 f81b 	bl	800aede <_malloc_usable_size_r>
 800aea8:	4284      	cmp	r4, r0
 800aeaa:	4607      	mov	r7, r0
 800aeac:	d802      	bhi.n	800aeb4 <_realloc_r+0x34>
 800aeae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aeb2:	d812      	bhi.n	800aeda <_realloc_r+0x5a>
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	f7ff f9ce 	bl	800a258 <_malloc_r>
 800aebc:	4605      	mov	r5, r0
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d0ed      	beq.n	800ae9e <_realloc_r+0x1e>
 800aec2:	42bc      	cmp	r4, r7
 800aec4:	4622      	mov	r2, r4
 800aec6:	4631      	mov	r1, r6
 800aec8:	bf28      	it	cs
 800aeca:	463a      	movcs	r2, r7
 800aecc:	f7ff f949 	bl	800a162 <memcpy>
 800aed0:	4631      	mov	r1, r6
 800aed2:	4640      	mov	r0, r8
 800aed4:	f7ff f954 	bl	800a180 <_free_r>
 800aed8:	e7e1      	b.n	800ae9e <_realloc_r+0x1e>
 800aeda:	4635      	mov	r5, r6
 800aedc:	e7df      	b.n	800ae9e <_realloc_r+0x1e>

0800aede <_malloc_usable_size_r>:
 800aede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee2:	1f18      	subs	r0, r3, #4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bfbc      	itt	lt
 800aee8:	580b      	ldrlt	r3, [r1, r0]
 800aeea:	18c0      	addlt	r0, r0, r3
 800aeec:	4770      	bx	lr
	...

0800aef0 <_init>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	bf00      	nop
 800aef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef6:	bc08      	pop	{r3}
 800aef8:	469e      	mov	lr, r3
 800aefa:	4770      	bx	lr

0800aefc <_fini>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	bf00      	nop
 800af00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af02:	bc08      	pop	{r3}
 800af04:	469e      	mov	lr, r3
 800af06:	4770      	bx	lr
