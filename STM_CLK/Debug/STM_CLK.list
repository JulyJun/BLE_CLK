
STM_CLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c78  08007c78  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c78  08007c78  00017c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c80  08007c80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c80  08007c80  00017c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c84  08007c84  00017c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000009f4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a64  20000a64  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001afc3  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000344c  00000000  00000000  0003b0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017d8  00000000  00000000  0003e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012bf  00000000  00000000  0003fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000279ea  00000000  00000000  00040f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c778  00000000  00000000  00068979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed663  00000000  00000000  000850f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007108  00000000  00000000  00172754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0017985c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b60 	.word	0x08007b60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08007b60 	.word	0x08007b60

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
#include "lcd.h"

void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
  char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f004 fe5f 	bl	8005292 <HAL_UART_Transmit>

  HAL_StatusTypeDef res;
  for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
      res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f002 fa31 	bl	8002a50 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
	  char msg[64];
	  snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f006 fa3d 	bl	8006a84 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f004 fe38 	bl	8005292 <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
      } else {
	  HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f004 fe30 	bl	8005292 <HAL_UART_Transmit>
  for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
      }
  }

  HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f004 fe20 	bl	8005292 <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	08007b88 	.word	0x08007b88
 8000660:	20000370 	.word	0x20000370
 8000664:	200002b4 	.word	0x200002b4
 8000668:	08007b78 	.word	0x08007b78
 800066c:	08007b80 	.word	0x08007b80
 8000670:	08007b84 	.word	0x08007b84

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef res;
  for(;;) {
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f002 f9dd 	bl	8002a50 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
      if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
      res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
	break;
 80006a2:	bf00      	nop
  }

  uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
  uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

  uint8_t data_arr[4];
  data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
  data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
  data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
  data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

  res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f002 f8a6 	bl	8002854 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 f88d 	bl	800182c <HAL_Delay>
  return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200002b4 	.word	0x200002b4

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
  LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  // 4-bit mode, 2 lines, 5x7 format
  LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
  // display & cursor home (keep this!)
  LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
  // display on, right shift, underline off, blink off
  LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
  // clear display (optional here)
  LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
  while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
      LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
      str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
  while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
  }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <init>:

void init() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  I2C_Scan();
 80007dc:	f7ff fede 	bl	800059c <I2C_Scan>
  LCD_Init(LCD_ADDR);
 80007e0:	204e      	movs	r0, #78	; 0x4e
 80007e2:	f7ff ffc1 	bl	8000768 <LCD_Init>

  // set address to 0x00
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f7ff ff99 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, " Using 1602 LCD");
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <init+0x34>)
 80007f0:	204e      	movs	r0, #78	; 0x4e
 80007f2:	f7ff ffd6 	bl	80007a2 <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 80007f6:	21c0      	movs	r1, #192	; 0xc0
 80007f8:	204e      	movs	r0, #78	; 0x4e
 80007fa:	f7ff ff91 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "  over I2C bus");
 80007fe:	4904      	ldr	r1, [pc, #16]	; (8000810 <init+0x38>)
 8000800:	204e      	movs	r0, #78	; 0x4e
 8000802:	f7ff ffce 	bl	80007a2 <LCD_SendString>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	08007ba0 	.word	0x08007ba0
 8000810:	08007bb0 	.word	0x08007bb0

08000814 <LCD_PrintAll>:

void LCD_PrintAll(char *str1, char *str2)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	204e      	movs	r0, #78	; 0x4e
 8000822:	f7ff ff7d 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str1);
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	204e      	movs	r0, #78	; 0x4e
 800082a:	f7ff ffba 	bl	80007a2 <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 800082e:	21c0      	movs	r1, #192	; 0xc0
 8000830:	204e      	movs	r0, #78	; 0x4e
 8000832:	f7ff ff75 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, str2);
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	204e      	movs	r0, #78	; 0x4e
 800083a:	f7ff ffb2 	bl	80007a2 <LCD_SendString>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <LCD_Clear>:
      LCD_SendCommand(LCD_ADDR, 0b11000000);
      LCD_SendString(LCD_ADDR, str);
    }
}
void LCD_Clear()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  LCD_SendCommand(LCD_ADDR, 0b10000000);
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	204e      	movs	r0, #78	; 0x4e
 8000850:	f7ff ff66 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <LCD_Clear+0x28>)
 8000856:	204e      	movs	r0, #78	; 0x4e
 8000858:	f7ff ffa3 	bl	80007a2 <LCD_SendString>

  // set address to 0x40
  LCD_SendCommand(LCD_ADDR, 0b11000000);
 800085c:	21c0      	movs	r1, #192	; 0xc0
 800085e:	204e      	movs	r0, #78	; 0x4e
 8000860:	f7ff ff5e 	bl	8000720 <LCD_SendCommand>
  LCD_SendString(LCD_ADDR, "                ");
 8000864:	4902      	ldr	r1, [pc, #8]	; (8000870 <LCD_Clear+0x28>)
 8000866:	204e      	movs	r0, #78	; 0x4e
 8000868:	f7ff ff9b 	bl	80007a2 <LCD_SendString>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	08007bc0 	.word	0x08007bc0

08000874 <_write>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lcd.h"

int _write(int file, char *ptr, int len)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 500);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	b29a      	uxth	r2, r3
 8000884:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <_write+0x28>)
 800088c:	f004 fd01 	bl	8005292 <HAL_UART_Transmit>
	return len;
 8000890:	687b      	ldr	r3, [r7, #4]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000370 	.word	0x20000370

080008a0 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	460b      	mov	r3, r1
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime;

	sTime.Hours = hh + 1;
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	3301      	adds	r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = mm;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ss;
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	73bb      	strb	r3, [r7, #14]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <set_time+0x38>)
 80008cc:	f003 fc5e 	bl	800418c <HAL_RTC_SetTime>
}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000308 	.word	0x20000308

080008dc <set_alarm>:
void set_alarm(uint8_t hh, uint8_t mm, uint8_t ss)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
 80008e6:	460b      	mov	r3, r1
 80008e8:	71bb      	strb	r3, [r7, #6]
 80008ea:	4613      	mov	r3, r2
 80008ec:	717b      	strb	r3, [r7, #5]

	sAlarm.AlarmTime.Hours = hh;
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <set_alarm+0x84>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = mm;
 80008f4:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <set_alarm+0x84>)
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = ss;
 80008fa:	4a19      	ldr	r2, [pc, #100]	; (8000960 <set_alarm+0x84>)
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <set_alarm+0x84>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <set_alarm+0x84>)
 8000908:	2200      	movs	r2, #0
 800090a:	70da      	strb	r2, [r3, #3]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <set_alarm+0x84>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <set_alarm+0x84>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <set_alarm+0x84>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <set_alarm+0x88>)
 800091c:	615a      	str	r2, [r3, #20]
			|RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <set_alarm+0x84>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <set_alarm+0x84>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <set_alarm+0x84>)
 800092c:	2201      	movs	r2, #1
 800092e:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <set_alarm+0x84>)
 8000934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800093a:	2201      	movs	r2, #1
 800093c:	4908      	ldr	r1, [pc, #32]	; (8000960 <set_alarm+0x84>)
 800093e:	480a      	ldr	r0, [pc, #40]	; (8000968 <set_alarm+0x8c>)
 8000940:	f003 fdf0 	bl	8004524 <HAL_RTC_SetAlarm_IT>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <set_alarm+0x72>
	{
		Error_Handler();
 800094a:	f000 fbc9 	bl	80010e0 <Error_Handler>
	}
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 800094e:	2200      	movs	r2, #0
 8000950:	4903      	ldr	r1, [pc, #12]	; (8000960 <set_alarm+0x84>)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <set_alarm+0x8c>)
 8000954:	f003 fde6 	bl	8004524 <HAL_RTC_SetAlarm_IT>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200008c0 	.word	0x200008c0
 8000964:	80808000 	.word	0x80808000
 8000968:	20000308 	.word	0x20000308

0800096c <set_date>:
void set_date(uint8_t ww, uint8_t mm, uint8_t dd, uint8_t yy)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	4604      	mov	r4, r0
 8000974:	4608      	mov	r0, r1
 8000976:	4611      	mov	r1, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4623      	mov	r3, r4
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	4603      	mov	r3, r0
 8000980:	71bb      	strb	r3, [r7, #6]
 8000982:	460b      	mov	r3, r1
 8000984:	717b      	strb	r3, [r7, #5]
 8000986:	4613      	mov	r3, r2
 8000988:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate;

	sDate.WeekDay = ww;
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	733b      	strb	r3, [r7, #12]
	sDate.Month = mm;
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	737b      	strb	r3, [r7, #13]
	sDate.Date = dd;
 8000992:	797b      	ldrb	r3, [r7, #5]
 8000994:	73bb      	strb	r3, [r7, #14]
	sDate.Year = yy;
 8000996:	793b      	ldrb	r3, [r7, #4]
 8000998:	73fb      	strb	r3, [r7, #15]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <set_date+0x44>)
 80009a4:	f003 fcea 	bl	800437c <HAL_RTC_SetDate>
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	20000308 	.word	0x20000308

080009b4 <get_time>:

void get_time(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	481a      	ldr	r0, [pc, #104]	; (8000a2c <get_time+0x78>)
 80009c2:	f003 fc7d 	bl	80042c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <get_time+0x78>)
 80009d0:	f003 fd58 	bl	8004484 <HAL_RTC_GetDate>
	sprintf((char*)showTime, "%s %02d:%02d:%02d",ampm[sTime.TimeFormat], sTime.Hours, sTime.Minutes, sTime.Seconds);
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <get_time+0x7c>)
 80009e0:	441a      	add	r2, r3
 80009e2:	783b      	ldrb	r3, [r7, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	787b      	ldrb	r3, [r7, #1]
 80009e8:	78b9      	ldrb	r1, [r7, #2]
 80009ea:	9101      	str	r1, [sp, #4]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	4603      	mov	r3, r0
 80009f0:	4910      	ldr	r1, [pc, #64]	; (8000a34 <get_time+0x80>)
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <get_time+0x84>)
 80009f4:	f006 f87a 	bl	8006aec <siprintf>
	sprintf((char*)showDate, "  %04d/%02d/%02d",2000+sDate.Year, sDate.Month, sDate.Date);
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80009fe:	7d7b      	ldrb	r3, [r7, #21]
 8000a00:	4619      	mov	r1, r3
 8000a02:	7dbb      	ldrb	r3, [r7, #22]
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	460b      	mov	r3, r1
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <get_time+0x88>)
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <get_time+0x8c>)
 8000a0c:	f006 f86e 	bl	8006aec <siprintf>
	LCD_PrintAll(showDate, showTime);
 8000a10:	4909      	ldr	r1, [pc, #36]	; (8000a38 <get_time+0x84>)
 8000a12:	480b      	ldr	r0, [pc, #44]	; (8000a40 <get_time+0x8c>)
 8000a14:	f7ff fefe 	bl	8000814 <LCD_PrintAll>
	printf("%s %s\r\n", showTime, showDate);
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <get_time+0x8c>)
 8000a1a:	4907      	ldr	r1, [pc, #28]	; (8000a38 <get_time+0x84>)
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <get_time+0x90>)
 8000a1e:	f005 ffc3 	bl	80069a8 <iprintf>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000308 	.word	0x20000308
 8000a30:	20000000 	.word	0x20000000
 8000a34:	08007bd4 	.word	0x08007bd4
 8000a38:	200008e8 	.word	0x200008e8
 8000a3c:	08007be8 	.word	0x08007be8
 8000a40:	200008f8 	.word	0x200008f8
 8000a44:	08007bfc 	.word	0x08007bfc

08000a48 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a4c:	f000 fe7c 	bl	8001748 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a50:	f000 f834 	bl	8000abc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a54:	f000 fa82 	bl	8000f5c <MX_GPIO_Init>
	MX_ETH_Init();
 8000a58:	f000 f8b8 	bl	8000bcc <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000a5c:	f000 fa26 	bl	8000eac <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000a60:	f000 fa4e 	bl	8000f00 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 8000a64:	f000 f900 	bl	8000c68 <MX_I2C1_Init>
	MX_RTC_Init();
 8000a68:	f000 f93e 	bl	8000ce8 <MX_RTC_Init>
	MX_TIM2_Init();
 8000a6c:	f000 f9d0 	bl	8000e10 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000a70:	f000 f890 	bl	8000b94 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8000a74:	2200      	movs	r2, #0
 8000a76:	490f      	ldr	r1, [pc, #60]	; (8000ab4 <main+0x6c>)
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <main+0x70>)
 8000a7a:	f003 fd53 	bl	8004524 <HAL_RTC_SetAlarm_IT>
	init();
 8000a7e:	f7ff feab 	bl	80007d8 <init>
	LCD_Clear();
 8000a82:	f7ff fee1 	bl	8000848 <LCD_Clear>
	set_date(RTC_WEEKDAY_MONDAY, 11, 6, 23);
 8000a86:	2317      	movs	r3, #23
 8000a88:	2206      	movs	r2, #6
 8000a8a:	210b      	movs	r1, #11
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff ff6d 	bl	800096c <set_date>
	set_time(16,14,0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210e      	movs	r1, #14
 8000a96:	2010      	movs	r0, #16
 8000a98:	f7ff ff02 	bl	80008a0 <set_time>
	set_alarm(0, 0, 5);
 8000a9c:	2205      	movs	r2, #5
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff ff1b 	bl	80008dc <set_alarm>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		get_time();
 8000aa6:	f7ff ff85 	bl	80009b4 <get_time>
		HAL_Delay(30);
 8000aaa:	201e      	movs	r0, #30
 8000aac:	f000 febe 	bl	800182c <HAL_Delay>
		get_time();
 8000ab0:	e7f9      	b.n	8000aa6 <main+0x5e>
 8000ab2:	bf00      	nop
 8000ab4:	200008c0 	.word	0x200008c0
 8000ab8:	20000308 	.word	0x20000308

08000abc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	; 0x50
 8000ac0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	2230      	movs	r2, #48	; 0x30
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f006 f906 	bl	8006cdc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <SystemClock_Config+0xd0>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <SystemClock_Config+0xd0>)
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <SystemClock_Config+0xd0>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <SystemClock_Config+0xd4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <SystemClock_Config+0xd4>)
 8000b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <SystemClock_Config+0xd4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b18:	2305      	movs	r3, #5
 8000b1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b22:	2301      	movs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000b34:	23a8      	movs	r3, #168	; 0xa8
 8000b36:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b40:	f107 0320 	add.w	r3, r7, #32
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fc53 	bl	80033f0 <HAL_RCC_OscConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000b50:	f000 fac6 	bl	80010e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b54:	230f      	movs	r3, #15
 8000b56:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b64:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2105      	movs	r1, #5
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 feb4 	bl	80038e0 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000b7e:	f000 faaf 	bl	80010e0 <Error_Handler>
	}
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	; 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	201c      	movs	r0, #28
 8000b9e:	f000 ff44 	bl	8001a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ba2:	201c      	movs	r0, #28
 8000ba4:	f000 ff5d 	bl	8001a62 <HAL_NVIC_EnableIRQ>
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	2027      	movs	r0, #39	; 0x27
 8000bae:	f000 ff3c 	bl	8001a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bb2:	2027      	movs	r0, #39	; 0x27
 8000bb4:	f000 ff55 	bl	8001a62 <HAL_NVIC_EnableIRQ>
	/* RTC_Alarm_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2029      	movs	r0, #41	; 0x29
 8000bbe:	f000 ff34 	bl	8001a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000bc2:	2029      	movs	r0, #41	; 0x29
 8000bc4:	f000 ff4d 	bl	8001a62 <HAL_NVIC_EnableIRQ>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_ETH_Init+0x84>)
 8000bd2:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <MX_ETH_Init+0x88>)
 8000bd4:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_ETH_Init+0x8c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_ETH_Init+0x8c>)
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_ETH_Init+0x8c>)
 8000be4:	22e1      	movs	r2, #225	; 0xe1
 8000be6:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_ETH_Init+0x8c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_ETH_Init+0x8c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_ETH_Init+0x8c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_ETH_Init+0x84>)
 8000bfc:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <MX_ETH_Init+0x8c>)
 8000bfe:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_ETH_Init+0x84>)
 8000c02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c06:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_ETH_Init+0x84>)
 8000c0a:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <MX_ETH_Init+0x90>)
 8000c0c:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_ETH_Init+0x84>)
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <MX_ETH_Init+0x94>)
 8000c12:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_ETH_Init+0x84>)
 8000c16:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c1a:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_ETH_Init+0x84>)
 8000c1e:	f000 ffcd 	bl	8001bbc <HAL_ETH_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ETH_Init+0x60>
	{
		Error_Handler();
 8000c28:	f000 fa5a 	bl	80010e0 <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c2c:	2238      	movs	r2, #56	; 0x38
 8000c2e:	2100      	movs	r1, #0
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_ETH_Init+0x98>)
 8000c32:	f006 f853 	bl	8006cdc <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_ETH_Init+0x98>)
 8000c38:	2221      	movs	r2, #33	; 0x21
 8000c3a:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_ETH_Init+0x98>)
 8000c3e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c42:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_ETH_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000204 	.word	0x20000204
 8000c54:	40028000 	.word	0x40028000
 8000c58:	20000908 	.word	0x20000908
 8000c5c:	20000164 	.word	0x20000164
 8000c60:	200000c4 	.word	0x200000c4
 8000c64:	2000008c 	.word	0x2000008c

08000c68 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <MX_I2C1_Init+0x78>)
 8000c70:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000c74:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <MX_I2C1_Init+0x7c>)
 8000c76:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000ca6:	f001 fc91 	bl	80025cc <HAL_I2C_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000cb0:	f000 fa16 	bl	80010e0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000cb8:	f002 fa01 	bl	80030be <HAL_I2CEx_ConfigAnalogFilter>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_I2C1_Init+0x5e>
	{
		Error_Handler();
 8000cc2:	f000 fa0d 	bl	80010e0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_I2C1_Init+0x74>)
 8000cca:	f002 fa34 	bl	8003136 <HAL_I2CEx_ConfigDigitalFilter>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C1_Init+0x70>
	{
		Error_Handler();
 8000cd4:	f000 fa04 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200002b4 	.word	0x200002b4
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	000186a0 	.word	0x000186a0

08000ce8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	; 0x40
 8000cec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8000cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2228      	movs	r2, #40	; 0x28
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 ffe7 	bl	8006cdc <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d10:	4a3d      	ldr	r2, [pc, #244]	; (8000e08 <MX_RTC_Init+0x120>)
 8000d12:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d16:	2240      	movs	r2, #64	; 0x40
 8000d18:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d1c:	227f      	movs	r2, #127	; 0x7f
 8000d1e:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d22:	22ff      	movs	r2, #255	; 0xff
 8000d24:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d26:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d32:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d38:	4832      	ldr	r0, [pc, #200]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d3a:	f003 f9b1 	bl	80040a0 <HAL_RTC_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_RTC_Init+0x60>
	{
		Error_Handler();
 8000d44:	f000 f9cc 	bl	80010e0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sTime.Minutes = 0x0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sTime.Seconds = 0x0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4824      	ldr	r0, [pc, #144]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000d72:	f003 fa0b 	bl	800418c <HAL_RTC_SetTime>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_RTC_Init+0x98>
	{
		Error_Handler();
 8000d7c:	f000 f9b0 	bl	80010e0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sDate.Month = RTC_MONTH_JANUARY;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	sDate.Date = 0x1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sDate.Year = 0x0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4818      	ldr	r0, [pc, #96]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000da2:	f003 faeb 	bl	800437c <HAL_RTC_SetDate>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_RTC_Init+0xc8>
	{
		Error_Handler();
 8000dac:	f000 f998 	bl	80010e0 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	70fb      	strb	r3, [r7, #3]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_RTC_Init+0x124>)
 8000dce:	617b      	str	r3, [r7, #20]
			|RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2201      	movs	r2, #1
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_RTC_Init+0x11c>)
 8000dec:	f003 fb9a 	bl	8004524 <HAL_RTC_SetAlarm_IT>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_RTC_Init+0x112>
	{
		Error_Handler();
 8000df6:	f000 f973 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3740      	adds	r7, #64	; 0x40
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000308 	.word	0x20000308
 8000e08:	40002800 	.word	0x40002800
 8000e0c:	80808000 	.word	0x80808000

08000e10 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8400-1;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e36:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e3a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffff-1;
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e48:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e58:	f003 fdb3 	bl	80049c2 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8000e62:	f000 f93d 	bl	80010e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e74:	f003 fefc 	bl	8004c70 <HAL_TIM_ConfigClockSource>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8000e7e:	f000 f92f 	bl	80010e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <MX_TIM2_Init+0x98>)
 8000e90:	f004 f922 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000e9a:	f000 f921 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000328 	.word	0x20000328

08000eac <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <MX_USART3_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ee4:	f004 f988 	bl	80051f8 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000eee:	f000 f8f7 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000370 	.word	0x20000370
 8000efc:	40004800 	.word	0x40004800

08000f00 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f0a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0e:	2204      	movs	r2, #4
 8000f10:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f14:	2202      	movs	r2, #2
 8000f16:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f44:	f002 f936 	bl	80031b4 <HAL_PCD_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USB_OTG_FS_PCD_Init+0x52>
	{
		Error_Handler();
 8000f4e:	f000 f8c7 	bl	80010e0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200003b4 	.word	0x200003b4

08000f5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a4b      	ldr	r2, [pc, #300]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a3d      	ldr	r2, [pc, #244]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a36      	ldr	r2, [pc, #216]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8001008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001020:	4822      	ldr	r0, [pc, #136]	; (80010ac <MX_GPIO_Init+0x150>)
 8001022:	f001 fa9f 	bl	8002564 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4821      	ldr	r0, [pc, #132]	; (80010b0 <MX_GPIO_Init+0x154>)
 800102c:	f001 fa9a 	bl	8002564 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001034:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	481b      	ldr	r0, [pc, #108]	; (80010b4 <MX_GPIO_Init+0x158>)
 8001048:	f001 f8e0 	bl	800220c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800104c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001050:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_GPIO_Init+0x150>)
 8001066:	f001 f8d1 	bl	800220c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <MX_GPIO_Init+0x154>)
 8001082:	f001 f8c3 	bl	800220c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_GPIO_Init+0x154>)
 800109a:	f001 f8b7 	bl	800220c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40020800 	.word	0x40020800

080010b8 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin);
 80010c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <HAL_RTC_AlarmAEventCallback+0x20>)
 80010c6:	f001 fa66 	bl	8002596 <HAL_GPIO_TogglePin>
	printf("RINGRINGRINGRING!!!!!!!!!!!!!!!!!!!!\r\n");
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <HAL_RTC_AlarmAEventCallback+0x24>)
 80010cc:	f005 fcd2 	bl	8006a74 <puts>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020400 	.word	0x40020400
 80010dc:	08007c04 	.word	0x08007c04

080010e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_MspInit+0x4c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x4c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a55      	ldr	r2, [pc, #340]	; (80012b0 <HAL_ETH_MspInit+0x174>)
 800115a:	4293      	cmp	r3, r2
 800115c:	f040 80a4 	bne.w	80012a8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	4a52      	ldr	r2, [pc, #328]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116e:	6313      	str	r3, [r2, #48]	; 0x30
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	4b4c      	ldr	r3, [pc, #304]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a4b      	ldr	r2, [pc, #300]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 8001186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a44      	ldr	r2, [pc, #272]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	4a3d      	ldr	r2, [pc, #244]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
 80011c4:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 8001212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001216:	6313      	str	r3, [r2, #48]	; 0x30
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <HAL_ETH_MspInit+0x178>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001224:	2332      	movs	r3, #50	; 0x32
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001234:	230b      	movs	r3, #11
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	481e      	ldr	r0, [pc, #120]	; (80012b8 <HAL_ETH_MspInit+0x17c>)
 8001240:	f000 ffe4 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001244:	2386      	movs	r3, #134	; 0x86
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001254:	230b      	movs	r3, #11
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	4619      	mov	r1, r3
 800125e:	4817      	ldr	r0, [pc, #92]	; (80012bc <HAL_ETH_MspInit+0x180>)
 8001260:	f000 ffd4 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001276:	230b      	movs	r3, #11
 8001278:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <HAL_ETH_MspInit+0x184>)
 8001282:	f000 ffc3 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001286:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001298:	230b      	movs	r3, #11
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <HAL_ETH_MspInit+0x188>)
 80012a4:	f000 ffb2 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3738      	adds	r7, #56	; 0x38
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40028000 	.word	0x40028000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40021800 	.word	0x40021800

080012c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_I2C_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_I2C_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <HAL_I2C_MspInit+0x8c>)
 8001324:	f000 ff72 	bl	800220c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_I2C_MspInit+0x88>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_I2C_MspInit+0x88>)
 8001332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_I2C_MspInit+0x88>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40005400 	.word	0x40005400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400

08001358 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	2230      	movs	r2, #48	; 0x30
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f005 fcb7 	bl	8006cdc <memset>
  if(hrtc->Instance==RTC)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_RTC_MspInit+0x4c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d111      	bne.n	800139c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001378:	2320      	movs	r3, #32
 800137a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800137c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	4618      	mov	r0, r3
 8001388:	f002 fcca 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001392:	f7ff fea5 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_RTC_MspInit+0x50>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3738      	adds	r7, #56	; 0x38
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40002800 	.word	0x40002800
 80013a8:	42470e3c 	.word	0x42470e3c

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013bc:	d10d      	bne.n	80013da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_UART_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12c      	bne.n	8001468 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_UART_MspInit+0x88>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_UART_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001446:	f44f 7340 	mov.w	r3, #768	; 0x300
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001458:	2307      	movs	r3, #7
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_UART_MspInit+0x8c>)
 8001464:	f000 fed2 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40004800 	.word	0x40004800
 8001474:	40023800 	.word	0x40023800
 8001478:	40020c00 	.word	0x40020c00

0800147c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149c:	d13f      	bne.n	800151e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_PCD_MspInit+0xac>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_PCD_MspInit+0xac>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_PCD_MspInit+0xac>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014ba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014cc:	230a      	movs	r3, #10
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4815      	ldr	r0, [pc, #84]	; (800152c <HAL_PCD_MspInit+0xb0>)
 80014d8:	f000 fe98 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480e      	ldr	r0, [pc, #56]	; (800152c <HAL_PCD_MspInit+0xb0>)
 80014f2:	f000 fe8b 	bl	800220c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_PCD_MspInit+0xac>)
 80014f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_PCD_MspInit+0xac>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	6353      	str	r3, [r2, #52]	; 0x34
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_PCD_MspInit+0xac>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a07      	ldr	r2, [pc, #28]	; (8001528 <HAL_PCD_MspInit+0xac>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_PCD_MspInit+0xac>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f936 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <TIM2_IRQHandler+0x10>)
 800158a:	f003 fa69 	bl	8004a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000328 	.word	0x20000328

08001598 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <USART3_IRQHandler+0x10>)
 800159e:	f003 ff0b 	bl	80053b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000370 	.word	0x20000370

080015ac <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <RTC_Alarm_IRQHandler+0x10>)
 80015b2:	f003 f8f9 	bl	80047a8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000308 	.word	0x20000308

080015c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e00a      	b.n	80015e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015d2:	f3af 8000 	nop.w
 80015d6:	4601      	mov	r1, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	b2ca      	uxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf0      	blt.n	80015d2 <_read+0x12>
  }

  return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001622:	605a      	str	r2, [r3, #4]
  return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_isatty>:

int _isatty(int file)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <_sbrk+0x5c>)
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <_sbrk+0x60>)
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <_sbrk+0x64>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <_sbrk+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d207      	bcs.n	80016a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001694:	f005 fb70 	bl	8006d78 <__errno>
 8001698:	4603      	mov	r3, r0
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20030000 	.word	0x20030000
 80016c4:	00000400 	.word	0x00000400
 80016c8:	20000910 	.word	0x20000910
 80016cc:	20000a68 	.word	0x20000a68

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fa:	490e      	ldr	r1, [pc, #56]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001710:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171e:	f7ff ffd7 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f005 fb2f 	bl	8006d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff f98f 	bl	8000a48 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800172c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001738:	08007c88 	.word	0x08007c88
  ldr r2, =_sbss
 800173c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001740:	20000a64 	.word	0x20000a64

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f94f 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fcb6 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f967 	bl	8001a7e <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f92f 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000010 	.word	0x20000010
 80017e8:	2000000c 	.word	0x2000000c

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000010 	.word	0x20000010
 8001810:	20000914 	.word	0x20000914

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000914 	.word	0x20000914

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000010 	.word	0x20000010

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff feb6 	bl	8001814 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d008      	beq.n	8001ac8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e052      	b.n	8001b6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0216 	bic.w	r2, r2, #22
 8001ad6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ae6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d103      	bne.n	8001af8 <HAL_DMA_Abort+0x62>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0208 	bic.w	r2, r2, #8
 8001b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b18:	e013      	b.n	8001b42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b1a:	f7ff fe7b 	bl	8001814 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d90c      	bls.n	8001b42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2203      	movs	r2, #3
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e015      	b.n	8001b6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e4      	bne.n	8001b1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	223f      	movs	r2, #63	; 0x3f
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d004      	beq.n	8001b94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e00c      	b.n	8001bae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2205      	movs	r2, #5
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e06c      	b.n	8001ca8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2223      	movs	r2, #35	; 0x23
 8001bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff faab 	bl	800113c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_ETH_Init+0xf4>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_ETH_Init+0xf4>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_ETH_Init+0xf4>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_ETH_Init+0xf8>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_ETH_Init+0xf8>)
 8001c08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_ETH_Init+0xf8>)
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4927      	ldr	r1, [pc, #156]	; (8001cb4 <HAL_ETH_Init+0xf8>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_ETH_Init+0xf8>)
 8001c1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c38:	f7ff fdec 	bl	8001814 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c3e:	e011      	b.n	8001c64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c40:	f7ff fde8 	bl	8001814 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c4e:	d909      	bls.n	8001c64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2204      	movs	r2, #4
 8001c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	22e0      	movs	r2, #224	; 0xe0
 8001c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e021      	b.n	8001ca8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1e4      	bne.n	8001c40 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f958 	bl	8001f2c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f9ff 	bl	8002080 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fa55 	bl	8002132 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2100      	movs	r1, #0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f9bd 	bl	8002010 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800

08001cb8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <ETH_SetMACConfig+0x15c>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	7c1b      	ldrb	r3, [r3, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <ETH_SetMACConfig+0x28>
 8001cda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cde:	e000      	b.n	8001ce2 <ETH_SetMACConfig+0x2a>
 8001ce0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	7c5b      	ldrb	r3, [r3, #17]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <ETH_SetMACConfig+0x38>
 8001cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cee:	e000      	b.n	8001cf2 <ETH_SetMACConfig+0x3a>
 8001cf0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cf2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cf8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	7fdb      	ldrb	r3, [r3, #31]
 8001cfe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d00:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	7f92      	ldrb	r2, [r2, #30]
 8001d0c:	2a00      	cmp	r2, #0
 8001d0e:	d102      	bne.n	8001d16 <ETH_SetMACConfig+0x5e>
 8001d10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d14:	e000      	b.n	8001d18 <ETH_SetMACConfig+0x60>
 8001d16:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	7f1b      	ldrb	r3, [r3, #28]
 8001d1e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d20:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d36:	2a00      	cmp	r2, #0
 8001d38:	d102      	bne.n	8001d40 <ETH_SetMACConfig+0x88>
 8001d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3e:	e000      	b.n	8001d42 <ETH_SetMACConfig+0x8a>
 8001d40:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	7bdb      	ldrb	r3, [r3, #15]
 8001d48:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d4a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d58:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7ff fd5a 	bl	800182c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d96:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d101      	bne.n	8001da6 <ETH_SetMACConfig+0xee>
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	e000      	b.n	8001da8 <ETH_SetMACConfig+0xf0>
 8001da6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001da8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001db6:	2a01      	cmp	r2, #1
 8001db8:	d101      	bne.n	8001dbe <ETH_SetMACConfig+0x106>
 8001dba:	2208      	movs	r2, #8
 8001dbc:	e000      	b.n	8001dc0 <ETH_SetMACConfig+0x108>
 8001dbe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001dc0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001dc8:	2a01      	cmp	r2, #1
 8001dca:	d101      	bne.n	8001dd0 <ETH_SetMACConfig+0x118>
 8001dcc:	2204      	movs	r2, #4
 8001dce:	e000      	b.n	8001dd2 <ETH_SetMACConfig+0x11a>
 8001dd0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001dda:	2a01      	cmp	r2, #1
 8001ddc:	d101      	bne.n	8001de2 <ETH_SetMACConfig+0x12a>
 8001dde:	2202      	movs	r2, #2
 8001de0:	e000      	b.n	8001de4 <ETH_SetMACConfig+0x12c>
 8001de2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001de4:	4313      	orrs	r3, r2
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff fd15 	bl	800182c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	619a      	str	r2, [r3, #24]
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	ff20810f 	.word	0xff20810f

08001e18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <ETH_SetDMAConfig+0x110>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	7b1b      	ldrb	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <ETH_SetDMAConfig+0x2c>
 8001e3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e42:	e000      	b.n	8001e46 <ETH_SetDMAConfig+0x2e>
 8001e44:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7b5b      	ldrb	r3, [r3, #13]
 8001e4a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e4c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	7f52      	ldrb	r2, [r2, #29]
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	d102      	bne.n	8001e5c <ETH_SetDMAConfig+0x44>
 8001e56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e5a:	e000      	b.n	8001e5e <ETH_SetDMAConfig+0x46>
 8001e5c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e5e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7b9b      	ldrb	r3, [r3, #14]
 8001e64:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e66:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e6c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	7f1b      	ldrb	r3, [r3, #28]
 8001e72:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	7f9b      	ldrb	r3, [r3, #30]
 8001e7a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e7c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e82:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff fcbc 	bl	800182c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	791b      	ldrb	r3, [r3, #4]
 8001ec6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ecc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ed2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ed8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ee0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ee2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ef0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001efe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff fc8d 	bl	800182c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	f8de3f23 	.word	0xf8de3f23

08001f2c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0a6      	sub	sp, #152	; 0x98
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f92:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fa0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe86 	bl	8001cb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001fac:	2301      	movs	r3, #1
 8001fae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fe6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ff08 	bl	8001e18 <ETH_SetDMAConfig>
}
 8002008:	bf00      	nop
 800200a:	3798      	adds	r7, #152	; 0x98
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3305      	adds	r3, #5
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	3204      	adds	r2, #4
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <ETH_MACAddressConfig+0x68>)
 8002032:	4413      	add	r3, r2
 8002034:	461a      	mov	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3303      	adds	r3, #3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	061a      	lsls	r2, r3, #24
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3302      	adds	r3, #2
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3301      	adds	r3, #1
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	4313      	orrs	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <ETH_MACAddressConfig+0x6c>)
 8002062:	4413      	add	r3, r2
 8002064:	461a      	mov	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	6013      	str	r3, [r2, #0]
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40028040 	.word	0x40028040
 800207c:	40028044 	.word	0x40028044

08002080 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e03e      	b.n	800210c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68d9      	ldr	r1, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	3206      	adds	r2, #6
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d80c      	bhi.n	80020f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68d9      	ldr	r1, [r3, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	e004      	b.n	80020fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3301      	adds	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d9bd      	bls.n	800208e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002124:	611a      	str	r2, [r3, #16]
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e046      	b.n	80021ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6919      	ldr	r1, [r3, #16]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800217c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002184:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	3212      	adds	r2, #18
 800219a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d80c      	bhi.n	80021be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	461a      	mov	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	e004      	b.n	80021c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d9b5      	bls.n	8002140 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fe:	60da      	str	r2, [r3, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	e177      	b.n	8002518 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 8166 	bne.w	8002512 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d005      	beq.n	800225e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	2b02      	cmp	r3, #2
 800225c:	d130      	bne.n	80022c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002294:	2201      	movs	r2, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 0201 	and.w	r2, r3, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d017      	beq.n	80022fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d123      	bne.n	8002350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	08da      	lsrs	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3208      	adds	r2, #8
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0203 	and.w	r2, r3, #3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80c0 	beq.w	8002512 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b66      	ldr	r3, [pc, #408]	; (8002530 <HAL_GPIO_Init+0x324>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a65      	ldr	r2, [pc, #404]	; (8002530 <HAL_GPIO_Init+0x324>)
 800239c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_GPIO_Init+0x324>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ae:	4a61      	ldr	r2, [pc, #388]	; (8002534 <HAL_GPIO_Init+0x328>)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_GPIO_Init+0x32c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d037      	beq.n	800244a <HAL_GPIO_Init+0x23e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a57      	ldr	r2, [pc, #348]	; (800253c <HAL_GPIO_Init+0x330>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d031      	beq.n	8002446 <HAL_GPIO_Init+0x23a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a56      	ldr	r2, [pc, #344]	; (8002540 <HAL_GPIO_Init+0x334>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02b      	beq.n	8002442 <HAL_GPIO_Init+0x236>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a55      	ldr	r2, [pc, #340]	; (8002544 <HAL_GPIO_Init+0x338>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d025      	beq.n	800243e <HAL_GPIO_Init+0x232>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a54      	ldr	r2, [pc, #336]	; (8002548 <HAL_GPIO_Init+0x33c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <HAL_GPIO_Init+0x22e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a53      	ldr	r2, [pc, #332]	; (800254c <HAL_GPIO_Init+0x340>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x22a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_GPIO_Init+0x344>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x226>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a51      	ldr	r2, [pc, #324]	; (8002554 <HAL_GPIO_Init+0x348>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x222>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a50      	ldr	r2, [pc, #320]	; (8002558 <HAL_GPIO_Init+0x34c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x21e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4f      	ldr	r2, [pc, #316]	; (800255c <HAL_GPIO_Init+0x350>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x21a>
 8002422:	2309      	movs	r3, #9
 8002424:	e012      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002426:	230a      	movs	r3, #10
 8002428:	e010      	b.n	800244c <HAL_GPIO_Init+0x240>
 800242a:	2308      	movs	r3, #8
 800242c:	e00e      	b.n	800244c <HAL_GPIO_Init+0x240>
 800242e:	2307      	movs	r3, #7
 8002430:	e00c      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002432:	2306      	movs	r3, #6
 8002434:	e00a      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002436:	2305      	movs	r3, #5
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x240>
 800243a:	2304      	movs	r3, #4
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x240>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x240>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x240>
 800244a:	2300      	movs	r3, #0
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245c:	4935      	ldr	r1, [pc, #212]	; (8002534 <HAL_GPIO_Init+0x328>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_GPIO_Init+0x354>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248e:	4a34      	ldr	r2, [pc, #208]	; (8002560 <HAL_GPIO_Init+0x354>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_GPIO_Init+0x354>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b8:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_GPIO_Init+0x354>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024be:	4b28      	ldr	r3, [pc, #160]	; (8002560 <HAL_GPIO_Init+0x354>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e2:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_GPIO_Init+0x354>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_GPIO_Init+0x354>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <HAL_GPIO_Init+0x354>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	f67f ae84 	bls.w	8002228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40021400 	.word	0x40021400
 8002550:	40021800 	.word	0x40021800
 8002554:	40021c00 	.word	0x40021c00
 8002558:	40022000 	.word	0x40022000
 800255c:	40022400 	.word	0x40022400
 8002560:	40013c00 	.word	0x40013c00

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a8:	887a      	ldrh	r2, [r7, #2]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	041a      	lsls	r2, r3, #16
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	400b      	ands	r3, r1
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	619a      	str	r2, [r3, #24]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e12b      	b.n	8002836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fe68 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2224      	movs	r2, #36	; 0x24
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002630:	f001 fb4e 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a81      	ldr	r2, [pc, #516]	; (8002840 <HAL_I2C_Init+0x274>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d807      	bhi.n	8002650 <HAL_I2C_Init+0x84>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a80      	ldr	r2, [pc, #512]	; (8002844 <HAL_I2C_Init+0x278>)
 8002644:	4293      	cmp	r3, r2
 8002646:	bf94      	ite	ls
 8002648:	2301      	movls	r3, #1
 800264a:	2300      	movhi	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e006      	b.n	800265e <HAL_I2C_Init+0x92>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a7d      	ldr	r2, [pc, #500]	; (8002848 <HAL_I2C_Init+0x27c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0e7      	b.n	8002836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a78      	ldr	r2, [pc, #480]	; (800284c <HAL_I2C_Init+0x280>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a6a      	ldr	r2, [pc, #424]	; (8002840 <HAL_I2C_Init+0x274>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d802      	bhi.n	80026a0 <HAL_I2C_Init+0xd4>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	e009      	b.n	80026b4 <HAL_I2C_Init+0xe8>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_I2C_Init+0x284>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	3301      	adds	r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	495c      	ldr	r1, [pc, #368]	; (8002840 <HAL_I2C_Init+0x274>)
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d819      	bhi.n	8002708 <HAL_I2C_Init+0x13c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e59      	subs	r1, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026e8:	400b      	ands	r3, r1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_I2C_Init+0x138>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e59      	subs	r1, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	e051      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002704:	2304      	movs	r3, #4
 8002706:	e04f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <HAL_I2C_Init+0x168>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e012      	b.n	800275a <HAL_I2C_Init+0x18e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Init+0x196>
 800275e:	2301      	movs	r3, #1
 8002760:	e022      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10e      	bne.n	8002788 <HAL_I2C_Init+0x1bc>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e58      	subs	r0, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	440b      	add	r3, r1
 8002778:	fbb0 f3f3 	udiv	r3, r0, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002786:	e00f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e58      	subs	r0, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	0099      	lsls	r1, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	fbb0 f3f3 	udiv	r3, r0, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	6809      	ldr	r1, [r1, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6911      	ldr	r1, [r2, #16]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	000186a0 	.word	0x000186a0
 8002844:	001e847f 	.word	0x001e847f
 8002848:	003d08ff 	.word	0x003d08ff
 800284c:	431bde83 	.word	0x431bde83
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	461a      	mov	r2, r3
 8002860:	460b      	mov	r3, r1
 8002862:	817b      	strh	r3, [r7, #10]
 8002864:	4613      	mov	r3, r2
 8002866:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7fe ffd4 	bl	8001814 <HAL_GetTick>
 800286c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b20      	cmp	r3, #32
 8002878:	f040 80e0 	bne.w	8002a3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	2319      	movs	r3, #25
 8002882:	2201      	movs	r2, #1
 8002884:	4970      	ldr	r1, [pc, #448]	; (8002a48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa92 	bl	8002db0 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	e0d3      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2C_Master_Transmit+0x50>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0cc      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d007      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2221      	movs	r2, #33	; 0x21
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2210      	movs	r2, #16
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	893a      	ldrh	r2, [r7, #8]
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_I2C_Master_Transmit+0x1f8>)
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f9ca 	bl	8002cac <I2C_MasterRequestWrite>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e08d      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002938:	e066      	b.n	8002a08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fb0c 	bl	8002f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b04      	cmp	r3, #4
 8002950:	d107      	bne.n	8002962 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e06b      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	781a      	ldrb	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d11b      	bne.n	80029dc <HAL_I2C_Master_Transmit+0x188>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d017      	beq.n	80029dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	6a39      	ldr	r1, [r7, #32]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fafc 	bl	8002fde <I2C_WaitOnBTFFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d107      	bne.n	8002a04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e01a      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d194      	bne.n	800293a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	00100002 	.word	0x00100002
 8002a4c:	ffff0000 	.word	0xffff0000

08002a50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7fe fed8 	bl	8001814 <HAL_GetTick>
 8002a64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	f040 8111 	bne.w	8002c9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2319      	movs	r3, #25
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4988      	ldr	r1, [pc, #544]	; (8002ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f994 	bl	8002db0 <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e104      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_I2C_IsDeviceReady+0x50>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e0fd      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x24c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d007      	beq.n	8002ac6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2224      	movs	r2, #36	; 0x24
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a70      	ldr	r2, [pc, #448]	; (8002ca8 <HAL_I2C_IsDeviceReady+0x258>)
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f952 	bl	8002db0 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b20:	d103      	bne.n	8002b2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0b6      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fe69 	bl	8001814 <HAL_GetTick>
 8002b42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	bf0c      	ite	eq
 8002b52:	2301      	moveq	r3, #1
 8002b54:	2300      	movne	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b72:	e025      	b.n	8002bc0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7fe fe4e 	bl	8001814 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <HAL_I2C_IsDeviceReady+0x13a>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	22a0      	movs	r2, #160	; 0xa0
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2ba0      	cmp	r3, #160	; 0xa0
 8002bca:	d005      	beq.n	8002bd8 <HAL_I2C_IsDeviceReady+0x188>
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <HAL_I2C_IsDeviceReady+0x188>
 8002bd2:	7dbb      	ldrb	r3, [r7, #22]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0cd      	beq.n	8002b74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d129      	bne.n	8002c42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2319      	movs	r3, #25
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4921      	ldr	r1, [pc, #132]	; (8002ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f8c6 	bl	8002db0 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e036      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e02c      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2319      	movs	r3, #25
 8002c62:	2201      	movs	r2, #1
 8002c64:	490f      	ldr	r1, [pc, #60]	; (8002ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8a2 	bl	8002db0 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e012      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f4ff af32 	bcc.w	8002aea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d006      	beq.n	8002cd6 <I2C_MasterRequestWrite+0x2a>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d003      	beq.n	8002cd6 <I2C_MasterRequestWrite+0x2a>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cd4:	d108      	bne.n	8002ce8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e00b      	b.n	8002d00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	2b12      	cmp	r3, #18
 8002cee:	d107      	bne.n	8002d00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f84f 	bl	8002db0 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d26:	d103      	bne.n	8002d30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e035      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	e01b      	b.n	8002d88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d50:	897b      	ldrh	r3, [r7, #10]
 8002d52:	11db      	asrs	r3, r3, #7
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f003 0306 	and.w	r3, r3, #6
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f063 030f 	orn	r3, r3, #15
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <I2C_MasterRequestWrite+0xfc>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f875 	bl	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e010      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4907      	ldr	r1, [pc, #28]	; (8002dac <I2C_MasterRequestWrite+0x100>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f865 	bl	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00010008 	.word	0x00010008
 8002dac:	00010002 	.word	0x00010002

08002db0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc0:	e025      	b.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d021      	beq.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7fe fd23 	bl	8001814 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d116      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e023      	b.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10d      	bne.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	e00c      	b.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d0b6      	beq.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e6c:	e051      	b.n	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7c:	d123      	bne.n	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f043 0204 	orr.w	r2, r3, #4
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e046      	b.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d021      	beq.n	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ece:	f7fe fca1 	bl	8001814 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d302      	bcc.n	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d116      	bne.n	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e020      	b.n	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d10c      	bne.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4013      	ands	r3, r2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e00b      	b.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d18d      	bne.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f68:	e02d      	b.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f878 	bl	8003060 <I2C_IsAcknowledgeFailed>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e02d      	b.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d021      	beq.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fe fc47 	bl	8001814 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d116      	bne.n	8002fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e007      	b.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	d1ca      	bne.n	8002f6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fea:	e02d      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f837 	bl	8003060 <I2C_IsAcknowledgeFailed>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e02d      	b.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d021      	beq.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003004:	f7fe fc06 	bl	8001814 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	d302      	bcc.n	800301a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e007      	b.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d1ca      	bne.n	8002fec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d11b      	bne.n	80030b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0204 	orr.w	r2, r3, #4
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d129      	bne.n	8003128 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0210 	bic.w	r2, r2, #16
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	d12a      	bne.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	; 0x24
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003170:	89fb      	ldrh	r3, [r7, #14]
 8003172:	f023 030f 	bic.w	r3, r3, #15
 8003176:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b29a      	uxth	r2, r3
 800317c:	89fb      	ldrh	r3, [r7, #14]
 800317e:	4313      	orrs	r3, r2
 8003180:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	89fa      	ldrh	r2, [r7, #14]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b6:	b08f      	sub	sp, #60	; 0x3c
 80031b8:	af0a      	add	r7, sp, #40	; 0x28
 80031ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e10f      	b.n	80033e6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fe f94b 	bl	800147c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f003 f86c 	bl	80062e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	687e      	ldr	r6, [r7, #4]
 8003212:	466d      	mov	r5, sp
 8003214:	f106 0410 	add.w	r4, r6, #16
 8003218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003220:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003224:	e885 0003 	stmia.w	r5, {r0, r1}
 8003228:	1d33      	adds	r3, r6, #4
 800322a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	f002 fff7 	bl	8006220 <USB_CoreInit>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0d0      	b.n	80033e6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f003 f85a 	bl	8006304 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	e04a      	b.n	80032ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	333d      	adds	r3, #61	; 0x3d
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	333c      	adds	r3, #60	; 0x3c
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	b298      	uxth	r0, r3
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3344      	adds	r3, #68	; 0x44
 8003292:	4602      	mov	r2, r0
 8003294:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3340      	adds	r3, #64	; 0x40
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3348      	adds	r3, #72	; 0x48
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	334c      	adds	r3, #76	; 0x4c
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3354      	adds	r3, #84	; 0x54
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	3301      	adds	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d3af      	bcc.n	8003256 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	e044      	b.n	8003386 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	3301      	adds	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d3b5      	bcc.n	80032fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	687e      	ldr	r6, [r7, #4]
 8003398:	466d      	mov	r5, sp
 800339a:	f106 0410 	add.w	r4, r6, #16
 800339e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ae:	1d33      	adds	r3, r6, #4
 80033b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	f002 fff2 	bl	800639c <USB_DevInit>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00d      	b.n	80033e6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f003 f9bd 	bl	800675e <USB_DevDisconnect>

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080033f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e267      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d075      	beq.n	80034fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340e:	4b88      	ldr	r3, [pc, #544]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b04      	cmp	r3, #4
 8003418:	d00c      	beq.n	8003434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	4b85      	ldr	r3, [pc, #532]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003422:	2b08      	cmp	r3, #8
 8003424:	d112      	bne.n	800344c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003426:	4b82      	ldr	r3, [pc, #520]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003432:	d10b      	bne.n	800344c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	4b7e      	ldr	r3, [pc, #504]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d05b      	beq.n	80034f8 <HAL_RCC_OscConfig+0x108>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d157      	bne.n	80034f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e242      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003454:	d106      	bne.n	8003464 <HAL_RCC_OscConfig+0x74>
 8003456:	4b76      	ldr	r3, [pc, #472]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a75      	ldr	r2, [pc, #468]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e01d      	b.n	80034a0 <HAL_RCC_OscConfig+0xb0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x98>
 800346e:	4b70      	ldr	r3, [pc, #448]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6f      	ldr	r2, [pc, #444]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b6d      	ldr	r3, [pc, #436]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a6c      	ldr	r2, [pc, #432]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e00b      	b.n	80034a0 <HAL_RCC_OscConfig+0xb0>
 8003488:	4b69      	ldr	r3, [pc, #420]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a68      	ldr	r2, [pc, #416]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800348e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b66      	ldr	r3, [pc, #408]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a65      	ldr	r2, [pc, #404]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800349a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fe f9b4 	bl	8001814 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fe f9b0 	bl	8001814 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e207      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0xc0>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe f9a0 	bl	8001814 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe f99c 	bl	8001814 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e1f3      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	4b51      	ldr	r3, [pc, #324]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0xe8>
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d063      	beq.n	80035ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003506:	4b4a      	ldr	r3, [pc, #296]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351a:	2b08      	cmp	r3, #8
 800351c:	d11c      	bne.n	8003558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351e:	4b44      	ldr	r3, [pc, #272]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d116      	bne.n	8003558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_RCC_OscConfig+0x152>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e1c7      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003542:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4937      	ldr	r1, [pc, #220]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	e03a      	b.n	80035ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003560:	4b34      	ldr	r3, [pc, #208]	; (8003634 <HAL_RCC_OscConfig+0x244>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7fe f955 	bl	8001814 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356e:	f7fe f951 	bl	8001814 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e1a8      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4925      	ldr	r1, [pc, #148]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 800359c:	4313      	orrs	r3, r2
 800359e:	600b      	str	r3, [r1, #0]
 80035a0:	e015      	b.n	80035ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_OscConfig+0x244>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe f934 	bl	8001814 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fe f930 	bl	8001814 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e187      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d036      	beq.n	8003648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <HAL_RCC_OscConfig+0x248>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe f914 	bl	8001814 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fe f910 	bl	8001814 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e167      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_OscConfig+0x240>)
 8003604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x200>
 800360e:	e01b      	b.n	8003648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_OscConfig+0x248>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fe f8fd 	bl	8001814 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	e00e      	b.n	800363c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361e:	f7fe f8f9 	bl	8001814 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d907      	bls.n	800363c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e150      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
 8003630:	40023800 	.word	0x40023800
 8003634:	42470000 	.word	0x42470000
 8003638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363c:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ea      	bne.n	800361e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8097 	beq.w	8003784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365a:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	4b7d      	ldr	r3, [pc, #500]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a7c      	ldr	r2, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b7a      	ldr	r3, [pc, #488]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b77      	ldr	r3, [pc, #476]	; (8003864 <HAL_RCC_OscConfig+0x474>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d118      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003692:	4b74      	ldr	r3, [pc, #464]	; (8003864 <HAL_RCC_OscConfig+0x474>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a73      	ldr	r2, [pc, #460]	; (8003864 <HAL_RCC_OscConfig+0x474>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369e:	f7fe f8b9 	bl	8001814 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a6:	f7fe f8b5 	bl	8001814 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e10c      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <HAL_RCC_OscConfig+0x474>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x2ea>
 80036cc:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a63      	ldr	r2, [pc, #396]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
 80036d8:	e01c      	b.n	8003714 <HAL_RCC_OscConfig+0x324>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b05      	cmp	r3, #5
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x30c>
 80036e2:	4b5f      	ldr	r3, [pc, #380]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a5e      	ldr	r2, [pc, #376]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	4b5c      	ldr	r3, [pc, #368]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a5b      	ldr	r2, [pc, #364]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0x324>
 80036fc:	4b58      	ldr	r3, [pc, #352]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a57      	ldr	r2, [pc, #348]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
 8003708:	4b55      	ldr	r3, [pc, #340]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a54      	ldr	r2, [pc, #336]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800370e:	f023 0304 	bic.w	r3, r3, #4
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d015      	beq.n	8003748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe f87a 	bl	8001814 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe f876 	bl	8001814 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0cb      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	4b49      	ldr	r3, [pc, #292]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ee      	beq.n	8003724 <HAL_RCC_OscConfig+0x334>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fe f864 	bl	8001814 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7fe f860 	bl	8001814 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0b5      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1ee      	bne.n	8003750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	4a38      	ldr	r2, [pc, #224]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800377e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80a1 	beq.w	80038d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b08      	cmp	r3, #8
 8003798:	d05c      	beq.n	8003854 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d141      	bne.n	8003826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_RCC_OscConfig+0x478>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe f834 	bl	8001814 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe f830 	bl	8001814 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e087      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	019b      	lsls	r3, r3, #6
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	3b01      	subs	r3, #1
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	061b      	lsls	r3, r3, #24
 80037f2:	491b      	ldr	r1, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x478>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fe:	f7fe f809 	bl	8001814 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003806:	f7fe f805 	bl	8001814 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e05c      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x416>
 8003824:	e054      	b.n	80038d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <HAL_RCC_OscConfig+0x478>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fd fff2 	bl	8001814 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7fd ffee 	bl	8001814 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e045      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCC_OscConfig+0x470>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x444>
 8003852:	e03d      	b.n	80038d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e038      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
 8003860:	40023800 	.word	0x40023800
 8003864:	40007000 	.word	0x40007000
 8003868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800386c:	4b1b      	ldr	r3, [pc, #108]	; (80038dc <HAL_RCC_OscConfig+0x4ec>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d028      	beq.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d121      	bne.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d11a      	bne.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d111      	bne.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	085b      	lsrs	r3, r3, #1
 80038b4:	3b01      	subs	r3, #1
 80038b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d107      	bne.n	80038cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800

080038e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0cc      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b68      	ldr	r3, [pc, #416]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d90c      	bls.n	800391c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b65      	ldr	r3, [pc, #404]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003934:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800393e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a52      	ldr	r2, [pc, #328]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	494d      	ldr	r1, [pc, #308]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d044      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d119      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e07f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d003      	beq.n	800399e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399a:	2b03      	cmp	r3, #3
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e06f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	4b3b      	ldr	r3, [pc, #236]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e067      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4934      	ldr	r1, [pc, #208]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fd ff20 	bl	8001814 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7fd ff1c 	bl	8001814 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e04f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d20c      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e032      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4916      	ldr	r1, [pc, #88]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a66:	f000 f821 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	490a      	ldr	r1, [pc, #40]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	5ccb      	ldrb	r3, [r1, r3]
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fd fe80 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023c00 	.word	0x40023c00
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	08007c2c 	.word	0x08007c2c
 8003aa4:	20000008 	.word	0x20000008
 8003aa8:	2000000c 	.word	0x2000000c

08003aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab0:	b094      	sub	sp, #80	; 0x50
 8003ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab8:	2300      	movs	r3, #0
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abc:	2300      	movs	r3, #0
 8003abe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac4:	4b79      	ldr	r3, [pc, #484]	; (8003cac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d00d      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x40>
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	f200 80e1 	bhi.w	8003c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ade:	e0db      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae0:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ae2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ae4:	e0db      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ae6:	4b73      	ldr	r3, [pc, #460]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aea:	e0d8      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aec:	4b6f      	ldr	r3, [pc, #444]	; (8003cac <HAL_RCC_GetSysClockFreq+0x200>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af6:	4b6d      	ldr	r3, [pc, #436]	; (8003cac <HAL_RCC_GetSysClockFreq+0x200>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d063      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b02:	4b6a      	ldr	r3, [pc, #424]	; (8003cac <HAL_RCC_GetSysClockFreq+0x200>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	2200      	movs	r2, #0
 8003b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b14:	633b      	str	r3, [r7, #48]	; 0x30
 8003b16:	2300      	movs	r3, #0
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b1e:	4622      	mov	r2, r4
 8003b20:	462b      	mov	r3, r5
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	0159      	lsls	r1, r3, #5
 8003b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b30:	0150      	lsls	r0, r2, #5
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4621      	mov	r1, r4
 8003b38:	1a51      	subs	r1, r2, r1
 8003b3a:	6139      	str	r1, [r7, #16]
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b50:	4659      	mov	r1, fp
 8003b52:	018b      	lsls	r3, r1, #6
 8003b54:	4651      	mov	r1, sl
 8003b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b5a:	4651      	mov	r1, sl
 8003b5c:	018a      	lsls	r2, r1, #6
 8003b5e:	4651      	mov	r1, sl
 8003b60:	ebb2 0801 	subs.w	r8, r2, r1
 8003b64:	4659      	mov	r1, fp
 8003b66:	eb63 0901 	sbc.w	r9, r3, r1
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b7e:	4690      	mov	r8, r2
 8003b80:	4699      	mov	r9, r3
 8003b82:	4623      	mov	r3, r4
 8003b84:	eb18 0303 	adds.w	r3, r8, r3
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	eb49 0303 	adc.w	r3, r9, r3
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	024b      	lsls	r3, r1, #9
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ba8:	4621      	mov	r1, r4
 8003baa:	024a      	lsls	r2, r1, #9
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bbc:	f7fc fb70 	bl	80002a0 <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc8:	e058      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bca:	4b38      	ldr	r3, [pc, #224]	; (8003cac <HAL_RCC_GetSysClockFreq+0x200>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
 8003be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003be4:	4642      	mov	r2, r8
 8003be6:	464b      	mov	r3, r9
 8003be8:	f04f 0000 	mov.w	r0, #0
 8003bec:	f04f 0100 	mov.w	r1, #0
 8003bf0:	0159      	lsls	r1, r3, #5
 8003bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf6:	0150      	lsls	r0, r2, #5
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c02:	4649      	mov	r1, r9
 8003c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c20:	eb63 050b 	sbc.w	r5, r3, fp
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	00eb      	lsls	r3, r5, #3
 8003c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c32:	00e2      	lsls	r2, r4, #3
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	18e3      	adds	r3, r4, r3
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	464b      	mov	r3, r9
 8003c40:	eb45 0303 	adc.w	r3, r5, r3
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c52:	4629      	mov	r1, r5
 8003c54:	028b      	lsls	r3, r1, #10
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	028a      	lsls	r2, r1, #10
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c66:	2200      	movs	r2, #0
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	61fa      	str	r2, [r7, #28]
 8003c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c70:	f7fc fb16 	bl	80002a0 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3750      	adds	r7, #80	; 0x50
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	007a1200 	.word	0x007a1200

08003cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000008 	.word	0x20000008

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd4:	f7ff fff0 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0a9b      	lsrs	r3, r3, #10
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08007c3c 	.word	0x08007c3c

08003cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cfc:	f7ff ffdc 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0b5b      	lsrs	r3, r3, #13
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08007c3c 	.word	0x08007c3c

08003d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d075      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d54:	4b91      	ldr	r3, [pc, #580]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fd5b 	bl	8001814 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d62:	f7fd fd57 	bl	8001814 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e189      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d74:	4b8a      	ldr	r3, [pc, #552]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	019a      	lsls	r2, r3, #6
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	071b      	lsls	r3, r3, #28
 8003d98:	4981      	ldr	r1, [pc, #516]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dac:	4b7c      	ldr	r3, [pc, #496]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db2:	0f1b      	lsrs	r3, r3, #28
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	019a      	lsls	r2, r3, #6
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	061b      	lsls	r3, r3, #24
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	4974      	ldr	r1, [pc, #464]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dd4:	4b72      	ldr	r3, [pc, #456]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dda:	f023 021f 	bic.w	r2, r3, #31
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	496e      	ldr	r1, [pc, #440]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	019a      	lsls	r2, r3, #6
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	071b      	lsls	r3, r3, #28
 8003e0c:	4964      	ldr	r1, [pc, #400]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e14:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1a:	f7fd fcfb 	bl	8001814 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e22:	f7fd fcf7 	bl	8001814 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e129      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e34:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d079      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e58:	4b52      	ldr	r3, [pc, #328]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd fcd9 	bl	8001814 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e66:	f7fd fcd5 	bl	8001814 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e107      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e78:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e84:	d0ef      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d020      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e92:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	0f1b      	lsrs	r3, r3, #28
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	019a      	lsls	r2, r3, #6
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	431a      	orrs	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	071b      	lsls	r3, r3, #28
 8003eb2:	493b      	ldr	r1, [pc, #236]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4934      	ldr	r1, [pc, #208]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01e      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ee0:	4b2f      	ldr	r3, [pc, #188]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	0e1b      	lsrs	r3, r3, #24
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	019a      	lsls	r2, r3, #6
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	071b      	lsls	r3, r3, #28
 8003f00:	4927      	ldr	r1, [pc, #156]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	4922      	ldr	r1, [pc, #136]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f24:	f7fd fc76 	bl	8001814 <HAL_GetTick>
 8003f28:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f2c:	f7fd fc72 	bl	8001814 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0a4      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4a:	d1ef      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 808b 	beq.w	8004070 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f76:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f82:	f7fd fc47 	bl	8001814 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f88:	e010      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fd fc43 	bl	8001814 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d909      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e075      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f9c:	42470068 	.word	0x42470068
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	42470070 	.word	0x42470070
 8003fa8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0e8      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fb8:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02f      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d028      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe0:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fec:	4a29      	ldr	r2, [pc, #164]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff2:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d114      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fc09 	bl	8001814 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004004:	e00a      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fd fc05 	bl	8001814 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	; 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e035      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0ee      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004034:	d10d      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404a:	4912      	ldr	r1, [pc, #72]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]
 8004050:	e005      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004058:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800405c:	6093      	str	r3, [r2, #8]
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800406c:	4313      	orrs	r3, r2
 800406e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004084:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40007000 	.word	0x40007000
 8004094:	40023800 	.word	0x40023800
 8004098:	42470e40 	.word	0x42470e40
 800409c:	424711e0 	.word	0x424711e0

080040a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e066      	b.n	8004184 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7f5b      	ldrb	r3, [r3, #29]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd f946 	bl	8001358 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	22ca      	movs	r2, #202	; 0xca
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2253      	movs	r2, #83	; 0x53
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fbce 	bl	8004884 <RTC_EnterInitMode>
 80040e8:	4603      	mov	r3, r0
 80040ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d12c      	bne.n	800414c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004104:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6899      	ldr	r1, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68d2      	ldr	r2, [r2, #12]
 800412c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6919      	ldr	r1, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	041a      	lsls	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fbd5 	bl	80048f2 <RTC_ExitInitMode>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d113      	bne.n	800417a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699a      	ldr	r2, [r3, #24]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	22ff      	movs	r2, #255	; 0xff
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	7f1b      	ldrb	r3, [r3, #28]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_RTC_SetTime+0x1c>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e087      	b.n	80042b8 <HAL_RTC_SetTime+0x12c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2202      	movs	r2, #2
 80041b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d126      	bne.n	8004208 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fbb2 	bl	800493c <RTC_ByteToBcd2>
 80041d8:	4603      	mov	r3, r0
 80041da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fbab 	bl	800493c <RTC_ByteToBcd2>
 80041e6:	4603      	mov	r3, r0
 80041e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	789b      	ldrb	r3, [r3, #2]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fba3 	bl	800493c <RTC_ByteToBcd2>
 80041f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	78db      	ldrb	r3, [r3, #3]
 8004200:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e018      	b.n	800423a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2200      	movs	r2, #0
 800421a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004228:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800422e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	78db      	ldrb	r3, [r3, #3]
 8004234:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	22ca      	movs	r2, #202	; 0xca
 8004240:	625a      	str	r2, [r3, #36]	; 0x24
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2253      	movs	r2, #83	; 0x53
 8004248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fb1a 	bl	8004884 <RTC_EnterInitMode>
 8004250:	4603      	mov	r3, r0
 8004252:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d120      	bne.n	800429c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004264:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004268:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004278:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6899      	ldr	r1, [r3, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	431a      	orrs	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fb2d 	bl	80048f2 <RTC_ExitInitMode>
 8004298:	4603      	mov	r3, r0
 800429a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	771a      	strb	r2, [r3, #28]

  return status;
 80042b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd90      	pop	{r4, r7, pc}

080042c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80042f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004312:	b2da      	uxtb	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	0d9b      	lsrs	r3, r3, #22
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d11a      	bne.n	8004372 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fb18 	bl	8004976 <RTC_Bcd2ToByte>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	785b      	ldrb	r3, [r3, #1]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fb0f 	bl	8004976 <RTC_Bcd2ToByte>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	789b      	ldrb	r3, [r3, #2]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fb06 	bl	8004976 <RTC_Bcd2ToByte>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	7f1b      	ldrb	r3, [r3, #28]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_RTC_SetDate+0x1c>
 8004394:	2302      	movs	r3, #2
 8004396:	e071      	b.n	800447c <HAL_RTC_SetDate+0x100>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2202      	movs	r2, #2
 80043a2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10e      	bne.n	80043c8 <HAL_RTC_SetDate+0x4c>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	f023 0310 	bic.w	r3, r3, #16
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	330a      	adds	r3, #10
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d11c      	bne.n	8004408 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	78db      	ldrb	r3, [r3, #3]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fab2 	bl	800493c <RTC_ByteToBcd2>
 80043d8:	4603      	mov	r3, r0
 80043da:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 faab 	bl	800493c <RTC_ByteToBcd2>
 80043e6:	4603      	mov	r3, r0
 80043e8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043ea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	789b      	ldrb	r3, [r3, #2]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 faa3 	bl	800493c <RTC_ByteToBcd2>
 80043f6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043f8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e00e      	b.n	8004426 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	78db      	ldrb	r3, [r3, #3]
 800440c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004414:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800441a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	22ca      	movs	r2, #202	; 0xca
 800442c:	625a      	str	r2, [r3, #36]	; 0x24
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2253      	movs	r2, #83	; 0x53
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fa24 	bl	8004884 <RTC_EnterInitMode>
 800443c:	4603      	mov	r3, r0
 800443e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10c      	bne.n	8004460 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004450:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004454:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa4b 	bl	80048f2 <RTC_ExitInitMode>
 800445c:	4603      	mov	r3, r0
 800445e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	22ff      	movs	r2, #255	; 0xff
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	771a      	strb	r2, [r3, #28]

  return status;
 800447a:	7cfb      	ldrb	r3, [r7, #19]
}
 800447c:	4618      	mov	r0, r3
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	bd90      	pop	{r4, r7, pc}

08004484 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800449e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	0b5b      	lsrs	r3, r3, #13
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11a      	bne.n	8004518 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	78db      	ldrb	r3, [r3, #3]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa45 	bl	8004976 <RTC_Bcd2ToByte>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fa3c 	bl	8004976 <RTC_Bcd2ToByte>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	789b      	ldrb	r3, [r3, #2]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fa33 	bl	8004976 <RTC_Bcd2ToByte>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004530:	4b9a      	ldr	r3, [pc, #616]	; (800479c <HAL_RTC_SetAlarm_IT+0x278>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a9a      	ldr	r2, [pc, #616]	; (80047a0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	0adb      	lsrs	r3, r3, #11
 800453c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	7f1b      	ldrb	r3, [r3, #28]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_RTC_SetAlarm_IT+0x36>
 8004556:	2302      	movs	r3, #2
 8004558:	e11c      	b.n	8004794 <HAL_RTC_SetAlarm_IT+0x270>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2202      	movs	r2, #2
 8004564:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d137      	bne.n	80045dc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2200      	movs	r2, #0
 800457e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f9d9 	bl	800493c <RTC_ByteToBcd2>
 800458a:	4603      	mov	r3, r0
 800458c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f9d2 	bl	800493c <RTC_ByteToBcd2>
 8004598:	4603      	mov	r3, r0
 800459a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800459c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	789b      	ldrb	r3, [r3, #2]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f9ca 	bl	800493c <RTC_ByteToBcd2>
 80045a8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80045aa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	78db      	ldrb	r3, [r3, #3]
 80045b2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80045b4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f9bc 	bl	800493c <RTC_ByteToBcd2>
 80045c4:	4603      	mov	r3, r0
 80045c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80045c8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80045d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e023      	b.n	8004624 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80045fc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004602:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	78db      	ldrb	r3, [r3, #3]
 8004608:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800460a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004612:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004614:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800461a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004620:	4313      	orrs	r3, r2
 8004622:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	22ca      	movs	r2, #202	; 0xca
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2253      	movs	r2, #83	; 0x53
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004648:	d141      	bne.n	80046ce <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004658:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800466a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	1e5a      	subs	r2, r3, #1
 8004670:	617a      	str	r2, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	22ff      	movs	r2, #255	; 0xff
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2203      	movs	r2, #3
 8004682:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e082      	b.n	8004794 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0e7      	beq.n	800466c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ca:	609a      	str	r2, [r3, #8]
 80046cc:	e04b      	b.n	8004766 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046dc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f462 7220 	orn	r2, r2, #640	; 0x280
 80046ee:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_RTC_SetAlarm_IT+0x278>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <HAL_RTC_SetAlarm_IT+0x27c>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0adb      	lsrs	r3, r3, #11
 80046fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004700:	fb02 f303 	mul.w	r3, r2, r3
 8004704:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	617a      	str	r2, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2203      	movs	r2, #3
 800471c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e035      	b.n	8004794 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0e7      	beq.n	8004706 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004754:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004764:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_RTC_SetAlarm_IT+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <HAL_RTC_SetAlarm_IT+0x280>)
 800476c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004770:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <HAL_RTC_SetAlarm_IT+0x280>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	4a0b      	ldr	r2, [pc, #44]	; (80047a4 <HAL_RTC_SetAlarm_IT+0x280>)
 8004778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	22ff      	movs	r2, #255	; 0xff
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3724      	adds	r7, #36	; 0x24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd90      	pop	{r4, r7, pc}
 800479c:	20000008 	.word	0x20000008
 80047a0:	10624dd3 	.word	0x10624dd3
 80047a4:	40013c00 	.word	0x40013c00

080047a8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d012      	beq.n	80047e4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7fc fc73 	bl	80010b8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80047e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d012      	beq.n	8004818 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8d4 	bl	80049ae <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004816:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RTC_AlarmIRQHandler+0x88>)
 800481a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800481e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	775a      	strb	r2, [r3, #29]
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40013c00 	.word	0x40013c00

08004834 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800484e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004850:	f7fc ffe0 	bl	8001814 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004856:	e009      	b.n	800486c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004858:	f7fc ffdc 	bl	8001814 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004866:	d901      	bls.n	800486c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e007      	b.n	800487c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ee      	beq.n	8004858 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d122      	bne.n	80048e8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048b2:	f7fc ffaf 	bl	8001814 <HAL_GetTick>
 80048b6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048b8:	e00c      	b.n	80048d4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048ba:	f7fc ffab 	bl	8001814 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c8:	d904      	bls.n	80048d4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2204      	movs	r2, #4
 80048ce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <RTC_EnterInitMode+0x64>
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d1e8      	bne.n	80048ba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800490c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff89 	bl	8004834 <HAL_RTC_WaitForSynchro>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2204      	movs	r2, #4
 800492c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800494a:	e005      	b.n	8004958 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	3301      	adds	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	3b0a      	subs	r3, #10
 8004956:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	2b09      	cmp	r3, #9
 800495c:	d8f6      	bhi.n	800494c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	b2da      	uxtb	r2, r3
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	4313      	orrs	r3, r2
 8004968:	b2db      	uxtb	r3, r3
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	4603      	mov	r3, r0
 800497e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	091b      	lsrs	r3, r3, #4
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	0092      	lsls	r2, r2, #2
 800498e:	4413      	add	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	b2da      	uxtb	r2, r3
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	4413      	add	r3, r2
 80049a0:	b2db      	uxtb	r3, r3
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e041      	b.n	8004a58 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7fc fcdf 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	4610      	mov	r0, r2
 8004a02:	f000 fa2f 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d122      	bne.n	8004abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d11b      	bne.n	8004abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0202 	mvn.w	r2, #2
 8004a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9bf 	bl	8004e26 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f9b1 	bl	8004e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f9c2 	bl	8004e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d122      	bne.n	8004b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d11b      	bne.n	8004b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0204 	mvn.w	r2, #4
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f995 	bl	8004e26 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f987 	bl	8004e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f998 	bl	8004e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d122      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d11b      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0208 	mvn.w	r2, #8
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2204      	movs	r2, #4
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f96b 	bl	8004e26 <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f95d 	bl	8004e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f96e 	bl	8004e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d122      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0210 	mvn.w	r2, #16
 8004b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f941 	bl	8004e26 <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f933 	bl	8004e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f944 	bl	8004e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d10e      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d107      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0201 	mvn.w	r2, #1
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f90d 	bl	8004dfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d10e      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b80      	cmp	r3, #128	; 0x80
 8004bfe:	d107      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 faea 	bl	80051e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d10e      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d107      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f909 	bl	8004e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d10e      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d107      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0220 	mvn.w	r2, #32
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fab4 	bl	80051d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_TIM_ConfigClockSource+0x1c>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e0b4      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x186>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc4:	d03e      	beq.n	8004d44 <HAL_TIM_ConfigClockSource+0xd4>
 8004cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cca:	f200 8087 	bhi.w	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	f000 8086 	beq.w	8004de2 <HAL_TIM_ConfigClockSource+0x172>
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cda:	d87f      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b70      	cmp	r3, #112	; 0x70
 8004cde:	d01a      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0xa6>
 8004ce0:	2b70      	cmp	r3, #112	; 0x70
 8004ce2:	d87b      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b60      	cmp	r3, #96	; 0x60
 8004ce6:	d050      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x11a>
 8004ce8:	2b60      	cmp	r3, #96	; 0x60
 8004cea:	d877      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b50      	cmp	r3, #80	; 0x50
 8004cee:	d03c      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0xfa>
 8004cf0:	2b50      	cmp	r3, #80	; 0x50
 8004cf2:	d873      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d058      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x13a>
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d86f      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b30      	cmp	r3, #48	; 0x30
 8004cfe:	d064      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15a>
 8004d00:	2b30      	cmp	r3, #48	; 0x30
 8004d02:	d86b      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d060      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15a>
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d867      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d05c      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15a>
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d05a      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15a>
 8004d14:	e062      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6899      	ldr	r1, [r3, #8]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f000 f9b7 	bl	8005098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	609a      	str	r2, [r3, #8]
      break;
 8004d42:	e04f      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	6899      	ldr	r1, [r3, #8]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f000 f9a0 	bl	8005098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d66:	609a      	str	r2, [r3, #8]
      break;
 8004d68:	e03c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 f914 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2150      	movs	r1, #80	; 0x50
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f96d 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004d88:	e02c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 f933 	bl	8005002 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2160      	movs	r1, #96	; 0x60
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f95d 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004da8:	e01c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 f8f4 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2140      	movs	r1, #64	; 0x40
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f94d 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e00c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f000 f944 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 8004dda:	e003      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
      break;
 8004de0:	e000      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a40      	ldr	r2, [pc, #256]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d00f      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3d      	ldr	r2, [pc, #244]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3c      	ldr	r2, [pc, #240]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3b      	ldr	r2, [pc, #236]	; (8004f84 <TIM_Base_SetConfig+0x120>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a3a      	ldr	r2, [pc, #232]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d108      	bne.n	8004eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2f      	ldr	r2, [pc, #188]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d02b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec4:	d027      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d023      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2b      	ldr	r2, [pc, #172]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01f      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <TIM_Base_SetConfig+0x120>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a29      	ldr	r2, [pc, #164]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d017      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a28      	ldr	r2, [pc, #160]	; (8004f8c <TIM_Base_SetConfig+0x128>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a27      	ldr	r2, [pc, #156]	; (8004f90 <TIM_Base_SetConfig+0x12c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00f      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <TIM_Base_SetConfig+0x130>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a25      	ldr	r2, [pc, #148]	; (8004f98 <TIM_Base_SetConfig+0x134>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <TIM_Base_SetConfig+0x138>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a23      	ldr	r2, [pc, #140]	; (8004fa0 <TIM_Base_SetConfig+0x13c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d108      	bne.n	8004f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_Base_SetConfig+0xf8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <TIM_Base_SetConfig+0x124>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d103      	bne.n	8004f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	615a      	str	r2, [r3, #20]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800
 8004f98:	40001800 	.word	0x40001800
 8004f9c:	40001c00 	.word	0x40001c00
 8004fa0:	40002000 	.word	0x40002000

08004fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 030a 	bic.w	r3, r3, #10
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f023 0210 	bic.w	r2, r3, #16
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800502c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800503e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	f043 0307 	orr.w	r3, r3, #7
 8005084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	021a      	lsls	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e05a      	b.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d022      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513c:	d01d      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d018      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a15      	ldr	r2, [pc, #84]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10c      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4313      	orrs	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40010400 	.word	0x40010400
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40001800 	.word	0x40001800

080051d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e03f      	b.n	800528a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc f8e4 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2224      	movs	r2, #36	; 0x24
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800523a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fd7b 	bl	8005d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b08a      	sub	sp, #40	; 0x28
 8005296:	af02      	add	r7, sp, #8
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	4613      	mov	r3, r2
 80052a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d17c      	bne.n	80053ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_UART_Transmit+0x2c>
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e075      	b.n	80053ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Transmit+0x3e>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e06e      	b.n	80053ae <HAL_UART_Transmit+0x11c>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2221      	movs	r2, #33	; 0x21
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052e6:	f7fc fa95 	bl	8001814 <HAL_GetTick>
 80052ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	88fa      	ldrh	r2, [r7, #6]
 80052f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005300:	d108      	bne.n	8005314 <HAL_UART_Transmit+0x82>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e003      	b.n	800531c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005324:	e02a      	b.n	800537c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	2180      	movs	r1, #128	; 0x80
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 faf9 	bl	8005928 <UART_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e036      	b.n	80053ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	3302      	adds	r3, #2
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	e007      	b.n	800536e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	3301      	adds	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1cf      	bne.n	8005326 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2200      	movs	r2, #0
 800538e:	2140      	movs	r1, #64	; 0x40
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 fac9 	bl	8005928 <UART_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e006      	b.n	80053ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b0ba      	sub	sp, #232	; 0xe8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053de:	2300      	movs	r3, #0
 80053e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10f      	bne.n	800541e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_UART_IRQHandler+0x66>
 800540a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fbd3 	bl	8005bc2 <UART_Receive_IT>
      return;
 800541c:	e256      	b.n	80058cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800541e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80de 	beq.w	80055e4 <HAL_UART_IRQHandler+0x22c>
 8005428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005438:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80d1 	beq.w	80055e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_UART_IRQHandler+0xae>
 800544e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f043 0201 	orr.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <HAL_UART_IRQHandler+0xd2>
 8005472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0202 	orr.w	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800548a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <HAL_UART_IRQHandler+0xf6>
 8005496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f043 0204 	orr.w	r2, r3, #4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d011      	beq.n	80054de <HAL_UART_IRQHandler+0x126>
 80054ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0208 	orr.w	r2, r3, #8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 81ed 	beq.w	80058c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_UART_IRQHandler+0x14e>
 80054f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fb5e 	bl	8005bc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <HAL_UART_IRQHandler+0x17a>
 800552a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04f      	beq.n	80055d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa66 	bl	8005a04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d141      	bne.n	80055ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800555c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3314      	adds	r3, #20
 800556e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005572:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800557e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800558a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1d9      	bne.n	8005546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	2b00      	cmp	r3, #0
 8005598:	d013      	beq.n	80055c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	4a7d      	ldr	r2, [pc, #500]	; (8005794 <HAL_UART_IRQHandler+0x3dc>)
 80055a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fc fae5 	bl	8001b76 <HAL_DMA_Abort_IT>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d016      	beq.n	80055e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055bc:	4610      	mov	r0, r2
 80055be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	e00e      	b.n	80055e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f99a 	bl	80058fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	e00a      	b.n	80055e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f996 	bl	80058fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d0:	e006      	b.n	80055e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f992 	bl	80058fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055de:	e170      	b.n	80058c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	bf00      	nop
    return;
 80055e2:	e16e      	b.n	80058c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	f040 814a 	bne.w	8005882 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8143 	beq.w	8005882 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 813c 	beq.w	8005882 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	f040 80b4 	bne.w	8005798 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800563c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8140 	beq.w	80058c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800564a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800564e:	429a      	cmp	r2, r3
 8005650:	f080 8139 	bcs.w	80058c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800565a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005666:	f000 8088 	beq.w	800577a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005696:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800569a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1d9      	bne.n	800566a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3314      	adds	r3, #20
 80056d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e1      	bne.n	80056b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3314      	adds	r3, #20
 80056f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3314      	adds	r3, #20
 8005712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005716:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005718:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800571c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e3      	bne.n	80056f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574a:	f023 0310 	bic.w	r3, r3, #16
 800574e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800575c:	65ba      	str	r2, [r7, #88]	; 0x58
 800575e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800576a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e3      	bne.n	8005738 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	4618      	mov	r0, r3
 8005776:	f7fc f98e 	bl	8001a96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005782:	b29b      	uxth	r3, r3
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	b29b      	uxth	r3, r3
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8c0 	bl	8005910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005790:	e099      	b.n	80058c6 <HAL_UART_IRQHandler+0x50e>
 8005792:	bf00      	nop
 8005794:	08005acb 	.word	0x08005acb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 808b 	beq.w	80058ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80057b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8086 	beq.w	80058ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057e2:	647a      	str	r2, [r7, #68]	; 0x44
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e3      	bne.n	80057be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3314      	adds	r3, #20
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	623b      	str	r3, [r7, #32]
   return(result);
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800581a:	633a      	str	r2, [r7, #48]	; 0x30
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e3      	bne.n	80057f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	60fb      	str	r3, [r7, #12]
   return(result);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0310 	bic.w	r3, r3, #16
 8005852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005860:	61fa      	str	r2, [r7, #28]
 8005862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	617b      	str	r3, [r7, #20]
   return(result);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e3      	bne.n	800583c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f848 	bl	8005910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005880:	e023      	b.n	80058ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <HAL_UART_IRQHandler+0x4ea>
 800588e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f929 	bl	8005af2 <UART_Transmit_IT>
    return;
 80058a0:	e014      	b.n	80058cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00e      	beq.n	80058cc <HAL_UART_IRQHandler+0x514>
 80058ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f969 	bl	8005b92 <UART_EndTransmit_IT>
    return;
 80058c0:	e004      	b.n	80058cc <HAL_UART_IRQHandler+0x514>
    return;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <HAL_UART_IRQHandler+0x514>
      return;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <HAL_UART_IRQHandler+0x514>
      return;
 80058ca:	bf00      	nop
  }
}
 80058cc:	37e8      	adds	r7, #232	; 0xe8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop

080058d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b090      	sub	sp, #64	; 0x40
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005938:	e050      	b.n	80059dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d04c      	beq.n	80059dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <UART_WaitOnFlagUntilTimeout+0x30>
 8005948:	f7fb ff64 	bl	8001814 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005954:	429a      	cmp	r2, r3
 8005956:	d241      	bcs.n	80059dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005978:	637a      	str	r2, [r7, #52]	; 0x34
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800597e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3314      	adds	r3, #20
 8005992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	613b      	str	r3, [r7, #16]
   return(result);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3314      	adds	r3, #20
 80059aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ac:	623a      	str	r2, [r7, #32]
 80059ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	69f9      	ldr	r1, [r7, #28]
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e00f      	b.n	80059fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4013      	ands	r3, r2
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d09f      	beq.n	800593a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3740      	adds	r7, #64	; 0x40
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b095      	sub	sp, #84	; 0x54
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a2c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d119      	bne.n	8005ab0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	647b      	str	r3, [r7, #68]	; 0x44
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a9c:	61ba      	str	r2, [r7, #24]
 8005a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6979      	ldr	r1, [r7, #20]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005abe:	bf00      	nop
 8005ac0:	3754      	adds	r7, #84	; 0x54
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff ff09 	bl	80058fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b21      	cmp	r3, #33	; 0x21
 8005b04:	d13e      	bne.n	8005b84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0e:	d114      	bne.n	8005b3a <UART_Transmit_IT+0x48>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d110      	bne.n	8005b3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	1c9a      	adds	r2, r3, #2
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	621a      	str	r2, [r3, #32]
 8005b38:	e008      	b.n	8005b4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	1c59      	adds	r1, r3, #1
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6211      	str	r1, [r2, #32]
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10f      	bne.n	8005b80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fe8e 	bl	80058d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b08c      	sub	sp, #48	; 0x30
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b22      	cmp	r3, #34	; 0x22
 8005bd4:	f040 80ab 	bne.w	8005d2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be0:	d117      	bne.n	8005c12 <UART_Receive_IT+0x50>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d113      	bne.n	8005c12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	1c9a      	adds	r2, r3, #2
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c10:	e026      	b.n	8005c60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c24:	d007      	beq.n	8005c36 <UART_Receive_IT+0x74>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <UART_Receive_IT+0x82>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	e008      	b.n	8005c56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d15a      	bne.n	8005d2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0220 	bic.w	r2, r2, #32
 8005c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d135      	bne.n	8005d20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f023 0310 	bic.w	r3, r3, #16
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cda:	623a      	str	r2, [r7, #32]
 8005cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	69f9      	ldr	r1, [r7, #28]
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d10a      	bne.n	8005d12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff fdf9 	bl	8005910 <HAL_UARTEx_RxEventCallback>
 8005d1e:	e002      	b.n	8005d26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff fde1 	bl	80058e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e002      	b.n	8005d30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e000      	b.n	8005d30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
  }
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3730      	adds	r7, #48	; 0x30
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d3c:	b0c0      	sub	sp, #256	; 0x100
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	68d9      	ldr	r1, [r3, #12]
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	ea40 0301 	orr.w	r3, r0, r1
 8005d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d90:	f021 010c 	bic.w	r1, r1, #12
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db2:	6999      	ldr	r1, [r3, #24]
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	ea40 0301 	orr.w	r3, r0, r1
 8005dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b8f      	ldr	r3, [pc, #572]	; (8006004 <UART_SetConfig+0x2cc>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d005      	beq.n	8005dd8 <UART_SetConfig+0xa0>
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b8d      	ldr	r3, [pc, #564]	; (8006008 <UART_SetConfig+0x2d0>)
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d104      	bne.n	8005de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd8:	f7fd ff8e 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8005ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005de0:	e003      	b.n	8005dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005de2:	f7fd ff75 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8005de6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df4:	f040 810c 	bne.w	8006010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	1891      	adds	r1, r2, r2
 8005e10:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e12:	415b      	adcs	r3, r3
 8005e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	eb12 0801 	adds.w	r8, r2, r1
 8005e20:	4629      	mov	r1, r5
 8005e22:	eb43 0901 	adc.w	r9, r3, r1
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3a:	4690      	mov	r8, r2
 8005e3c:	4699      	mov	r9, r3
 8005e3e:	4623      	mov	r3, r4
 8005e40:	eb18 0303 	adds.w	r3, r8, r3
 8005e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e48:	462b      	mov	r3, r5
 8005e4a:	eb49 0303 	adc.w	r3, r9, r3
 8005e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e66:	460b      	mov	r3, r1
 8005e68:	18db      	adds	r3, r3, r3
 8005e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	eb42 0303 	adc.w	r3, r2, r3
 8005e72:	657b      	str	r3, [r7, #84]	; 0x54
 8005e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e7c:	f7fa fa10 	bl	80002a0 <__aeabi_uldivmod>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4b61      	ldr	r3, [pc, #388]	; (800600c <UART_SetConfig+0x2d4>)
 8005e86:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	011c      	lsls	r4, r3, #4
 8005e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e92:	2200      	movs	r2, #0
 8005e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	1891      	adds	r1, r2, r2
 8005ea6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ea8:	415b      	adcs	r3, r3
 8005eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed0:	4692      	mov	sl, r2
 8005ed2:	469b      	mov	fp, r3
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8005eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ede:	464b      	mov	r3, r9
 8005ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005efc:	460b      	mov	r3, r1
 8005efe:	18db      	adds	r3, r3, r3
 8005f00:	643b      	str	r3, [r7, #64]	; 0x40
 8005f02:	4613      	mov	r3, r2
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	647b      	str	r3, [r7, #68]	; 0x44
 8005f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f12:	f7fa f9c5 	bl	80002a0 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4b3b      	ldr	r3, [pc, #236]	; (800600c <UART_SetConfig+0x2d4>)
 8005f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	2264      	movs	r2, #100	; 0x64
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	1acb      	subs	r3, r1, r3
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f32:	4b36      	ldr	r3, [pc, #216]	; (800600c <UART_SetConfig+0x2d4>)
 8005f34:	fba3 2302 	umull	r2, r3, r3, r2
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f40:	441c      	add	r4, r3
 8005f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f54:	4642      	mov	r2, r8
 8005f56:	464b      	mov	r3, r9
 8005f58:	1891      	adds	r1, r2, r2
 8005f5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f5c:	415b      	adcs	r3, r3
 8005f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f64:	4641      	mov	r1, r8
 8005f66:	1851      	adds	r1, r2, r1
 8005f68:	6339      	str	r1, [r7, #48]	; 0x30
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	414b      	adcs	r3, r1
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	00cb      	lsls	r3, r1, #3
 8005f80:	4651      	mov	r1, sl
 8005f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f86:	4651      	mov	r1, sl
 8005f88:	00ca      	lsls	r2, r1, #3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4642      	mov	r2, r8
 8005f92:	189b      	adds	r3, r3, r2
 8005f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f98:	464b      	mov	r3, r9
 8005f9a:	460a      	mov	r2, r1
 8005f9c:	eb42 0303 	adc.w	r3, r2, r3
 8005fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fb8:	460b      	mov	r3, r1
 8005fba:	18db      	adds	r3, r3, r3
 8005fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	eb42 0303 	adc.w	r3, r2, r3
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fce:	f7fa f967 	bl	80002a0 <__aeabi_uldivmod>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <UART_SetConfig+0x2d4>)
 8005fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	2164      	movs	r1, #100	; 0x64
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	3332      	adds	r3, #50	; 0x32
 8005fea:	4a08      	ldr	r2, [pc, #32]	; (800600c <UART_SetConfig+0x2d4>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f003 0207 	and.w	r2, r3, #7
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4422      	add	r2, r4
 8005ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006000:	e106      	b.n	8006210 <UART_SetConfig+0x4d8>
 8006002:	bf00      	nop
 8006004:	40011000 	.word	0x40011000
 8006008:	40011400 	.word	0x40011400
 800600c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006014:	2200      	movs	r2, #0
 8006016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800601a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800601e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006022:	4642      	mov	r2, r8
 8006024:	464b      	mov	r3, r9
 8006026:	1891      	adds	r1, r2, r2
 8006028:	6239      	str	r1, [r7, #32]
 800602a:	415b      	adcs	r3, r3
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
 800602e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006032:	4641      	mov	r1, r8
 8006034:	1854      	adds	r4, r2, r1
 8006036:	4649      	mov	r1, r9
 8006038:	eb43 0501 	adc.w	r5, r3, r1
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	00eb      	lsls	r3, r5, #3
 8006046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800604a:	00e2      	lsls	r2, r4, #3
 800604c:	4614      	mov	r4, r2
 800604e:	461d      	mov	r5, r3
 8006050:	4643      	mov	r3, r8
 8006052:	18e3      	adds	r3, r4, r3
 8006054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006058:	464b      	mov	r3, r9
 800605a:	eb45 0303 	adc.w	r3, r5, r3
 800605e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800606e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800607e:	4629      	mov	r1, r5
 8006080:	008b      	lsls	r3, r1, #2
 8006082:	4621      	mov	r1, r4
 8006084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006088:	4621      	mov	r1, r4
 800608a:	008a      	lsls	r2, r1, #2
 800608c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006090:	f7fa f906 	bl	80002a0 <__aeabi_uldivmod>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4b60      	ldr	r3, [pc, #384]	; (800621c <UART_SetConfig+0x4e4>)
 800609a:	fba3 2302 	umull	r2, r3, r3, r2
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	011c      	lsls	r4, r3, #4
 80060a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	1891      	adds	r1, r2, r2
 80060ba:	61b9      	str	r1, [r7, #24]
 80060bc:	415b      	adcs	r3, r3
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c4:	4641      	mov	r1, r8
 80060c6:	1851      	adds	r1, r2, r1
 80060c8:	6139      	str	r1, [r7, #16]
 80060ca:	4649      	mov	r1, r9
 80060cc:	414b      	adcs	r3, r1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060dc:	4659      	mov	r1, fp
 80060de:	00cb      	lsls	r3, r1, #3
 80060e0:	4651      	mov	r1, sl
 80060e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e6:	4651      	mov	r1, sl
 80060e8:	00ca      	lsls	r2, r1, #3
 80060ea:	4610      	mov	r0, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	4642      	mov	r2, r8
 80060f2:	189b      	adds	r3, r3, r2
 80060f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f8:	464b      	mov	r3, r9
 80060fa:	460a      	mov	r2, r1
 80060fc:	eb42 0303 	adc.w	r3, r2, r3
 8006100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	67bb      	str	r3, [r7, #120]	; 0x78
 800610e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800611c:	4649      	mov	r1, r9
 800611e:	008b      	lsls	r3, r1, #2
 8006120:	4641      	mov	r1, r8
 8006122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006126:	4641      	mov	r1, r8
 8006128:	008a      	lsls	r2, r1, #2
 800612a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800612e:	f7fa f8b7 	bl	80002a0 <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4611      	mov	r1, r2
 8006138:	4b38      	ldr	r3, [pc, #224]	; (800621c <UART_SetConfig+0x4e4>)
 800613a:	fba3 2301 	umull	r2, r3, r3, r1
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	2264      	movs	r2, #100	; 0x64
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	1acb      	subs	r3, r1, r3
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	3332      	adds	r3, #50	; 0x32
 800614c:	4a33      	ldr	r2, [pc, #204]	; (800621c <UART_SetConfig+0x4e4>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006158:	441c      	add	r4, r3
 800615a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800615e:	2200      	movs	r2, #0
 8006160:	673b      	str	r3, [r7, #112]	; 0x70
 8006162:	677a      	str	r2, [r7, #116]	; 0x74
 8006164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	1891      	adds	r1, r2, r2
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	415b      	adcs	r3, r3
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006178:	4641      	mov	r1, r8
 800617a:	1851      	adds	r1, r2, r1
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	4649      	mov	r1, r9
 8006180:	414b      	adcs	r3, r1
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006190:	4659      	mov	r1, fp
 8006192:	00cb      	lsls	r3, r1, #3
 8006194:	4651      	mov	r1, sl
 8006196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619a:	4651      	mov	r1, sl
 800619c:	00ca      	lsls	r2, r1, #3
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	4642      	mov	r2, r8
 80061a6:	189b      	adds	r3, r3, r2
 80061a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061aa:	464b      	mov	r3, r9
 80061ac:	460a      	mov	r2, r1
 80061ae:	eb42 0303 	adc.w	r3, r2, r3
 80061b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	663b      	str	r3, [r7, #96]	; 0x60
 80061be:	667a      	str	r2, [r7, #100]	; 0x64
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061cc:	4649      	mov	r1, r9
 80061ce:	008b      	lsls	r3, r1, #2
 80061d0:	4641      	mov	r1, r8
 80061d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d6:	4641      	mov	r1, r8
 80061d8:	008a      	lsls	r2, r1, #2
 80061da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061de:	f7fa f85f 	bl	80002a0 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <UART_SetConfig+0x4e4>)
 80061e8:	fba3 1302 	umull	r1, r3, r3, r2
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	2164      	movs	r1, #100	; 0x64
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	3332      	adds	r3, #50	; 0x32
 80061fa:	4a08      	ldr	r2, [pc, #32]	; (800621c <UART_SetConfig+0x4e4>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	f003 020f 	and.w	r2, r3, #15
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4422      	add	r2, r4
 800620e:	609a      	str	r2, [r3, #8]
}
 8006210:	bf00      	nop
 8006212:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006216:	46bd      	mov	sp, r7
 8006218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800621c:	51eb851f 	.word	0x51eb851f

08006220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006220:	b084      	sub	sp, #16
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	f107 001c 	add.w	r0, r7, #28
 800622e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	2b01      	cmp	r3, #1
 8006236:	d122      	bne.n	800627e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800624c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d105      	bne.n	8006272 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 faa2 	bl	80067bc <USB_CoreReset>
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e01a      	b.n	80062b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa96 	bl	80067bc <USB_CoreReset>
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
 80062a6:	e005      	b.n	80062b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d10b      	bne.n	80062d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f043 0206 	orr.w	r2, r3, #6
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062de:	b004      	add	sp, #16
 80062e0:	4770      	bx	lr

080062e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d115      	bne.n	8006352 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006332:	2001      	movs	r0, #1
 8006334:	f7fb fa7a 	bl	800182c <HAL_Delay>
      ms++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa2e 	bl	80067a0 <USB_GetMode>
 8006344:	4603      	mov	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d01e      	beq.n	8006388 <USB_SetCurrentMode+0x84>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b31      	cmp	r3, #49	; 0x31
 800634e:	d9f0      	bls.n	8006332 <USB_SetCurrentMode+0x2e>
 8006350:	e01a      	b.n	8006388 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d115      	bne.n	8006384 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006364:	2001      	movs	r0, #1
 8006366:	f7fb fa61 	bl	800182c <HAL_Delay>
      ms++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3301      	adds	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fa15 	bl	80067a0 <USB_GetMode>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <USB_SetCurrentMode+0x84>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b31      	cmp	r3, #49	; 0x31
 8006380:	d9f0      	bls.n	8006364 <USB_SetCurrentMode+0x60>
 8006382:	e001      	b.n	8006388 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e005      	b.n	8006394 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b32      	cmp	r3, #50	; 0x32
 800638c:	d101      	bne.n	8006392 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800639c:	b084      	sub	sp, #16
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	e009      	b.n	80063d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3340      	adds	r3, #64	; 0x40
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	3301      	adds	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b0e      	cmp	r3, #14
 80063d4:	d9f2      	bls.n	80063bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11c      	bne.n	8006416 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ea:	f043 0302 	orr.w	r3, r3, #2
 80063ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
 8006414:	e00b      	b.n	800642e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006434:	461a      	mov	r2, r3
 8006436:	2300      	movs	r3, #0
 8006438:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006440:	4619      	mov	r1, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006448:	461a      	mov	r2, r3
 800644a:	680b      	ldr	r3, [r1, #0]
 800644c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b01      	cmp	r3, #1
 8006452:	d10c      	bne.n	800646e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800645a:	2100      	movs	r1, #0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f965 	bl	800672c <USB_SetDevSpeed>
 8006462:	e008      	b.n	8006476 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006464:	2101      	movs	r1, #1
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f960 	bl	800672c <USB_SetDevSpeed>
 800646c:	e003      	b.n	8006476 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800646e:	2103      	movs	r1, #3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f95b 	bl	800672c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006476:	2110      	movs	r1, #16
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f8f3 	bl	8006664 <USB_FlushTxFifo>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f91f 	bl	80066cc <USB_FlushRxFifo>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649e:	461a      	mov	r2, r3
 80064a0:	2300      	movs	r3, #0
 80064a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064aa:	461a      	mov	r2, r3
 80064ac:	2300      	movs	r3, #0
 80064ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	461a      	mov	r2, r3
 80064b8:	2300      	movs	r3, #0
 80064ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	e043      	b.n	800654a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d8:	d118      	bne.n	800650c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	461a      	mov	r2, r3
 80064ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e013      	b.n	800651e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	461a      	mov	r2, r3
 8006504:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e008      	b.n	800651e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006518:	461a      	mov	r2, r3
 800651a:	2300      	movs	r3, #0
 800651c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652a:	461a      	mov	r2, r3
 800652c:	2300      	movs	r3, #0
 800652e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006542:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	3301      	adds	r3, #1
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	429a      	cmp	r2, r3
 8006550:	d3b7      	bcc.n	80064c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	e043      	b.n	80065e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800656e:	d118      	bne.n	80065a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	461a      	mov	r2, r3
 8006584:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e013      	b.n	80065b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	461a      	mov	r2, r3
 800659a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	e008      	b.n	80065b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	461a      	mov	r2, r3
 80065b0:	2300      	movs	r3, #0
 80065b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	461a      	mov	r2, r3
 80065c2:	2300      	movs	r3, #0
 80065c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	461a      	mov	r2, r3
 80065d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	3301      	adds	r3, #1
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d3b7      	bcc.n	8006558 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006608:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f043 0210 	orr.w	r2, r3, #16
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <USB_DevInit+0x2c4>)
 8006622:	4313      	orrs	r3, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f043 0208 	orr.w	r2, r3, #8
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006648:	f043 0304 	orr.w	r3, r3, #4
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800665c:	b004      	add	sp, #16
 800665e:	4770      	bx	lr
 8006660:	803c3800 	.word	0x803c3800

08006664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3301      	adds	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4a13      	ldr	r2, [pc, #76]	; (80066c8 <USB_FlushTxFifo+0x64>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d901      	bls.n	8006684 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e01b      	b.n	80066bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	daf2      	bge.n	8006672 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	019b      	lsls	r3, r3, #6
 8006694:	f043 0220 	orr.w	r2, r3, #32
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4a08      	ldr	r2, [pc, #32]	; (80066c8 <USB_FlushTxFifo+0x64>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d901      	bls.n	80066ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e006      	b.n	80066bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d0f0      	beq.n	800669c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	00030d40 	.word	0x00030d40

080066cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4a11      	ldr	r2, [pc, #68]	; (8006728 <USB_FlushRxFifo+0x5c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e018      	b.n	800671c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	daf2      	bge.n	80066d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2210      	movs	r2, #16
 80066fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4a08      	ldr	r2, [pc, #32]	; (8006728 <USB_FlushRxFifo+0x5c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d901      	bls.n	800670e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e006      	b.n	800671c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b10      	cmp	r3, #16
 8006718:	d0f0      	beq.n	80066fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	00030d40 	.word	0x00030d40

0800672c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800674c:	4313      	orrs	r3, r2
 800674e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006778:	f023 0303 	bic.w	r3, r3, #3
 800677c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678c:	f043 0302 	orr.w	r3, r3, #2
 8006790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0301 	and.w	r3, r3, #1
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <USB_CoreReset+0x64>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d901      	bls.n	80067da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e01b      	b.n	8006812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	daf2      	bge.n	80067c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f043 0201 	orr.w	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a09      	ldr	r2, [pc, #36]	; (8006820 <USB_CoreReset+0x64>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d901      	bls.n	8006804 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e006      	b.n	8006812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d0f0      	beq.n	80067f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	00030d40 	.word	0x00030d40

08006824 <std>:
 8006824:	2300      	movs	r3, #0
 8006826:	b510      	push	{r4, lr}
 8006828:	4604      	mov	r4, r0
 800682a:	e9c0 3300 	strd	r3, r3, [r0]
 800682e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006832:	6083      	str	r3, [r0, #8]
 8006834:	8181      	strh	r1, [r0, #12]
 8006836:	6643      	str	r3, [r0, #100]	; 0x64
 8006838:	81c2      	strh	r2, [r0, #14]
 800683a:	6183      	str	r3, [r0, #24]
 800683c:	4619      	mov	r1, r3
 800683e:	2208      	movs	r2, #8
 8006840:	305c      	adds	r0, #92	; 0x5c
 8006842:	f000 fa4b 	bl	8006cdc <memset>
 8006846:	4b0d      	ldr	r3, [pc, #52]	; (800687c <std+0x58>)
 8006848:	6263      	str	r3, [r4, #36]	; 0x24
 800684a:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <std+0x5c>)
 800684c:	62a3      	str	r3, [r4, #40]	; 0x28
 800684e:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <std+0x60>)
 8006850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006852:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <std+0x64>)
 8006854:	6323      	str	r3, [r4, #48]	; 0x30
 8006856:	4b0d      	ldr	r3, [pc, #52]	; (800688c <std+0x68>)
 8006858:	6224      	str	r4, [r4, #32]
 800685a:	429c      	cmp	r4, r3
 800685c:	d006      	beq.n	800686c <std+0x48>
 800685e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006862:	4294      	cmp	r4, r2
 8006864:	d002      	beq.n	800686c <std+0x48>
 8006866:	33d0      	adds	r3, #208	; 0xd0
 8006868:	429c      	cmp	r4, r3
 800686a:	d105      	bne.n	8006878 <std+0x54>
 800686c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006874:	f000 baaa 	b.w	8006dcc <__retarget_lock_init_recursive>
 8006878:	bd10      	pop	{r4, pc}
 800687a:	bf00      	nop
 800687c:	08006b2d 	.word	0x08006b2d
 8006880:	08006b4f 	.word	0x08006b4f
 8006884:	08006b87 	.word	0x08006b87
 8006888:	08006bab 	.word	0x08006bab
 800688c:	20000918 	.word	0x20000918

08006890 <stdio_exit_handler>:
 8006890:	4a02      	ldr	r2, [pc, #8]	; (800689c <stdio_exit_handler+0xc>)
 8006892:	4903      	ldr	r1, [pc, #12]	; (80068a0 <stdio_exit_handler+0x10>)
 8006894:	4803      	ldr	r0, [pc, #12]	; (80068a4 <stdio_exit_handler+0x14>)
 8006896:	f000 b869 	b.w	800696c <_fwalk_sglue>
 800689a:	bf00      	nop
 800689c:	20000014 	.word	0x20000014
 80068a0:	08007929 	.word	0x08007929
 80068a4:	20000020 	.word	0x20000020

080068a8 <cleanup_stdio>:
 80068a8:	6841      	ldr	r1, [r0, #4]
 80068aa:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <cleanup_stdio+0x34>)
 80068ac:	4299      	cmp	r1, r3
 80068ae:	b510      	push	{r4, lr}
 80068b0:	4604      	mov	r4, r0
 80068b2:	d001      	beq.n	80068b8 <cleanup_stdio+0x10>
 80068b4:	f001 f838 	bl	8007928 <_fflush_r>
 80068b8:	68a1      	ldr	r1, [r4, #8]
 80068ba:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <cleanup_stdio+0x38>)
 80068bc:	4299      	cmp	r1, r3
 80068be:	d002      	beq.n	80068c6 <cleanup_stdio+0x1e>
 80068c0:	4620      	mov	r0, r4
 80068c2:	f001 f831 	bl	8007928 <_fflush_r>
 80068c6:	68e1      	ldr	r1, [r4, #12]
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <cleanup_stdio+0x3c>)
 80068ca:	4299      	cmp	r1, r3
 80068cc:	d004      	beq.n	80068d8 <cleanup_stdio+0x30>
 80068ce:	4620      	mov	r0, r4
 80068d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d4:	f001 b828 	b.w	8007928 <_fflush_r>
 80068d8:	bd10      	pop	{r4, pc}
 80068da:	bf00      	nop
 80068dc:	20000918 	.word	0x20000918
 80068e0:	20000980 	.word	0x20000980
 80068e4:	200009e8 	.word	0x200009e8

080068e8 <global_stdio_init.part.0>:
 80068e8:	b510      	push	{r4, lr}
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <global_stdio_init.part.0+0x30>)
 80068ec:	4c0b      	ldr	r4, [pc, #44]	; (800691c <global_stdio_init.part.0+0x34>)
 80068ee:	4a0c      	ldr	r2, [pc, #48]	; (8006920 <global_stdio_init.part.0+0x38>)
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	4620      	mov	r0, r4
 80068f4:	2200      	movs	r2, #0
 80068f6:	2104      	movs	r1, #4
 80068f8:	f7ff ff94 	bl	8006824 <std>
 80068fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006900:	2201      	movs	r2, #1
 8006902:	2109      	movs	r1, #9
 8006904:	f7ff ff8e 	bl	8006824 <std>
 8006908:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800690c:	2202      	movs	r2, #2
 800690e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006912:	2112      	movs	r1, #18
 8006914:	f7ff bf86 	b.w	8006824 <std>
 8006918:	20000a50 	.word	0x20000a50
 800691c:	20000918 	.word	0x20000918
 8006920:	08006891 	.word	0x08006891

08006924 <__sfp_lock_acquire>:
 8006924:	4801      	ldr	r0, [pc, #4]	; (800692c <__sfp_lock_acquire+0x8>)
 8006926:	f000 ba52 	b.w	8006dce <__retarget_lock_acquire_recursive>
 800692a:	bf00      	nop
 800692c:	20000a59 	.word	0x20000a59

08006930 <__sfp_lock_release>:
 8006930:	4801      	ldr	r0, [pc, #4]	; (8006938 <__sfp_lock_release+0x8>)
 8006932:	f000 ba4d 	b.w	8006dd0 <__retarget_lock_release_recursive>
 8006936:	bf00      	nop
 8006938:	20000a59 	.word	0x20000a59

0800693c <__sinit>:
 800693c:	b510      	push	{r4, lr}
 800693e:	4604      	mov	r4, r0
 8006940:	f7ff fff0 	bl	8006924 <__sfp_lock_acquire>
 8006944:	6a23      	ldr	r3, [r4, #32]
 8006946:	b11b      	cbz	r3, 8006950 <__sinit+0x14>
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	f7ff bff0 	b.w	8006930 <__sfp_lock_release>
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <__sinit+0x28>)
 8006952:	6223      	str	r3, [r4, #32]
 8006954:	4b04      	ldr	r3, [pc, #16]	; (8006968 <__sinit+0x2c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f5      	bne.n	8006948 <__sinit+0xc>
 800695c:	f7ff ffc4 	bl	80068e8 <global_stdio_init.part.0>
 8006960:	e7f2      	b.n	8006948 <__sinit+0xc>
 8006962:	bf00      	nop
 8006964:	080068a9 	.word	0x080068a9
 8006968:	20000a50 	.word	0x20000a50

0800696c <_fwalk_sglue>:
 800696c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006970:	4607      	mov	r7, r0
 8006972:	4688      	mov	r8, r1
 8006974:	4614      	mov	r4, r2
 8006976:	2600      	movs	r6, #0
 8006978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800697c:	f1b9 0901 	subs.w	r9, r9, #1
 8006980:	d505      	bpl.n	800698e <_fwalk_sglue+0x22>
 8006982:	6824      	ldr	r4, [r4, #0]
 8006984:	2c00      	cmp	r4, #0
 8006986:	d1f7      	bne.n	8006978 <_fwalk_sglue+0xc>
 8006988:	4630      	mov	r0, r6
 800698a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698e:	89ab      	ldrh	r3, [r5, #12]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d907      	bls.n	80069a4 <_fwalk_sglue+0x38>
 8006994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006998:	3301      	adds	r3, #1
 800699a:	d003      	beq.n	80069a4 <_fwalk_sglue+0x38>
 800699c:	4629      	mov	r1, r5
 800699e:	4638      	mov	r0, r7
 80069a0:	47c0      	blx	r8
 80069a2:	4306      	orrs	r6, r0
 80069a4:	3568      	adds	r5, #104	; 0x68
 80069a6:	e7e9      	b.n	800697c <_fwalk_sglue+0x10>

080069a8 <iprintf>:
 80069a8:	b40f      	push	{r0, r1, r2, r3}
 80069aa:	b507      	push	{r0, r1, r2, lr}
 80069ac:	4906      	ldr	r1, [pc, #24]	; (80069c8 <iprintf+0x20>)
 80069ae:	ab04      	add	r3, sp, #16
 80069b0:	6808      	ldr	r0, [r1, #0]
 80069b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b6:	6881      	ldr	r1, [r0, #8]
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	f000 fc85 	bl	80072c8 <_vfiprintf_r>
 80069be:	b003      	add	sp, #12
 80069c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c4:	b004      	add	sp, #16
 80069c6:	4770      	bx	lr
 80069c8:	2000006c 	.word	0x2000006c

080069cc <_puts_r>:
 80069cc:	6a03      	ldr	r3, [r0, #32]
 80069ce:	b570      	push	{r4, r5, r6, lr}
 80069d0:	6884      	ldr	r4, [r0, #8]
 80069d2:	4605      	mov	r5, r0
 80069d4:	460e      	mov	r6, r1
 80069d6:	b90b      	cbnz	r3, 80069dc <_puts_r+0x10>
 80069d8:	f7ff ffb0 	bl	800693c <__sinit>
 80069dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069de:	07db      	lsls	r3, r3, #31
 80069e0:	d405      	bmi.n	80069ee <_puts_r+0x22>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	0598      	lsls	r0, r3, #22
 80069e6:	d402      	bmi.n	80069ee <_puts_r+0x22>
 80069e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ea:	f000 f9f0 	bl	8006dce <__retarget_lock_acquire_recursive>
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	0719      	lsls	r1, r3, #28
 80069f2:	d513      	bpl.n	8006a1c <_puts_r+0x50>
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	b18b      	cbz	r3, 8006a1c <_puts_r+0x50>
 80069f8:	3e01      	subs	r6, #1
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a00:	3b01      	subs	r3, #1
 8006a02:	60a3      	str	r3, [r4, #8]
 8006a04:	b9e9      	cbnz	r1, 8006a42 <_puts_r+0x76>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da2e      	bge.n	8006a68 <_puts_r+0x9c>
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	210a      	movs	r1, #10
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 f8cf 	bl	8006bb2 <__swbuf_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d007      	beq.n	8006a28 <_puts_r+0x5c>
 8006a18:	250a      	movs	r5, #10
 8006a1a:	e007      	b.n	8006a2c <_puts_r+0x60>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 f904 	bl	8006c2c <__swsetup_r>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d0e7      	beq.n	80069f8 <_puts_r+0x2c>
 8006a28:	f04f 35ff 	mov.w	r5, #4294967295
 8006a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a2e:	07da      	lsls	r2, r3, #31
 8006a30:	d405      	bmi.n	8006a3e <_puts_r+0x72>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	059b      	lsls	r3, r3, #22
 8006a36:	d402      	bmi.n	8006a3e <_puts_r+0x72>
 8006a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3a:	f000 f9c9 	bl	8006dd0 <__retarget_lock_release_recursive>
 8006a3e:	4628      	mov	r0, r5
 8006a40:	bd70      	pop	{r4, r5, r6, pc}
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	da04      	bge.n	8006a50 <_puts_r+0x84>
 8006a46:	69a2      	ldr	r2, [r4, #24]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	dc06      	bgt.n	8006a5a <_puts_r+0x8e>
 8006a4c:	290a      	cmp	r1, #10
 8006a4e:	d004      	beq.n	8006a5a <_puts_r+0x8e>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	6022      	str	r2, [r4, #0]
 8006a56:	7019      	strb	r1, [r3, #0]
 8006a58:	e7cf      	b.n	80069fa <_puts_r+0x2e>
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 f8a8 	bl	8006bb2 <__swbuf_r>
 8006a62:	3001      	adds	r0, #1
 8006a64:	d1c9      	bne.n	80069fa <_puts_r+0x2e>
 8006a66:	e7df      	b.n	8006a28 <_puts_r+0x5c>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	250a      	movs	r5, #10
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	6022      	str	r2, [r4, #0]
 8006a70:	701d      	strb	r5, [r3, #0]
 8006a72:	e7db      	b.n	8006a2c <_puts_r+0x60>

08006a74 <puts>:
 8006a74:	4b02      	ldr	r3, [pc, #8]	; (8006a80 <puts+0xc>)
 8006a76:	4601      	mov	r1, r0
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	f7ff bfa7 	b.w	80069cc <_puts_r>
 8006a7e:	bf00      	nop
 8006a80:	2000006c 	.word	0x2000006c

08006a84 <sniprintf>:
 8006a84:	b40c      	push	{r2, r3}
 8006a86:	b530      	push	{r4, r5, lr}
 8006a88:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <sniprintf+0x64>)
 8006a8a:	1e0c      	subs	r4, r1, #0
 8006a8c:	681d      	ldr	r5, [r3, #0]
 8006a8e:	b09d      	sub	sp, #116	; 0x74
 8006a90:	da08      	bge.n	8006aa4 <sniprintf+0x20>
 8006a92:	238b      	movs	r3, #139	; 0x8b
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9a:	b01d      	add	sp, #116	; 0x74
 8006a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aa0:	b002      	add	sp, #8
 8006aa2:	4770      	bx	lr
 8006aa4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006aa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006aac:	bf14      	ite	ne
 8006aae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ab2:	4623      	moveq	r3, r4
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006abc:	9002      	str	r0, [sp, #8]
 8006abe:	9006      	str	r0, [sp, #24]
 8006ac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ac4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ac6:	ab21      	add	r3, sp, #132	; 0x84
 8006ac8:	a902      	add	r1, sp, #8
 8006aca:	4628      	mov	r0, r5
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	f000 fad3 	bl	8007078 <_svfiprintf_r>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	bfbc      	itt	lt
 8006ad6:	238b      	movlt	r3, #139	; 0x8b
 8006ad8:	602b      	strlt	r3, [r5, #0]
 8006ada:	2c00      	cmp	r4, #0
 8006adc:	d0dd      	beq.n	8006a9a <sniprintf+0x16>
 8006ade:	9b02      	ldr	r3, [sp, #8]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	e7d9      	b.n	8006a9a <sniprintf+0x16>
 8006ae6:	bf00      	nop
 8006ae8:	2000006c 	.word	0x2000006c

08006aec <siprintf>:
 8006aec:	b40e      	push	{r1, r2, r3}
 8006aee:	b500      	push	{lr}
 8006af0:	b09c      	sub	sp, #112	; 0x70
 8006af2:	ab1d      	add	r3, sp, #116	; 0x74
 8006af4:	9002      	str	r0, [sp, #8]
 8006af6:	9006      	str	r0, [sp, #24]
 8006af8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006afc:	4809      	ldr	r0, [pc, #36]	; (8006b24 <siprintf+0x38>)
 8006afe:	9107      	str	r1, [sp, #28]
 8006b00:	9104      	str	r1, [sp, #16]
 8006b02:	4909      	ldr	r1, [pc, #36]	; (8006b28 <siprintf+0x3c>)
 8006b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b08:	9105      	str	r1, [sp, #20]
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	a902      	add	r1, sp, #8
 8006b10:	f000 fab2 	bl	8007078 <_svfiprintf_r>
 8006b14:	9b02      	ldr	r3, [sp, #8]
 8006b16:	2200      	movs	r2, #0
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	b01c      	add	sp, #112	; 0x70
 8006b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b20:	b003      	add	sp, #12
 8006b22:	4770      	bx	lr
 8006b24:	2000006c 	.word	0x2000006c
 8006b28:	ffff0208 	.word	0xffff0208

08006b2c <__sread>:
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	460c      	mov	r4, r1
 8006b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b34:	f000 f8fc 	bl	8006d30 <_read_r>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	bfab      	itete	ge
 8006b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b40:	181b      	addge	r3, r3, r0
 8006b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b46:	bfac      	ite	ge
 8006b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b4a:	81a3      	strhlt	r3, [r4, #12]
 8006b4c:	bd10      	pop	{r4, pc}

08006b4e <__swrite>:
 8006b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	461f      	mov	r7, r3
 8006b54:	898b      	ldrh	r3, [r1, #12]
 8006b56:	05db      	lsls	r3, r3, #23
 8006b58:	4605      	mov	r5, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	4616      	mov	r6, r2
 8006b5e:	d505      	bpl.n	8006b6c <__swrite+0x1e>
 8006b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b64:	2302      	movs	r3, #2
 8006b66:	2200      	movs	r2, #0
 8006b68:	f000 f8d0 	bl	8006d0c <_lseek_r>
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	4632      	mov	r2, r6
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b82:	f000 b8e7 	b.w	8006d54 <_write_r>

08006b86 <__sseek>:
 8006b86:	b510      	push	{r4, lr}
 8006b88:	460c      	mov	r4, r1
 8006b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8e:	f000 f8bd 	bl	8006d0c <_lseek_r>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	bf15      	itete	ne
 8006b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ba2:	81a3      	strheq	r3, [r4, #12]
 8006ba4:	bf18      	it	ne
 8006ba6:	81a3      	strhne	r3, [r4, #12]
 8006ba8:	bd10      	pop	{r4, pc}

08006baa <__sclose>:
 8006baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bae:	f000 b89d 	b.w	8006cec <_close_r>

08006bb2 <__swbuf_r>:
 8006bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb4:	460e      	mov	r6, r1
 8006bb6:	4614      	mov	r4, r2
 8006bb8:	4605      	mov	r5, r0
 8006bba:	b118      	cbz	r0, 8006bc4 <__swbuf_r+0x12>
 8006bbc:	6a03      	ldr	r3, [r0, #32]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <__swbuf_r+0x12>
 8006bc0:	f7ff febc 	bl	800693c <__sinit>
 8006bc4:	69a3      	ldr	r3, [r4, #24]
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	071a      	lsls	r2, r3, #28
 8006bcc:	d525      	bpl.n	8006c1a <__swbuf_r+0x68>
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	b31b      	cbz	r3, 8006c1a <__swbuf_r+0x68>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	6922      	ldr	r2, [r4, #16]
 8006bd6:	1a98      	subs	r0, r3, r2
 8006bd8:	6963      	ldr	r3, [r4, #20]
 8006bda:	b2f6      	uxtb	r6, r6
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	4637      	mov	r7, r6
 8006be0:	dc04      	bgt.n	8006bec <__swbuf_r+0x3a>
 8006be2:	4621      	mov	r1, r4
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 fe9f 	bl	8007928 <_fflush_r>
 8006bea:	b9e0      	cbnz	r0, 8006c26 <__swbuf_r+0x74>
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	60a3      	str	r3, [r4, #8]
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	701e      	strb	r6, [r3, #0]
 8006bfa:	6962      	ldr	r2, [r4, #20]
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d004      	beq.n	8006c0c <__swbuf_r+0x5a>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	07db      	lsls	r3, r3, #31
 8006c06:	d506      	bpl.n	8006c16 <__swbuf_r+0x64>
 8006c08:	2e0a      	cmp	r6, #10
 8006c0a:	d104      	bne.n	8006c16 <__swbuf_r+0x64>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fe8a 	bl	8007928 <_fflush_r>
 8006c14:	b938      	cbnz	r0, 8006c26 <__swbuf_r+0x74>
 8006c16:	4638      	mov	r0, r7
 8006c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 f805 	bl	8006c2c <__swsetup_r>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d0d5      	beq.n	8006bd2 <__swbuf_r+0x20>
 8006c26:	f04f 37ff 	mov.w	r7, #4294967295
 8006c2a:	e7f4      	b.n	8006c16 <__swbuf_r+0x64>

08006c2c <__swsetup_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <__swsetup_r+0xac>)
 8006c30:	4605      	mov	r5, r0
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	460c      	mov	r4, r1
 8006c36:	b118      	cbz	r0, 8006c40 <__swsetup_r+0x14>
 8006c38:	6a03      	ldr	r3, [r0, #32]
 8006c3a:	b90b      	cbnz	r3, 8006c40 <__swsetup_r+0x14>
 8006c3c:	f7ff fe7e 	bl	800693c <__sinit>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c46:	0718      	lsls	r0, r3, #28
 8006c48:	d422      	bmi.n	8006c90 <__swsetup_r+0x64>
 8006c4a:	06d9      	lsls	r1, r3, #27
 8006c4c:	d407      	bmi.n	8006c5e <__swsetup_r+0x32>
 8006c4e:	2309      	movs	r3, #9
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	e034      	b.n	8006cc8 <__swsetup_r+0x9c>
 8006c5e:	0758      	lsls	r0, r3, #29
 8006c60:	d512      	bpl.n	8006c88 <__swsetup_r+0x5c>
 8006c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c64:	b141      	cbz	r1, 8006c78 <__swsetup_r+0x4c>
 8006c66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	d002      	beq.n	8006c74 <__swsetup_r+0x48>
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 f8b0 	bl	8006dd4 <_free_r>
 8006c74:	2300      	movs	r3, #0
 8006c76:	6363      	str	r3, [r4, #52]	; 0x34
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c7e:	81a3      	strh	r3, [r4, #12]
 8006c80:	2300      	movs	r3, #0
 8006c82:	6063      	str	r3, [r4, #4]
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f043 0308 	orr.w	r3, r3, #8
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	b94b      	cbnz	r3, 8006ca8 <__swsetup_r+0x7c>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c9e:	d003      	beq.n	8006ca8 <__swsetup_r+0x7c>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 fe8e 	bl	80079c4 <__smakebuf_r>
 8006ca8:	89a0      	ldrh	r0, [r4, #12]
 8006caa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cae:	f010 0301 	ands.w	r3, r0, #1
 8006cb2:	d00a      	beq.n	8006cca <__swsetup_r+0x9e>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60a3      	str	r3, [r4, #8]
 8006cb8:	6963      	ldr	r3, [r4, #20]
 8006cba:	425b      	negs	r3, r3
 8006cbc:	61a3      	str	r3, [r4, #24]
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	b943      	cbnz	r3, 8006cd4 <__swsetup_r+0xa8>
 8006cc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cc6:	d1c4      	bne.n	8006c52 <__swsetup_r+0x26>
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	0781      	lsls	r1, r0, #30
 8006ccc:	bf58      	it	pl
 8006cce:	6963      	ldrpl	r3, [r4, #20]
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	e7f4      	b.n	8006cbe <__swsetup_r+0x92>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e7f7      	b.n	8006cc8 <__swsetup_r+0x9c>
 8006cd8:	2000006c 	.word	0x2000006c

08006cdc <memset>:
 8006cdc:	4402      	add	r2, r0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d100      	bne.n	8006ce6 <memset+0xa>
 8006ce4:	4770      	bx	lr
 8006ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cea:	e7f9      	b.n	8006ce0 <memset+0x4>

08006cec <_close_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d06      	ldr	r5, [pc, #24]	; (8006d08 <_close_r+0x1c>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	f7fa fc7f 	bl	80015fa <_close>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_close_r+0x1a>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_close_r+0x1a>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	20000a54 	.word	0x20000a54

08006d0c <_lseek_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d07      	ldr	r5, [pc, #28]	; (8006d2c <_lseek_r+0x20>)
 8006d10:	4604      	mov	r4, r0
 8006d12:	4608      	mov	r0, r1
 8006d14:	4611      	mov	r1, r2
 8006d16:	2200      	movs	r2, #0
 8006d18:	602a      	str	r2, [r5, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f7fa fc94 	bl	8001648 <_lseek>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_lseek_r+0x1e>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_lseek_r+0x1e>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	20000a54 	.word	0x20000a54

08006d30 <_read_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	; (8006d50 <_read_r+0x20>)
 8006d34:	4604      	mov	r4, r0
 8006d36:	4608      	mov	r0, r1
 8006d38:	4611      	mov	r1, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	602a      	str	r2, [r5, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f7fa fc3e 	bl	80015c0 <_read>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_read_r+0x1e>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_read_r+0x1e>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	20000a54 	.word	0x20000a54

08006d54 <_write_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	; (8006d74 <_write_r+0x20>)
 8006d58:	4604      	mov	r4, r0
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	602a      	str	r2, [r5, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7f9 fd86 	bl	8000874 <_write>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_write_r+0x1e>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_write_r+0x1e>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20000a54 	.word	0x20000a54

08006d78 <__errno>:
 8006d78:	4b01      	ldr	r3, [pc, #4]	; (8006d80 <__errno+0x8>)
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	2000006c 	.word	0x2000006c

08006d84 <__libc_init_array>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4d0d      	ldr	r5, [pc, #52]	; (8006dbc <__libc_init_array+0x38>)
 8006d88:	4c0d      	ldr	r4, [pc, #52]	; (8006dc0 <__libc_init_array+0x3c>)
 8006d8a:	1b64      	subs	r4, r4, r5
 8006d8c:	10a4      	asrs	r4, r4, #2
 8006d8e:	2600      	movs	r6, #0
 8006d90:	42a6      	cmp	r6, r4
 8006d92:	d109      	bne.n	8006da8 <__libc_init_array+0x24>
 8006d94:	4d0b      	ldr	r5, [pc, #44]	; (8006dc4 <__libc_init_array+0x40>)
 8006d96:	4c0c      	ldr	r4, [pc, #48]	; (8006dc8 <__libc_init_array+0x44>)
 8006d98:	f000 fee2 	bl	8007b60 <_init>
 8006d9c:	1b64      	subs	r4, r4, r5
 8006d9e:	10a4      	asrs	r4, r4, #2
 8006da0:	2600      	movs	r6, #0
 8006da2:	42a6      	cmp	r6, r4
 8006da4:	d105      	bne.n	8006db2 <__libc_init_array+0x2e>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dac:	4798      	blx	r3
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7ee      	b.n	8006d90 <__libc_init_array+0xc>
 8006db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db6:	4798      	blx	r3
 8006db8:	3601      	adds	r6, #1
 8006dba:	e7f2      	b.n	8006da2 <__libc_init_array+0x1e>
 8006dbc:	08007c80 	.word	0x08007c80
 8006dc0:	08007c80 	.word	0x08007c80
 8006dc4:	08007c80 	.word	0x08007c80
 8006dc8:	08007c84 	.word	0x08007c84

08006dcc <__retarget_lock_init_recursive>:
 8006dcc:	4770      	bx	lr

08006dce <__retarget_lock_acquire_recursive>:
 8006dce:	4770      	bx	lr

08006dd0 <__retarget_lock_release_recursive>:
 8006dd0:	4770      	bx	lr
	...

08006dd4 <_free_r>:
 8006dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d044      	beq.n	8006e64 <_free_r+0x90>
 8006dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dde:	9001      	str	r0, [sp, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f1a1 0404 	sub.w	r4, r1, #4
 8006de6:	bfb8      	it	lt
 8006de8:	18e4      	addlt	r4, r4, r3
 8006dea:	f000 f8df 	bl	8006fac <__malloc_lock>
 8006dee:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <_free_r+0x94>)
 8006df0:	9801      	ldr	r0, [sp, #4]
 8006df2:	6813      	ldr	r3, [r2, #0]
 8006df4:	b933      	cbnz	r3, 8006e04 <_free_r+0x30>
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	6014      	str	r4, [r2, #0]
 8006dfa:	b003      	add	sp, #12
 8006dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e00:	f000 b8da 	b.w	8006fb8 <__malloc_unlock>
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	d908      	bls.n	8006e1a <_free_r+0x46>
 8006e08:	6825      	ldr	r5, [r4, #0]
 8006e0a:	1961      	adds	r1, r4, r5
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	bf01      	itttt	eq
 8006e10:	6819      	ldreq	r1, [r3, #0]
 8006e12:	685b      	ldreq	r3, [r3, #4]
 8006e14:	1949      	addeq	r1, r1, r5
 8006e16:	6021      	streq	r1, [r4, #0]
 8006e18:	e7ed      	b.n	8006df6 <_free_r+0x22>
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	b10b      	cbz	r3, 8006e24 <_free_r+0x50>
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	d9fa      	bls.n	8006e1a <_free_r+0x46>
 8006e24:	6811      	ldr	r1, [r2, #0]
 8006e26:	1855      	adds	r5, r2, r1
 8006e28:	42a5      	cmp	r5, r4
 8006e2a:	d10b      	bne.n	8006e44 <_free_r+0x70>
 8006e2c:	6824      	ldr	r4, [r4, #0]
 8006e2e:	4421      	add	r1, r4
 8006e30:	1854      	adds	r4, r2, r1
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	6011      	str	r1, [r2, #0]
 8006e36:	d1e0      	bne.n	8006dfa <_free_r+0x26>
 8006e38:	681c      	ldr	r4, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	6053      	str	r3, [r2, #4]
 8006e3e:	440c      	add	r4, r1
 8006e40:	6014      	str	r4, [r2, #0]
 8006e42:	e7da      	b.n	8006dfa <_free_r+0x26>
 8006e44:	d902      	bls.n	8006e4c <_free_r+0x78>
 8006e46:	230c      	movs	r3, #12
 8006e48:	6003      	str	r3, [r0, #0]
 8006e4a:	e7d6      	b.n	8006dfa <_free_r+0x26>
 8006e4c:	6825      	ldr	r5, [r4, #0]
 8006e4e:	1961      	adds	r1, r4, r5
 8006e50:	428b      	cmp	r3, r1
 8006e52:	bf04      	itt	eq
 8006e54:	6819      	ldreq	r1, [r3, #0]
 8006e56:	685b      	ldreq	r3, [r3, #4]
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	bf04      	itt	eq
 8006e5c:	1949      	addeq	r1, r1, r5
 8006e5e:	6021      	streq	r1, [r4, #0]
 8006e60:	6054      	str	r4, [r2, #4]
 8006e62:	e7ca      	b.n	8006dfa <_free_r+0x26>
 8006e64:	b003      	add	sp, #12
 8006e66:	bd30      	pop	{r4, r5, pc}
 8006e68:	20000a5c 	.word	0x20000a5c

08006e6c <sbrk_aligned>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4e0e      	ldr	r6, [pc, #56]	; (8006ea8 <sbrk_aligned+0x3c>)
 8006e70:	460c      	mov	r4, r1
 8006e72:	6831      	ldr	r1, [r6, #0]
 8006e74:	4605      	mov	r5, r0
 8006e76:	b911      	cbnz	r1, 8006e7e <sbrk_aligned+0x12>
 8006e78:	f000 fe1c 	bl	8007ab4 <_sbrk_r>
 8006e7c:	6030      	str	r0, [r6, #0]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	4628      	mov	r0, r5
 8006e82:	f000 fe17 	bl	8007ab4 <_sbrk_r>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	d00a      	beq.n	8006ea0 <sbrk_aligned+0x34>
 8006e8a:	1cc4      	adds	r4, r0, #3
 8006e8c:	f024 0403 	bic.w	r4, r4, #3
 8006e90:	42a0      	cmp	r0, r4
 8006e92:	d007      	beq.n	8006ea4 <sbrk_aligned+0x38>
 8006e94:	1a21      	subs	r1, r4, r0
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 fe0c 	bl	8007ab4 <_sbrk_r>
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d101      	bne.n	8006ea4 <sbrk_aligned+0x38>
 8006ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	20000a60 	.word	0x20000a60

08006eac <_malloc_r>:
 8006eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	1ccd      	adds	r5, r1, #3
 8006eb2:	f025 0503 	bic.w	r5, r5, #3
 8006eb6:	3508      	adds	r5, #8
 8006eb8:	2d0c      	cmp	r5, #12
 8006eba:	bf38      	it	cc
 8006ebc:	250c      	movcc	r5, #12
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	db01      	blt.n	8006ec8 <_malloc_r+0x1c>
 8006ec4:	42a9      	cmp	r1, r5
 8006ec6:	d905      	bls.n	8006ed4 <_malloc_r+0x28>
 8006ec8:	230c      	movs	r3, #12
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	2600      	movs	r6, #0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fa8 <_malloc_r+0xfc>
 8006ed8:	f000 f868 	bl	8006fac <__malloc_lock>
 8006edc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee0:	461c      	mov	r4, r3
 8006ee2:	bb5c      	cbnz	r4, 8006f3c <_malloc_r+0x90>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f7ff ffc0 	bl	8006e6c <sbrk_aligned>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	4604      	mov	r4, r0
 8006ef0:	d155      	bne.n	8006f9e <_malloc_r+0xf2>
 8006ef2:	f8d8 4000 	ldr.w	r4, [r8]
 8006ef6:	4626      	mov	r6, r4
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	d145      	bne.n	8006f88 <_malloc_r+0xdc>
 8006efc:	2c00      	cmp	r4, #0
 8006efe:	d048      	beq.n	8006f92 <_malloc_r+0xe6>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	4631      	mov	r1, r6
 8006f04:	4638      	mov	r0, r7
 8006f06:	eb04 0903 	add.w	r9, r4, r3
 8006f0a:	f000 fdd3 	bl	8007ab4 <_sbrk_r>
 8006f0e:	4581      	cmp	r9, r0
 8006f10:	d13f      	bne.n	8006f92 <_malloc_r+0xe6>
 8006f12:	6821      	ldr	r1, [r4, #0]
 8006f14:	1a6d      	subs	r5, r5, r1
 8006f16:	4629      	mov	r1, r5
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff ffa7 	bl	8006e6c <sbrk_aligned>
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d037      	beq.n	8006f92 <_malloc_r+0xe6>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	442b      	add	r3, r5
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	f8d8 3000 	ldr.w	r3, [r8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d038      	beq.n	8006fa2 <_malloc_r+0xf6>
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	42a2      	cmp	r2, r4
 8006f34:	d12b      	bne.n	8006f8e <_malloc_r+0xe2>
 8006f36:	2200      	movs	r2, #0
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	e00f      	b.n	8006f5c <_malloc_r+0xb0>
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	1b52      	subs	r2, r2, r5
 8006f40:	d41f      	bmi.n	8006f82 <_malloc_r+0xd6>
 8006f42:	2a0b      	cmp	r2, #11
 8006f44:	d917      	bls.n	8006f76 <_malloc_r+0xca>
 8006f46:	1961      	adds	r1, r4, r5
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	6025      	str	r5, [r4, #0]
 8006f4c:	bf18      	it	ne
 8006f4e:	6059      	strne	r1, [r3, #4]
 8006f50:	6863      	ldr	r3, [r4, #4]
 8006f52:	bf08      	it	eq
 8006f54:	f8c8 1000 	streq.w	r1, [r8]
 8006f58:	5162      	str	r2, [r4, r5]
 8006f5a:	604b      	str	r3, [r1, #4]
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f104 060b 	add.w	r6, r4, #11
 8006f62:	f000 f829 	bl	8006fb8 <__malloc_unlock>
 8006f66:	f026 0607 	bic.w	r6, r6, #7
 8006f6a:	1d23      	adds	r3, r4, #4
 8006f6c:	1af2      	subs	r2, r6, r3
 8006f6e:	d0ae      	beq.n	8006ece <_malloc_r+0x22>
 8006f70:	1b9b      	subs	r3, r3, r6
 8006f72:	50a3      	str	r3, [r4, r2]
 8006f74:	e7ab      	b.n	8006ece <_malloc_r+0x22>
 8006f76:	42a3      	cmp	r3, r4
 8006f78:	6862      	ldr	r2, [r4, #4]
 8006f7a:	d1dd      	bne.n	8006f38 <_malloc_r+0x8c>
 8006f7c:	f8c8 2000 	str.w	r2, [r8]
 8006f80:	e7ec      	b.n	8006f5c <_malloc_r+0xb0>
 8006f82:	4623      	mov	r3, r4
 8006f84:	6864      	ldr	r4, [r4, #4]
 8006f86:	e7ac      	b.n	8006ee2 <_malloc_r+0x36>
 8006f88:	4634      	mov	r4, r6
 8006f8a:	6876      	ldr	r6, [r6, #4]
 8006f8c:	e7b4      	b.n	8006ef8 <_malloc_r+0x4c>
 8006f8e:	4613      	mov	r3, r2
 8006f90:	e7cc      	b.n	8006f2c <_malloc_r+0x80>
 8006f92:	230c      	movs	r3, #12
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	4638      	mov	r0, r7
 8006f98:	f000 f80e 	bl	8006fb8 <__malloc_unlock>
 8006f9c:	e797      	b.n	8006ece <_malloc_r+0x22>
 8006f9e:	6025      	str	r5, [r4, #0]
 8006fa0:	e7dc      	b.n	8006f5c <_malloc_r+0xb0>
 8006fa2:	605b      	str	r3, [r3, #4]
 8006fa4:	deff      	udf	#255	; 0xff
 8006fa6:	bf00      	nop
 8006fa8:	20000a5c 	.word	0x20000a5c

08006fac <__malloc_lock>:
 8006fac:	4801      	ldr	r0, [pc, #4]	; (8006fb4 <__malloc_lock+0x8>)
 8006fae:	f7ff bf0e 	b.w	8006dce <__retarget_lock_acquire_recursive>
 8006fb2:	bf00      	nop
 8006fb4:	20000a58 	.word	0x20000a58

08006fb8 <__malloc_unlock>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	; (8006fc0 <__malloc_unlock+0x8>)
 8006fba:	f7ff bf09 	b.w	8006dd0 <__retarget_lock_release_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	20000a58 	.word	0x20000a58

08006fc4 <__ssputs_r>:
 8006fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc8:	688e      	ldr	r6, [r1, #8]
 8006fca:	461f      	mov	r7, r3
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	680b      	ldr	r3, [r1, #0]
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	4690      	mov	r8, r2
 8006fd6:	d82c      	bhi.n	8007032 <__ssputs_r+0x6e>
 8006fd8:	898a      	ldrh	r2, [r1, #12]
 8006fda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fde:	d026      	beq.n	800702e <__ssputs_r+0x6a>
 8006fe0:	6965      	ldr	r5, [r4, #20]
 8006fe2:	6909      	ldr	r1, [r1, #16]
 8006fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe8:	eba3 0901 	sub.w	r9, r3, r1
 8006fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ff0:	1c7b      	adds	r3, r7, #1
 8006ff2:	444b      	add	r3, r9
 8006ff4:	106d      	asrs	r5, r5, #1
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	bf38      	it	cc
 8006ffa:	461d      	movcc	r5, r3
 8006ffc:	0553      	lsls	r3, r2, #21
 8006ffe:	d527      	bpl.n	8007050 <__ssputs_r+0x8c>
 8007000:	4629      	mov	r1, r5
 8007002:	f7ff ff53 	bl	8006eac <_malloc_r>
 8007006:	4606      	mov	r6, r0
 8007008:	b360      	cbz	r0, 8007064 <__ssputs_r+0xa0>
 800700a:	6921      	ldr	r1, [r4, #16]
 800700c:	464a      	mov	r2, r9
 800700e:	f000 fd61 	bl	8007ad4 <memcpy>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	6126      	str	r6, [r4, #16]
 8007020:	6165      	str	r5, [r4, #20]
 8007022:	444e      	add	r6, r9
 8007024:	eba5 0509 	sub.w	r5, r5, r9
 8007028:	6026      	str	r6, [r4, #0]
 800702a:	60a5      	str	r5, [r4, #8]
 800702c:	463e      	mov	r6, r7
 800702e:	42be      	cmp	r6, r7
 8007030:	d900      	bls.n	8007034 <__ssputs_r+0x70>
 8007032:	463e      	mov	r6, r7
 8007034:	6820      	ldr	r0, [r4, #0]
 8007036:	4632      	mov	r2, r6
 8007038:	4641      	mov	r1, r8
 800703a:	f000 fcff 	bl	8007a3c <memmove>
 800703e:	68a3      	ldr	r3, [r4, #8]
 8007040:	1b9b      	subs	r3, r3, r6
 8007042:	60a3      	str	r3, [r4, #8]
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	4433      	add	r3, r6
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	2000      	movs	r0, #0
 800704c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007050:	462a      	mov	r2, r5
 8007052:	f000 fd4d 	bl	8007af0 <_realloc_r>
 8007056:	4606      	mov	r6, r0
 8007058:	2800      	cmp	r0, #0
 800705a:	d1e0      	bne.n	800701e <__ssputs_r+0x5a>
 800705c:	6921      	ldr	r1, [r4, #16]
 800705e:	4650      	mov	r0, sl
 8007060:	f7ff feb8 	bl	8006dd4 <_free_r>
 8007064:	230c      	movs	r3, #12
 8007066:	f8ca 3000 	str.w	r3, [sl]
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	f04f 30ff 	mov.w	r0, #4294967295
 8007076:	e7e9      	b.n	800704c <__ssputs_r+0x88>

08007078 <_svfiprintf_r>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	4698      	mov	r8, r3
 800707e:	898b      	ldrh	r3, [r1, #12]
 8007080:	061b      	lsls	r3, r3, #24
 8007082:	b09d      	sub	sp, #116	; 0x74
 8007084:	4607      	mov	r7, r0
 8007086:	460d      	mov	r5, r1
 8007088:	4614      	mov	r4, r2
 800708a:	d50e      	bpl.n	80070aa <_svfiprintf_r+0x32>
 800708c:	690b      	ldr	r3, [r1, #16]
 800708e:	b963      	cbnz	r3, 80070aa <_svfiprintf_r+0x32>
 8007090:	2140      	movs	r1, #64	; 0x40
 8007092:	f7ff ff0b 	bl	8006eac <_malloc_r>
 8007096:	6028      	str	r0, [r5, #0]
 8007098:	6128      	str	r0, [r5, #16]
 800709a:	b920      	cbnz	r0, 80070a6 <_svfiprintf_r+0x2e>
 800709c:	230c      	movs	r3, #12
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	e0d0      	b.n	8007248 <_svfiprintf_r+0x1d0>
 80070a6:	2340      	movs	r3, #64	; 0x40
 80070a8:	616b      	str	r3, [r5, #20]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9309      	str	r3, [sp, #36]	; 0x24
 80070ae:	2320      	movs	r3, #32
 80070b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b8:	2330      	movs	r3, #48	; 0x30
 80070ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007260 <_svfiprintf_r+0x1e8>
 80070be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c2:	f04f 0901 	mov.w	r9, #1
 80070c6:	4623      	mov	r3, r4
 80070c8:	469a      	mov	sl, r3
 80070ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ce:	b10a      	cbz	r2, 80070d4 <_svfiprintf_r+0x5c>
 80070d0:	2a25      	cmp	r2, #37	; 0x25
 80070d2:	d1f9      	bne.n	80070c8 <_svfiprintf_r+0x50>
 80070d4:	ebba 0b04 	subs.w	fp, sl, r4
 80070d8:	d00b      	beq.n	80070f2 <_svfiprintf_r+0x7a>
 80070da:	465b      	mov	r3, fp
 80070dc:	4622      	mov	r2, r4
 80070de:	4629      	mov	r1, r5
 80070e0:	4638      	mov	r0, r7
 80070e2:	f7ff ff6f 	bl	8006fc4 <__ssputs_r>
 80070e6:	3001      	adds	r0, #1
 80070e8:	f000 80a9 	beq.w	800723e <_svfiprintf_r+0x1c6>
 80070ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ee:	445a      	add	r2, fp
 80070f0:	9209      	str	r2, [sp, #36]	; 0x24
 80070f2:	f89a 3000 	ldrb.w	r3, [sl]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80a1 	beq.w	800723e <_svfiprintf_r+0x1c6>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007106:	f10a 0a01 	add.w	sl, sl, #1
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	9307      	str	r3, [sp, #28]
 800710e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007112:	931a      	str	r3, [sp, #104]	; 0x68
 8007114:	4654      	mov	r4, sl
 8007116:	2205      	movs	r2, #5
 8007118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711c:	4850      	ldr	r0, [pc, #320]	; (8007260 <_svfiprintf_r+0x1e8>)
 800711e:	f7f9 f86f 	bl	8000200 <memchr>
 8007122:	9a04      	ldr	r2, [sp, #16]
 8007124:	b9d8      	cbnz	r0, 800715e <_svfiprintf_r+0xe6>
 8007126:	06d0      	lsls	r0, r2, #27
 8007128:	bf44      	itt	mi
 800712a:	2320      	movmi	r3, #32
 800712c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007130:	0711      	lsls	r1, r2, #28
 8007132:	bf44      	itt	mi
 8007134:	232b      	movmi	r3, #43	; 0x2b
 8007136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713a:	f89a 3000 	ldrb.w	r3, [sl]
 800713e:	2b2a      	cmp	r3, #42	; 0x2a
 8007140:	d015      	beq.n	800716e <_svfiprintf_r+0xf6>
 8007142:	9a07      	ldr	r2, [sp, #28]
 8007144:	4654      	mov	r4, sl
 8007146:	2000      	movs	r0, #0
 8007148:	f04f 0c0a 	mov.w	ip, #10
 800714c:	4621      	mov	r1, r4
 800714e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007152:	3b30      	subs	r3, #48	; 0x30
 8007154:	2b09      	cmp	r3, #9
 8007156:	d94d      	bls.n	80071f4 <_svfiprintf_r+0x17c>
 8007158:	b1b0      	cbz	r0, 8007188 <_svfiprintf_r+0x110>
 800715a:	9207      	str	r2, [sp, #28]
 800715c:	e014      	b.n	8007188 <_svfiprintf_r+0x110>
 800715e:	eba0 0308 	sub.w	r3, r0, r8
 8007162:	fa09 f303 	lsl.w	r3, r9, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	9304      	str	r3, [sp, #16]
 800716a:	46a2      	mov	sl, r4
 800716c:	e7d2      	b.n	8007114 <_svfiprintf_r+0x9c>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	1d19      	adds	r1, r3, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	9103      	str	r1, [sp, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfbb      	ittet	lt
 800717a:	425b      	neglt	r3, r3
 800717c:	f042 0202 	orrlt.w	r2, r2, #2
 8007180:	9307      	strge	r3, [sp, #28]
 8007182:	9307      	strlt	r3, [sp, #28]
 8007184:	bfb8      	it	lt
 8007186:	9204      	strlt	r2, [sp, #16]
 8007188:	7823      	ldrb	r3, [r4, #0]
 800718a:	2b2e      	cmp	r3, #46	; 0x2e
 800718c:	d10c      	bne.n	80071a8 <_svfiprintf_r+0x130>
 800718e:	7863      	ldrb	r3, [r4, #1]
 8007190:	2b2a      	cmp	r3, #42	; 0x2a
 8007192:	d134      	bne.n	80071fe <_svfiprintf_r+0x186>
 8007194:	9b03      	ldr	r3, [sp, #12]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	9203      	str	r2, [sp, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	bfb8      	it	lt
 80071a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80071a4:	3402      	adds	r4, #2
 80071a6:	9305      	str	r3, [sp, #20]
 80071a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007270 <_svfiprintf_r+0x1f8>
 80071ac:	7821      	ldrb	r1, [r4, #0]
 80071ae:	2203      	movs	r2, #3
 80071b0:	4650      	mov	r0, sl
 80071b2:	f7f9 f825 	bl	8000200 <memchr>
 80071b6:	b138      	cbz	r0, 80071c8 <_svfiprintf_r+0x150>
 80071b8:	9b04      	ldr	r3, [sp, #16]
 80071ba:	eba0 000a 	sub.w	r0, r0, sl
 80071be:	2240      	movs	r2, #64	; 0x40
 80071c0:	4082      	lsls	r2, r0
 80071c2:	4313      	orrs	r3, r2
 80071c4:	3401      	adds	r4, #1
 80071c6:	9304      	str	r3, [sp, #16]
 80071c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071cc:	4825      	ldr	r0, [pc, #148]	; (8007264 <_svfiprintf_r+0x1ec>)
 80071ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d2:	2206      	movs	r2, #6
 80071d4:	f7f9 f814 	bl	8000200 <memchr>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d038      	beq.n	800724e <_svfiprintf_r+0x1d6>
 80071dc:	4b22      	ldr	r3, [pc, #136]	; (8007268 <_svfiprintf_r+0x1f0>)
 80071de:	bb1b      	cbnz	r3, 8007228 <_svfiprintf_r+0x1b0>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	3307      	adds	r3, #7
 80071e4:	f023 0307 	bic.w	r3, r3, #7
 80071e8:	3308      	adds	r3, #8
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ee:	4433      	add	r3, r6
 80071f0:	9309      	str	r3, [sp, #36]	; 0x24
 80071f2:	e768      	b.n	80070c6 <_svfiprintf_r+0x4e>
 80071f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071f8:	460c      	mov	r4, r1
 80071fa:	2001      	movs	r0, #1
 80071fc:	e7a6      	b.n	800714c <_svfiprintf_r+0xd4>
 80071fe:	2300      	movs	r3, #0
 8007200:	3401      	adds	r4, #1
 8007202:	9305      	str	r3, [sp, #20]
 8007204:	4619      	mov	r1, r3
 8007206:	f04f 0c0a 	mov.w	ip, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007210:	3a30      	subs	r2, #48	; 0x30
 8007212:	2a09      	cmp	r2, #9
 8007214:	d903      	bls.n	800721e <_svfiprintf_r+0x1a6>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0c6      	beq.n	80071a8 <_svfiprintf_r+0x130>
 800721a:	9105      	str	r1, [sp, #20]
 800721c:	e7c4      	b.n	80071a8 <_svfiprintf_r+0x130>
 800721e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007222:	4604      	mov	r4, r0
 8007224:	2301      	movs	r3, #1
 8007226:	e7f0      	b.n	800720a <_svfiprintf_r+0x192>
 8007228:	ab03      	add	r3, sp, #12
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	462a      	mov	r2, r5
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <_svfiprintf_r+0x1f4>)
 8007230:	a904      	add	r1, sp, #16
 8007232:	4638      	mov	r0, r7
 8007234:	f3af 8000 	nop.w
 8007238:	1c42      	adds	r2, r0, #1
 800723a:	4606      	mov	r6, r0
 800723c:	d1d6      	bne.n	80071ec <_svfiprintf_r+0x174>
 800723e:	89ab      	ldrh	r3, [r5, #12]
 8007240:	065b      	lsls	r3, r3, #25
 8007242:	f53f af2d 	bmi.w	80070a0 <_svfiprintf_r+0x28>
 8007246:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007248:	b01d      	add	sp, #116	; 0x74
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	ab03      	add	r3, sp, #12
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	462a      	mov	r2, r5
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <_svfiprintf_r+0x1f4>)
 8007256:	a904      	add	r1, sp, #16
 8007258:	4638      	mov	r0, r7
 800725a:	f000 f9bd 	bl	80075d8 <_printf_i>
 800725e:	e7eb      	b.n	8007238 <_svfiprintf_r+0x1c0>
 8007260:	08007c44 	.word	0x08007c44
 8007264:	08007c4e 	.word	0x08007c4e
 8007268:	00000000 	.word	0x00000000
 800726c:	08006fc5 	.word	0x08006fc5
 8007270:	08007c4a 	.word	0x08007c4a

08007274 <__sfputc_r>:
 8007274:	6893      	ldr	r3, [r2, #8]
 8007276:	3b01      	subs	r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	b410      	push	{r4}
 800727c:	6093      	str	r3, [r2, #8]
 800727e:	da08      	bge.n	8007292 <__sfputc_r+0x1e>
 8007280:	6994      	ldr	r4, [r2, #24]
 8007282:	42a3      	cmp	r3, r4
 8007284:	db01      	blt.n	800728a <__sfputc_r+0x16>
 8007286:	290a      	cmp	r1, #10
 8007288:	d103      	bne.n	8007292 <__sfputc_r+0x1e>
 800728a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800728e:	f7ff bc90 	b.w	8006bb2 <__swbuf_r>
 8007292:	6813      	ldr	r3, [r2, #0]
 8007294:	1c58      	adds	r0, r3, #1
 8007296:	6010      	str	r0, [r2, #0]
 8007298:	7019      	strb	r1, [r3, #0]
 800729a:	4608      	mov	r0, r1
 800729c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <__sfputs_r>:
 80072a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a4:	4606      	mov	r6, r0
 80072a6:	460f      	mov	r7, r1
 80072a8:	4614      	mov	r4, r2
 80072aa:	18d5      	adds	r5, r2, r3
 80072ac:	42ac      	cmp	r4, r5
 80072ae:	d101      	bne.n	80072b4 <__sfputs_r+0x12>
 80072b0:	2000      	movs	r0, #0
 80072b2:	e007      	b.n	80072c4 <__sfputs_r+0x22>
 80072b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b8:	463a      	mov	r2, r7
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff ffda 	bl	8007274 <__sfputc_r>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d1f3      	bne.n	80072ac <__sfputs_r+0xa>
 80072c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072c8 <_vfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	460d      	mov	r5, r1
 80072ce:	b09d      	sub	sp, #116	; 0x74
 80072d0:	4614      	mov	r4, r2
 80072d2:	4698      	mov	r8, r3
 80072d4:	4606      	mov	r6, r0
 80072d6:	b118      	cbz	r0, 80072e0 <_vfiprintf_r+0x18>
 80072d8:	6a03      	ldr	r3, [r0, #32]
 80072da:	b90b      	cbnz	r3, 80072e0 <_vfiprintf_r+0x18>
 80072dc:	f7ff fb2e 	bl	800693c <__sinit>
 80072e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072e2:	07d9      	lsls	r1, r3, #31
 80072e4:	d405      	bmi.n	80072f2 <_vfiprintf_r+0x2a>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	059a      	lsls	r2, r3, #22
 80072ea:	d402      	bmi.n	80072f2 <_vfiprintf_r+0x2a>
 80072ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ee:	f7ff fd6e 	bl	8006dce <__retarget_lock_acquire_recursive>
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	071b      	lsls	r3, r3, #28
 80072f6:	d501      	bpl.n	80072fc <_vfiprintf_r+0x34>
 80072f8:	692b      	ldr	r3, [r5, #16]
 80072fa:	b99b      	cbnz	r3, 8007324 <_vfiprintf_r+0x5c>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff fc94 	bl	8006c2c <__swsetup_r>
 8007304:	b170      	cbz	r0, 8007324 <_vfiprintf_r+0x5c>
 8007306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007308:	07dc      	lsls	r4, r3, #31
 800730a:	d504      	bpl.n	8007316 <_vfiprintf_r+0x4e>
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	b01d      	add	sp, #116	; 0x74
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	0598      	lsls	r0, r3, #22
 800731a:	d4f7      	bmi.n	800730c <_vfiprintf_r+0x44>
 800731c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800731e:	f7ff fd57 	bl	8006dd0 <__retarget_lock_release_recursive>
 8007322:	e7f3      	b.n	800730c <_vfiprintf_r+0x44>
 8007324:	2300      	movs	r3, #0
 8007326:	9309      	str	r3, [sp, #36]	; 0x24
 8007328:	2320      	movs	r3, #32
 800732a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800732e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007332:	2330      	movs	r3, #48	; 0x30
 8007334:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80074e8 <_vfiprintf_r+0x220>
 8007338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800733c:	f04f 0901 	mov.w	r9, #1
 8007340:	4623      	mov	r3, r4
 8007342:	469a      	mov	sl, r3
 8007344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007348:	b10a      	cbz	r2, 800734e <_vfiprintf_r+0x86>
 800734a:	2a25      	cmp	r2, #37	; 0x25
 800734c:	d1f9      	bne.n	8007342 <_vfiprintf_r+0x7a>
 800734e:	ebba 0b04 	subs.w	fp, sl, r4
 8007352:	d00b      	beq.n	800736c <_vfiprintf_r+0xa4>
 8007354:	465b      	mov	r3, fp
 8007356:	4622      	mov	r2, r4
 8007358:	4629      	mov	r1, r5
 800735a:	4630      	mov	r0, r6
 800735c:	f7ff ffa1 	bl	80072a2 <__sfputs_r>
 8007360:	3001      	adds	r0, #1
 8007362:	f000 80a9 	beq.w	80074b8 <_vfiprintf_r+0x1f0>
 8007366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007368:	445a      	add	r2, fp
 800736a:	9209      	str	r2, [sp, #36]	; 0x24
 800736c:	f89a 3000 	ldrb.w	r3, [sl]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80a1 	beq.w	80074b8 <_vfiprintf_r+0x1f0>
 8007376:	2300      	movs	r3, #0
 8007378:	f04f 32ff 	mov.w	r2, #4294967295
 800737c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007380:	f10a 0a01 	add.w	sl, sl, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	9307      	str	r3, [sp, #28]
 8007388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800738c:	931a      	str	r3, [sp, #104]	; 0x68
 800738e:	4654      	mov	r4, sl
 8007390:	2205      	movs	r2, #5
 8007392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007396:	4854      	ldr	r0, [pc, #336]	; (80074e8 <_vfiprintf_r+0x220>)
 8007398:	f7f8 ff32 	bl	8000200 <memchr>
 800739c:	9a04      	ldr	r2, [sp, #16]
 800739e:	b9d8      	cbnz	r0, 80073d8 <_vfiprintf_r+0x110>
 80073a0:	06d1      	lsls	r1, r2, #27
 80073a2:	bf44      	itt	mi
 80073a4:	2320      	movmi	r3, #32
 80073a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073aa:	0713      	lsls	r3, r2, #28
 80073ac:	bf44      	itt	mi
 80073ae:	232b      	movmi	r3, #43	; 0x2b
 80073b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073b4:	f89a 3000 	ldrb.w	r3, [sl]
 80073b8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ba:	d015      	beq.n	80073e8 <_vfiprintf_r+0x120>
 80073bc:	9a07      	ldr	r2, [sp, #28]
 80073be:	4654      	mov	r4, sl
 80073c0:	2000      	movs	r0, #0
 80073c2:	f04f 0c0a 	mov.w	ip, #10
 80073c6:	4621      	mov	r1, r4
 80073c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073cc:	3b30      	subs	r3, #48	; 0x30
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d94d      	bls.n	800746e <_vfiprintf_r+0x1a6>
 80073d2:	b1b0      	cbz	r0, 8007402 <_vfiprintf_r+0x13a>
 80073d4:	9207      	str	r2, [sp, #28]
 80073d6:	e014      	b.n	8007402 <_vfiprintf_r+0x13a>
 80073d8:	eba0 0308 	sub.w	r3, r0, r8
 80073dc:	fa09 f303 	lsl.w	r3, r9, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	46a2      	mov	sl, r4
 80073e6:	e7d2      	b.n	800738e <_vfiprintf_r+0xc6>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d19      	adds	r1, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9103      	str	r1, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfbb      	ittet	lt
 80073f4:	425b      	neglt	r3, r3
 80073f6:	f042 0202 	orrlt.w	r2, r2, #2
 80073fa:	9307      	strge	r3, [sp, #28]
 80073fc:	9307      	strlt	r3, [sp, #28]
 80073fe:	bfb8      	it	lt
 8007400:	9204      	strlt	r2, [sp, #16]
 8007402:	7823      	ldrb	r3, [r4, #0]
 8007404:	2b2e      	cmp	r3, #46	; 0x2e
 8007406:	d10c      	bne.n	8007422 <_vfiprintf_r+0x15a>
 8007408:	7863      	ldrb	r3, [r4, #1]
 800740a:	2b2a      	cmp	r3, #42	; 0x2a
 800740c:	d134      	bne.n	8007478 <_vfiprintf_r+0x1b0>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	1d1a      	adds	r2, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9203      	str	r2, [sp, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfb8      	it	lt
 800741a:	f04f 33ff 	movlt.w	r3, #4294967295
 800741e:	3402      	adds	r4, #2
 8007420:	9305      	str	r3, [sp, #20]
 8007422:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80074f8 <_vfiprintf_r+0x230>
 8007426:	7821      	ldrb	r1, [r4, #0]
 8007428:	2203      	movs	r2, #3
 800742a:	4650      	mov	r0, sl
 800742c:	f7f8 fee8 	bl	8000200 <memchr>
 8007430:	b138      	cbz	r0, 8007442 <_vfiprintf_r+0x17a>
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	eba0 000a 	sub.w	r0, r0, sl
 8007438:	2240      	movs	r2, #64	; 0x40
 800743a:	4082      	lsls	r2, r0
 800743c:	4313      	orrs	r3, r2
 800743e:	3401      	adds	r4, #1
 8007440:	9304      	str	r3, [sp, #16]
 8007442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007446:	4829      	ldr	r0, [pc, #164]	; (80074ec <_vfiprintf_r+0x224>)
 8007448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800744c:	2206      	movs	r2, #6
 800744e:	f7f8 fed7 	bl	8000200 <memchr>
 8007452:	2800      	cmp	r0, #0
 8007454:	d03f      	beq.n	80074d6 <_vfiprintf_r+0x20e>
 8007456:	4b26      	ldr	r3, [pc, #152]	; (80074f0 <_vfiprintf_r+0x228>)
 8007458:	bb1b      	cbnz	r3, 80074a2 <_vfiprintf_r+0x1da>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	3307      	adds	r3, #7
 800745e:	f023 0307 	bic.w	r3, r3, #7
 8007462:	3308      	adds	r3, #8
 8007464:	9303      	str	r3, [sp, #12]
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	443b      	add	r3, r7
 800746a:	9309      	str	r3, [sp, #36]	; 0x24
 800746c:	e768      	b.n	8007340 <_vfiprintf_r+0x78>
 800746e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007472:	460c      	mov	r4, r1
 8007474:	2001      	movs	r0, #1
 8007476:	e7a6      	b.n	80073c6 <_vfiprintf_r+0xfe>
 8007478:	2300      	movs	r3, #0
 800747a:	3401      	adds	r4, #1
 800747c:	9305      	str	r3, [sp, #20]
 800747e:	4619      	mov	r1, r3
 8007480:	f04f 0c0a 	mov.w	ip, #10
 8007484:	4620      	mov	r0, r4
 8007486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800748a:	3a30      	subs	r2, #48	; 0x30
 800748c:	2a09      	cmp	r2, #9
 800748e:	d903      	bls.n	8007498 <_vfiprintf_r+0x1d0>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0c6      	beq.n	8007422 <_vfiprintf_r+0x15a>
 8007494:	9105      	str	r1, [sp, #20]
 8007496:	e7c4      	b.n	8007422 <_vfiprintf_r+0x15a>
 8007498:	fb0c 2101 	mla	r1, ip, r1, r2
 800749c:	4604      	mov	r4, r0
 800749e:	2301      	movs	r3, #1
 80074a0:	e7f0      	b.n	8007484 <_vfiprintf_r+0x1bc>
 80074a2:	ab03      	add	r3, sp, #12
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	462a      	mov	r2, r5
 80074a8:	4b12      	ldr	r3, [pc, #72]	; (80074f4 <_vfiprintf_r+0x22c>)
 80074aa:	a904      	add	r1, sp, #16
 80074ac:	4630      	mov	r0, r6
 80074ae:	f3af 8000 	nop.w
 80074b2:	4607      	mov	r7, r0
 80074b4:	1c78      	adds	r0, r7, #1
 80074b6:	d1d6      	bne.n	8007466 <_vfiprintf_r+0x19e>
 80074b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ba:	07d9      	lsls	r1, r3, #31
 80074bc:	d405      	bmi.n	80074ca <_vfiprintf_r+0x202>
 80074be:	89ab      	ldrh	r3, [r5, #12]
 80074c0:	059a      	lsls	r2, r3, #22
 80074c2:	d402      	bmi.n	80074ca <_vfiprintf_r+0x202>
 80074c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074c6:	f7ff fc83 	bl	8006dd0 <__retarget_lock_release_recursive>
 80074ca:	89ab      	ldrh	r3, [r5, #12]
 80074cc:	065b      	lsls	r3, r3, #25
 80074ce:	f53f af1d 	bmi.w	800730c <_vfiprintf_r+0x44>
 80074d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074d4:	e71c      	b.n	8007310 <_vfiprintf_r+0x48>
 80074d6:	ab03      	add	r3, sp, #12
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	462a      	mov	r2, r5
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <_vfiprintf_r+0x22c>)
 80074de:	a904      	add	r1, sp, #16
 80074e0:	4630      	mov	r0, r6
 80074e2:	f000 f879 	bl	80075d8 <_printf_i>
 80074e6:	e7e4      	b.n	80074b2 <_vfiprintf_r+0x1ea>
 80074e8:	08007c44 	.word	0x08007c44
 80074ec:	08007c4e 	.word	0x08007c4e
 80074f0:	00000000 	.word	0x00000000
 80074f4:	080072a3 	.word	0x080072a3
 80074f8:	08007c4a 	.word	0x08007c4a

080074fc <_printf_common>:
 80074fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	4616      	mov	r6, r2
 8007502:	4699      	mov	r9, r3
 8007504:	688a      	ldr	r2, [r1, #8]
 8007506:	690b      	ldr	r3, [r1, #16]
 8007508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800750c:	4293      	cmp	r3, r2
 800750e:	bfb8      	it	lt
 8007510:	4613      	movlt	r3, r2
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007518:	4607      	mov	r7, r0
 800751a:	460c      	mov	r4, r1
 800751c:	b10a      	cbz	r2, 8007522 <_printf_common+0x26>
 800751e:	3301      	adds	r3, #1
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	0699      	lsls	r1, r3, #26
 8007526:	bf42      	ittt	mi
 8007528:	6833      	ldrmi	r3, [r6, #0]
 800752a:	3302      	addmi	r3, #2
 800752c:	6033      	strmi	r3, [r6, #0]
 800752e:	6825      	ldr	r5, [r4, #0]
 8007530:	f015 0506 	ands.w	r5, r5, #6
 8007534:	d106      	bne.n	8007544 <_printf_common+0x48>
 8007536:	f104 0a19 	add.w	sl, r4, #25
 800753a:	68e3      	ldr	r3, [r4, #12]
 800753c:	6832      	ldr	r2, [r6, #0]
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	42ab      	cmp	r3, r5
 8007542:	dc26      	bgt.n	8007592 <_printf_common+0x96>
 8007544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007548:	1e13      	subs	r3, r2, #0
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	bf18      	it	ne
 800754e:	2301      	movne	r3, #1
 8007550:	0692      	lsls	r2, r2, #26
 8007552:	d42b      	bmi.n	80075ac <_printf_common+0xb0>
 8007554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007558:	4649      	mov	r1, r9
 800755a:	4638      	mov	r0, r7
 800755c:	47c0      	blx	r8
 800755e:	3001      	adds	r0, #1
 8007560:	d01e      	beq.n	80075a0 <_printf_common+0xa4>
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	6922      	ldr	r2, [r4, #16]
 8007566:	f003 0306 	and.w	r3, r3, #6
 800756a:	2b04      	cmp	r3, #4
 800756c:	bf02      	ittt	eq
 800756e:	68e5      	ldreq	r5, [r4, #12]
 8007570:	6833      	ldreq	r3, [r6, #0]
 8007572:	1aed      	subeq	r5, r5, r3
 8007574:	68a3      	ldr	r3, [r4, #8]
 8007576:	bf0c      	ite	eq
 8007578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800757c:	2500      	movne	r5, #0
 800757e:	4293      	cmp	r3, r2
 8007580:	bfc4      	itt	gt
 8007582:	1a9b      	subgt	r3, r3, r2
 8007584:	18ed      	addgt	r5, r5, r3
 8007586:	2600      	movs	r6, #0
 8007588:	341a      	adds	r4, #26
 800758a:	42b5      	cmp	r5, r6
 800758c:	d11a      	bne.n	80075c4 <_printf_common+0xc8>
 800758e:	2000      	movs	r0, #0
 8007590:	e008      	b.n	80075a4 <_printf_common+0xa8>
 8007592:	2301      	movs	r3, #1
 8007594:	4652      	mov	r2, sl
 8007596:	4649      	mov	r1, r9
 8007598:	4638      	mov	r0, r7
 800759a:	47c0      	blx	r8
 800759c:	3001      	adds	r0, #1
 800759e:	d103      	bne.n	80075a8 <_printf_common+0xac>
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	3501      	adds	r5, #1
 80075aa:	e7c6      	b.n	800753a <_printf_common+0x3e>
 80075ac:	18e1      	adds	r1, r4, r3
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	2030      	movs	r0, #48	; 0x30
 80075b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b6:	4422      	add	r2, r4
 80075b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075c0:	3302      	adds	r3, #2
 80075c2:	e7c7      	b.n	8007554 <_printf_common+0x58>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4622      	mov	r2, r4
 80075c8:	4649      	mov	r1, r9
 80075ca:	4638      	mov	r0, r7
 80075cc:	47c0      	blx	r8
 80075ce:	3001      	adds	r0, #1
 80075d0:	d0e6      	beq.n	80075a0 <_printf_common+0xa4>
 80075d2:	3601      	adds	r6, #1
 80075d4:	e7d9      	b.n	800758a <_printf_common+0x8e>
	...

080075d8 <_printf_i>:
 80075d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	7e0f      	ldrb	r7, [r1, #24]
 80075de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075e0:	2f78      	cmp	r7, #120	; 0x78
 80075e2:	4691      	mov	r9, r2
 80075e4:	4680      	mov	r8, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	469a      	mov	sl, r3
 80075ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ee:	d807      	bhi.n	8007600 <_printf_i+0x28>
 80075f0:	2f62      	cmp	r7, #98	; 0x62
 80075f2:	d80a      	bhi.n	800760a <_printf_i+0x32>
 80075f4:	2f00      	cmp	r7, #0
 80075f6:	f000 80d4 	beq.w	80077a2 <_printf_i+0x1ca>
 80075fa:	2f58      	cmp	r7, #88	; 0x58
 80075fc:	f000 80c0 	beq.w	8007780 <_printf_i+0x1a8>
 8007600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007608:	e03a      	b.n	8007680 <_printf_i+0xa8>
 800760a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800760e:	2b15      	cmp	r3, #21
 8007610:	d8f6      	bhi.n	8007600 <_printf_i+0x28>
 8007612:	a101      	add	r1, pc, #4	; (adr r1, 8007618 <_printf_i+0x40>)
 8007614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007618:	08007671 	.word	0x08007671
 800761c:	08007685 	.word	0x08007685
 8007620:	08007601 	.word	0x08007601
 8007624:	08007601 	.word	0x08007601
 8007628:	08007601 	.word	0x08007601
 800762c:	08007601 	.word	0x08007601
 8007630:	08007685 	.word	0x08007685
 8007634:	08007601 	.word	0x08007601
 8007638:	08007601 	.word	0x08007601
 800763c:	08007601 	.word	0x08007601
 8007640:	08007601 	.word	0x08007601
 8007644:	08007789 	.word	0x08007789
 8007648:	080076b1 	.word	0x080076b1
 800764c:	08007743 	.word	0x08007743
 8007650:	08007601 	.word	0x08007601
 8007654:	08007601 	.word	0x08007601
 8007658:	080077ab 	.word	0x080077ab
 800765c:	08007601 	.word	0x08007601
 8007660:	080076b1 	.word	0x080076b1
 8007664:	08007601 	.word	0x08007601
 8007668:	08007601 	.word	0x08007601
 800766c:	0800774b 	.word	0x0800774b
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	602a      	str	r2, [r5, #0]
 8007678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800767c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007680:	2301      	movs	r3, #1
 8007682:	e09f      	b.n	80077c4 <_printf_i+0x1ec>
 8007684:	6820      	ldr	r0, [r4, #0]
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	0607      	lsls	r7, r0, #24
 800768a:	f103 0104 	add.w	r1, r3, #4
 800768e:	6029      	str	r1, [r5, #0]
 8007690:	d501      	bpl.n	8007696 <_printf_i+0xbe>
 8007692:	681e      	ldr	r6, [r3, #0]
 8007694:	e003      	b.n	800769e <_printf_i+0xc6>
 8007696:	0646      	lsls	r6, r0, #25
 8007698:	d5fb      	bpl.n	8007692 <_printf_i+0xba>
 800769a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800769e:	2e00      	cmp	r6, #0
 80076a0:	da03      	bge.n	80076aa <_printf_i+0xd2>
 80076a2:	232d      	movs	r3, #45	; 0x2d
 80076a4:	4276      	negs	r6, r6
 80076a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076aa:	485a      	ldr	r0, [pc, #360]	; (8007814 <_printf_i+0x23c>)
 80076ac:	230a      	movs	r3, #10
 80076ae:	e012      	b.n	80076d6 <_printf_i+0xfe>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	6820      	ldr	r0, [r4, #0]
 80076b4:	1d19      	adds	r1, r3, #4
 80076b6:	6029      	str	r1, [r5, #0]
 80076b8:	0605      	lsls	r5, r0, #24
 80076ba:	d501      	bpl.n	80076c0 <_printf_i+0xe8>
 80076bc:	681e      	ldr	r6, [r3, #0]
 80076be:	e002      	b.n	80076c6 <_printf_i+0xee>
 80076c0:	0641      	lsls	r1, r0, #25
 80076c2:	d5fb      	bpl.n	80076bc <_printf_i+0xe4>
 80076c4:	881e      	ldrh	r6, [r3, #0]
 80076c6:	4853      	ldr	r0, [pc, #332]	; (8007814 <_printf_i+0x23c>)
 80076c8:	2f6f      	cmp	r7, #111	; 0x6f
 80076ca:	bf0c      	ite	eq
 80076cc:	2308      	moveq	r3, #8
 80076ce:	230a      	movne	r3, #10
 80076d0:	2100      	movs	r1, #0
 80076d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076d6:	6865      	ldr	r5, [r4, #4]
 80076d8:	60a5      	str	r5, [r4, #8]
 80076da:	2d00      	cmp	r5, #0
 80076dc:	bfa2      	ittt	ge
 80076de:	6821      	ldrge	r1, [r4, #0]
 80076e0:	f021 0104 	bicge.w	r1, r1, #4
 80076e4:	6021      	strge	r1, [r4, #0]
 80076e6:	b90e      	cbnz	r6, 80076ec <_printf_i+0x114>
 80076e8:	2d00      	cmp	r5, #0
 80076ea:	d04b      	beq.n	8007784 <_printf_i+0x1ac>
 80076ec:	4615      	mov	r5, r2
 80076ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80076f2:	fb03 6711 	mls	r7, r3, r1, r6
 80076f6:	5dc7      	ldrb	r7, [r0, r7]
 80076f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076fc:	4637      	mov	r7, r6
 80076fe:	42bb      	cmp	r3, r7
 8007700:	460e      	mov	r6, r1
 8007702:	d9f4      	bls.n	80076ee <_printf_i+0x116>
 8007704:	2b08      	cmp	r3, #8
 8007706:	d10b      	bne.n	8007720 <_printf_i+0x148>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	07de      	lsls	r6, r3, #31
 800770c:	d508      	bpl.n	8007720 <_printf_i+0x148>
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	6861      	ldr	r1, [r4, #4]
 8007712:	4299      	cmp	r1, r3
 8007714:	bfde      	ittt	le
 8007716:	2330      	movle	r3, #48	; 0x30
 8007718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800771c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007720:	1b52      	subs	r2, r2, r5
 8007722:	6122      	str	r2, [r4, #16]
 8007724:	f8cd a000 	str.w	sl, [sp]
 8007728:	464b      	mov	r3, r9
 800772a:	aa03      	add	r2, sp, #12
 800772c:	4621      	mov	r1, r4
 800772e:	4640      	mov	r0, r8
 8007730:	f7ff fee4 	bl	80074fc <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	d14a      	bne.n	80077ce <_printf_i+0x1f6>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	b004      	add	sp, #16
 800773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	f043 0320 	orr.w	r3, r3, #32
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	4833      	ldr	r0, [pc, #204]	; (8007818 <_printf_i+0x240>)
 800774c:	2778      	movs	r7, #120	; 0x78
 800774e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	6829      	ldr	r1, [r5, #0]
 8007756:	061f      	lsls	r7, r3, #24
 8007758:	f851 6b04 	ldr.w	r6, [r1], #4
 800775c:	d402      	bmi.n	8007764 <_printf_i+0x18c>
 800775e:	065f      	lsls	r7, r3, #25
 8007760:	bf48      	it	mi
 8007762:	b2b6      	uxthmi	r6, r6
 8007764:	07df      	lsls	r7, r3, #31
 8007766:	bf48      	it	mi
 8007768:	f043 0320 	orrmi.w	r3, r3, #32
 800776c:	6029      	str	r1, [r5, #0]
 800776e:	bf48      	it	mi
 8007770:	6023      	strmi	r3, [r4, #0]
 8007772:	b91e      	cbnz	r6, 800777c <_printf_i+0x1a4>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	f023 0320 	bic.w	r3, r3, #32
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	2310      	movs	r3, #16
 800777e:	e7a7      	b.n	80076d0 <_printf_i+0xf8>
 8007780:	4824      	ldr	r0, [pc, #144]	; (8007814 <_printf_i+0x23c>)
 8007782:	e7e4      	b.n	800774e <_printf_i+0x176>
 8007784:	4615      	mov	r5, r2
 8007786:	e7bd      	b.n	8007704 <_printf_i+0x12c>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	6826      	ldr	r6, [r4, #0]
 800778c:	6961      	ldr	r1, [r4, #20]
 800778e:	1d18      	adds	r0, r3, #4
 8007790:	6028      	str	r0, [r5, #0]
 8007792:	0635      	lsls	r5, r6, #24
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	d501      	bpl.n	800779c <_printf_i+0x1c4>
 8007798:	6019      	str	r1, [r3, #0]
 800779a:	e002      	b.n	80077a2 <_printf_i+0x1ca>
 800779c:	0670      	lsls	r0, r6, #25
 800779e:	d5fb      	bpl.n	8007798 <_printf_i+0x1c0>
 80077a0:	8019      	strh	r1, [r3, #0]
 80077a2:	2300      	movs	r3, #0
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	4615      	mov	r5, r2
 80077a8:	e7bc      	b.n	8007724 <_printf_i+0x14c>
 80077aa:	682b      	ldr	r3, [r5, #0]
 80077ac:	1d1a      	adds	r2, r3, #4
 80077ae:	602a      	str	r2, [r5, #0]
 80077b0:	681d      	ldr	r5, [r3, #0]
 80077b2:	6862      	ldr	r2, [r4, #4]
 80077b4:	2100      	movs	r1, #0
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7f8 fd22 	bl	8000200 <memchr>
 80077bc:	b108      	cbz	r0, 80077c2 <_printf_i+0x1ea>
 80077be:	1b40      	subs	r0, r0, r5
 80077c0:	6060      	str	r0, [r4, #4]
 80077c2:	6863      	ldr	r3, [r4, #4]
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	2300      	movs	r3, #0
 80077c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077cc:	e7aa      	b.n	8007724 <_printf_i+0x14c>
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	462a      	mov	r2, r5
 80077d2:	4649      	mov	r1, r9
 80077d4:	4640      	mov	r0, r8
 80077d6:	47d0      	blx	sl
 80077d8:	3001      	adds	r0, #1
 80077da:	d0ad      	beq.n	8007738 <_printf_i+0x160>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	079b      	lsls	r3, r3, #30
 80077e0:	d413      	bmi.n	800780a <_printf_i+0x232>
 80077e2:	68e0      	ldr	r0, [r4, #12]
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	4298      	cmp	r0, r3
 80077e8:	bfb8      	it	lt
 80077ea:	4618      	movlt	r0, r3
 80077ec:	e7a6      	b.n	800773c <_printf_i+0x164>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4632      	mov	r2, r6
 80077f2:	4649      	mov	r1, r9
 80077f4:	4640      	mov	r0, r8
 80077f6:	47d0      	blx	sl
 80077f8:	3001      	adds	r0, #1
 80077fa:	d09d      	beq.n	8007738 <_printf_i+0x160>
 80077fc:	3501      	adds	r5, #1
 80077fe:	68e3      	ldr	r3, [r4, #12]
 8007800:	9903      	ldr	r1, [sp, #12]
 8007802:	1a5b      	subs	r3, r3, r1
 8007804:	42ab      	cmp	r3, r5
 8007806:	dcf2      	bgt.n	80077ee <_printf_i+0x216>
 8007808:	e7eb      	b.n	80077e2 <_printf_i+0x20a>
 800780a:	2500      	movs	r5, #0
 800780c:	f104 0619 	add.w	r6, r4, #25
 8007810:	e7f5      	b.n	80077fe <_printf_i+0x226>
 8007812:	bf00      	nop
 8007814:	08007c55 	.word	0x08007c55
 8007818:	08007c66 	.word	0x08007c66

0800781c <__sflush_r>:
 800781c:	898a      	ldrh	r2, [r1, #12]
 800781e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007822:	4605      	mov	r5, r0
 8007824:	0710      	lsls	r0, r2, #28
 8007826:	460c      	mov	r4, r1
 8007828:	d458      	bmi.n	80078dc <__sflush_r+0xc0>
 800782a:	684b      	ldr	r3, [r1, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	dc05      	bgt.n	800783c <__sflush_r+0x20>
 8007830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	dc02      	bgt.n	800783c <__sflush_r+0x20>
 8007836:	2000      	movs	r0, #0
 8007838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800783e:	2e00      	cmp	r6, #0
 8007840:	d0f9      	beq.n	8007836 <__sflush_r+0x1a>
 8007842:	2300      	movs	r3, #0
 8007844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007848:	682f      	ldr	r7, [r5, #0]
 800784a:	6a21      	ldr	r1, [r4, #32]
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	d032      	beq.n	80078b6 <__sflush_r+0x9a>
 8007850:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	075a      	lsls	r2, r3, #29
 8007856:	d505      	bpl.n	8007864 <__sflush_r+0x48>
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	1ac0      	subs	r0, r0, r3
 800785c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800785e:	b10b      	cbz	r3, 8007864 <__sflush_r+0x48>
 8007860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007862:	1ac0      	subs	r0, r0, r3
 8007864:	2300      	movs	r3, #0
 8007866:	4602      	mov	r2, r0
 8007868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786a:	6a21      	ldr	r1, [r4, #32]
 800786c:	4628      	mov	r0, r5
 800786e:	47b0      	blx	r6
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	d106      	bne.n	8007884 <__sflush_r+0x68>
 8007876:	6829      	ldr	r1, [r5, #0]
 8007878:	291d      	cmp	r1, #29
 800787a:	d82b      	bhi.n	80078d4 <__sflush_r+0xb8>
 800787c:	4a29      	ldr	r2, [pc, #164]	; (8007924 <__sflush_r+0x108>)
 800787e:	410a      	asrs	r2, r1
 8007880:	07d6      	lsls	r6, r2, #31
 8007882:	d427      	bmi.n	80078d4 <__sflush_r+0xb8>
 8007884:	2200      	movs	r2, #0
 8007886:	6062      	str	r2, [r4, #4]
 8007888:	04d9      	lsls	r1, r3, #19
 800788a:	6922      	ldr	r2, [r4, #16]
 800788c:	6022      	str	r2, [r4, #0]
 800788e:	d504      	bpl.n	800789a <__sflush_r+0x7e>
 8007890:	1c42      	adds	r2, r0, #1
 8007892:	d101      	bne.n	8007898 <__sflush_r+0x7c>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b903      	cbnz	r3, 800789a <__sflush_r+0x7e>
 8007898:	6560      	str	r0, [r4, #84]	; 0x54
 800789a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800789c:	602f      	str	r7, [r5, #0]
 800789e:	2900      	cmp	r1, #0
 80078a0:	d0c9      	beq.n	8007836 <__sflush_r+0x1a>
 80078a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078a6:	4299      	cmp	r1, r3
 80078a8:	d002      	beq.n	80078b0 <__sflush_r+0x94>
 80078aa:	4628      	mov	r0, r5
 80078ac:	f7ff fa92 	bl	8006dd4 <_free_r>
 80078b0:	2000      	movs	r0, #0
 80078b2:	6360      	str	r0, [r4, #52]	; 0x34
 80078b4:	e7c0      	b.n	8007838 <__sflush_r+0x1c>
 80078b6:	2301      	movs	r3, #1
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b0      	blx	r6
 80078bc:	1c41      	adds	r1, r0, #1
 80078be:	d1c8      	bne.n	8007852 <__sflush_r+0x36>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0c5      	beq.n	8007852 <__sflush_r+0x36>
 80078c6:	2b1d      	cmp	r3, #29
 80078c8:	d001      	beq.n	80078ce <__sflush_r+0xb2>
 80078ca:	2b16      	cmp	r3, #22
 80078cc:	d101      	bne.n	80078d2 <__sflush_r+0xb6>
 80078ce:	602f      	str	r7, [r5, #0]
 80078d0:	e7b1      	b.n	8007836 <__sflush_r+0x1a>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	e7ad      	b.n	8007838 <__sflush_r+0x1c>
 80078dc:	690f      	ldr	r7, [r1, #16]
 80078de:	2f00      	cmp	r7, #0
 80078e0:	d0a9      	beq.n	8007836 <__sflush_r+0x1a>
 80078e2:	0793      	lsls	r3, r2, #30
 80078e4:	680e      	ldr	r6, [r1, #0]
 80078e6:	bf08      	it	eq
 80078e8:	694b      	ldreq	r3, [r1, #20]
 80078ea:	600f      	str	r7, [r1, #0]
 80078ec:	bf18      	it	ne
 80078ee:	2300      	movne	r3, #0
 80078f0:	eba6 0807 	sub.w	r8, r6, r7
 80078f4:	608b      	str	r3, [r1, #8]
 80078f6:	f1b8 0f00 	cmp.w	r8, #0
 80078fa:	dd9c      	ble.n	8007836 <__sflush_r+0x1a>
 80078fc:	6a21      	ldr	r1, [r4, #32]
 80078fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007900:	4643      	mov	r3, r8
 8007902:	463a      	mov	r2, r7
 8007904:	4628      	mov	r0, r5
 8007906:	47b0      	blx	r6
 8007908:	2800      	cmp	r0, #0
 800790a:	dc06      	bgt.n	800791a <__sflush_r+0xfe>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	e78e      	b.n	8007838 <__sflush_r+0x1c>
 800791a:	4407      	add	r7, r0
 800791c:	eba8 0800 	sub.w	r8, r8, r0
 8007920:	e7e9      	b.n	80078f6 <__sflush_r+0xda>
 8007922:	bf00      	nop
 8007924:	dfbffffe 	.word	0xdfbffffe

08007928 <_fflush_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	690b      	ldr	r3, [r1, #16]
 800792c:	4605      	mov	r5, r0
 800792e:	460c      	mov	r4, r1
 8007930:	b913      	cbnz	r3, 8007938 <_fflush_r+0x10>
 8007932:	2500      	movs	r5, #0
 8007934:	4628      	mov	r0, r5
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	b118      	cbz	r0, 8007942 <_fflush_r+0x1a>
 800793a:	6a03      	ldr	r3, [r0, #32]
 800793c:	b90b      	cbnz	r3, 8007942 <_fflush_r+0x1a>
 800793e:	f7fe fffd 	bl	800693c <__sinit>
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f3      	beq.n	8007932 <_fflush_r+0xa>
 800794a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800794c:	07d0      	lsls	r0, r2, #31
 800794e:	d404      	bmi.n	800795a <_fflush_r+0x32>
 8007950:	0599      	lsls	r1, r3, #22
 8007952:	d402      	bmi.n	800795a <_fflush_r+0x32>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f7ff fa3a 	bl	8006dce <__retarget_lock_acquire_recursive>
 800795a:	4628      	mov	r0, r5
 800795c:	4621      	mov	r1, r4
 800795e:	f7ff ff5d 	bl	800781c <__sflush_r>
 8007962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007964:	07da      	lsls	r2, r3, #31
 8007966:	4605      	mov	r5, r0
 8007968:	d4e4      	bmi.n	8007934 <_fflush_r+0xc>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	059b      	lsls	r3, r3, #22
 800796e:	d4e1      	bmi.n	8007934 <_fflush_r+0xc>
 8007970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007972:	f7ff fa2d 	bl	8006dd0 <__retarget_lock_release_recursive>
 8007976:	e7dd      	b.n	8007934 <_fflush_r+0xc>

08007978 <__swhatbuf_r>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	460c      	mov	r4, r1
 800797c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007980:	2900      	cmp	r1, #0
 8007982:	b096      	sub	sp, #88	; 0x58
 8007984:	4615      	mov	r5, r2
 8007986:	461e      	mov	r6, r3
 8007988:	da0d      	bge.n	80079a6 <__swhatbuf_r+0x2e>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	bf0c      	ite	eq
 8007996:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800799a:	2340      	movne	r3, #64	; 0x40
 800799c:	2000      	movs	r0, #0
 800799e:	6031      	str	r1, [r6, #0]
 80079a0:	602b      	str	r3, [r5, #0]
 80079a2:	b016      	add	sp, #88	; 0x58
 80079a4:	bd70      	pop	{r4, r5, r6, pc}
 80079a6:	466a      	mov	r2, sp
 80079a8:	f000 f862 	bl	8007a70 <_fstat_r>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	dbec      	blt.n	800798a <__swhatbuf_r+0x12>
 80079b0:	9901      	ldr	r1, [sp, #4]
 80079b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079ba:	4259      	negs	r1, r3
 80079bc:	4159      	adcs	r1, r3
 80079be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079c2:	e7eb      	b.n	800799c <__swhatbuf_r+0x24>

080079c4 <__smakebuf_r>:
 80079c4:	898b      	ldrh	r3, [r1, #12]
 80079c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079c8:	079d      	lsls	r5, r3, #30
 80079ca:	4606      	mov	r6, r0
 80079cc:	460c      	mov	r4, r1
 80079ce:	d507      	bpl.n	80079e0 <__smakebuf_r+0x1c>
 80079d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	2301      	movs	r3, #1
 80079da:	6163      	str	r3, [r4, #20]
 80079dc:	b002      	add	sp, #8
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	ab01      	add	r3, sp, #4
 80079e2:	466a      	mov	r2, sp
 80079e4:	f7ff ffc8 	bl	8007978 <__swhatbuf_r>
 80079e8:	9900      	ldr	r1, [sp, #0]
 80079ea:	4605      	mov	r5, r0
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff fa5d 	bl	8006eac <_malloc_r>
 80079f2:	b948      	cbnz	r0, 8007a08 <__smakebuf_r+0x44>
 80079f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f8:	059a      	lsls	r2, r3, #22
 80079fa:	d4ef      	bmi.n	80079dc <__smakebuf_r+0x18>
 80079fc:	f023 0303 	bic.w	r3, r3, #3
 8007a00:	f043 0302 	orr.w	r3, r3, #2
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	e7e3      	b.n	80079d0 <__smakebuf_r+0xc>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	6020      	str	r0, [r4, #0]
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a10:	81a3      	strh	r3, [r4, #12]
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	6163      	str	r3, [r4, #20]
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	6120      	str	r0, [r4, #16]
 8007a1a:	b15b      	cbz	r3, 8007a34 <__smakebuf_r+0x70>
 8007a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 f837 	bl	8007a94 <_isatty_r>
 8007a26:	b128      	cbz	r0, 8007a34 <__smakebuf_r+0x70>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	431d      	orrs	r5, r3
 8007a38:	81a5      	strh	r5, [r4, #12]
 8007a3a:	e7cf      	b.n	80079dc <__smakebuf_r+0x18>

08007a3c <memmove>:
 8007a3c:	4288      	cmp	r0, r1
 8007a3e:	b510      	push	{r4, lr}
 8007a40:	eb01 0402 	add.w	r4, r1, r2
 8007a44:	d902      	bls.n	8007a4c <memmove+0x10>
 8007a46:	4284      	cmp	r4, r0
 8007a48:	4623      	mov	r3, r4
 8007a4a:	d807      	bhi.n	8007a5c <memmove+0x20>
 8007a4c:	1e43      	subs	r3, r0, #1
 8007a4e:	42a1      	cmp	r1, r4
 8007a50:	d008      	beq.n	8007a64 <memmove+0x28>
 8007a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a5a:	e7f8      	b.n	8007a4e <memmove+0x12>
 8007a5c:	4402      	add	r2, r0
 8007a5e:	4601      	mov	r1, r0
 8007a60:	428a      	cmp	r2, r1
 8007a62:	d100      	bne.n	8007a66 <memmove+0x2a>
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a6e:	e7f7      	b.n	8007a60 <memmove+0x24>

08007a70 <_fstat_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d07      	ldr	r5, [pc, #28]	; (8007a90 <_fstat_r+0x20>)
 8007a74:	2300      	movs	r3, #0
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	602b      	str	r3, [r5, #0]
 8007a7e:	f7f9 fdc8 	bl	8001612 <_fstat>
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	d102      	bne.n	8007a8c <_fstat_r+0x1c>
 8007a86:	682b      	ldr	r3, [r5, #0]
 8007a88:	b103      	cbz	r3, 8007a8c <_fstat_r+0x1c>
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000a54 	.word	0x20000a54

08007a94 <_isatty_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d06      	ldr	r5, [pc, #24]	; (8007ab0 <_isatty_r+0x1c>)
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	602b      	str	r3, [r5, #0]
 8007aa0:	f7f9 fdc7 	bl	8001632 <_isatty>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_isatty_r+0x1a>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_isatty_r+0x1a>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	20000a54 	.word	0x20000a54

08007ab4 <_sbrk_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d06      	ldr	r5, [pc, #24]	; (8007ad0 <_sbrk_r+0x1c>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7f9 fdd0 	bl	8001664 <_sbrk>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_sbrk_r+0x1a>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_sbrk_r+0x1a>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000a54 	.word	0x20000a54

08007ad4 <memcpy>:
 8007ad4:	440a      	add	r2, r1
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007adc:	d100      	bne.n	8007ae0 <memcpy+0xc>
 8007ade:	4770      	bx	lr
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aea:	4291      	cmp	r1, r2
 8007aec:	d1f9      	bne.n	8007ae2 <memcpy+0xe>
 8007aee:	bd10      	pop	{r4, pc}

08007af0 <_realloc_r>:
 8007af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af4:	4680      	mov	r8, r0
 8007af6:	4614      	mov	r4, r2
 8007af8:	460e      	mov	r6, r1
 8007afa:	b921      	cbnz	r1, 8007b06 <_realloc_r+0x16>
 8007afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	4611      	mov	r1, r2
 8007b02:	f7ff b9d3 	b.w	8006eac <_malloc_r>
 8007b06:	b92a      	cbnz	r2, 8007b14 <_realloc_r+0x24>
 8007b08:	f7ff f964 	bl	8006dd4 <_free_r>
 8007b0c:	4625      	mov	r5, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b14:	f000 f81b 	bl	8007b4e <_malloc_usable_size_r>
 8007b18:	4284      	cmp	r4, r0
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	d802      	bhi.n	8007b24 <_realloc_r+0x34>
 8007b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b22:	d812      	bhi.n	8007b4a <_realloc_r+0x5a>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4640      	mov	r0, r8
 8007b28:	f7ff f9c0 	bl	8006eac <_malloc_r>
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d0ed      	beq.n	8007b0e <_realloc_r+0x1e>
 8007b32:	42bc      	cmp	r4, r7
 8007b34:	4622      	mov	r2, r4
 8007b36:	4631      	mov	r1, r6
 8007b38:	bf28      	it	cs
 8007b3a:	463a      	movcs	r2, r7
 8007b3c:	f7ff ffca 	bl	8007ad4 <memcpy>
 8007b40:	4631      	mov	r1, r6
 8007b42:	4640      	mov	r0, r8
 8007b44:	f7ff f946 	bl	8006dd4 <_free_r>
 8007b48:	e7e1      	b.n	8007b0e <_realloc_r+0x1e>
 8007b4a:	4635      	mov	r5, r6
 8007b4c:	e7df      	b.n	8007b0e <_realloc_r+0x1e>

08007b4e <_malloc_usable_size_r>:
 8007b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b52:	1f18      	subs	r0, r3, #4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bfbc      	itt	lt
 8007b58:	580b      	ldrlt	r3, [r1, r0]
 8007b5a:	18c0      	addlt	r0, r0, r3
 8007b5c:	4770      	bx	lr
	...

08007b60 <_init>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	bf00      	nop
 8007b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b66:	bc08      	pop	{r3}
 8007b68:	469e      	mov	lr, r3
 8007b6a:	4770      	bx	lr

08007b6c <_fini>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr
